var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/svelte/internal/index.js
var require_internal = __commonJS({
  "node_modules/svelte/internal/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function noop26() {
    }
    var identity = (x) => x;
    function assign11(tar, src) {
      for (const k in src)
        tar[k] = src[k];
      return tar;
    }
    function is_promise(value2) {
      return !!value2 && (typeof value2 === "object" || typeof value2 === "function") && typeof value2.then === "function";
    }
    function add_location69(element42, file69, line, column, char) {
      element42.__svelte_meta = {
        loc: { file: file69, line, column, char }
      };
    }
    function run(fn) {
      return fn();
    }
    function blank_object() {
      return /* @__PURE__ */ Object.create(null);
    }
    function run_all23(fns) {
      fns.forEach(run);
    }
    function is_function3(thing) {
      return typeof thing === "function";
    }
    function safe_not_equal75(a, b) {
      return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
    }
    var src_url_equal_anchor;
    function src_url_equal2(element_src, url) {
      if (!src_url_equal_anchor) {
        src_url_equal_anchor = document.createElement("a");
      }
      src_url_equal_anchor.href = url;
      return element_src === src_url_equal_anchor.href;
    }
    function not_equal(a, b) {
      return a != a ? b == b : a !== b;
    }
    function is_empty(obj) {
      return Object.keys(obj).length === 0;
    }
    function validate_store8(store, name2) {
      if (store != null && typeof store.subscribe !== "function") {
        throw new Error(`'${name2}' is not a store with a 'subscribe' method`);
      }
    }
    function subscribe(store, ...callbacks) {
      if (store == null) {
        return noop26;
      }
      const unsub = store.subscribe(...callbacks);
      return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
      let value2;
      subscribe(store, (_) => value2 = _)();
      return value2;
    }
    function component_subscribe8(component, store, callback) {
      component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot11(definition, ctx, $$scope2, fn) {
      if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope2, fn);
        return definition[0](slot_ctx);
      }
    }
    function get_slot_context(definition, ctx, $$scope2, fn) {
      return definition[1] && fn ? assign11($$scope2.ctx.slice(), definition[1](fn(ctx))) : $$scope2.ctx;
    }
    function get_slot_changes11(definition, $$scope2, dirty, fn) {
      if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope2.dirty === void 0) {
          return lets;
        }
        if (typeof lets === "object") {
          const merged = [];
          const len = Math.max($$scope2.dirty.length, lets.length);
          for (let i = 0; i < len; i += 1) {
            merged[i] = $$scope2.dirty[i] | lets[i];
          }
          return merged;
        }
        return $$scope2.dirty | lets;
      }
      return $$scope2.dirty;
    }
    function update_slot_base11(slot, slot_definition, ctx, $$scope2, slot_changes, get_slot_context_fn) {
      if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope2, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
      }
    }
    function update_slot(slot, slot_definition, ctx, $$scope2, dirty, get_slot_changes_fn, get_slot_context_fn) {
      const slot_changes = get_slot_changes11(slot_definition, $$scope2, dirty, get_slot_changes_fn);
      update_slot_base11(slot, slot_definition, ctx, $$scope2, slot_changes, get_slot_context_fn);
    }
    function get_all_dirty_from_scope11($$scope2) {
      if ($$scope2.ctx.length > 32) {
        const dirty = [];
        const length = $$scope2.ctx.length / 32;
        for (let i = 0; i < length; i++) {
          dirty[i] = -1;
        }
        return dirty;
      }
      return -1;
    }
    function exclude_internal_props10(props2) {
      const result = {};
      for (const k in props2)
        if (k[0] !== "$")
          result[k] = props2[k];
      return result;
    }
    function compute_rest_props(props2, keys) {
      const rest = {};
      keys = new Set(keys);
      for (const k in props2)
        if (!keys.has(k) && k[0] !== "$")
          rest[k] = props2[k];
      return rest;
    }
    function compute_slots3(slots2) {
      const result = {};
      for (const key in slots2) {
        result[key] = true;
      }
      return result;
    }
    function once(fn) {
      let ran = false;
      return function(...args) {
        if (ran)
          return;
        ran = true;
        fn.call(this, ...args);
      };
    }
    function null_to_empty(value2) {
      return value2 == null ? "" : value2;
    }
    function set_store_value2(store, ret, value2) {
      store.set(value2);
      return ret;
    }
    var has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
    function action_destroyer2(action_result) {
      return action_result && is_function3(action_result.destroy) ? action_result.destroy : noop26;
    }
    function split_css_unit(value2) {
      const split = typeof value2 === "string" && value2.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
      return split ? [parseFloat(split[1]), split[2] || "px"] : [value2, "px"];
    }
    var contenteditable_truthy_values = ["", true, 1, "true", "contenteditable"];
    var is_client = typeof window !== "undefined";
    exports.now = is_client ? () => window.performance.now() : () => Date.now();
    exports.raf = is_client ? (cb) => requestAnimationFrame(cb) : noop26;
    function set_now(fn) {
      exports.now = fn;
    }
    function set_raf(fn) {
      exports.raf = fn;
    }
    var tasks = /* @__PURE__ */ new Set();
    function run_tasks(now) {
      tasks.forEach((task) => {
        if (!task.c(now)) {
          tasks.delete(task);
          task.f();
        }
      });
      if (tasks.size !== 0)
        exports.raf(run_tasks);
    }
    function clear_loops() {
      tasks.clear();
    }
    function loop(callback) {
      let task;
      if (tasks.size === 0)
        exports.raf(run_tasks);
      return {
        promise: new Promise((fulfill) => {
          tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
          tasks.delete(task);
        }
      };
    }
    var globals23 = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
    var ResizeObserverSingleton = class _ResizeObserverSingleton {
      constructor(options) {
        this.options = options;
        this._listeners = "WeakMap" in globals23 ? /* @__PURE__ */ new WeakMap() : void 0;
      }
      observe(element42, listener) {
        this._listeners.set(element42, listener);
        this._getObserver().observe(element42, this.options);
        return () => {
          this._listeners.delete(element42);
          this._observer.unobserve(element42);
        };
      }
      _getObserver() {
        var _a;
        return (_a = this._observer) !== null && _a !== void 0 ? _a : this._observer = new ResizeObserver((entries) => {
          var _a2;
          for (const entry of entries) {
            _ResizeObserverSingleton.entries.set(entry.target, entry);
            (_a2 = this._listeners.get(entry.target)) === null || _a2 === void 0 ? void 0 : _a2(entry);
          }
        });
      }
    };
    ResizeObserverSingleton.entries = "WeakMap" in globals23 ? /* @__PURE__ */ new WeakMap() : void 0;
    var is_hydrating = false;
    function start_hydrating() {
      is_hydrating = true;
    }
    function end_hydrating() {
      is_hydrating = false;
    }
    function upper_bound(low, high, key, value2) {
      while (low < high) {
        const mid = low + (high - low >> 1);
        if (key(mid) <= value2) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return low;
    }
    function init_hydrate(target) {
      if (target.hydrate_init)
        return;
      target.hydrate_init = true;
      let children2 = target.childNodes;
      if (target.nodeName === "HEAD") {
        const myChildren = [];
        for (let i = 0; i < children2.length; i++) {
          const node = children2[i];
          if (node.claim_order !== void 0) {
            myChildren.push(node);
          }
        }
        children2 = myChildren;
      }
      const m = new Int32Array(children2.length + 1);
      const p = new Int32Array(children2.length);
      m[0] = -1;
      let longest = 0;
      for (let i = 0; i < children2.length; i++) {
        const current = children2[i].claim_order;
        const seqLen = (longest > 0 && children2[m[longest]].claim_order <= current ? longest + 1 : upper_bound(1, longest, (idx) => children2[m[idx]].claim_order, current)) - 1;
        p[i] = m[seqLen] + 1;
        const newLen = seqLen + 1;
        m[newLen] = i;
        longest = Math.max(newLen, longest);
      }
      const lis = [];
      const toMove = [];
      let last = children2.length - 1;
      for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
        lis.push(children2[cur - 1]);
        for (; last >= cur; last--) {
          toMove.push(children2[last]);
        }
        last--;
      }
      for (; last >= 0; last--) {
        toMove.push(children2[last]);
      }
      lis.reverse();
      toMove.sort((a, b) => a.claim_order - b.claim_order);
      for (let i = 0, j = 0; i < toMove.length; i++) {
        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
          j++;
        }
        const anchor = j < lis.length ? lis[j] : null;
        target.insertBefore(toMove[i], anchor);
      }
    }
    function append(target, node) {
      target.appendChild(node);
    }
    function append_styles(target, style_sheet_id, styles) {
      const append_styles_to = get_root_for_style(target);
      if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element41("style");
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
      }
    }
    function get_root_for_style(node) {
      if (!node)
        return document;
      const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
      if (root && root.host) {
        return root;
      }
      return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
      const style_element = element41("style");
      append_stylesheet(get_root_for_style(node), style_element);
      return style_element.sheet;
    }
    function append_stylesheet(node, style) {
      append(node.head || node, style);
      return style.sheet;
    }
    function append_hydration(target, node) {
      if (is_hydrating) {
        init_hydrate(target);
        if (target.actual_end_child === void 0 || target.actual_end_child !== null && target.actual_end_child.parentNode !== target) {
          target.actual_end_child = target.firstChild;
        }
        while (target.actual_end_child !== null && target.actual_end_child.claim_order === void 0) {
          target.actual_end_child = target.actual_end_child.nextSibling;
        }
        if (node !== target.actual_end_child) {
          if (node.claim_order !== void 0 || node.parentNode !== target) {
            target.insertBefore(node, target.actual_end_child);
          }
        } else {
          target.actual_end_child = node.nextSibling;
        }
      } else if (node.parentNode !== target || node.nextSibling !== null) {
        target.appendChild(node);
      }
    }
    function insert(target, node, anchor) {
      target.insertBefore(node, anchor || null);
    }
    function insert_hydration(target, node, anchor) {
      if (is_hydrating && !anchor) {
        append_hydration(target, node);
      } else if (node.parentNode !== target || node.nextSibling != anchor) {
        target.insertBefore(node, anchor || null);
      }
    }
    function detach(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }
    function destroy_each9(iterations, detaching) {
      for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
          iterations[i].d(detaching);
      }
    }
    function element41(name2) {
      return document.createElement(name2);
    }
    function element_is(name2, is) {
      return document.createElement(name2, { is });
    }
    function object_without_properties(obj, exclude) {
      const target = {};
      for (const k in obj) {
        if (has_prop(obj, k) && exclude.indexOf(k) === -1) {
          target[k] = obj[k];
        }
      }
      return target;
    }
    function svg_element(name2) {
      return document.createElementNS("http://www.w3.org/2000/svg", name2);
    }
    function text40(data) {
      return document.createTextNode(data);
    }
    function space57() {
      return text40(" ");
    }
    function empty13() {
      return text40("");
    }
    function comment(content) {
      return document.createComment(content);
    }
    function listen(node, event2, handler, options) {
      node.addEventListener(event2, handler, options);
      return () => node.removeEventListener(event2, handler, options);
    }
    function prevent_default4(fn) {
      return function(event2) {
        event2.preventDefault();
        return fn.call(this, event2);
      };
    }
    function stop_propagation3(fn) {
      return function(event2) {
        event2.stopPropagation();
        return fn.call(this, event2);
      };
    }
    function stop_immediate_propagation(fn) {
      return function(event2) {
        event2.stopImmediatePropagation();
        return fn.call(this, event2);
      };
    }
    function self2(fn) {
      return function(event2) {
        if (event2.target === this)
          fn.call(this, event2);
      };
    }
    function trusted(fn) {
      return function(event2) {
        if (event2.isTrusted)
          fn.call(this, event2);
      };
    }
    function attr(node, attribute, value2) {
      if (value2 == null)
        node.removeAttribute(attribute);
      else if (node.getAttribute(attribute) !== value2)
        node.setAttribute(attribute, value2);
    }
    var always_set_through_set_attribute = ["width", "height"];
    function set_attributes9(node, attributes) {
      const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
      for (const key in attributes) {
        if (attributes[key] == null) {
          node.removeAttribute(key);
        } else if (key === "style") {
          node.style.cssText = attributes[key];
        } else if (key === "__value") {
          node.value = node[key] = attributes[key];
        } else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {
          node[key] = attributes[key];
        } else {
          attr(node, key, attributes[key]);
        }
      }
    }
    function set_svg_attributes(node, attributes) {
      for (const key in attributes) {
        attr(node, key, attributes[key]);
      }
    }
    function set_custom_element_data_map(node, data_map) {
      Object.keys(data_map).forEach((key) => {
        set_custom_element_data(node, key, data_map[key]);
      });
    }
    function set_custom_element_data(node, prop, value2) {
      if (prop in node) {
        node[prop] = typeof node[prop] === "boolean" && value2 === "" ? true : value2;
      } else {
        attr(node, prop, value2);
      }
    }
    function set_dynamic_element_data(tag) {
      return /-/.test(tag) ? set_custom_element_data_map : set_attributes9;
    }
    function xlink_attr(node, attribute, value2) {
      node.setAttributeNS("http://www.w3.org/1999/xlink", attribute, value2);
    }
    function get_binding_group_value(group, __value, checked) {
      const value2 = /* @__PURE__ */ new Set();
      for (let i = 0; i < group.length; i += 1) {
        if (group[i].checked)
          value2.add(group[i].__value);
      }
      if (!checked) {
        value2.delete(__value);
      }
      return Array.from(value2);
    }
    function init_binding_group(group) {
      let _inputs;
      return {
        /* push */
        p(...inputs) {
          _inputs = inputs;
          _inputs.forEach((input) => group.push(input));
        },
        /* remove */
        r() {
          _inputs.forEach((input) => group.splice(group.indexOf(input), 1));
        }
      };
    }
    function init_binding_group_dynamic(group, indexes) {
      let _group = get_binding_group(group);
      let _inputs;
      function get_binding_group(group2) {
        for (let i = 0; i < indexes.length; i++) {
          group2 = group2[indexes[i]] = group2[indexes[i]] || [];
        }
        return group2;
      }
      function push() {
        _inputs.forEach((input) => _group.push(input));
      }
      function remove() {
        _inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));
      }
      return {
        /* update */
        u(new_indexes) {
          indexes = new_indexes;
          const new_group = get_binding_group(group);
          if (new_group !== _group) {
            remove();
            _group = new_group;
            push();
          }
        },
        /* push */
        p(...inputs) {
          _inputs = inputs;
          push();
        },
        /* remove */
        r: remove
      };
    }
    function to_number(value2) {
      return value2 === "" ? null : +value2;
    }
    function time_ranges_to_array(ranges) {
      const array = [];
      for (let i = 0; i < ranges.length; i += 1) {
        array.push({ start: ranges.start(i), end: ranges.end(i) });
      }
      return array;
    }
    function children(element42) {
      return Array.from(element42.childNodes);
    }
    function init_claim_info(nodes) {
      if (nodes.claim_info === void 0) {
        nodes.claim_info = { last_index: 0, total_claimed: 0 };
      }
    }
    function claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {
      init_claim_info(nodes);
      const resultNode = (() => {
        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {
          const node = nodes[i];
          if (predicate(node)) {
            const replacement = processNode(node);
            if (replacement === void 0) {
              nodes.splice(i, 1);
            } else {
              nodes[i] = replacement;
            }
            if (!dontUpdateLastIndex) {
              nodes.claim_info.last_index = i;
            }
            return node;
          }
        }
        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {
          const node = nodes[i];
          if (predicate(node)) {
            const replacement = processNode(node);
            if (replacement === void 0) {
              nodes.splice(i, 1);
            } else {
              nodes[i] = replacement;
            }
            if (!dontUpdateLastIndex) {
              nodes.claim_info.last_index = i;
            } else if (replacement === void 0) {
              nodes.claim_info.last_index--;
            }
            return node;
          }
        }
        return createNode();
      })();
      resultNode.claim_order = nodes.claim_info.total_claimed;
      nodes.claim_info.total_claimed += 1;
      return resultNode;
    }
    function claim_element_base(nodes, name2, attributes, create_element) {
      return claim_node(nodes, (node) => node.nodeName === name2, (node) => {
        const remove = [];
        for (let j = 0; j < node.attributes.length; j++) {
          const attribute = node.attributes[j];
          if (!attributes[attribute.name]) {
            remove.push(attribute.name);
          }
        }
        remove.forEach((v) => node.removeAttribute(v));
        return void 0;
      }, () => create_element(name2));
    }
    function claim_element(nodes, name2, attributes) {
      return claim_element_base(nodes, name2, attributes, element41);
    }
    function claim_svg_element(nodes, name2, attributes) {
      return claim_element_base(nodes, name2, attributes, svg_element);
    }
    function claim_text(nodes, data) {
      return claim_node(
        nodes,
        (node) => node.nodeType === 3,
        (node) => {
          const dataStr = "" + data;
          if (node.data.startsWith(dataStr)) {
            if (node.data.length !== dataStr.length) {
              return node.splitText(dataStr.length);
            }
          } else {
            node.data = dataStr;
          }
        },
        () => text40(data),
        true
        // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements
      );
    }
    function claim_space(nodes) {
      return claim_text(nodes, " ");
    }
    function claim_comment(nodes, data) {
      return claim_node(nodes, (node) => node.nodeType === 8, (node) => {
        node.data = "" + data;
        return void 0;
      }, () => comment(data), true);
    }
    function find_comment(nodes, text41, start) {
      for (let i = start; i < nodes.length; i += 1) {
        const node = nodes[i];
        if (node.nodeType === 8 && node.textContent.trim() === text41) {
          return i;
        }
      }
      return nodes.length;
    }
    function claim_html_tag(nodes, is_svg) {
      const start_index = find_comment(nodes, "HTML_TAG_START", 0);
      const end_index = find_comment(nodes, "HTML_TAG_END", start_index);
      if (start_index === end_index) {
        return new HtmlTagHydration(void 0, is_svg);
      }
      init_claim_info(nodes);
      const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);
      detach(html_tag_nodes[0]);
      detach(html_tag_nodes[html_tag_nodes.length - 1]);
      const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);
      for (const n of claimed_nodes) {
        n.claim_order = nodes.claim_info.total_claimed;
        nodes.claim_info.total_claimed += 1;
      }
      return new HtmlTagHydration(claimed_nodes, is_svg);
    }
    function set_data(text41, data) {
      data = "" + data;
      if (text41.data === data)
        return;
      text41.data = data;
    }
    function set_data_contenteditable(text41, data) {
      data = "" + data;
      if (text41.wholeText === data)
        return;
      text41.data = data;
    }
    function set_data_maybe_contenteditable(text41, data, attr_value) {
      if (~contenteditable_truthy_values.indexOf(attr_value)) {
        set_data_contenteditable(text41, data);
      } else {
        set_data(text41, data);
      }
    }
    function set_input_value6(input, value2) {
      input.value = value2 == null ? "" : value2;
    }
    function set_input_type(input, type) {
      try {
        input.type = type;
      } catch (e) {
      }
    }
    function set_style6(node, key, value2, important) {
      if (value2 == null) {
        node.style.removeProperty(key);
      } else {
        node.style.setProperty(key, value2, important ? "important" : "");
      }
    }
    function select_option2(select, value2, mounting) {
      for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value2) {
          option.selected = true;
          return;
        }
      }
      if (!mounting || value2 !== void 0) {
        select.selectedIndex = -1;
      }
    }
    function select_options(select, value2) {
      for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        option.selected = ~value2.indexOf(option.__value);
      }
    }
    function select_value2(select) {
      const selected_option = select.querySelector(":checked");
      return selected_option && selected_option.__value;
    }
    function select_multiple_value(select) {
      return [].map.call(select.querySelectorAll(":checked"), (option) => option.__value);
    }
    var crossorigin;
    function is_crossorigin() {
      if (crossorigin === void 0) {
        crossorigin = false;
        try {
          if (typeof window !== "undefined" && window.parent) {
            void window.parent.document;
          }
        } catch (error2) {
          crossorigin = true;
        }
      }
      return crossorigin;
    }
    function add_iframe_resize_listener(node, fn) {
      const computed_style = getComputedStyle(node);
      if (computed_style.position === "static") {
        node.style.position = "relative";
      }
      const iframe = element41("iframe");
      iframe.setAttribute("style", "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;");
      iframe.setAttribute("aria-hidden", "true");
      iframe.tabIndex = -1;
      const crossorigin2 = is_crossorigin();
      let unsubscribe;
      if (crossorigin2) {
        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>";
        unsubscribe = listen(window, "message", (event2) => {
          if (event2.source === iframe.contentWindow)
            fn();
        });
      } else {
        iframe.src = "about:blank";
        iframe.onload = () => {
          unsubscribe = listen(iframe.contentWindow, "resize", fn);
          fn();
        };
      }
      append(node, iframe);
      return () => {
        if (crossorigin2) {
          unsubscribe();
        } else if (unsubscribe && iframe.contentWindow) {
          unsubscribe();
        }
        detach(iframe);
      };
    }
    var resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: "content-box" });
    var resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: "border-box" });
    var resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: "device-pixel-content-box" });
    function toggle_class28(element42, name2, toggle) {
      element42.classList[toggle ? "add" : "remove"](name2);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
      const e = document.createEvent("CustomEvent");
      e.initCustomEvent(type, bubbles, cancelable, detail);
      return e;
    }
    function query_selector_all(selector, parent = document.body) {
      return Array.from(parent.querySelectorAll(selector));
    }
    function head_selector(nodeId, head) {
      const result = [];
      let started = 0;
      for (const node of head.childNodes) {
        if (node.nodeType === 8) {
          const comment2 = node.textContent.trim();
          if (comment2 === `HEAD_${nodeId}_END`) {
            started -= 1;
            result.push(node);
          } else if (comment2 === `HEAD_${nodeId}_START`) {
            started += 1;
            result.push(node);
          }
        } else if (started > 0) {
          result.push(node);
        }
      }
      return result;
    }
    var HtmlTag4 = class {
      constructor(is_svg = false) {
        this.is_svg = false;
        this.is_svg = is_svg;
        this.e = this.n = null;
      }
      c(html) {
        this.h(html);
      }
      m(html, target, anchor = null) {
        if (!this.e) {
          if (this.is_svg)
            this.e = svg_element(target.nodeName);
          else
            this.e = element41(target.nodeType === 11 ? "TEMPLATE" : target.nodeName);
          this.t = target.tagName !== "TEMPLATE" ? target : target.content;
          this.c(html);
        }
        this.i(anchor);
      }
      h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.nodeName === "TEMPLATE" ? this.e.content.childNodes : this.e.childNodes);
      }
      i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
          insert(this.t, this.n[i], anchor);
        }
      }
      p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
      }
      d() {
        this.n.forEach(detach);
      }
    };
    var HtmlTagHydration = class extends HtmlTag4 {
      constructor(claimed_nodes, is_svg = false) {
        super(is_svg);
        this.e = this.n = null;
        this.l = claimed_nodes;
      }
      c(html) {
        if (this.l) {
          this.n = this.l;
        } else {
          super.c(html);
        }
      }
      i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
          insert_hydration(this.t, this.n[i], anchor);
        }
      }
    };
    function attribute_to_object(attributes) {
      const result = {};
      for (const attribute of attributes) {
        result[attribute.name] = attribute.value;
      }
      return result;
    }
    function get_custom_elements_slots(element42) {
      const result = {};
      element42.childNodes.forEach((node) => {
        result[node.slot || "default"] = true;
      });
      return result;
    }
    function construct_svelte_component(component, props2) {
      return new component(props2);
    }
    var managed_styles = /* @__PURE__ */ new Map();
    var active = 0;
    function hash(str) {
      let hash2 = 5381;
      let i = str.length;
      while (i--)
        hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
      return hash2 >>> 0;
    }
    function create_style_information(doc, node) {
      const info2 = { stylesheet: append_empty_stylesheet(node), rules: {} };
      managed_styles.set(doc, info2);
      return info2;
    }
    function create_rule(node, a, b, duration2, delay, ease, fn, uid = 0) {
      const step = 16.666 / duration2;
      let keyframes = "{\n";
      for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
      }
      const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
      const name2 = `__svelte_${hash(rule)}_${uid}`;
      const doc = get_root_for_style(node);
      const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
      if (!rules[name2]) {
        rules[name2] = true;
        stylesheet.insertRule(`@keyframes ${name2} ${rule}`, stylesheet.cssRules.length);
      }
      const animation = node.style.animation || "";
      node.style.animation = `${animation ? `${animation}, ` : ""}${name2} ${duration2}ms linear ${delay}ms 1 both`;
      active += 1;
      return name2;
    }
    function delete_rule(node, name2) {
      const previous = (node.style.animation || "").split(", ");
      const next = previous.filter(
        name2 ? (anim) => anim.indexOf(name2) < 0 : (anim) => anim.indexOf("__svelte") === -1
        // remove all Svelte animations
      );
      const deleted = previous.length - next.length;
      if (deleted) {
        node.style.animation = next.join(", ");
        active -= deleted;
        if (!active)
          clear_rules();
      }
    }
    function clear_rules() {
      exports.raf(() => {
        if (active)
          return;
        managed_styles.forEach((info2) => {
          const { ownerNode } = info2.stylesheet;
          if (ownerNode)
            detach(ownerNode);
        });
        managed_styles.clear();
      });
    }
    function create_animation3(node, from, fn, params) {
      if (!from)
        return noop26;
      const to = node.getBoundingClientRect();
      if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
        return noop26;
      const {
        delay = 0,
        duration: duration2 = 300,
        easing = identity,
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = exports.now() + delay,
        // @ts-ignore todo:
        end = start_time + duration2,
        tick: tick2 = noop26,
        css
      } = fn(node, { from, to }, params);
      let running = true;
      let started = false;
      let name2;
      function start() {
        if (css) {
          name2 = create_rule(node, 0, 1, duration2, delay, easing, css);
        }
        if (!delay) {
          started = true;
        }
      }
      function stop() {
        if (css)
          delete_rule(node, name2);
        running = false;
      }
      loop((now) => {
        if (!started && now >= start_time) {
          started = true;
        }
        if (started && now >= end) {
          tick2(1, 0);
          stop();
        }
        if (!running) {
          return false;
        }
        if (started) {
          const p = now - start_time;
          const t = 0 + 1 * easing(p / duration2);
          tick2(t, 1 - t);
        }
        return true;
      });
      start();
      tick2(0, 1);
      return stop;
    }
    function fix_position3(node) {
      const style = getComputedStyle(node);
      if (style.position !== "absolute" && style.position !== "fixed") {
        const { width, height } = style;
        const a = node.getBoundingClientRect();
        node.style.position = "absolute";
        node.style.width = width;
        node.style.height = height;
        add_transform3(node, a);
      }
    }
    function add_transform3(node, a) {
      const b = node.getBoundingClientRect();
      if (a.left !== b.left || a.top !== b.top) {
        const style = getComputedStyle(node);
        const transform = style.transform === "none" ? "" : style.transform;
        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
      }
    }
    function set_current_component(component) {
      exports.current_component = component;
    }
    function get_current_component() {
      if (!exports.current_component)
        throw new Error("Function called outside component initialization");
      return exports.current_component;
    }
    function beforeUpdate(fn) {
      get_current_component().$$.before_update.push(fn);
    }
    function onMount14(fn) {
      get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate5(fn) {
      get_current_component().$$.after_update.push(fn);
    }
    function onDestroy7(fn) {
      get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher19() {
      const component = get_current_component();
      return (type, detail, { cancelable = false } = {}) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
          const event2 = custom_event(type, detail, { cancelable });
          callbacks.slice().forEach((fn) => {
            fn.call(component, event2);
          });
          return !event2.defaultPrevented;
        }
        return true;
      };
    }
    function setContext2(key, context) {
      get_current_component().$$.context.set(key, context);
      return context;
    }
    function getContext2(key) {
      return get_current_component().$$.context.get(key);
    }
    function getAllContexts() {
      return get_current_component().$$.context;
    }
    function hasContext(key) {
      return get_current_component().$$.context.has(key);
    }
    function bubble10(component, event2) {
      const callbacks = component.$$.callbacks[event2.type];
      if (callbacks) {
        callbacks.slice().forEach((fn) => fn.call(this, event2));
      }
    }
    var dirty_components = [];
    var intros = { enabled: false };
    var binding_callbacks51 = [];
    var render_callbacks = [];
    var flush_callbacks = [];
    var resolved_promise = /* @__PURE__ */ Promise.resolve();
    var update_scheduled = false;
    function schedule_update() {
      if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush4);
      }
    }
    function tick() {
      schedule_update();
      return resolved_promise;
    }
    function add_render_callback7(fn) {
      render_callbacks.push(fn);
    }
    function add_flush_callback18(fn) {
      flush_callbacks.push(fn);
    }
    var seen_callbacks = /* @__PURE__ */ new Set();
    var flushidx = 0;
    function flush4() {
      if (flushidx !== 0) {
        return;
      }
      const saved_component = exports.current_component;
      do {
        try {
          while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
          }
        } catch (e) {
          dirty_components.length = 0;
          flushidx = 0;
          throw e;
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks51.length)
          binding_callbacks51.pop()();
        for (let i = 0; i < render_callbacks.length; i += 1) {
          const callback = render_callbacks[i];
          if (!seen_callbacks.has(callback)) {
            seen_callbacks.add(callback);
            callback();
          }
        }
        render_callbacks.length = 0;
      } while (dirty_components.length);
      while (flush_callbacks.length) {
        flush_callbacks.pop()();
      }
      update_scheduled = false;
      seen_callbacks.clear();
      set_current_component(saved_component);
    }
    function update($$) {
      if ($$.fragment !== null) {
        $$.update();
        run_all23($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback7);
      }
    }
    function flush_render_callbacks(fns) {
      const filtered = [];
      const targets = [];
      render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
      targets.forEach((c) => c());
      render_callbacks = filtered;
    }
    var promise;
    function wait() {
      if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
          promise = null;
        });
      }
      return promise;
    }
    function dispatch2(node, direction, kind) {
      node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
    }
    var outroing = /* @__PURE__ */ new Set();
    var outros;
    function group_outros18() {
      outros = {
        r: 0,
        c: [],
        p: outros
        // parent group
      };
    }
    function check_outros18() {
      if (!outros.r) {
        run_all23(outros.c);
      }
      outros = outros.p;
    }
    function transition_in65(block, local) {
      if (block && block.i) {
        outroing.delete(block);
        block.i(local);
      }
    }
    function transition_out65(block, local, detach2, callback) {
      if (block && block.o) {
        if (outroing.has(block))
          return;
        outroing.add(block);
        outros.c.push(() => {
          outroing.delete(block);
          if (callback) {
            if (detach2)
              block.d(1);
            callback();
          }
        });
        block.o(local);
      } else if (callback) {
        callback();
      }
    }
    var null_transition = { duration: 0 };
    function create_in_transition4(node, fn, params) {
      const options = { direction: "in" };
      let config2 = fn(node, params, options);
      let running = false;
      let animation_name;
      let task;
      let uid = 0;
      function cleanup() {
        if (animation_name)
          delete_rule(node, animation_name);
      }
      function go() {
        const { delay = 0, duration: duration2 = 300, easing = identity, tick: tick2 = noop26, css } = config2 || null_transition;
        if (css)
          animation_name = create_rule(node, 0, 1, duration2, delay, easing, css, uid++);
        tick2(0, 1);
        const start_time = exports.now() + delay;
        const end_time = start_time + duration2;
        if (task)
          task.abort();
        running = true;
        add_render_callback7(() => dispatch2(node, true, "start"));
        task = loop((now) => {
          if (running) {
            if (now >= end_time) {
              tick2(1, 0);
              dispatch2(node, true, "end");
              cleanup();
              return running = false;
            }
            if (now >= start_time) {
              const t = easing((now - start_time) / duration2);
              tick2(t, 1 - t);
            }
          }
          return running;
        });
      }
      let started = false;
      return {
        start() {
          if (started)
            return;
          started = true;
          delete_rule(node);
          if (is_function3(config2)) {
            config2 = config2(options);
            wait().then(go);
          } else {
            go();
          }
        },
        invalidate() {
          started = false;
        },
        end() {
          if (running) {
            cleanup();
            running = false;
          }
        }
      };
    }
    function create_out_transition4(node, fn, params) {
      const options = { direction: "out" };
      let config2 = fn(node, params, options);
      let running = true;
      let animation_name;
      const group = outros;
      group.r += 1;
      function go() {
        const { delay = 0, duration: duration2 = 300, easing = identity, tick: tick2 = noop26, css } = config2 || null_transition;
        if (css)
          animation_name = create_rule(node, 1, 0, duration2, delay, easing, css);
        const start_time = exports.now() + delay;
        const end_time = start_time + duration2;
        add_render_callback7(() => dispatch2(node, false, "start"));
        loop((now) => {
          if (running) {
            if (now >= end_time) {
              tick2(0, 1);
              dispatch2(node, false, "end");
              if (!--group.r) {
                run_all23(group.c);
              }
              return false;
            }
            if (now >= start_time) {
              const t = easing((now - start_time) / duration2);
              tick2(1 - t, t);
            }
          }
          return running;
        });
      }
      if (is_function3(config2)) {
        wait().then(() => {
          config2 = config2(options);
          go();
        });
      } else {
        go();
      }
      return {
        end(reset) {
          if (reset && config2.tick) {
            config2.tick(1, 0);
          }
          if (running) {
            if (animation_name)
              delete_rule(node, animation_name);
            running = false;
          }
        }
      };
    }
    function create_bidirectional_transition2(node, fn, params, intro) {
      const options = { direction: "both" };
      let config2 = fn(node, params, options);
      let t = intro ? 0 : 1;
      let running_program = null;
      let pending_program = null;
      let animation_name = null;
      function clear_animation() {
        if (animation_name)
          delete_rule(node, animation_name);
      }
      function init76(program, duration2) {
        const d = program.b - t;
        duration2 *= Math.abs(d);
        return {
          a: t,
          b: program.b,
          d,
          duration: duration2,
          start: program.start,
          end: program.start + duration2,
          group: program.group
        };
      }
      function go(b) {
        const { delay = 0, duration: duration2 = 300, easing = identity, tick: tick2 = noop26, css } = config2 || null_transition;
        const program = {
          start: exports.now() + delay,
          b
        };
        if (!b) {
          program.group = outros;
          outros.r += 1;
        }
        if (running_program || pending_program) {
          pending_program = program;
        } else {
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, b, duration2, delay, easing, css);
          }
          if (b)
            tick2(0, 1);
          running_program = init76(program, duration2);
          add_render_callback7(() => dispatch2(node, b, "start"));
          loop((now) => {
            if (pending_program && now > pending_program.start) {
              running_program = init76(pending_program, duration2);
              pending_program = null;
              dispatch2(node, running_program.b, "start");
              if (css) {
                clear_animation();
                animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config2.css);
              }
            }
            if (running_program) {
              if (now >= running_program.end) {
                tick2(t = running_program.b, 1 - t);
                dispatch2(node, running_program.b, "end");
                if (!pending_program) {
                  if (running_program.b) {
                    clear_animation();
                  } else {
                    if (!--running_program.group.r)
                      run_all23(running_program.group.c);
                  }
                }
                running_program = null;
              } else if (now >= running_program.start) {
                const p = now - running_program.start;
                t = running_program.a + running_program.d * easing(p / running_program.duration);
                tick2(t, 1 - t);
              }
            }
            return !!(running_program || pending_program);
          });
        }
      }
      return {
        run(b) {
          if (is_function3(config2)) {
            wait().then(() => {
              config2 = config2(options);
              go(b);
            });
          } else {
            go(b);
          }
        },
        end() {
          clear_animation();
          running_program = pending_program = null;
        }
      };
    }
    function handle_promise(promise2, info2) {
      const token = info2.token = {};
      function update2(type, index, key, value2) {
        if (info2.token !== token)
          return;
        info2.resolved = value2;
        let child_ctx = info2.ctx;
        if (key !== void 0) {
          child_ctx = child_ctx.slice();
          child_ctx[key] = value2;
        }
        const block = type && (info2.current = type)(child_ctx);
        let needs_flush = false;
        if (info2.block) {
          if (info2.blocks) {
            info2.blocks.forEach((block2, i) => {
              if (i !== index && block2) {
                group_outros18();
                transition_out65(block2, 1, 1, () => {
                  if (info2.blocks[i] === block2) {
                    info2.blocks[i] = null;
                  }
                });
                check_outros18();
              }
            });
          } else {
            info2.block.d(1);
          }
          block.c();
          transition_in65(block, 1);
          block.m(info2.mount(), info2.anchor);
          needs_flush = true;
        }
        info2.block = block;
        if (info2.blocks)
          info2.blocks[index] = block;
        if (needs_flush) {
          flush4();
        }
      }
      if (is_promise(promise2)) {
        const current_component = get_current_component();
        promise2.then((value2) => {
          set_current_component(current_component);
          update2(info2.then, 1, info2.value, value2);
          set_current_component(null);
        }, (error2) => {
          set_current_component(current_component);
          update2(info2.catch, 2, info2.error, error2);
          set_current_component(null);
          if (!info2.hasCatch) {
            throw error2;
          }
        });
        if (info2.current !== info2.pending) {
          update2(info2.pending, 0);
          return true;
        }
      } else {
        if (info2.current !== info2.then) {
          update2(info2.then, 1, info2.value, promise2);
          return true;
        }
        info2.resolved = promise2;
      }
    }
    function update_await_block_branch(info2, ctx, dirty) {
      const child_ctx = ctx.slice();
      const { resolved } = info2;
      if (info2.current === info2.then) {
        child_ctx[info2.value] = resolved;
      }
      if (info2.current === info2.catch) {
        child_ctx[info2.error] = resolved;
      }
      info2.block.p(child_ctx, dirty);
    }
    function destroy_block(block, lookup) {
      block.d(1);
      lookup.delete(block.key);
    }
    function outro_and_destroy_block2(block, lookup) {
      transition_out65(block, 1, 1, () => {
        lookup.delete(block.key);
      });
    }
    function fix_and_destroy_block(block, lookup) {
      block.f();
      destroy_block(block, lookup);
    }
    function fix_and_outro_and_destroy_block3(block, lookup) {
      block.f();
      outro_and_destroy_block2(block, lookup);
    }
    function update_keyed_each4(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block12, next, get_context) {
      let o = old_blocks.length;
      let n = list.length;
      let i = o;
      const old_indexes = {};
      while (i--)
        old_indexes[old_blocks[i].key] = i;
      const new_blocks = [];
      const new_lookup = /* @__PURE__ */ new Map();
      const deltas = /* @__PURE__ */ new Map();
      const updates = [];
      i = n;
      while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
          block = create_each_block12(key, child_ctx);
          block.c();
        } else if (dynamic) {
          updates.push(() => block.p(child_ctx, dirty));
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
          deltas.set(key, Math.abs(i - old_indexes[key]));
      }
      const will_move = /* @__PURE__ */ new Set();
      const did_move = /* @__PURE__ */ new Set();
      function insert2(block) {
        transition_in65(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
      }
      while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
          next = new_block.first;
          o--;
          n--;
        } else if (!new_lookup.has(old_key)) {
          destroy(old_block, lookup);
          o--;
        } else if (!lookup.has(new_key) || will_move.has(new_key)) {
          insert2(new_block);
        } else if (did_move.has(old_key)) {
          o--;
        } else if (deltas.get(new_key) > deltas.get(old_key)) {
          did_move.add(new_key);
          insert2(new_block);
        } else {
          will_move.add(old_key);
          o--;
        }
      }
      while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
          destroy(old_block, lookup);
      }
      while (n)
        insert2(new_blocks[n - 1]);
      run_all23(updates);
      return new_blocks;
    }
    function validate_each_keys4(ctx, list, get_context, get_key) {
      const keys = /* @__PURE__ */ new Set();
      for (let i = 0; i < list.length; i++) {
        const key = get_key(get_context(ctx, list, i));
        if (keys.has(key)) {
          throw new Error("Cannot have duplicate keys in a keyed each");
        }
        keys.add(key);
      }
    }
    function get_spread_update11(levels, updates) {
      const update2 = {};
      const to_null_out = {};
      const accounted_for = { $$scope: 1 };
      let i = levels.length;
      while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
          for (const key in o) {
            if (!(key in n))
              to_null_out[key] = 1;
          }
          for (const key in n) {
            if (!accounted_for[key]) {
              update2[key] = n[key];
              accounted_for[key] = 1;
            }
          }
          levels[i] = n;
        } else {
          for (const key in o) {
            accounted_for[key] = 1;
          }
        }
      }
      for (const key in to_null_out) {
        if (!(key in update2))
          update2[key] = void 0;
      }
      return update2;
    }
    function get_spread_object3(spread_props) {
      return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
    }
    var _boolean_attributes = [
      "allowfullscreen",
      "allowpaymentrequest",
      "async",
      "autofocus",
      "autoplay",
      "checked",
      "controls",
      "default",
      "defer",
      "disabled",
      "formnovalidate",
      "hidden",
      "inert",
      "ismap",
      "loop",
      "multiple",
      "muted",
      "nomodule",
      "novalidate",
      "open",
      "playsinline",
      "readonly",
      "required",
      "reversed",
      "selected"
    ];
    var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);
    var void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
    function is_void(name2) {
      return void_element_names.test(name2) || name2.toLowerCase() === "!doctype";
    }
    var invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
    function spread(args, attrs_to_add) {
      const attributes = Object.assign({}, ...args);
      if (attrs_to_add) {
        const classes_to_add = attrs_to_add.classes;
        const styles_to_add = attrs_to_add.styles;
        if (classes_to_add) {
          if (attributes.class == null) {
            attributes.class = classes_to_add;
          } else {
            attributes.class += " " + classes_to_add;
          }
        }
        if (styles_to_add) {
          if (attributes.style == null) {
            attributes.style = style_object_to_string(styles_to_add);
          } else {
            attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));
          }
        }
      }
      let str = "";
      Object.keys(attributes).forEach((name2) => {
        if (invalid_attribute_name_character.test(name2))
          return;
        const value2 = attributes[name2];
        if (value2 === true)
          str += " " + name2;
        else if (boolean_attributes.has(name2.toLowerCase())) {
          if (value2)
            str += " " + name2;
        } else if (value2 != null) {
          str += ` ${name2}="${value2}"`;
        }
      });
      return str;
    }
    function merge_ssr_styles(style_attribute, style_directive) {
      const style_object = {};
      for (const individual_style of style_attribute.split(";")) {
        const colon_index = individual_style.indexOf(":");
        const name2 = individual_style.slice(0, colon_index).trim();
        const value2 = individual_style.slice(colon_index + 1).trim();
        if (!name2)
          continue;
        style_object[name2] = value2;
      }
      for (const name2 in style_directive) {
        const value2 = style_directive[name2];
        if (value2) {
          style_object[name2] = value2;
        } else {
          delete style_object[name2];
        }
      }
      return style_object;
    }
    var ATTR_REGEX = /[&"]/g;
    var CONTENT_REGEX = /[&<]/g;
    function escape(value2, is_attr = false) {
      const str = String(value2);
      const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
      pattern.lastIndex = 0;
      let escaped = "";
      let last = 0;
      while (pattern.test(str)) {
        const i = pattern.lastIndex - 1;
        const ch = str[i];
        escaped += str.substring(last, i) + (ch === "&" ? "&amp;" : ch === '"' ? "&quot;" : "&lt;");
        last = i + 1;
      }
      return escaped + str.substring(last);
    }
    function escape_attribute_value(value2) {
      const should_escape = typeof value2 === "string" || value2 && typeof value2 === "object";
      return should_escape ? escape(value2, true) : value2;
    }
    function escape_object(obj) {
      const result = {};
      for (const key in obj) {
        result[key] = escape_attribute_value(obj[key]);
      }
      return result;
    }
    function each(items, fn) {
      let str = "";
      for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
      }
      return str;
    }
    var missing_component = {
      $$render: () => ""
    };
    function validate_component(component, name2) {
      if (!component || !component.$$render) {
        if (name2 === "svelte:component")
          name2 += " this={...}";
        throw new Error(`<${name2}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name2}>.`);
      }
      return component;
    }
    function debug(file69, line, column, values) {
      console.log(`{@debug} ${file69 ? file69 + " " : ""}(${line}:${column})`);
      console.log(values);
      return "";
    }
    var on_destroy;
    function create_ssr_component(fn) {
      function $$render(result, props2, bindings, slots2, context) {
        const parent_component = exports.current_component;
        const $$ = {
          on_destroy,
          context: new Map(context || (parent_component ? parent_component.$$.context : [])),
          // these will be immediately discarded
          on_mount: [],
          before_update: [],
          after_update: [],
          callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props2, bindings, slots2);
        set_current_component(parent_component);
        return html;
      }
      return {
        render: (props2 = {}, { $$slots = {}, context = /* @__PURE__ */ new Map() } = {}) => {
          on_destroy = [];
          const result = { title: "", head: "", css: /* @__PURE__ */ new Set() };
          const html = $$render(result, props2, {}, $$slots, context);
          run_all23(on_destroy);
          return {
            html,
            css: {
              code: Array.from(result.css).map((css) => css.code).join("\n"),
              map: null
              // TODO
            },
            head: result.title + result.head
          };
        },
        $$render
      };
    }
    function add_attribute(name2, value2, boolean) {
      if (value2 == null || boolean && !value2)
        return "";
      const assignment = boolean && value2 === true ? "" : `="${escape(value2, true)}"`;
      return ` ${name2}${assignment}`;
    }
    function add_classes(classes) {
      return classes ? ` class="${classes}"` : "";
    }
    function style_object_to_string(style_object) {
      return Object.keys(style_object).filter((key) => style_object[key]).map((key) => `${key}: ${escape_attribute_value(style_object[key])};`).join(" ");
    }
    function add_styles(style_object) {
      const styles = style_object_to_string(style_object);
      return styles ? ` style="${styles}"` : "";
    }
    function bind18(component, name2, callback) {
      const index = component.$$.props[name2];
      if (index !== void 0) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
      }
    }
    function create_component59(block) {
      block && block.c();
    }
    function claim_component(block, parent_nodes) {
      block && block.l(parent_nodes);
    }
    function mount_component59(component, target, anchor, customElement) {
      const { fragment, after_update } = component.$$;
      fragment && fragment.m(target, anchor);
      if (!customElement) {
        add_render_callback7(() => {
          const new_on_destroy = component.$$.on_mount.map(run).filter(is_function3);
          if (component.$$.on_destroy) {
            component.$$.on_destroy.push(...new_on_destroy);
          } else {
            run_all23(new_on_destroy);
          }
          component.$$.on_mount = [];
        });
      }
      after_update.forEach(add_render_callback7);
    }
    function destroy_component59(component, detaching) {
      const $$ = component.$$;
      if ($$.fragment !== null) {
        flush_render_callbacks($$.after_update);
        run_all23($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
      }
    }
    function make_dirty(component, i) {
      if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
      }
      component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
    }
    function init75(component, options, instance75, create_fragment75, not_equal2, props2, append_styles2, dirty = [-1]) {
      const parent_component = exports.current_component;
      set_current_component(component);
      const $$ = component.$$ = {
        fragment: null,
        ctx: [],
        // state
        props: props2,
        update: noop26,
        not_equal: not_equal2,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
      };
      append_styles2 && append_styles2($$.root);
      let ready = false;
      $$.ctx = instance75 ? instance75(component, options.props || {}, (i, ret, ...rest) => {
        const value2 = rest.length ? rest[0] : ret;
        if ($$.ctx && not_equal2($$.ctx[i], $$.ctx[i] = value2)) {
          if (!$$.skip_bound && $$.bound[i])
            $$.bound[i](value2);
          if (ready)
            make_dirty(component, i);
        }
        return ret;
      }) : [];
      $$.update();
      ready = true;
      run_all23($$.before_update);
      $$.fragment = create_fragment75 ? create_fragment75($$.ctx) : false;
      if (options.target) {
        if (options.hydrate) {
          start_hydrating();
          const nodes = children(options.target);
          $$.fragment && $$.fragment.l(nodes);
          nodes.forEach(detach);
        } else {
          $$.fragment && $$.fragment.c();
        }
        if (options.intro)
          transition_in65(component.$$.fragment);
        mount_component59(component, options.target, options.anchor, options.customElement);
        end_hydrating();
        flush4();
      }
      set_current_component(parent_component);
    }
    if (typeof HTMLElement === "function") {
      exports.SvelteElement = class extends HTMLElement {
        constructor() {
          super();
          this.attachShadow({ mode: "open" });
        }
        connectedCallback() {
          const { on_mount } = this.$$;
          this.$$.on_disconnect = on_mount.map(run).filter(is_function3);
          for (const key in this.$$.slotted) {
            this.appendChild(this.$$.slotted[key]);
          }
        }
        attributeChangedCallback(attr2, _oldValue, newValue) {
          this[attr2] = newValue;
        }
        disconnectedCallback() {
          run_all23(this.$$.on_disconnect);
        }
        $destroy() {
          destroy_component59(this, 1);
          this.$destroy = noop26;
        }
        $on(type, callback) {
          if (!is_function3(callback)) {
            return noop26;
          }
          const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
          callbacks.push(callback);
          return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
              callbacks.splice(index, 1);
          };
        }
        $set($$props2) {
          if (this.$$set && !is_empty($$props2)) {
            this.$$.skip_bound = true;
            this.$$set($$props2);
            this.$$.skip_bound = false;
          }
        }
      };
    }
    var SvelteComponent = class {
      $destroy() {
        destroy_component59(this, 1);
        this.$destroy = noop26;
      }
      $on(type, callback) {
        if (!is_function3(callback)) {
          return noop26;
        }
        const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
        callbacks.push(callback);
        return () => {
          const index = callbacks.indexOf(callback);
          if (index !== -1)
            callbacks.splice(index, 1);
        };
      }
      $set($$props2) {
        if (this.$$set && !is_empty($$props2)) {
          this.$$.skip_bound = true;
          this.$$set($$props2);
          this.$$.skip_bound = false;
        }
      }
    };
    function dispatch_dev75(type, detail) {
      document.dispatchEvent(custom_event(type, Object.assign({ version: "3.59.2" }, detail), { bubbles: true }));
    }
    function append_dev55(target, node) {
      dispatch_dev75("SvelteDOMInsert", { target, node });
      append(target, node);
    }
    function append_hydration_dev(target, node) {
      dispatch_dev75("SvelteDOMInsert", { target, node });
      append_hydration(target, node);
    }
    function insert_dev71(target, node, anchor) {
      dispatch_dev75("SvelteDOMInsert", { target, node, anchor });
      insert(target, node, anchor);
    }
    function insert_hydration_dev(target, node, anchor) {
      dispatch_dev75("SvelteDOMInsert", { target, node, anchor });
      insert_hydration(target, node, anchor);
    }
    function detach_dev71(node) {
      dispatch_dev75("SvelteDOMRemove", { node });
      detach(node);
    }
    function detach_between_dev(before, after) {
      while (before.nextSibling && before.nextSibling !== after) {
        detach_dev71(before.nextSibling);
      }
    }
    function detach_before_dev(after) {
      while (after.previousSibling) {
        detach_dev71(after.previousSibling);
      }
    }
    function detach_after_dev(before) {
      while (before.nextSibling) {
        detach_dev71(before.nextSibling);
      }
    }
    function listen_dev26(node, event2, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
      const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
      if (has_prevent_default)
        modifiers.push("preventDefault");
      if (has_stop_propagation)
        modifiers.push("stopPropagation");
      if (has_stop_immediate_propagation)
        modifiers.push("stopImmediatePropagation");
      dispatch_dev75("SvelteDOMAddEventListener", { node, event: event2, handler, modifiers });
      const dispose = listen(node, event2, handler, options);
      return () => {
        dispatch_dev75("SvelteDOMRemoveEventListener", { node, event: event2, handler, modifiers });
        dispose();
      };
    }
    function attr_dev54(node, attribute, value2) {
      attr(node, attribute, value2);
      if (value2 == null)
        dispatch_dev75("SvelteDOMRemoveAttribute", { node, attribute });
      else
        dispatch_dev75("SvelteDOMSetAttribute", { node, attribute, value: value2 });
    }
    function prop_dev9(node, property, value2) {
      node[property] = value2;
      dispatch_dev75("SvelteDOMSetProperty", { node, property, value: value2 });
    }
    function dataset_dev(node, property, value2) {
      node.dataset[property] = value2;
      dispatch_dev75("SvelteDOMSetDataset", { node, property, value: value2 });
    }
    function set_data_dev24(text41, data) {
      data = "" + data;
      if (text41.data === data)
        return;
      dispatch_dev75("SvelteDOMSetData", { node: text41, data });
      text41.data = data;
    }
    function set_data_contenteditable_dev(text41, data) {
      data = "" + data;
      if (text41.wholeText === data)
        return;
      dispatch_dev75("SvelteDOMSetData", { node: text41, data });
      text41.data = data;
    }
    function set_data_maybe_contenteditable_dev(text41, data, attr_value) {
      if (~contenteditable_truthy_values.indexOf(attr_value)) {
        set_data_contenteditable_dev(text41, data);
      } else {
        set_data_dev24(text41, data);
      }
    }
    function validate_each_argument12(arg) {
      if (typeof arg !== "string" && !(arg && typeof arg === "object" && "length" in arg)) {
        let msg = "{#each} only iterates over array-like objects.";
        if (typeof Symbol === "function" && arg && Symbol.iterator in arg) {
          msg += " You can use a spread to convert this iterable into an array.";
        }
        throw new Error(msg);
      }
    }
    function validate_slots75(name2, slot, keys) {
      for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
          console.warn(`<${name2}> received an unexpected slot "${slot_key}".`);
        }
      }
    }
    function validate_dynamic_element(tag) {
      const is_string = typeof tag === "string";
      if (tag && !is_string) {
        throw new Error('<svelte:element> expects "this" attribute to be a string.');
      }
    }
    function validate_void_dynamic_element(tag) {
      if (tag && is_void(tag)) {
        console.warn(`<svelte:element this="${tag}"> is self-closing and cannot have content.`);
      }
    }
    function construct_svelte_component_dev2(component, props2) {
      const error_message = "this={...} of <svelte:component> should specify a Svelte component.";
      try {
        const instance75 = new component(props2);
        if (!instance75.$$ || !instance75.$set || !instance75.$on || !instance75.$destroy) {
          throw new Error(error_message);
        }
        return instance75;
      } catch (err) {
        const { message } = err;
        if (typeof message === "string" && message.indexOf("is not a constructor") !== -1) {
          throw new Error(error_message);
        } else {
          throw err;
        }
      }
    }
    var SvelteComponentDev75 = class extends SvelteComponent {
      constructor(options) {
        if (!options || !options.target && !options.$$inline) {
          throw new Error("'target' is a required option");
        }
        super();
      }
      $destroy() {
        super.$destroy();
        this.$destroy = () => {
          console.warn("Component was already destroyed");
        };
      }
      $capture_state() {
      }
      $inject_state() {
      }
    };
    var SvelteComponentTyped = class extends SvelteComponentDev75 {
      constructor(options) {
        super(options);
      }
    };
    function loop_guard(timeout) {
      const start = Date.now();
      return () => {
        if (Date.now() - start > timeout) {
          throw new Error("Infinite loop detected");
        }
      };
    }
    exports.HtmlTag = HtmlTag4;
    exports.HtmlTagHydration = HtmlTagHydration;
    exports.ResizeObserverSingleton = ResizeObserverSingleton;
    exports.SvelteComponent = SvelteComponent;
    exports.SvelteComponentDev = SvelteComponentDev75;
    exports.SvelteComponentTyped = SvelteComponentTyped;
    exports.action_destroyer = action_destroyer2;
    exports.add_attribute = add_attribute;
    exports.add_classes = add_classes;
    exports.add_flush_callback = add_flush_callback18;
    exports.add_iframe_resize_listener = add_iframe_resize_listener;
    exports.add_location = add_location69;
    exports.add_render_callback = add_render_callback7;
    exports.add_styles = add_styles;
    exports.add_transform = add_transform3;
    exports.afterUpdate = afterUpdate5;
    exports.append = append;
    exports.append_dev = append_dev55;
    exports.append_empty_stylesheet = append_empty_stylesheet;
    exports.append_hydration = append_hydration;
    exports.append_hydration_dev = append_hydration_dev;
    exports.append_styles = append_styles;
    exports.assign = assign11;
    exports.attr = attr;
    exports.attr_dev = attr_dev54;
    exports.attribute_to_object = attribute_to_object;
    exports.beforeUpdate = beforeUpdate;
    exports.bind = bind18;
    exports.binding_callbacks = binding_callbacks51;
    exports.blank_object = blank_object;
    exports.bubble = bubble10;
    exports.check_outros = check_outros18;
    exports.children = children;
    exports.claim_comment = claim_comment;
    exports.claim_component = claim_component;
    exports.claim_element = claim_element;
    exports.claim_html_tag = claim_html_tag;
    exports.claim_space = claim_space;
    exports.claim_svg_element = claim_svg_element;
    exports.claim_text = claim_text;
    exports.clear_loops = clear_loops;
    exports.comment = comment;
    exports.component_subscribe = component_subscribe8;
    exports.compute_rest_props = compute_rest_props;
    exports.compute_slots = compute_slots3;
    exports.construct_svelte_component = construct_svelte_component;
    exports.construct_svelte_component_dev = construct_svelte_component_dev2;
    exports.contenteditable_truthy_values = contenteditable_truthy_values;
    exports.createEventDispatcher = createEventDispatcher19;
    exports.create_animation = create_animation3;
    exports.create_bidirectional_transition = create_bidirectional_transition2;
    exports.create_component = create_component59;
    exports.create_in_transition = create_in_transition4;
    exports.create_out_transition = create_out_transition4;
    exports.create_slot = create_slot11;
    exports.create_ssr_component = create_ssr_component;
    exports.custom_event = custom_event;
    exports.dataset_dev = dataset_dev;
    exports.debug = debug;
    exports.destroy_block = destroy_block;
    exports.destroy_component = destroy_component59;
    exports.destroy_each = destroy_each9;
    exports.detach = detach;
    exports.detach_after_dev = detach_after_dev;
    exports.detach_before_dev = detach_before_dev;
    exports.detach_between_dev = detach_between_dev;
    exports.detach_dev = detach_dev71;
    exports.dirty_components = dirty_components;
    exports.dispatch_dev = dispatch_dev75;
    exports.each = each;
    exports.element = element41;
    exports.element_is = element_is;
    exports.empty = empty13;
    exports.end_hydrating = end_hydrating;
    exports.escape = escape;
    exports.escape_attribute_value = escape_attribute_value;
    exports.escape_object = escape_object;
    exports.exclude_internal_props = exclude_internal_props10;
    exports.fix_and_destroy_block = fix_and_destroy_block;
    exports.fix_and_outro_and_destroy_block = fix_and_outro_and_destroy_block3;
    exports.fix_position = fix_position3;
    exports.flush = flush4;
    exports.flush_render_callbacks = flush_render_callbacks;
    exports.getAllContexts = getAllContexts;
    exports.getContext = getContext2;
    exports.get_all_dirty_from_scope = get_all_dirty_from_scope11;
    exports.get_binding_group_value = get_binding_group_value;
    exports.get_current_component = get_current_component;
    exports.get_custom_elements_slots = get_custom_elements_slots;
    exports.get_root_for_style = get_root_for_style;
    exports.get_slot_changes = get_slot_changes11;
    exports.get_spread_object = get_spread_object3;
    exports.get_spread_update = get_spread_update11;
    exports.get_store_value = get_store_value;
    exports.globals = globals23;
    exports.group_outros = group_outros18;
    exports.handle_promise = handle_promise;
    exports.hasContext = hasContext;
    exports.has_prop = has_prop;
    exports.head_selector = head_selector;
    exports.identity = identity;
    exports.init = init75;
    exports.init_binding_group = init_binding_group;
    exports.init_binding_group_dynamic = init_binding_group_dynamic;
    exports.insert = insert;
    exports.insert_dev = insert_dev71;
    exports.insert_hydration = insert_hydration;
    exports.insert_hydration_dev = insert_hydration_dev;
    exports.intros = intros;
    exports.invalid_attribute_name_character = invalid_attribute_name_character;
    exports.is_client = is_client;
    exports.is_crossorigin = is_crossorigin;
    exports.is_empty = is_empty;
    exports.is_function = is_function3;
    exports.is_promise = is_promise;
    exports.is_void = is_void;
    exports.listen = listen;
    exports.listen_dev = listen_dev26;
    exports.loop = loop;
    exports.loop_guard = loop_guard;
    exports.merge_ssr_styles = merge_ssr_styles;
    exports.missing_component = missing_component;
    exports.mount_component = mount_component59;
    exports.noop = noop26;
    exports.not_equal = not_equal;
    exports.null_to_empty = null_to_empty;
    exports.object_without_properties = object_without_properties;
    exports.onDestroy = onDestroy7;
    exports.onMount = onMount14;
    exports.once = once;
    exports.outro_and_destroy_block = outro_and_destroy_block2;
    exports.prevent_default = prevent_default4;
    exports.prop_dev = prop_dev9;
    exports.query_selector_all = query_selector_all;
    exports.resize_observer_border_box = resize_observer_border_box;
    exports.resize_observer_content_box = resize_observer_content_box;
    exports.resize_observer_device_pixel_content_box = resize_observer_device_pixel_content_box;
    exports.run = run;
    exports.run_all = run_all23;
    exports.safe_not_equal = safe_not_equal75;
    exports.schedule_update = schedule_update;
    exports.select_multiple_value = select_multiple_value;
    exports.select_option = select_option2;
    exports.select_options = select_options;
    exports.select_value = select_value2;
    exports.self = self2;
    exports.setContext = setContext2;
    exports.set_attributes = set_attributes9;
    exports.set_current_component = set_current_component;
    exports.set_custom_element_data = set_custom_element_data;
    exports.set_custom_element_data_map = set_custom_element_data_map;
    exports.set_data = set_data;
    exports.set_data_contenteditable = set_data_contenteditable;
    exports.set_data_contenteditable_dev = set_data_contenteditable_dev;
    exports.set_data_dev = set_data_dev24;
    exports.set_data_maybe_contenteditable = set_data_maybe_contenteditable;
    exports.set_data_maybe_contenteditable_dev = set_data_maybe_contenteditable_dev;
    exports.set_dynamic_element_data = set_dynamic_element_data;
    exports.set_input_type = set_input_type;
    exports.set_input_value = set_input_value6;
    exports.set_now = set_now;
    exports.set_raf = set_raf;
    exports.set_store_value = set_store_value2;
    exports.set_style = set_style6;
    exports.set_svg_attributes = set_svg_attributes;
    exports.space = space57;
    exports.split_css_unit = split_css_unit;
    exports.spread = spread;
    exports.src_url_equal = src_url_equal2;
    exports.start_hydrating = start_hydrating;
    exports.stop_immediate_propagation = stop_immediate_propagation;
    exports.stop_propagation = stop_propagation3;
    exports.subscribe = subscribe;
    exports.svg_element = svg_element;
    exports.text = text40;
    exports.tick = tick;
    exports.time_ranges_to_array = time_ranges_to_array;
    exports.to_number = to_number;
    exports.toggle_class = toggle_class28;
    exports.transition_in = transition_in65;
    exports.transition_out = transition_out65;
    exports.trusted = trusted;
    exports.update_await_block_branch = update_await_block_branch;
    exports.update_keyed_each = update_keyed_each4;
    exports.update_slot = update_slot;
    exports.update_slot_base = update_slot_base11;
    exports.validate_component = validate_component;
    exports.validate_dynamic_element = validate_dynamic_element;
    exports.validate_each_argument = validate_each_argument12;
    exports.validate_each_keys = validate_each_keys4;
    exports.validate_slots = validate_slots75;
    exports.validate_store = validate_store8;
    exports.validate_void_dynamic_element = validate_void_dynamic_element;
    exports.xlink_attr = xlink_attr;
  }
});

// node_modules/svelte/store/index.js
var require_store = __commonJS({
  "node_modules/svelte/store/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var internal = require_internal();
    var subscriber_queue = [];
    function readable(value2, start) {
      return {
        subscribe: writable5(value2, start).subscribe
      };
    }
    function writable5(value2, start = internal.noop) {
      let stop;
      const subscribers = /* @__PURE__ */ new Set();
      function set(new_value) {
        if (internal.safe_not_equal(value2, new_value)) {
          value2 = new_value;
          if (stop) {
            const run_queue = !subscriber_queue.length;
            for (const subscriber of subscribers) {
              subscriber[1]();
              subscriber_queue.push(subscriber, value2);
            }
            if (run_queue) {
              for (let i = 0; i < subscriber_queue.length; i += 2) {
                subscriber_queue[i][0](subscriber_queue[i + 1]);
              }
              subscriber_queue.length = 0;
            }
          }
        }
      }
      function update(fn) {
        set(fn(value2));
      }
      function subscribe(run, invalidate = internal.noop) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
          stop = start(set) || internal.noop;
        }
        run(value2);
        return () => {
          subscribers.delete(subscriber);
          if (subscribers.size === 0 && stop) {
            stop();
            stop = null;
          }
        };
      }
      return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
      const single = !Array.isArray(stores);
      const stores_array = single ? [stores] : stores;
      const auto = fn.length < 2;
      return readable(initial_value, (set) => {
        let started = false;
        const values = [];
        let pending = 0;
        let cleanup = internal.noop;
        const sync = () => {
          if (pending) {
            return;
          }
          cleanup();
          const result = fn(single ? values[0] : values, set);
          if (auto) {
            set(result);
          } else {
            cleanup = internal.is_function(result) ? result : internal.noop;
          }
        };
        const unsubscribers = stores_array.map((store, i) => internal.subscribe(store, (value2) => {
          values[i] = value2;
          pending &= ~(1 << i);
          if (started) {
            sync();
          }
        }, () => {
          pending |= 1 << i;
        }));
        started = true;
        sync();
        return function stop() {
          internal.run_all(unsubscribers);
          cleanup();
          started = false;
        };
      });
    }
    function readonly(store) {
      return {
        subscribe: store.subscribe.bind(store)
      };
    }
    Object.defineProperty(exports, "get", {
      enumerable: true,
      get: function() {
        return internal.get_store_value;
      }
    });
    exports.derived = derived;
    exports.readable = readable;
    exports.readonly = readonly;
    exports.writable = writable5;
  }
});

// node_modules/svelte/index.js
var require_svelte = __commonJS({
  "node_modules/svelte/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var internal = require_internal();
    Object.defineProperty(exports, "SvelteComponent", {
      enumerable: true,
      get: function() {
        return internal.SvelteComponentDev;
      }
    });
    Object.defineProperty(exports, "SvelteComponentTyped", {
      enumerable: true,
      get: function() {
        return internal.SvelteComponentTyped;
      }
    });
    Object.defineProperty(exports, "afterUpdate", {
      enumerable: true,
      get: function() {
        return internal.afterUpdate;
      }
    });
    Object.defineProperty(exports, "beforeUpdate", {
      enumerable: true,
      get: function() {
        return internal.beforeUpdate;
      }
    });
    Object.defineProperty(exports, "createEventDispatcher", {
      enumerable: true,
      get: function() {
        return internal.createEventDispatcher;
      }
    });
    Object.defineProperty(exports, "getAllContexts", {
      enumerable: true,
      get: function() {
        return internal.getAllContexts;
      }
    });
    Object.defineProperty(exports, "getContext", {
      enumerable: true,
      get: function() {
        return internal.getContext;
      }
    });
    Object.defineProperty(exports, "hasContext", {
      enumerable: true,
      get: function() {
        return internal.hasContext;
      }
    });
    Object.defineProperty(exports, "onDestroy", {
      enumerable: true,
      get: function() {
        return internal.onDestroy;
      }
    });
    Object.defineProperty(exports, "onMount", {
      enumerable: true,
      get: function() {
        return internal.onMount;
      }
    });
    Object.defineProperty(exports, "setContext", {
      enumerable: true,
      get: function() {
        return internal.setContext;
      }
    });
    Object.defineProperty(exports, "tick", {
      enumerable: true,
      get: function() {
        return internal.tick;
      }
    });
  }
});

// node_modules/svelte/easing/index.js
var require_easing = __commonJS({
  "node_modules/svelte/easing/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var internal = require_internal();
    function backInOut(t) {
      const s = 1.70158 * 1.525;
      if ((t *= 2) < 1)
        return 0.5 * (t * t * ((s + 1) * t - s));
      return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);
    }
    function backIn(t) {
      const s = 1.70158;
      return t * t * ((s + 1) * t - s);
    }
    function backOut(t) {
      const s = 1.70158;
      return --t * t * ((s + 1) * t + s) + 1;
    }
    function bounceOut(t) {
      const a = 4 / 11;
      const b = 8 / 11;
      const c = 9 / 10;
      const ca = 4356 / 361;
      const cb = 35442 / 1805;
      const cc = 16061 / 1805;
      const t2 = t * t;
      return t < a ? 7.5625 * t2 : t < b ? 9.075 * t2 - 9.9 * t + 3.4 : t < c ? ca * t2 - cb * t + cc : 10.8 * t * t - 20.52 * t + 10.72;
    }
    function bounceInOut(t) {
      return t < 0.5 ? 0.5 * (1 - bounceOut(1 - t * 2)) : 0.5 * bounceOut(t * 2 - 1) + 0.5;
    }
    function bounceIn(t) {
      return 1 - bounceOut(1 - t);
    }
    function circInOut(t) {
      if ((t *= 2) < 1)
        return -0.5 * (Math.sqrt(1 - t * t) - 1);
      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    }
    function circIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
    function circOut(t) {
      return Math.sqrt(1 - --t * t);
    }
    function cubicInOut(t) {
      return t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;
    }
    function cubicIn(t) {
      return t * t * t;
    }
    function cubicOut(t) {
      const f = t - 1;
      return f * f * f + 1;
    }
    function elasticInOut(t) {
      return t < 0.5 ? 0.5 * Math.sin(13 * Math.PI / 2 * 2 * t) * Math.pow(2, 10 * (2 * t - 1)) : 0.5 * Math.sin(-13 * Math.PI / 2 * (2 * t - 1 + 1)) * Math.pow(2, -10 * (2 * t - 1)) + 1;
    }
    function elasticIn(t) {
      return Math.sin(13 * t * Math.PI / 2) * Math.pow(2, 10 * (t - 1));
    }
    function elasticOut(t) {
      return Math.sin(-13 * (t + 1) * Math.PI / 2) * Math.pow(2, -10 * t) + 1;
    }
    function expoInOut(t) {
      return t === 0 || t === 1 ? t : t < 0.5 ? 0.5 * Math.pow(2, 20 * t - 10) : -0.5 * Math.pow(2, 10 - t * 20) + 1;
    }
    function expoIn(t) {
      return t === 0 ? t : Math.pow(2, 10 * (t - 1));
    }
    function expoOut(t) {
      return t === 1 ? t : 1 - Math.pow(2, -10 * t);
    }
    function quadInOut(t) {
      t /= 0.5;
      if (t < 1)
        return 0.5 * t * t;
      t--;
      return -0.5 * (t * (t - 2) - 1);
    }
    function quadIn(t) {
      return t * t;
    }
    function quadOut(t) {
      return -t * (t - 2);
    }
    function quartInOut(t) {
      return t < 0.5 ? 8 * Math.pow(t, 4) : -8 * Math.pow(t - 1, 4) + 1;
    }
    function quartIn(t) {
      return Math.pow(t, 4);
    }
    function quartOut(t) {
      return Math.pow(t - 1, 3) * (1 - t) + 1;
    }
    function quintInOut(t) {
      if ((t *= 2) < 1)
        return 0.5 * t * t * t * t * t;
      return 0.5 * ((t -= 2) * t * t * t * t + 2);
    }
    function quintIn(t) {
      return t * t * t * t * t;
    }
    function quintOut(t) {
      return --t * t * t * t * t + 1;
    }
    function sineInOut(t) {
      return -0.5 * (Math.cos(Math.PI * t) - 1);
    }
    function sineIn(t) {
      const v = Math.cos(t * Math.PI * 0.5);
      if (Math.abs(v) < 1e-14)
        return 1;
      else
        return 1 - v;
    }
    function sineOut(t) {
      return Math.sin(t * Math.PI / 2);
    }
    Object.defineProperty(exports, "linear", {
      enumerable: true,
      get: function() {
        return internal.identity;
      }
    });
    exports.backIn = backIn;
    exports.backInOut = backInOut;
    exports.backOut = backOut;
    exports.bounceIn = bounceIn;
    exports.bounceInOut = bounceInOut;
    exports.bounceOut = bounceOut;
    exports.circIn = circIn;
    exports.circInOut = circInOut;
    exports.circOut = circOut;
    exports.cubicIn = cubicIn;
    exports.cubicInOut = cubicInOut;
    exports.cubicOut = cubicOut;
    exports.elasticIn = elasticIn;
    exports.elasticInOut = elasticInOut;
    exports.elasticOut = elasticOut;
    exports.expoIn = expoIn;
    exports.expoInOut = expoInOut;
    exports.expoOut = expoOut;
    exports.quadIn = quadIn;
    exports.quadInOut = quadInOut;
    exports.quadOut = quadOut;
    exports.quartIn = quartIn;
    exports.quartInOut = quartInOut;
    exports.quartOut = quartOut;
    exports.quintIn = quintIn;
    exports.quintInOut = quintInOut;
    exports.quintOut = quintOut;
    exports.sineIn = sineIn;
    exports.sineInOut = sineInOut;
    exports.sineOut = sineOut;
  }
});

// node_modules/svelte/transition/index.js
var require_transition = __commonJS({
  "node_modules/svelte/transition/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var easing = require_easing();
    var internal = require_internal();
    function __rest(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    }
    function blur(node, { delay = 0, duration: duration2 = 400, easing: easing$1 = easing.cubicInOut, amount: amount2 = 5, opacity = 0 } = {}) {
      const style = getComputedStyle(node);
      const target_opacity = +style.opacity;
      const f = style.filter === "none" ? "" : style.filter;
      const od = target_opacity * (1 - opacity);
      const [value2, unit] = internal.split_css_unit(amount2);
      return {
        delay,
        duration: duration2,
        easing: easing$1,
        css: (_t, u) => `opacity: ${target_opacity - od * u}; filter: ${f} blur(${u * value2}${unit});`
      };
    }
    function fade(node, { delay = 0, duration: duration2 = 400, easing: easing$1 = easing.linear } = {}) {
      const o = +getComputedStyle(node).opacity;
      return {
        delay,
        duration: duration2,
        easing: easing$1,
        css: (t) => `opacity: ${t * o}`
      };
    }
    function fly3(node, { delay = 0, duration: duration2 = 400, easing: easing$1 = easing.cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
      const style = getComputedStyle(node);
      const target_opacity = +style.opacity;
      const transform = style.transform === "none" ? "" : style.transform;
      const od = target_opacity * (1 - opacity);
      const [xValue, xUnit] = internal.split_css_unit(x);
      const [yValue, yUnit] = internal.split_css_unit(y);
      return {
        delay,
        duration: duration2,
        easing: easing$1,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${(1 - t) * yValue}${yUnit});
			opacity: ${target_opacity - od * u}`
      };
    }
    function slide(node, { delay = 0, duration: duration2 = 400, easing: easing$1 = easing.cubicOut, axis = "y" } = {}) {
      const style = getComputedStyle(node);
      const opacity = +style.opacity;
      const primary_property = axis === "y" ? "height" : "width";
      const primary_property_value = parseFloat(style[primary_property]);
      const secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"];
      const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
      const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
      const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
      const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
      const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
      const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
      const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
      return {
        delay,
        duration: duration2,
        easing: easing$1,
        css: (t) => `overflow: hidden;opacity: ${Math.min(t * 20, 1) * opacity};${primary_property}: ${t * primary_property_value}px;padding-${secondary_properties[0]}: ${t * padding_start_value}px;padding-${secondary_properties[1]}: ${t * padding_end_value}px;margin-${secondary_properties[0]}: ${t * margin_start_value}px;margin-${secondary_properties[1]}: ${t * margin_end_value}px;border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
      };
    }
    function scale(node, { delay = 0, duration: duration2 = 400, easing: easing$1 = easing.cubicOut, start = 0, opacity = 0 } = {}) {
      const style = getComputedStyle(node);
      const target_opacity = +style.opacity;
      const transform = style.transform === "none" ? "" : style.transform;
      const sd = 1 - start;
      const od = target_opacity * (1 - opacity);
      return {
        delay,
        duration: duration2,
        easing: easing$1,
        css: (_t, u) => `
			transform: ${transform} scale(${1 - sd * u});
			opacity: ${target_opacity - od * u}
		`
      };
    }
    function draw(node, { delay = 0, speed, duration: duration2, easing: easing$1 = easing.cubicInOut } = {}) {
      let len = node.getTotalLength();
      const style = getComputedStyle(node);
      if (style.strokeLinecap !== "butt") {
        len += parseInt(style.strokeWidth);
      }
      if (duration2 === void 0) {
        if (speed === void 0) {
          duration2 = 800;
        } else {
          duration2 = len / speed;
        }
      } else if (typeof duration2 === "function") {
        duration2 = duration2(len);
      }
      return {
        delay,
        duration: duration2,
        easing: easing$1,
        css: (_, u) => `
			stroke-dasharray: ${len};
			stroke-dashoffset: ${u * len};
		`
      };
    }
    function crossfade2(_a) {
      var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
      const to_receive = /* @__PURE__ */ new Map();
      const to_send = /* @__PURE__ */ new Map();
      function crossfade3(from_node, node, params) {
        const { delay = 0, duration: duration2 = (d2) => Math.sqrt(d2) * 30, easing: easing$1 = easing.cubicOut } = internal.assign(internal.assign({}, defaults), params);
        const from = from_node.getBoundingClientRect();
        const to = node.getBoundingClientRect();
        const dx = from.left - to.left;
        const dy = from.top - to.top;
        const dw = from.width / to.width;
        const dh = from.height / to.height;
        const d = Math.sqrt(dx * dx + dy * dy);
        const style = getComputedStyle(node);
        const transform = style.transform === "none" ? "" : style.transform;
        const opacity = +style.opacity;
        return {
          delay,
          duration: internal.is_function(duration2) ? duration2(d) : duration2,
          easing: easing$1,
          css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
        };
      }
      function transition(items, counterparts, intro) {
        return (node, params) => {
          items.set(params.key, node);
          return () => {
            if (counterparts.has(params.key)) {
              const other_node = counterparts.get(params.key);
              counterparts.delete(params.key);
              return crossfade3(other_node, node, params);
            }
            items.delete(params.key);
            return fallback && fallback(node, params, intro);
          };
        };
      }
      return [
        transition(to_send, to_receive, false),
        transition(to_receive, to_send, true)
      ];
    }
    exports.blur = blur;
    exports.crossfade = crossfade2;
    exports.draw = draw;
    exports.fade = fade;
    exports.fly = fly3;
    exports.scale = scale;
    exports.slide = slide;
  }
});

// node_modules/svelte/animate/index.js
var require_animate = __commonJS({
  "node_modules/svelte/animate/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var easing = require_easing();
    var internal = require_internal();
    function flip2(node, { from, to }, params = {}) {
      const style = getComputedStyle(node);
      const transform = style.transform === "none" ? "" : style.transform;
      const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
      const dx = from.left + from.width * ox / to.width - (to.left + ox);
      const dy = from.top + from.height * oy / to.height - (to.top + oy);
      const { delay = 0, duration: duration2 = (d) => Math.sqrt(d) * 120, easing: easing$1 = easing.cubicOut } = params;
      return {
        delay,
        duration: internal.is_function(duration2) ? duration2(Math.sqrt(dx * dx + dy * dy)) : duration2,
        easing: easing$1,
        css: (t, u) => {
          const x = u * dx;
          const y = u * dy;
          const sx = t + u * from.width / to.width;
          const sy = t + u * from.height / to.height;
          return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
        }
      };
    }
    exports.flip = flip2;
  }
});

// node_modules/prismjs/prism.js
var require_prism = __commonJS({
  "node_modules/prismjs/prism.js"(exports, module) {
    var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
    var Prism2 = function(_self2) {
      var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
      var uniqueId = 0;
      var plainTextGrammar = {};
      var _ = {
        /**
         * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
         * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
         * additional languages or plugins yourself.
         *
         * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
         *
         * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
         * empty Prism object into the global scope before loading the Prism script like this:
         *
         * ```js
         * window.Prism = window.Prism || {};
         * Prism.manual = true;
         * // add a new <script> to load Prism's script
         * ```
         *
         * @default false
         * @type {boolean}
         * @memberof Prism
         * @public
         */
        manual: _self2.Prism && _self2.Prism.manual,
        /**
         * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
         * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
         * own worker, you don't want it to do this.
         *
         * By setting this value to `true`, Prism will not add its own listeners to the worker.
         *
         * You obviously have to change this value before Prism executes. To do this, you can add an
         * empty Prism object into the global scope before loading the Prism script like this:
         *
         * ```js
         * window.Prism = window.Prism || {};
         * Prism.disableWorkerMessageHandler = true;
         * // Load Prism's script
         * ```
         *
         * @default false
         * @type {boolean}
         * @memberof Prism
         * @public
         */
        disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
        /**
         * A namespace for utility methods.
         *
         * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
         * change or disappear at any time.
         *
         * @namespace
         * @memberof Prism
         */
        util: {
          encode: function encode2(tokens) {
            if (tokens instanceof Token) {
              return new Token(tokens.type, encode2(tokens.content), tokens.alias);
            } else if (Array.isArray(tokens)) {
              return tokens.map(encode2);
            } else {
              return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
            }
          },
          /**
           * Returns the name of the type of the given value.
           *
           * @param {any} o
           * @returns {string}
           * @example
           * type(null)      === 'Null'
           * type(undefined) === 'Undefined'
           * type(123)       === 'Number'
           * type('foo')     === 'String'
           * type(true)      === 'Boolean'
           * type([1, 2])    === 'Array'
           * type({})        === 'Object'
           * type(String)    === 'Function'
           * type(/abc+/)    === 'RegExp'
           */
          type: function(o) {
            return Object.prototype.toString.call(o).slice(8, -1);
          },
          /**
           * Returns a unique number for the given object. Later calls will still return the same number.
           *
           * @param {Object} obj
           * @returns {number}
           */
          objId: function(obj) {
            if (!obj["__id"]) {
              Object.defineProperty(obj, "__id", { value: ++uniqueId });
            }
            return obj["__id"];
          },
          /**
           * Creates a deep clone of the given object.
           *
           * The main intended use of this function is to clone language definitions.
           *
           * @param {T} o
           * @param {Record<number, any>} [visited]
           * @returns {T}
           * @template T
           */
          clone: function deepClone(o, visited) {
            visited = visited || {};
            var clone;
            var id2;
            switch (_.util.type(o)) {
              case "Object":
                id2 = _.util.objId(o);
                if (visited[id2]) {
                  return visited[id2];
                }
                clone = /** @type {Record<string, any>} */
                {};
                visited[id2] = clone;
                for (var key in o) {
                  if (o.hasOwnProperty(key)) {
                    clone[key] = deepClone(o[key], visited);
                  }
                }
                return (
                  /** @type {any} */
                  clone
                );
              case "Array":
                id2 = _.util.objId(o);
                if (visited[id2]) {
                  return visited[id2];
                }
                clone = [];
                visited[id2] = clone;
                /** @type {Array} */
                /** @type {any} */
                o.forEach(function(v, i) {
                  clone[i] = deepClone(v, visited);
                });
                return (
                  /** @type {any} */
                  clone
                );
              default:
                return o;
            }
          },
          /**
           * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
           *
           * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
           *
           * @param {Element} element
           * @returns {string}
           */
          getLanguage: function(element41) {
            while (element41) {
              var m = lang.exec(element41.className);
              if (m) {
                return m[1].toLowerCase();
              }
              element41 = element41.parentElement;
            }
            return "none";
          },
          /**
           * Sets the Prism `language-xxxx` class of the given element.
           *
           * @param {Element} element
           * @param {string} language
           * @returns {void}
           */
          setLanguage: function(element41, language) {
            element41.className = element41.className.replace(RegExp(lang, "gi"), "");
            element41.classList.add("language-" + language);
          },
          /**
           * Returns the script element that is currently executing.
           *
           * This does __not__ work for line script element.
           *
           * @returns {HTMLScriptElement | null}
           */
          currentScript: function() {
            if (typeof document === "undefined") {
              return null;
            }
            if ("currentScript" in document && 1 < 2) {
              return (
                /** @type {any} */
                document.currentScript
              );
            }
            try {
              throw new Error();
            } catch (err) {
              var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
              if (src) {
                var scripts = document.getElementsByTagName("script");
                for (var i in scripts) {
                  if (scripts[i].src == src) {
                    return scripts[i];
                  }
                }
              }
              return null;
            }
          },
          /**
           * Returns whether a given class is active for `element`.
           *
           * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
           * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
           * given class is just the given class with a `no-` prefix.
           *
           * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
           * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
           * ancestors have the given class or the negated version of it, then the default activation will be returned.
           *
           * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
           * version of it, the class is considered active.
           *
           * @param {Element} element
           * @param {string} className
           * @param {boolean} [defaultActivation=false]
           * @returns {boolean}
           */
          isActive: function(element41, className2, defaultActivation) {
            var no = "no-" + className2;
            while (element41) {
              var classList = element41.classList;
              if (classList.contains(className2)) {
                return true;
              }
              if (classList.contains(no)) {
                return false;
              }
              element41 = element41.parentElement;
            }
            return !!defaultActivation;
          }
        },
        /**
         * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
         *
         * @namespace
         * @memberof Prism
         * @public
         */
        languages: {
          /**
           * The grammar for plain, unformatted text.
           */
          plain: plainTextGrammar,
          plaintext: plainTextGrammar,
          text: plainTextGrammar,
          txt: plainTextGrammar,
          /**
           * Creates a deep copy of the language with the given id and appends the given tokens.
           *
           * If a token in `redef` also appears in the copied language, then the existing token in the copied language
           * will be overwritten at its original position.
           *
           * ## Best practices
           *
           * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
           * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
           * understand the language definition because, normally, the order of tokens matters in Prism grammars.
           *
           * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
           * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
           *
           * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
           * @param {Grammar} redef The new tokens to append.
           * @returns {Grammar} The new language created.
           * @public
           * @example
           * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
           *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
           *     // at its original position
           *     'comment': { ... },
           *     // CSS doesn't have a 'color' token, so this token will be appended
           *     'color': /\b(?:red|green|blue)\b/
           * });
           */
          extend: function(id2, redef) {
            var lang2 = _.util.clone(_.languages[id2]);
            for (var key in redef) {
              lang2[key] = redef[key];
            }
            return lang2;
          },
          /**
           * Inserts tokens _before_ another token in a language definition or any other grammar.
           *
           * ## Usage
           *
           * This helper method makes it easy to modify existing languages. For example, the CSS language definition
           * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
           * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
           * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
           * this:
           *
           * ```js
           * Prism.languages.markup.style = {
           *     // token
           * };
           * ```
           *
           * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
           * before existing tokens. For the CSS example above, you would use it like this:
           *
           * ```js
           * Prism.languages.insertBefore('markup', 'cdata', {
           *     'style': {
           *         // token
           *     }
           * });
           * ```
           *
           * ## Special cases
           *
           * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
           * will be ignored.
           *
           * This behavior can be used to insert tokens after `before`:
           *
           * ```js
           * Prism.languages.insertBefore('markup', 'comment', {
           *     'comment': Prism.languages.markup.comment,
           *     // tokens after 'comment'
           * });
           * ```
           *
           * ## Limitations
           *
           * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
           * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
           * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
           * deleting properties which is necessary to insert at arbitrary positions.
           *
           * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
           * Instead, it will create a new object and replace all references to the target object with the new one. This
           * can be done without temporarily deleting properties, so the iteration order is well-defined.
           *
           * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
           * you hold the target object in a variable, then the value of the variable will not change.
           *
           * ```js
           * var oldMarkup = Prism.languages.markup;
           * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
           *
           * assert(oldMarkup !== Prism.languages.markup);
           * assert(newMarkup === Prism.languages.markup);
           * ```
           *
           * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
           * object to be modified.
           * @param {string} before The key to insert before.
           * @param {Grammar} insert An object containing the key-value pairs to be inserted.
           * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
           * object to be modified.
           *
           * Defaults to `Prism.languages`.
           * @returns {Grammar} The new grammar object.
           * @public
           */
          insertBefore: function(inside, before, insert, root) {
            root = root || /** @type {any} */
            _.languages;
            var grammar = root[inside];
            var ret = {};
            for (var token in grammar) {
              if (grammar.hasOwnProperty(token)) {
                if (token == before) {
                  for (var newToken in insert) {
                    if (insert.hasOwnProperty(newToken)) {
                      ret[newToken] = insert[newToken];
                    }
                  }
                }
                if (!insert.hasOwnProperty(token)) {
                  ret[token] = grammar[token];
                }
              }
            }
            var old = root[inside];
            root[inside] = ret;
            _.languages.DFS(_.languages, function(key, value2) {
              if (value2 === old && key != inside) {
                this[key] = ret;
              }
            });
            return ret;
          },
          // Traverse a language definition with Depth First Search
          DFS: function DFS(o, callback, type, visited) {
            visited = visited || {};
            var objId = _.util.objId;
            for (var i in o) {
              if (o.hasOwnProperty(i)) {
                callback.call(o, i, o[i], type || i);
                var property = o[i];
                var propertyType = _.util.type(property);
                if (propertyType === "Object" && !visited[objId(property)]) {
                  visited[objId(property)] = true;
                  DFS(property, callback, null, visited);
                } else if (propertyType === "Array" && !visited[objId(property)]) {
                  visited[objId(property)] = true;
                  DFS(property, callback, i, visited);
                }
              }
            }
          }
        },
        plugins: {},
        /**
         * This is the most high-level function in Prism’s API.
         * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
         * each one of them.
         *
         * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
         *
         * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
         * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
         * @memberof Prism
         * @public
         */
        highlightAll: function(async, callback) {
          _.highlightAllUnder(document, async, callback);
        },
        /**
         * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
         * {@link Prism.highlightElement} on each one of them.
         *
         * The following hooks will be run:
         * 1. `before-highlightall`
         * 2. `before-all-elements-highlight`
         * 3. All hooks of {@link Prism.highlightElement} for each element.
         *
         * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
         * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
         * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
         * @memberof Prism
         * @public
         */
        highlightAllUnder: function(container, async, callback) {
          var env = {
            callback,
            container,
            selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
          };
          _.hooks.run("before-highlightall", env);
          env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
          _.hooks.run("before-all-elements-highlight", env);
          for (var i = 0, element41; element41 = env.elements[i++]; ) {
            _.highlightElement(element41, async === true, env.callback);
          }
        },
        /**
         * Highlights the code inside a single element.
         *
         * The following hooks will be run:
         * 1. `before-sanity-check`
         * 2. `before-highlight`
         * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
         * 4. `before-insert`
         * 5. `after-highlight`
         * 6. `complete`
         *
         * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
         * the element's language.
         *
         * @param {Element} element The element containing the code.
         * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
         * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
         * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
         * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
         *
         * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
         * asynchronous highlighting to work. You can build your own bundle on the
         * [Download page](https://prismjs.com/download.html).
         * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
         * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
         * @memberof Prism
         * @public
         */
        highlightElement: function(element41, async, callback) {
          var language = _.util.getLanguage(element41);
          var grammar = _.languages[language];
          _.util.setLanguage(element41, language);
          var parent = element41.parentElement;
          if (parent && parent.nodeName.toLowerCase() === "pre") {
            _.util.setLanguage(parent, language);
          }
          var code = element41.textContent;
          var env = {
            element: element41,
            language,
            grammar,
            code
          };
          function insertHighlightedCode(highlightedCode) {
            env.highlightedCode = highlightedCode;
            _.hooks.run("before-insert", env);
            env.element.innerHTML = env.highlightedCode;
            _.hooks.run("after-highlight", env);
            _.hooks.run("complete", env);
            callback && callback.call(env.element);
          }
          _.hooks.run("before-sanity-check", env);
          parent = env.element.parentElement;
          if (parent && parent.nodeName.toLowerCase() === "pre" && !parent.hasAttribute("tabindex")) {
            parent.setAttribute("tabindex", "0");
          }
          if (!env.code) {
            _.hooks.run("complete", env);
            callback && callback.call(env.element);
            return;
          }
          _.hooks.run("before-highlight", env);
          if (!env.grammar) {
            insertHighlightedCode(_.util.encode(env.code));
            return;
          }
          if (async && _self2.Worker) {
            var worker = new Worker(_.filename);
            worker.onmessage = function(evt) {
              insertHighlightedCode(evt.data);
            };
            worker.postMessage(JSON.stringify({
              language: env.language,
              code: env.code,
              immediateClose: true
            }));
          } else {
            insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
          }
        },
        /**
         * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
         * and the language definitions to use, and returns a string with the HTML produced.
         *
         * The following hooks will be run:
         * 1. `before-tokenize`
         * 2. `after-tokenize`
         * 3. `wrap`: On each {@link Token}.
         *
         * @param {string} text A string with the code to be highlighted.
         * @param {Grammar} grammar An object containing the tokens to use.
         *
         * Usually a language definition like `Prism.languages.markup`.
         * @param {string} language The name of the language definition passed to `grammar`.
         * @returns {string} The highlighted HTML.
         * @memberof Prism
         * @public
         * @example
         * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
         */
        highlight: function(text40, grammar, language) {
          var env = {
            code: text40,
            grammar,
            language
          };
          _.hooks.run("before-tokenize", env);
          if (!env.grammar) {
            throw new Error('The language "' + env.language + '" has no grammar.');
          }
          env.tokens = _.tokenize(env.code, env.grammar);
          _.hooks.run("after-tokenize", env);
          return Token.stringify(_.util.encode(env.tokens), env.language);
        },
        /**
         * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
         * and the language definitions to use, and returns an array with the tokenized code.
         *
         * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
         *
         * This method could be useful in other contexts as well, as a very crude parser.
         *
         * @param {string} text A string with the code to be highlighted.
         * @param {Grammar} grammar An object containing the tokens to use.
         *
         * Usually a language definition like `Prism.languages.markup`.
         * @returns {TokenStream} An array of strings and tokens, a token stream.
         * @memberof Prism
         * @public
         * @example
         * let code = `var foo = 0;`;
         * let tokens = Prism.tokenize(code, Prism.languages.javascript);
         * tokens.forEach(token => {
         *     if (token instanceof Prism.Token && token.type === 'number') {
         *         console.log(`Found numeric literal: ${token.content}`);
         *     }
         * });
         */
        tokenize: function(text40, grammar) {
          var rest = grammar.rest;
          if (rest) {
            for (var token in rest) {
              grammar[token] = rest[token];
            }
            delete grammar.rest;
          }
          var tokenList = new LinkedList();
          addAfter(tokenList, tokenList.head, text40);
          matchGrammar(text40, tokenList, grammar, tokenList.head, 0);
          return toArray(tokenList);
        },
        /**
         * @namespace
         * @memberof Prism
         * @public
         */
        hooks: {
          all: {},
          /**
           * Adds the given callback to the list of callbacks for the given hook.
           *
           * The callback will be invoked when the hook it is registered for is run.
           * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
           *
           * One callback function can be registered to multiple hooks and the same hook multiple times.
           *
           * @param {string} name The name of the hook.
           * @param {HookCallback} callback The callback function which is given environment variables.
           * @public
           */
          add: function(name2, callback) {
            var hooks = _.hooks.all;
            hooks[name2] = hooks[name2] || [];
            hooks[name2].push(callback);
          },
          /**
           * Runs a hook invoking all registered callbacks with the given environment variables.
           *
           * Callbacks will be invoked synchronously and in the order in which they were registered.
           *
           * @param {string} name The name of the hook.
           * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
           * @public
           */
          run: function(name2, env) {
            var callbacks = _.hooks.all[name2];
            if (!callbacks || !callbacks.length) {
              return;
            }
            for (var i = 0, callback; callback = callbacks[i++]; ) {
              callback(env);
            }
          }
        },
        Token
      };
      _self2.Prism = _;
      function Token(type, content, alias, matchedStr) {
        this.type = type;
        this.content = content;
        this.alias = alias;
        this.length = (matchedStr || "").length | 0;
      }
      Token.stringify = function stringify(o, language) {
        if (typeof o == "string") {
          return o;
        }
        if (Array.isArray(o)) {
          var s = "";
          o.forEach(function(e) {
            s += stringify(e, language);
          });
          return s;
        }
        var env = {
          type: o.type,
          content: stringify(o.content, language),
          tag: "span",
          classes: ["token", o.type],
          attributes: {},
          language
        };
        var aliases = o.alias;
        if (aliases) {
          if (Array.isArray(aliases)) {
            Array.prototype.push.apply(env.classes, aliases);
          } else {
            env.classes.push(aliases);
          }
        }
        _.hooks.run("wrap", env);
        var attributes = "";
        for (var name2 in env.attributes) {
          attributes += " " + name2 + '="' + (env.attributes[name2] || "").replace(/"/g, "&quot;") + '"';
        }
        return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
      };
      function matchPattern(pattern, pos, text40, lookbehind) {
        pattern.lastIndex = pos;
        var match = pattern.exec(text40);
        if (match && lookbehind && match[1]) {
          var lookbehindLength = match[1].length;
          match.index += lookbehindLength;
          match[0] = match[0].slice(lookbehindLength);
        }
        return match;
      }
      function matchGrammar(text40, tokenList, grammar, startNode, startPos, rematch) {
        for (var token in grammar) {
          if (!grammar.hasOwnProperty(token) || !grammar[token]) {
            continue;
          }
          var patterns = grammar[token];
          patterns = Array.isArray(patterns) ? patterns : [patterns];
          for (var j = 0; j < patterns.length; ++j) {
            if (rematch && rematch.cause == token + "," + j) {
              return;
            }
            var patternObj = patterns[j];
            var inside = patternObj.inside;
            var lookbehind = !!patternObj.lookbehind;
            var greedy = !!patternObj.greedy;
            var alias = patternObj.alias;
            if (greedy && !patternObj.pattern.global) {
              var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
              patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
            }
            var pattern = patternObj.pattern || patternObj;
            for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
              if (rematch && pos >= rematch.reach) {
                break;
              }
              var str = currentNode.value;
              if (tokenList.length > text40.length) {
                return;
              }
              if (str instanceof Token) {
                continue;
              }
              var removeCount = 1;
              var match;
              if (greedy) {
                match = matchPattern(pattern, pos, text40, lookbehind);
                if (!match || match.index >= text40.length) {
                  break;
                }
                var from = match.index;
                var to = match.index + match[0].length;
                var p = pos;
                p += currentNode.value.length;
                while (from >= p) {
                  currentNode = currentNode.next;
                  p += currentNode.value.length;
                }
                p -= currentNode.value.length;
                pos = p;
                if (currentNode.value instanceof Token) {
                  continue;
                }
                for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === "string"); k = k.next) {
                  removeCount++;
                  p += k.value.length;
                }
                removeCount--;
                str = text40.slice(pos, p);
                match.index -= pos;
              } else {
                match = matchPattern(pattern, 0, str, lookbehind);
                if (!match) {
                  continue;
                }
              }
              var from = match.index;
              var matchStr = match[0];
              var before = str.slice(0, from);
              var after = str.slice(from + matchStr.length);
              var reach = pos + str.length;
              if (rematch && reach > rematch.reach) {
                rematch.reach = reach;
              }
              var removeFrom = currentNode.prev;
              if (before) {
                removeFrom = addAfter(tokenList, removeFrom, before);
                pos += before.length;
              }
              removeRange(tokenList, removeFrom, removeCount);
              var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
              currentNode = addAfter(tokenList, removeFrom, wrapped);
              if (after) {
                addAfter(tokenList, currentNode, after);
              }
              if (removeCount > 1) {
                var nestedRematch = {
                  cause: token + "," + j,
                  reach
                };
                matchGrammar(text40, tokenList, grammar, currentNode.prev, pos, nestedRematch);
                if (rematch && nestedRematch.reach > rematch.reach) {
                  rematch.reach = nestedRematch.reach;
                }
              }
            }
          }
        }
      }
      function LinkedList() {
        var head = { value: null, prev: null, next: null };
        var tail = { value: null, prev: head, next: null };
        head.next = tail;
        this.head = head;
        this.tail = tail;
        this.length = 0;
      }
      function addAfter(list, node, value2) {
        var next = node.next;
        var newNode = { value: value2, prev: node, next };
        node.next = newNode;
        next.prev = newNode;
        list.length++;
        return newNode;
      }
      function removeRange(list, node, count) {
        var next = node.next;
        for (var i = 0; i < count && next !== list.tail; i++) {
          next = next.next;
        }
        node.next = next;
        next.prev = node;
        list.length -= i;
      }
      function toArray(list) {
        var array = [];
        var node = list.head.next;
        while (node !== list.tail) {
          array.push(node.value);
          node = node.next;
        }
        return array;
      }
      if (!_self2.document) {
        if (!_self2.addEventListener) {
          return _;
        }
        if (!_.disableWorkerMessageHandler) {
          _self2.addEventListener("message", function(evt) {
            var message = JSON.parse(evt.data);
            var lang2 = message.language;
            var code = message.code;
            var immediateClose = message.immediateClose;
            _self2.postMessage(_.highlight(code, _.languages[lang2], lang2));
            if (immediateClose) {
              _self2.close();
            }
          }, false);
        }
        return _;
      }
      var script = _.util.currentScript();
      if (script) {
        _.filename = script.src;
        if (script.hasAttribute("data-manual")) {
          _.manual = true;
        }
      }
      function highlightAutomaticallyCallback() {
        if (!_.manual) {
          _.highlightAll();
        }
      }
      if (!_.manual) {
        var readyState = document.readyState;
        if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
          document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
        } else {
          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(highlightAutomaticallyCallback);
          } else {
            window.setTimeout(highlightAutomaticallyCallback, 16);
          }
        }
      }
      return _;
    }(_self);
    if (typeof module !== "undefined" && module.exports) {
      module.exports = Prism2;
    }
    if (typeof global !== "undefined") {
      global.Prism = Prism2;
    }
    Prism2.languages.markup = {
      "comment": {
        pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
        greedy: true
      },
      "prolog": {
        pattern: /<\?[\s\S]+?\?>/,
        greedy: true
      },
      "doctype": {
        // https://www.w3.org/TR/xml/#NT-doctypedecl
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
        greedy: true,
        inside: {
          "internal-subset": {
            pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
            lookbehind: true,
            greedy: true,
            inside: null
            // see below
          },
          "string": {
            pattern: /"[^"]*"|'[^']*'/,
            greedy: true
          },
          "punctuation": /^<!|>$|[[\]]/,
          "doctype-tag": /^DOCTYPE/i,
          "name": /[^\s<>'"]+/
        }
      },
      "cdata": {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        greedy: true
      },
      "tag": {
        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
        greedy: true,
        inside: {
          "tag": {
            pattern: /^<\/?[^\s>\/]+/,
            inside: {
              "punctuation": /^<\/?/,
              "namespace": /^[^\s>\/:]+:/
            }
          },
          "special-attr": [],
          "attr-value": {
            pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
            inside: {
              "punctuation": [
                {
                  pattern: /^=/,
                  alias: "attr-equals"
                },
                {
                  pattern: /^(\s*)["']|["']$/,
                  lookbehind: true
                }
              ]
            }
          },
          "punctuation": /\/?>/,
          "attr-name": {
            pattern: /[^\s>\/]+/,
            inside: {
              "namespace": /^[^\s>\/:]+:/
            }
          }
        }
      },
      "entity": [
        {
          pattern: /&[\da-z]{1,8};/i,
          alias: "named-entity"
        },
        /&#x?[\da-f]{1,8};/i
      ]
    };
    Prism2.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism2.languages.markup["entity"];
    Prism2.languages.markup["doctype"].inside["internal-subset"].inside = Prism2.languages.markup;
    Prism2.hooks.add("wrap", function(env) {
      if (env.type === "entity") {
        env.attributes["title"] = env.content.replace(/&amp;/, "&");
      }
    });
    Object.defineProperty(Prism2.languages.markup.tag, "addInlined", {
      /**
       * Adds an inlined language to markup.
       *
       * An example of an inlined language is CSS with `<style>` tags.
       *
       * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
       * case insensitive.
       * @param {string} lang The language key.
       * @example
       * addInlined('style', 'css');
       */
      value: function addInlined2(tagName, lang) {
        var includedCdataInside = {};
        includedCdataInside["language-" + lang] = {
          pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
          lookbehind: true,
          inside: Prism2.languages[lang]
        };
        includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
        var inside = {
          "included-cdata": {
            pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
            inside: includedCdataInside
          }
        };
        inside["language-" + lang] = {
          pattern: /[\s\S]+/,
          inside: Prism2.languages[lang]
        };
        var def = {};
        def[tagName] = {
          pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
            return tagName;
          }), "i"),
          lookbehind: true,
          greedy: true,
          inside
        };
        Prism2.languages.insertBefore("markup", "cdata", def);
      }
    });
    Object.defineProperty(Prism2.languages.markup.tag, "addAttribute", {
      /**
       * Adds an pattern to highlight languages embedded in HTML attributes.
       *
       * An example of an inlined language is CSS with `style` attributes.
       *
       * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
       * case insensitive.
       * @param {string} lang The language key.
       * @example
       * addAttribute('style', 'css');
       */
      value: function(attrName, lang) {
        Prism2.languages.markup.tag.inside["special-attr"].push({
          pattern: RegExp(
            /(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
            "i"
          ),
          lookbehind: true,
          inside: {
            "attr-name": /^[^\s=]+/,
            "attr-value": {
              pattern: /=[\s\S]+/,
              inside: {
                "value": {
                  pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                  lookbehind: true,
                  alias: [lang, "language-" + lang],
                  inside: Prism2.languages[lang]
                },
                "punctuation": [
                  {
                    pattern: /^=/,
                    alias: "attr-equals"
                  },
                  /"|'/
                ]
              }
            }
          }
        });
      }
    });
    Prism2.languages.html = Prism2.languages.markup;
    Prism2.languages.mathml = Prism2.languages.markup;
    Prism2.languages.svg = Prism2.languages.markup;
    Prism2.languages.xml = Prism2.languages.extend("markup", {});
    Prism2.languages.ssml = Prism2.languages.xml;
    Prism2.languages.atom = Prism2.languages.xml;
    Prism2.languages.rss = Prism2.languages.xml;
    (function(Prism3) {
      var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
      Prism3.languages.css = {
        "comment": /\/\*[\s\S]*?\*\//,
        "atrule": {
          pattern: RegExp("@[\\w-](?:" + /[^;{\s"']|\s+(?!\s)/.source + "|" + string.source + ")*?" + /(?:;|(?=\s*\{))/.source),
          inside: {
            "rule": /^@[\w-]+/,
            "selector-function-argument": {
              pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
              lookbehind: true,
              alias: "selector"
            },
            "keyword": {
              pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
              lookbehind: true
            }
            // See rest below
          }
        },
        "url": {
          // https://drafts.csswg.org/css-values-3/#urls
          pattern: RegExp("\\burl\\((?:" + string.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
          greedy: true,
          inside: {
            "function": /^url/i,
            "punctuation": /^\(|\)$/,
            "string": {
              pattern: RegExp("^" + string.source + "$"),
              alias: "url"
            }
          }
        },
        "selector": {
          pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string.source + ")*(?=\\s*\\{)"),
          lookbehind: true
        },
        "string": {
          pattern: string,
          greedy: true
        },
        "property": {
          pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
          lookbehind: true
        },
        "important": /!important\b/i,
        "function": {
          pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
          lookbehind: true
        },
        "punctuation": /[(){};:,]/
      };
      Prism3.languages.css["atrule"].inside.rest = Prism3.languages.css;
      var markup = Prism3.languages.markup;
      if (markup) {
        markup.tag.addInlined("style", "css");
        markup.tag.addAttribute("style", "css");
      }
    })(Prism2);
    Prism2.languages.clike = {
      "comment": [
        {
          pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
          lookbehind: true,
          greedy: true
        },
        {
          pattern: /(^|[^\\:])\/\/.*/,
          lookbehind: true,
          greedy: true
        }
      ],
      "string": {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      "class-name": {
        pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
          "punctuation": /[.\\]/
        }
      },
      "keyword": /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
      "boolean": /\b(?:false|true)\b/,
      "function": /\b\w+(?=\()/,
      "number": /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
      "operator": /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
      "punctuation": /[{}[\];(),.:]/
    };
    Prism2.languages.javascript = Prism2.languages.extend("clike", {
      "class-name": [
        Prism2.languages.clike["class-name"],
        {
          pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
          lookbehind: true
        }
      ],
      "keyword": [
        {
          pattern: /((?:^|\})\s*)catch\b/,
          lookbehind: true
        },
        {
          pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
          lookbehind: true
        }
      ],
      // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
      "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
      "number": {
        pattern: RegExp(
          /(^|[^\w$])/.source + "(?:" + // constant
          (/NaN|Infinity/.source + "|" + // binary integer
          /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
          /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
          /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
          /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
          /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source
        ),
        lookbehind: true
      },
      "operator": /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
    });
    Prism2.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
    Prism2.languages.insertBefore("javascript", "keyword", {
      "regex": {
        pattern: RegExp(
          // lookbehind
          // eslint-disable-next-line regexp/no-dupe-characters-character-class
          /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source + // Regex pattern:
          // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
          // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
          // with the only syntax, so we have to define 2 different regex patterns.
          /\//.source + "(?:" + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + "|" + // `v` flag syntax. This supports 3 levels of nested character classes.
          /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ")" + // lookahead
          /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source
        ),
        lookbehind: true,
        greedy: true,
        inside: {
          "regex-source": {
            pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
            lookbehind: true,
            alias: "language-regex",
            inside: Prism2.languages.regex
          },
          "regex-delimiter": /^\/|\/$/,
          "regex-flags": /^[a-z]+$/
        }
      },
      // This must be declared before keyword because we use "function" inside the look-forward
      "function-variable": {
        pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
        alias: "function"
      },
      "parameter": [
        {
          pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
          lookbehind: true,
          inside: Prism2.languages.javascript
        },
        {
          pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
          lookbehind: true,
          inside: Prism2.languages.javascript
        },
        {
          pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
          lookbehind: true,
          inside: Prism2.languages.javascript
        },
        {
          pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
          lookbehind: true,
          inside: Prism2.languages.javascript
        }
      ],
      "constant": /\b[A-Z](?:[A-Z_]|\dx?)*\b/
    });
    Prism2.languages.insertBefore("javascript", "string", {
      "hashbang": {
        pattern: /^#!.*/,
        greedy: true,
        alias: "comment"
      },
      "template-string": {
        pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
        greedy: true,
        inside: {
          "template-punctuation": {
            pattern: /^`|`$/,
            alias: "string"
          },
          "interpolation": {
            pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
            lookbehind: true,
            inside: {
              "interpolation-punctuation": {
                pattern: /^\$\{|\}$/,
                alias: "punctuation"
              },
              rest: Prism2.languages.javascript
            }
          },
          "string": /[\s\S]+/
        }
      },
      "string-property": {
        pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
        lookbehind: true,
        greedy: true,
        alias: "property"
      }
    });
    Prism2.languages.insertBefore("javascript", "operator", {
      "literal-property": {
        pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
        lookbehind: true,
        alias: "property"
      }
    });
    if (Prism2.languages.markup) {
      Prism2.languages.markup.tag.addInlined("script", "javascript");
      Prism2.languages.markup.tag.addAttribute(
        /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
        "javascript"
      );
    }
    Prism2.languages.js = Prism2.languages.javascript;
    (function() {
      if (typeof Prism2 === "undefined" || typeof document === "undefined") {
        return;
      }
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      }
      var LOADING_MESSAGE = "Loading\u2026";
      var FAILURE_MESSAGE = function(status, message) {
        return "\u2716 Error " + status + " while fetching file: " + message;
      };
      var FAILURE_EMPTY_MESSAGE = "\u2716 Error: File does not exist or is empty";
      var EXTENSIONS = {
        "js": "javascript",
        "py": "python",
        "rb": "ruby",
        "ps1": "powershell",
        "psm1": "powershell",
        "sh": "bash",
        "bat": "batch",
        "h": "c",
        "tex": "latex"
      };
      var STATUS_ATTR = "data-src-status";
      var STATUS_LOADING = "loading";
      var STATUS_LOADED = "loaded";
      var STATUS_FAILED = "failed";
      var SELECTOR = "pre[data-src]:not([" + STATUS_ATTR + '="' + STATUS_LOADED + '"]):not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';
      function loadFile(src, success, error2) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", src, true);
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status < 400 && xhr.responseText) {
              success(xhr.responseText);
            } else {
              if (xhr.status >= 400) {
                error2(FAILURE_MESSAGE(xhr.status, xhr.statusText));
              } else {
                error2(FAILURE_EMPTY_MESSAGE);
              }
            }
          }
        };
        xhr.send(null);
      }
      function parseRange(range2) {
        var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range2 || "");
        if (m) {
          var start = Number(m[1]);
          var comma = m[2];
          var end = m[3];
          if (!comma) {
            return [start, start];
          }
          if (!end) {
            return [start, void 0];
          }
          return [start, Number(end)];
        }
        return void 0;
      }
      Prism2.hooks.add("before-highlightall", function(env) {
        env.selector += ", " + SELECTOR;
      });
      Prism2.hooks.add("before-sanity-check", function(env) {
        var pre = (
          /** @type {HTMLPreElement} */
          env.element
        );
        if (pre.matches(SELECTOR)) {
          env.code = "";
          pre.setAttribute(STATUS_ATTR, STATUS_LOADING);
          var code = pre.appendChild(document.createElement("CODE"));
          code.textContent = LOADING_MESSAGE;
          var src = pre.getAttribute("data-src");
          var language = env.language;
          if (language === "none") {
            var extension = (/\.(\w+)$/.exec(src) || [, "none"])[1];
            language = EXTENSIONS[extension] || extension;
          }
          Prism2.util.setLanguage(code, language);
          Prism2.util.setLanguage(pre, language);
          var autoloader = Prism2.plugins.autoloader;
          if (autoloader) {
            autoloader.loadLanguages(language);
          }
          loadFile(
            src,
            function(text40) {
              pre.setAttribute(STATUS_ATTR, STATUS_LOADED);
              var range2 = parseRange(pre.getAttribute("data-range"));
              if (range2) {
                var lines = text40.split(/\r\n?|\n/g);
                var start = range2[0];
                var end = range2[1] == null ? lines.length : range2[1];
                if (start < 0) {
                  start += lines.length;
                }
                start = Math.max(0, Math.min(start - 1, lines.length));
                if (end < 0) {
                  end += lines.length;
                }
                end = Math.max(0, Math.min(end, lines.length));
                text40 = lines.slice(start, end).join("\n");
                if (!pre.hasAttribute("data-start")) {
                  pre.setAttribute("data-start", String(start + 1));
                }
              }
              code.textContent = text40;
              Prism2.highlightElement(code);
            },
            function(error2) {
              pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
              code.textContent = error2;
            }
          );
        }
      });
      Prism2.plugins.fileHighlight = {
        /**
         * Executes the File Highlight plugin for all matching `pre` elements under the given container.
         *
         * Note: Elements which are already loaded or currently loading will not be touched by this method.
         *
         * @param {ParentNode} [container=document]
         */
        highlight: function highlight2(container) {
          var elements = (container || document).querySelectorAll(SELECTOR);
          for (var i = 0, element41; element41 = elements[i++]; ) {
            Prism2.highlightElement(element41);
          }
        }
      };
      var logged = false;
      Prism2.fileHighlight = function() {
        if (!logged) {
          console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.");
          logged = true;
        }
        Prism2.plugins.fileHighlight.highlight.apply(this, arguments);
      };
    })();
  }
});

// node_modules/prismjs/plugins/normalize-whitespace/prism-normalize-whitespace.js
var require_prism_normalize_whitespace = __commonJS({
  "node_modules/prismjs/plugins/normalize-whitespace/prism-normalize-whitespace.js"(exports, module) {
    (function() {
      if (typeof Prism === "undefined") {
        return;
      }
      var assign11 = Object.assign || function(obj1, obj2) {
        for (var name2 in obj2) {
          if (obj2.hasOwnProperty(name2)) {
            obj1[name2] = obj2[name2];
          }
        }
        return obj1;
      };
      function NormalizeWhitespace(defaults) {
        this.defaults = assign11({}, defaults);
      }
      function toCamelCase(value2) {
        return value2.replace(/-(\w)/g, function(match, firstChar) {
          return firstChar.toUpperCase();
        });
      }
      function tabLen(str) {
        var res = 0;
        for (var i = 0; i < str.length; ++i) {
          if (str.charCodeAt(i) == "	".charCodeAt(0)) {
            res += 3;
          }
        }
        return str.length + res;
      }
      var settingsConfig = {
        "remove-trailing": "boolean",
        "remove-indent": "boolean",
        "left-trim": "boolean",
        "right-trim": "boolean",
        "break-lines": "number",
        "indent": "number",
        "remove-initial-line-feed": "boolean",
        "tabs-to-spaces": "number",
        "spaces-to-tabs": "number"
      };
      NormalizeWhitespace.prototype = {
        setDefaults: function(defaults) {
          this.defaults = assign11(this.defaults, defaults);
        },
        normalize: function(input, settings) {
          settings = assign11(this.defaults, settings);
          for (var name2 in settings) {
            var methodName = toCamelCase(name2);
            if (name2 !== "normalize" && methodName !== "setDefaults" && settings[name2] && this[methodName]) {
              input = this[methodName].call(this, input, settings[name2]);
            }
          }
          return input;
        },
        /*
         * Normalization methods
         */
        leftTrim: function(input) {
          return input.replace(/^\s+/, "");
        },
        rightTrim: function(input) {
          return input.replace(/\s+$/, "");
        },
        tabsToSpaces: function(input, spaces) {
          spaces = spaces | 0 || 4;
          return input.replace(/\t/g, new Array(++spaces).join(" "));
        },
        spacesToTabs: function(input, spaces) {
          spaces = spaces | 0 || 4;
          return input.replace(RegExp(" {" + spaces + "}", "g"), "	");
        },
        removeTrailing: function(input) {
          return input.replace(/\s*?$/gm, "");
        },
        // Support for deprecated plugin remove-initial-line-feed
        removeInitialLineFeed: function(input) {
          return input.replace(/^(?:\r?\n|\r)/, "");
        },
        removeIndent: function(input) {
          var indents = input.match(/^[^\S\n\r]*(?=\S)/gm);
          if (!indents || !indents[0].length) {
            return input;
          }
          indents.sort(function(a, b) {
            return a.length - b.length;
          });
          if (!indents[0].length) {
            return input;
          }
          return input.replace(RegExp("^" + indents[0], "gm"), "");
        },
        indent: function(input, tabs) {
          return input.replace(/^[^\S\n\r]*(?=\S)/gm, new Array(++tabs).join("	") + "$&");
        },
        breakLines: function(input, characters) {
          characters = characters === true ? 80 : characters | 0 || 80;
          var lines = input.split("\n");
          for (var i = 0; i < lines.length; ++i) {
            if (tabLen(lines[i]) <= characters) {
              continue;
            }
            var line = lines[i].split(/(\s+)/g);
            var len = 0;
            for (var j = 0; j < line.length; ++j) {
              var tl = tabLen(line[j]);
              len += tl;
              if (len > characters) {
                line[j] = "\n" + line[j];
                len = tl;
              }
            }
            lines[i] = line.join("");
          }
          return lines.join("\n");
        }
      };
      if (typeof module !== "undefined" && module.exports) {
        module.exports = NormalizeWhitespace;
      }
      Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({
        "remove-trailing": true,
        "remove-indent": true,
        "left-trim": true,
        "right-trim": true
        /*'break-lines': 80,
        'indent': 2,
        'remove-initial-line-feed': false,
        'tabs-to-spaces': 4,
        'spaces-to-tabs': 4*/
      });
      Prism.hooks.add("before-sanity-check", function(env) {
        var Normalizer = Prism.plugins.NormalizeWhitespace;
        if (env.settings && env.settings["whitespace-normalization"] === false) {
          return;
        }
        if (!Prism.util.isActive(env.element, "whitespace-normalization", true)) {
          return;
        }
        if ((!env.element || !env.element.parentNode) && env.code) {
          env.code = Normalizer.normalize(env.code, env.settings);
          return;
        }
        var pre = env.element.parentNode;
        if (!env.code || !pre || pre.nodeName.toLowerCase() !== "pre") {
          return;
        }
        if (env.settings == null) {
          env.settings = {};
        }
        for (var key in settingsConfig) {
          if (Object.hasOwnProperty.call(settingsConfig, key)) {
            var settingType = settingsConfig[key];
            if (pre.hasAttribute("data-" + key)) {
              try {
                var value2 = JSON.parse(pre.getAttribute("data-" + key) || "true");
                if (typeof value2 === settingType) {
                  env.settings[key] = value2;
                }
              } catch (_error) {
              }
            }
          }
        }
        var children = pre.childNodes;
        var before = "";
        var after = "";
        var codeFound = false;
        for (var i = 0; i < children.length; ++i) {
          var node = children[i];
          if (node == env.element) {
            codeFound = true;
          } else if (node.nodeName === "#text") {
            if (codeFound) {
              after += node.nodeValue;
            } else {
              before += node.nodeValue;
            }
            pre.removeChild(node);
            --i;
          }
        }
        if (!env.element.children.length || !Prism.plugins.KeepMarkup) {
          env.code = before + env.code + after;
          env.code = Normalizer.normalize(env.code, env.settings);
        } else {
          var html = before + env.element.innerHTML + after;
          env.element.innerHTML = Normalizer.normalize(html, env.settings);
          env.code = env.element.textContent;
        }
      });
    })();
  }
});

// docs-src/app/App.svelte
var import_internal74 = __toESM(require_internal());

// docs-src/nav/Nav.svelte
var import_internal73 = __toESM(require_internal());

// src/button/Button.svelte
var import_internal2 = __toESM(require_internal());

// src/icon/Icon.svelte
var import_internal = __toESM(require_internal());

// src/icon/icons.js
var svgns = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round" ';
var icons = {
  adjustments: svgns + 'class="icon icon-tabler icon-tabler-adjustments-horizontal"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="14" cy="6" r="2"/><line x1="4" y1="6" x2="12" y2="6"/><line x1="16" y1="6" x2="20" y2="6"/><circle cx="8" cy="12" r="2"/><line x1="4" y1="12" x2="6" y2="12"/><line x1="10" y1="12" x2="20" y2="12"/><circle cx="17" cy="18" r="2"/><line x1="4" y1="18" x2="15" y2="18"/><line x1="19" y1="18" x2="20" y2="18"/></svg>',
  alert: svgns + 'class="icon icon-tabler icon-tabler-alert-triangle"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 9v2m0 4v.01"/><path d="M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75"/></svg>',
  apps: svgns + 'class="icon icon-tabler icon-tabler-apps"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="4" width="6" height="6" rx="1"/><rect x="4" y="14" width="6" height="6" rx="1"/><rect x="14" y="14" width="6" height="6" rx="1"/><line x1="14" y1="7" x2="20" y2="7"/><line x1="17" y1="4" x2="17" y2="10"/></svg>',
  archive: svgns + 'class="icon icon-tabler icon-tabler-archive"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="3" y="4" width="18" height="4" rx="2"/><path d="M5 8v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-10"/><line x1="10" y1="12" x2="14" y2="12"/></svg>',
  arrowLeft: svgns + 'class="icon icon-tabler icon-tabler-arrow-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="5" y1="12" x2="19" y2="12"/><line x1="5" y1="12" x2="11" y2="18"/><line x1="5" y1="12" x2="11" y2="6"/></svg>',
  arrowRight: svgns + 'class="icon icon-tabler icon-tabler-arrow-right"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="5" y1="12" x2="19" y2="12"/><line x1="13" y1="18" x2="19" y2="12"/><line x1="13" y1="6" x2="19" y2="12"/></svg>',
  arrowNarrowDown: svgns + 'class="icon icon-tabler icon-tabler-arrow-narrow-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="12" y1="5" x2="12" y2="19"/><line x1="16" y1="15" x2="12" y2="19"/><line x1="8" y1="15" x2="12" y2="19"/></svg>',
  arrowNarrowUp: svgns + 'class="icon icon-tabler icon-tabler-arrow-narrow-up"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="12" y1="5" x2="12" y2="19"/><line x1="16" y1="9" x2="12" y2="5"/><line x1="8" y1="9" x2="12" y2="5"/></svg>',
  bank: svgns + 'class="icon icon-tabler icon-tabler-building-bank"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="3" y1="21" x2="21" y2="21"/><line x1="3" y1="10" x2="21" y2="10"/><polyline points="5 6 12 3 19 6"/><line x1="4" y1="10" x2="4" y2="21"/><line x1="20" y1="10" x2="20" y2="21"/><line x1="8" y1="14" x2="8" y2="17"/><line x1="12" y1="14" x2="12" y2="17"/><line x1="16" y1="14" x2="16" y2="17"/></svg>',
  basket: svgns + 'class="icon icon-tabler icon-tabler-basket"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><polyline points="7 10 12 4 17 10" /><path d="M21 10l-2 8a2 2.5 0 0 1 -2 2h-10a2 2.5 0 0 1 -2 -2l-2 -8z" /><circle cx="12" cy="15" r="2" /></svg>',
  bell: svgns + 'class="icon icon-tabler icon-tabler-bell"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 5a2 2 0 0 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6"/><path d="M9 17v1a3 3 0 0 0 6 0v-1"/></svg>',
  book: svgns + 'class="icon icon-tabler icon-tabler-book"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0"/><path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0"/><line x1="3" y1="6" x2="3" y2="19"/><line x1="12" y1="6" x2="12" y2="19"/><line x1="21" y1="6" x2="21" y2="19"/></svg>',
  bookmark: svgns + 'class="icon icon-tabler icon-tabler-bookmark"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 4h6a2 2 0 0 1 2 2v14l-5 -3l-5 3v-14a2 2 0 0 1 2 -2"/></svg>',
  calculator: svgns + 'class="icon icon-tabler icon-tabler-calculator"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="3" width="16" height="18" rx="2"/><rect x="8" y="7" width="8" height="3" rx="1"/><line x1="8" y1="14" x2="8" y2="14.01"/><line x1="12" y1="14" x2="12" y2="14.01"/><line x1="16" y1="14" x2="16" y2="14.01"/><line x1="8" y1="17" x2="8" y2="17.01"/><line x1="12" y1="17" x2="12" y2="17.01"/><line x1="16" y1="17" x2="16" y2="17.01"/></svg>',
  calendar: svgns + 'class="icon icon-tabler icon-tabler-calendar"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="5" width="16" height="16" rx="2"/><line x1="16" y1="3" x2="16" y2="7"/><line x1="8" y1="3" x2="8" y2="7"/><line x1="4" y1="11" x2="20" y2="11"/><line x1="11" y1="15" x2="12" y2="15"/><line x1="12" y1="15" x2="12" y2="18"/></svg>',
  chartLine: svgns + 'class="icon icon-tabler icon-tabler-line-chart"><path d="M1.66162313,21 L22,21 M1.66162313,21 L1.66162313,1 M4.38166815,17.7623829 L7.91691553,8.62488914 L12.6112769,11.5868912 L17.3056383,4.18188618 L20.9636681,7.82869207"></path></svg>',
  chartPie: svgns + 'class="icon icon-tabler icon-tabler-chart-pie"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 3.2a9 9 0 1 0 10.8 10.8a1 1 0 0 0 -1 -1h-6.8a2 2 0 0 1 -2 -2v-7a0.9 .9 0 0 0 -1 -.8"/><path d="M15 3.5a9 9 0 0 1 5.5 5.5h-4.5a1 1 0 0 1 -1 -1v-4.5"/></svg>',
  cash: svgns + 'class="icon icon-tabler icon-tabler-cash"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="7" y="9" width="14" height="10" rx="2"/><circle cx="14" cy="14" r="2"/><path d="M17 9v-2a2 2 0 0 0 -2 -2h-10a2 2 0 0 0 -2 2v6a2 2 0 0 0 2 2h2"/></svg>',
  cart: svgns + 'class="icon icon-tabler icon-tabler-shopping-cart"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="6" cy="19" r="2" /><circle cx="17" cy="19" r="2" /><path d="M17 17h-11v-14h-2" /><path d="M6 5l14 1l-1 7h-13" /></svg>',
  check: svgns + 'class="icon icon-tabler icon-tabler-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10"/></svg>',
  checkCircle: svgns + 'class="icon icon-tabler icon-tabler-circle-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" /><path d="M9 12l2 2l4 -4" /></svg>',
  checkboxChecked: svgns + 'class="icon icon-tabler icon-tabler-square-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="4" width="16" height="16" rx="2"/><path d="M9 12l2 2l4 -4"/></svg>',
  checkbox: svgns + 'class="icon icon-tabler icon-tabler-square"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="4" width="16" height="16" rx="2"/></svg>',
  checklist: svgns + 'class="icon icon-tabler icon-tabler-list-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3.5 5.5l1.5 1.5l2.5 -2.5"/><path d="M3.5 11.5l1.5 1.5l2.5 -2.5"/><path d="M3.5 17.5l1.5 1.5l2.5 -2.5"/><line x1="11" y1="6" x2="20" y2="6"/><line x1="11" y1="12" x2="20" y2="12"/><line x1="11" y1="18" x2="20" y2="18"/></svg>',
  chevronLeft: svgns + 'class="icon icon-tabler icon-tabler-chevron-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><polyline points="15 6 9 12 15 18"/></svg>',
  chevronRight: svgns + 'class="icon icon-tabler icon-tabler-chevron-right"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><polyline points="9 6 15 12 9 18"/></svg>',
  close: svgns + 'class="icon icon-tabler icon-tabler-x"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>',
  cog: svgns + 'class="icon icon-tabler icon-tabler-settings"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z"/><circle cx="12" cy="12" r="3"/></svg>',
  coin: svgns + 'class="icon icon-tabler icon-tabler-coin"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="9" /><path d="M14.8 9a2 2 0 0 0 -1.8 -1h-2a2 2 0 0 0 0 4h2a2 2 0 0 1 0 4h-2a2 2 0 0 1 -1.8 -1" /><path d="M12 6v2m0 8v2" /></svg>',
  copy: svgns + 'class="icon icon-tabler icon-tabler-copy"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="8" y="8" width="12" height="12" rx="2" /><path d="M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2" /></svg>',
  dots: svgns + 'class="icon icon-tabler icon-tabler-dots"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="5" cy="12" r="1"/><circle cx="12" cy="12" r="1"/><circle cx="19" cy="12" r="1"/></svg>',
  edit: svgns + 'class="icon icon-tabler icon-tabler-edit"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3"/><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3"/><line x1="16" y1="5" x2="19" y2="8"/></svg>',
  envelope: svgns + 'class="icon icon-tabler icon-tabler-mail"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="3" y="5" width="18" height="14" rx="2" /><polyline points="3 7 12 13 21 7" /></svg>',
  eye: svgns + 'class="icon icon-tabler icon-tabler-eye"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="2"/><path d="M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7"/></svg>',
  eyeOff: svgns + 'class="icon icon-tabler icon-tabler-eye-off"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="3" y1="3" x2="21" y2="21"/><path d="M10.584 10.587a2 2 0 0 0 2.828 2.83"/><path d="M9.363 5.365a9.466 9.466 0 0 1 2.637 -.365c4 0 7.333 2.333 10 7c-.778 1.361 -1.612 2.524 -2.503 3.488m-2.14 1.861c-1.631 1.1 -3.415 1.651 -5.357 1.651c-4 0 -7.333 -2.333 -10 -7c1.369 -2.395 2.913 -4.175 4.632 -5.341"/></svg>',
  error: svgns + 'class="icon icon-tabler icon-tabler-alert-circle"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="9"/><line x1="12" y1="8" x2="12" y2="12"/><line x1="12" y1="16" x2="12.01" y2="16"/></svg>',
  filter: svgns + 'class="icon icon-tabler icon-tabler-filter"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5.5 5h13a1 1 0 0 1 .5 1.5l-5 5.5l0 7l-4 -3l0 -4l-5 -5.5a1 1 0 0 1 .5 -1.5"/></svg>',
  folder: svgns + 'class="icon icon-tabler icon-tabler-folder"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 4h4l3 3h7a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-11a2 2 0 0 1 2 -2"/></svg>',
  help: svgns + 'class="icon icon-tabler icon-tabler-help"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="9"/><line x1="12" y1="17" x2="12" y2="17.01"/><path d="M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4"/></svg>',
  home: svgns + 'class="icon icon-tabler icon-tabler-home"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><polyline points="5 12 3 12 12 3 21 12 19 12"/><path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"/><path d="M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6"/></svg>',
  info: svgns + 'class="icon icon-tabler icon-tabler-info-circle"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="9"/><line x1="12" y1="8" x2="12.01" y2="8"/><polyline points="11 12 12 12 12 16 13 16"/></svg>',
  link: svgns + 'class="icon icon-tabler icon-tabler-link"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5"/><path d="M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5"/></svg>',
  list: svgns + 'class="icon icon-tabler icon-tabler-list"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="9" y1="6" x2="20" y2="6"/><line x1="9" y1="12" x2="20" y2="12"/><line x1="9" y1="18" x2="20" y2="18"/><line x1="5" y1="6" x2="5" y2="6.01"/><line x1="5" y1="12" x2="5" y2="12.01"/><line x1="5" y1="18" x2="5" y2="18.01"/></svg>',
  logout: svgns + 'class="icon icon-tabler icon-tabler-logout"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2"/><path d="M7 12h14l-3 -3m0 6l3 -3"/></svg>',
  math: svgns + 'class="icon icon-tabler icon-tabler-math-symbols"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="3" y1="12" x2="21" y2="12"/><line x1="12" y1="3" x2="12" y2="21"/><line x1="16.5" y1="4.5" x2="19.5" y2="7.5"/><line x1="19.5" y1="4.5" x2="16.5" y2="7.5"/><line x1="6" y1="4" x2="6" y2="8"/><line x1="4" y1="6" x2="8" y2="6"/><line x1="18" y1="16" x2="18.01" y2="16"/><line x1="18" y1="20" x2="18.01" y2="20"/><line x1="4" y1="18" x2="8" y2="18"/></svg>',
  meatballs: svgns + 'class="icon icon-tabler icon-tabler-dots-vertical"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="1"/><circle cx="12" cy="19" r="1"/><circle cx="12" cy="5" r="1"/></svg>',
  minuscircle: svgns + 'class="icon icon-tabler icon-tabler-circle-minus"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="9"/><line x1="9" y1="12" x2="15" y2="12"/></svg>',
  moon: svgns + 'class="icon icon-tabler icon-tabler-moon"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z" /></svg>',
  pluscircle: svgns + 'class="icon icon-tabler icon-tabler-circle-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="12" r="9"/><line x1="9" y1="12" x2="15" y2="12"/><line x1="12" y1="9" x2="12" y2="15"/></svg>',
  plus: svgns + 'class="icon icon-tabler icon-tabler-plus"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>',
  receipt: svgns + 'class="icon icon-tabler icon-tabler-receipt"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 21v-16a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v16l-3 -2l-2 2l-2 -2l-2 2l-2 -2l-3 2m4 -14h6m-6 4h6m-2 4h2"/></svg>',
  refresh: svgns + 'class="icon icon-tabler icon-tabler-refresh"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4"/><path d="M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"/></svg>',
  repeat: svgns + 'class="icon icon-tabler icon-tabler-repeat"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 12v-3a3 3 0 0 1 3 -3h13m-3 -3l3 3l-3 3"/><path d="M20 12v3a3 3 0 0 1 -3 3h-13m3 3l-3 -3l3 -3"/></svg>',
  reportAnalytics: svgns + 'class="icon icon-tabler icon-tabler-file-analytics"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 3v4a1 1 0 0 0 1 1h4"/><path d="M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z"/><line x1="9" y1="17" x2="9" y2="12"/><line x1="12" y1="17" x2="12" y2="16"/><line x1="15" y1="17" x2="15" y2="14"/></svg>',
  reportMoney: svgns + 'class="icon icon-tabler icon-tabler-report-money"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2"/><rect x="9" y="3" width="6" height="4" rx="2"/><path d="M14 11h-2.5a1.5 1.5 0 0 0 0 3h1a1.5 1.5 0 0 1 0 3h-2.5"/><path d="M12 17v1m0 -8v1"/></svg>',
  search: svgns + 'class="icon icon-tabler icon-tabler-search"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="10" cy="10" r="7"/><line x1="21" y1="21" x2="15" y2="15"/></svg>',
  sidebarLeft: svgns + 'class="icon icon-tabler icon-tabler-layout-sidebar"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="4" width="16" height="16" rx="2"/><line x1="9" y1="4" x2="9" y2="20"/></svg>',
  sidebarRight: svgns + 'class="icon icon-tabler icon-tabler-layout-sidebar-right"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="4" width="16" height="16" rx="2"/><line x1="15" y1="4" x2="15" y2="20"/></svg>',
  shared: svgns + 'class="icon icon-tabler icon-tabler-share"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="6" r="3"/><circle cx="18" cy="18" r="3"/><line x1="8.7" y1="10.7" x2="15.3" y2="7.3"/><line x1="8.7" y1="13.3" x2="15.3" y2="16.7"/></svg>',
  sortAsc: svgns + 'class="icon icon-tabler icon-tabler-sort-ascending"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="4" y1="6" x2="11" y2="6"/><line x1="4" y1="12" x2="11" y2="12"/><line x1="4" y1="18" x2="13" y2="18"/><polyline points="15 9 18 6 21 9"/><line x1="18" y1="6" x2="18" y2="18"/></svg>',
  sortDesc: svgns + 'class="icon icon-tabler icon-tabler-sort-descending"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="4" y1="6" x2="13" y2="6"/><line x1="4" y1="12" x2="11" y2="12"/><line x1="4" y1="18" x2="11" y2="18"/><polyline points="15 15 18 18 21 15"/><line x1="18" y1="6" x2="18" y2="18"/></svg>',
  split: svgns + 'class="icon icon-tabler icon-tabler-arrows-split-2"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M21 17h-5.397a5 5 0 0 1 -4.096 -2.133l-.514 -.734a5 5 0 0 0 -4.096 -2.133h-3.897"/><path d="M21 7h-5.395a5 5 0 0 0 -4.098 2.135l-.51 .73a5 5 0 0 1 -4.097 2.135h-3.9"/><path d="M18 10l3 -3l-3 -3"/><path d="M18 20l3 -3l-3 -3"/></svg>',
  sun: svgns + ' class="icon icon-tabler icon-tabler-brightness-up"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" /><path d="M12 5l0 -2" /><path d="M17 7l1.4 -1.4" /><path d="M19 12l2 0" /><path d="M17 17l1.4 1.4" /><path d="M12 19l0 2" /><path d="M7 17l-1.4 1.4" /><path d="M6 12l-2 0" /><path d="M7 7l-1.4 -1.4" /></svg>',
  tag: svgns + 'class="icon icon-tabler icon-tabler-tag"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M11 3l9 9a1.5 1.5 0 0 1 0 2l-6 6a1.5 1.5 0 0 1 -2 0l-9 -9v-4a4 4 0 0 1 4 -4h4"/><circle cx="9" cy="9" r="2"/></svg>',
  trash: svgns + 'class="icon icon-tabler icon-tabler-trash"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="4" y1="7" x2="20" y2="7"/><line x1="10" y1="11" x2="10" y2="17"/><line x1="14" y1="11" x2="14" y2="17"/><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"/><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"/></svg>',
  user: svgns + 'class="icon icon-tabler icon-tabler-user"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="7" r="4"/><path d="M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"/></svg>',
  users: svgns + 'class="icon icon-tabler icon-tabler-users"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="9" cy="7" r="4"/><path d="M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/><path d="M21 21v-2a4 4 0 0 0 -3 -3.85"/></svg>',
  undo: svgns + 'class="icon icon-tabler icon-tabler-corner-up-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M18 18v-6a3 3 0 0 0 -3 -3h-10l4 -4m0 8l-4 -4" /></svg>',
  redo: svgns + 'class="icon icon-tabler icon-tabler-corner-up-right"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 18v-6a3 3 0 0 1 3 -3h10l-4 -4m0 8l4 -4" /></svg>'
};
function addIcon(name2, svg) {
  if (!icons[name2])
    icons[name2] = svg;
}

// src/icon/Icon.svelte
function create_fragment(ctx) {
  let html_tag;
  let html_anchor;
  const block = {
    c: function create() {
      html_tag = new import_internal.HtmlTag(false);
      html_anchor = (0, import_internal.empty)();
      html_tag.a = html_anchor;
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      html_tag.m(
        /*svg*/
        ctx[0],
        target,
        anchor
      );
      (0, import_internal.insert_dev)(target, html_anchor, anchor);
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*svg*/
      1)
        html_tag.p(
          /*svg*/
          ctx2[0]
        );
    },
    i: import_internal.noop,
    o: import_internal.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal.detach_dev)(html_anchor);
      if (detaching)
        html_tag.d();
    }
  };
  (0, import_internal.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self2, $$props2, $$invalidate2) {
  let svg;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal.validate_slots)("Icon", slots2, []);
  let { name: name2 = "" } = $$props2;
  const aliases = {
    add: "plus",
    report: "reportAnalytics",
    success: "checkCircle",
    warning: "alert"
  };
  function findIcon(_name) {
    if (_name in aliases)
      _name = aliases[_name];
    if (_name in icons)
      return icons[_name];
    return `<svg width="20" height="20" title="${_name}"></svg>`;
  }
  const writable_props = ["name"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Icon> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("name" in $$props3)
      $$invalidate2(1, name2 = $$props3.name);
  };
  $$self2.$capture_state = () => ({ icons, name: name2, aliases, findIcon, svg });
  $$self2.$inject_state = ($$props3) => {
    if ("name" in $$props3)
      $$invalidate2(1, name2 = $$props3.name);
    if ("svg" in $$props3)
      $$invalidate2(0, svg = $$props3.svg);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*name*/
    2) {
      $:
        $$invalidate2(0, svg = findIcon(name2));
    }
  };
  return [svg, name2];
}
var Icon = class extends import_internal.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal.init)(this, options, instance, create_fragment, import_internal.safe_not_equal, { name: 1 });
    (0, import_internal.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Icon",
      options,
      id: create_fragment.name
    });
  }
  get name() {
    throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Icon_default = Icon;

// src/utils.js
var import_store = __toESM(require_store());
var ANIMATION_SPEED = (0, import_store.writable)(300);
var PREFERS_DARK = (0, import_store.writable)(false);
var setReducedMotion = (query) => ANIMATION_SPEED.set(!query || query.matches ? 0 : 200);
var setPrefersDark = (query) => PREFERS_DARK.set(query && query.matches);
if (window.matchMedia) {
  const reducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
  setReducedMotion(reducedMotion);
  reducedMotion.addEventListener("change", setReducedMotion);
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");
  setPrefersDark(prefersDark);
  prefersDark.addEventListener("change", setPrefersDark);
}
function animate(el, from, to, _options = {}) {
  const dflt = { duration: (0, import_store.get)(ANIMATION_SPEED), easing: "ease-out", fill: "forwards" };
  const opts = Object.assign({}, dflt, _options);
  return new Promise((resolve) => {
    requestAnimationFrame(() => {
      const anim = el.animate([from, to], opts);
      anim.oncancel = resolve;
      anim.onfinish = resolve;
    });
  });
}
function pluckOne(obj, key) {
  if (key in obj)
    return obj[key];
  for (const k in obj) {
    if (k.startsWith(key))
      return obj[k];
  }
}
function pluckMany(obj, keys) {
  const newObj = {};
  keys.forEach((key) => {
    if (key in obj)
      newObj[key] = obj[key];
    else {
      for (const k in obj) {
        if (k.startsWith(key))
          newObj[k] = obj[k];
      }
    }
  });
  return newObj;
}
function pluck(obj, keys) {
  if (!obj)
    return {};
  if (!Array.isArray(keys))
    return pluckOne(obj, keys);
  return pluckMany(obj, keys);
}
var FOCUSABLE_SELECTOR = "a[href]:not([disabled]),button:not([disabled]),iframe:not([disabled]),input:not([disabled]),select:not([disabled]),textarea:not([disabled]),[contentEditable],[tabindex]:not(.focus-trap)";
function getMouseX(e) {
  return e.type.includes("touch") ? e.touches[0].clientX : e.clientX;
}
function getMouseY(e) {
  return e.type.includes("touch") ? e.touches[0].clientY : e.clientY;
}
function getFlexFlow(el) {
  const css = getComputedStyle(el);
  return css.flexDirection.replace("-reverse", "");
}
function getCSSvalueInPx(el, name2) {
  const css = getComputedStyle(el);
  return parseFloat(css[name2]);
}
var minWidth = (el) => getCSSvalueInPx(el, "minWidth");
var minHeight = (el) => getCSSvalueInPx(el, "minHeight");
var maxWidth = (el) => getCSSvalueInPx(el, "maxWidth");
var maxHeight = (el) => getCSSvalueInPx(el, "maxHeight");
function innerWidth(el) {
  const css = getComputedStyle(el);
  const borders = parseFloat(css.borderLeftWidth) + parseFloat(css.borderRightWidth);
  const padding = parseFloat(css.paddingLeft) + parseFloat(css.paddingRight);
  return el.getBoundingClientRect().width - borders - padding;
}
function innerHeight(el) {
  const css = getComputedStyle(el);
  const borders = parseFloat(css.borderTopWidth) + parseFloat(css.borderBottomWidth);
  const padding = parseFloat(css.paddingTop) + parseFloat(css.paddingBottom);
  return el.getBoundingClientRect().height - borders - padding;
}
function guid() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function roundAmount(val, precision = 2) {
  const multiplier = Math.pow(10, precision);
  return Math.round(val * multiplier) / multiplier;
}
function blink(el, duration2 = 160) {
  return animate(
    el,
    { opacity: 1 },
    { opacity: 0.5 },
    { duration: duration2 / 2, fill: "backwards" }
  );
}
function timeAgo(date, now) {
  console.log(now);
  if (!date || !now)
    return "";
  now = now || (/* @__PURE__ */ new Date()).getTime();
  let seconds = (now - +date) / 1e3;
  const intervals = [
    { label: "year", seconds: 31536e3 },
    { label: "month", seconds: 2592e3 },
    { label: "day", seconds: 86400 },
    { label: "hour", seconds: 3600 },
    { label: "minute", seconds: 60 }
  ];
  const chunks = [];
  while (seconds > 60) {
    const interval = intervals.find((i) => i.seconds < seconds) || { seconds: 0, label: "" };
    const count = Math.floor(seconds / (interval.seconds || seconds));
    chunks.push(`${count} ${interval.label}${count !== 1 ? "s" : ""}`);
    seconds -= count * (interval.seconds || seconds);
  }
  if (!chunks.length)
    return "just now";
  if (chunks.length === 1)
    return chunks[0] + " ago";
  const [d, t] = new Date(date).toISOString().split("T");
  return `${d} ${t.slice(0, 5)}`;
}

// src/button/Button.svelte
var file = "src/button/Button.svelte";
function create_if_block(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon_default({
    props: { name: (
      /*icon*/
      ctx[10]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal2.create_component)(icon_1.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal2.mount_component)(icon_1, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*icon*/
      1024)
        icon_1_changes.name = /*icon*/
        ctx2[10];
      icon_1.$set(icon_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal2.transition_in)(icon_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal2.transition_out)(icon_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal2.destroy_component)(icon_1, detaching);
    }
  };
  (0, import_internal2.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(27:1) {#if icon}",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let button;
  let t;
  let button_type_value;
  let button_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*icon*/
    ctx[10] && create_if_block(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = (0, import_internal2.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    null
  );
  let button_levels = [
    {
      type: button_type_value = /*submit*/
      ctx[6] ? "submit" : "button"
    },
    {
      class: button_class_value = "button " + /*className*/
      ctx[12]
    },
    /*props*/
    ctx[14]
  ];
  let button_data = {};
  for (let i = 0; i < button_levels.length; i += 1) {
    button_data = (0, import_internal2.assign)(button_data, button_levels[i]);
  }
  const block = {
    c: function create() {
      button = (0, import_internal2.element)("button");
      if (if_block)
        if_block.c();
      t = (0, import_internal2.space)();
      if (default_slot)
        default_slot.c();
      (0, import_internal2.set_attributes)(button, button_data);
      (0, import_internal2.toggle_class)(button, "button-normal", !/*link*/
      ctx[8] && !/*text*/
      ctx[9] && !/*outline*/
      ctx[7]);
      (0, import_internal2.toggle_class)(
        button,
        "button-outline",
        /*outline*/
        ctx[7]
      );
      (0, import_internal2.toggle_class)(
        button,
        "button-link",
        /*link*/
        ctx[8]
      );
      (0, import_internal2.toggle_class)(
        button,
        "button-text",
        /*text*/
        ctx[9]
      );
      (0, import_internal2.toggle_class)(
        button,
        "button-has-text",
        /*$$slots*/
        ctx[15].default
      );
      (0, import_internal2.toggle_class)(
        button,
        "round",
        /*round*/
        ctx[11]
      );
      (0, import_internal2.toggle_class)(
        button,
        "info",
        /*info*/
        ctx[1]
      );
      (0, import_internal2.toggle_class)(
        button,
        "success",
        /*success*/
        ctx[2]
      );
      (0, import_internal2.toggle_class)(
        button,
        "warning",
        /*warning*/
        ctx[3]
      );
      (0, import_internal2.toggle_class)(
        button,
        "danger",
        /*danger*/
        ctx[4]
      );
      (0, import_internal2.toggle_class)(
        button,
        "error",
        /*error*/
        ctx[5]
      );
      (0, import_internal2.toggle_class)(
        button,
        "touching",
        /*touching*/
        ctx[13]
      );
      (0, import_internal2.add_location)(button, file, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal2.insert_dev)(target, button, anchor);
      if (if_block)
        if_block.m(button, null);
      (0, import_internal2.append_dev)(button, t);
      if (default_slot) {
        default_slot.m(button, null);
      }
      if (button.autofocus)
        button.focus();
      ctx[22](button);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal2.listen_dev)(
            button,
            "focus",
            /*focus_handler*/
            ctx[18],
            false,
            false,
            false,
            false
          ),
          (0, import_internal2.listen_dev)(
            button,
            "keydown",
            /*keydown_handler*/
            ctx[19],
            false,
            false,
            false,
            false
          ),
          (0, import_internal2.listen_dev)(
            button,
            "mousedown",
            /*mousedown_handler*/
            ctx[20],
            false,
            false,
            false,
            false
          ),
          (0, import_internal2.listen_dev)(
            button,
            "touchstart",
            /*touchstart_handler*/
            ctx[23],
            { passive: true },
            false,
            false,
            false
          ),
          (0, import_internal2.listen_dev)(
            button,
            "touchend",
            /*touchend_handler*/
            ctx[24],
            { passive: true },
            false,
            false,
            false
          ),
          (0, import_internal2.listen_dev)(
            button,
            "click",
            /*click_handler*/
            ctx[21],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[10]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*icon*/
          1024) {
            (0, import_internal2.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          (0, import_internal2.transition_in)(if_block, 1);
          if_block.m(button, t);
        }
      } else if (if_block) {
        (0, import_internal2.group_outros)();
        (0, import_internal2.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal2.check_outros)();
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          (0, import_internal2.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? (0, import_internal2.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[16]
            ) : (0, import_internal2.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              null
            ),
            null
          );
        }
      }
      (0, import_internal2.set_attributes)(button, button_data = (0, import_internal2.get_spread_update)(button_levels, [
        (!current || dirty & /*submit*/
        64 && button_type_value !== (button_type_value = /*submit*/
        ctx2[6] ? "submit" : "button")) && { type: button_type_value },
        (!current || dirty & /*className*/
        4096 && button_class_value !== (button_class_value = "button " + /*className*/
        ctx2[12])) && { class: button_class_value },
        dirty & /*props*/
        16384 && /*props*/
        ctx2[14]
      ]));
      (0, import_internal2.toggle_class)(button, "button-normal", !/*link*/
      ctx2[8] && !/*text*/
      ctx2[9] && !/*outline*/
      ctx2[7]);
      (0, import_internal2.toggle_class)(
        button,
        "button-outline",
        /*outline*/
        ctx2[7]
      );
      (0, import_internal2.toggle_class)(
        button,
        "button-link",
        /*link*/
        ctx2[8]
      );
      (0, import_internal2.toggle_class)(
        button,
        "button-text",
        /*text*/
        ctx2[9]
      );
      (0, import_internal2.toggle_class)(
        button,
        "button-has-text",
        /*$$slots*/
        ctx2[15].default
      );
      (0, import_internal2.toggle_class)(
        button,
        "round",
        /*round*/
        ctx2[11]
      );
      (0, import_internal2.toggle_class)(
        button,
        "info",
        /*info*/
        ctx2[1]
      );
      (0, import_internal2.toggle_class)(
        button,
        "success",
        /*success*/
        ctx2[2]
      );
      (0, import_internal2.toggle_class)(
        button,
        "warning",
        /*warning*/
        ctx2[3]
      );
      (0, import_internal2.toggle_class)(
        button,
        "danger",
        /*danger*/
        ctx2[4]
      );
      (0, import_internal2.toggle_class)(
        button,
        "error",
        /*error*/
        ctx2[5]
      );
      (0, import_internal2.toggle_class)(
        button,
        "touching",
        /*touching*/
        ctx2[13]
      );
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal2.transition_in)(if_block);
      (0, import_internal2.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal2.transition_out)(if_block);
      (0, import_internal2.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal2.detach_dev)(button);
      if (if_block)
        if_block.d();
      if (default_slot)
        default_slot.d(detaching);
      ctx[22](null);
      mounted = false;
      (0, import_internal2.run_all)(dispose);
    }
  };
  (0, import_internal2.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self2, $$props2, $$invalidate2) {
  let props2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal2.validate_slots)("Button", slots2, ["default"]);
  const $$slots = (0, import_internal2.compute_slots)(slots2);
  let { element: element41 = void 0 } = $$props2;
  let { info: info2 = false } = $$props2;
  let { success = false } = $$props2;
  let { warning = false } = $$props2;
  let { danger = false } = $$props2;
  let { error: error2 = false } = $$props2;
  let { submit = false } = $$props2;
  let { outline = false } = $$props2;
  let { link = false } = $$props2;
  let { text: text40 = false } = $$props2;
  let { icon = void 0 } = $$props2;
  let { round = void 0 } = $$props2;
  let { class: className2 = "" } = $$props2;
  let touching = false;
  function focus_handler2(event2) {
    import_internal2.bubble.call(this, $$self2, event2);
  }
  function keydown_handler(event2) {
    import_internal2.bubble.call(this, $$self2, event2);
  }
  function mousedown_handler(event2) {
    import_internal2.bubble.call(this, $$self2, event2);
  }
  function click_handler(event2) {
    import_internal2.bubble.call(this, $$self2, event2);
  }
  function button_binding($$value) {
    import_internal2.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  const touchstart_handler = () => $$invalidate2(13, touching = true);
  const touchend_handler = () => $$invalidate2(13, touching = false);
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(25, $$props2 = (0, import_internal2.assign)((0, import_internal2.assign)({}, $$props2), (0, import_internal2.exclude_internal_props)($$new_props)));
    if ("element" in $$new_props)
      $$invalidate2(0, element41 = $$new_props.element);
    if ("info" in $$new_props)
      $$invalidate2(1, info2 = $$new_props.info);
    if ("success" in $$new_props)
      $$invalidate2(2, success = $$new_props.success);
    if ("warning" in $$new_props)
      $$invalidate2(3, warning = $$new_props.warning);
    if ("danger" in $$new_props)
      $$invalidate2(4, danger = $$new_props.danger);
    if ("error" in $$new_props)
      $$invalidate2(5, error2 = $$new_props.error);
    if ("submit" in $$new_props)
      $$invalidate2(6, submit = $$new_props.submit);
    if ("outline" in $$new_props)
      $$invalidate2(7, outline = $$new_props.outline);
    if ("link" in $$new_props)
      $$invalidate2(8, link = $$new_props.link);
    if ("text" in $$new_props)
      $$invalidate2(9, text40 = $$new_props.text);
    if ("icon" in $$new_props)
      $$invalidate2(10, icon = $$new_props.icon);
    if ("round" in $$new_props)
      $$invalidate2(11, round = $$new_props.round);
    if ("class" in $$new_props)
      $$invalidate2(12, className2 = $$new_props.class);
    if ("$$scope" in $$new_props)
      $$invalidate2(16, $$scope2 = $$new_props.$$scope);
  };
  $$self2.$capture_state = () => ({
    Icon: Icon_default,
    pluck,
    element: element41,
    info: info2,
    success,
    warning,
    danger,
    error: error2,
    submit,
    outline,
    link,
    text: text40,
    icon,
    round,
    className: className2,
    touching,
    props: props2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(25, $$props2 = (0, import_internal2.assign)((0, import_internal2.assign)({}, $$props2), $$new_props));
    if ("element" in $$props2)
      $$invalidate2(0, element41 = $$new_props.element);
    if ("info" in $$props2)
      $$invalidate2(1, info2 = $$new_props.info);
    if ("success" in $$props2)
      $$invalidate2(2, success = $$new_props.success);
    if ("warning" in $$props2)
      $$invalidate2(3, warning = $$new_props.warning);
    if ("danger" in $$props2)
      $$invalidate2(4, danger = $$new_props.danger);
    if ("error" in $$props2)
      $$invalidate2(5, error2 = $$new_props.error);
    if ("submit" in $$props2)
      $$invalidate2(6, submit = $$new_props.submit);
    if ("outline" in $$props2)
      $$invalidate2(7, outline = $$new_props.outline);
    if ("link" in $$props2)
      $$invalidate2(8, link = $$new_props.link);
    if ("text" in $$props2)
      $$invalidate2(9, text40 = $$new_props.text);
    if ("icon" in $$props2)
      $$invalidate2(10, icon = $$new_props.icon);
    if ("round" in $$props2)
      $$invalidate2(11, round = $$new_props.round);
    if ("className" in $$props2)
      $$invalidate2(12, className2 = $$new_props.className);
    if ("touching" in $$props2)
      $$invalidate2(13, touching = $$new_props.touching);
    if ("props" in $$props2)
      $$invalidate2(14, props2 = $$new_props.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(14, props2 = pluck($$props2, ["id", "title", "disabled", "form", "aria-pressed", "data-"]));
  };
  $$props2 = (0, import_internal2.exclude_internal_props)($$props2);
  return [
    element41,
    info2,
    success,
    warning,
    danger,
    error2,
    submit,
    outline,
    link,
    text40,
    icon,
    round,
    className2,
    touching,
    props2,
    $$slots,
    $$scope2,
    slots2,
    focus_handler2,
    keydown_handler,
    mousedown_handler,
    click_handler,
    button_binding,
    touchstart_handler,
    touchend_handler
  ];
}
var Button = class extends import_internal2.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal2.init)(this, options, instance2, create_fragment2, import_internal2.safe_not_equal, {
      element: 0,
      info: 1,
      success: 2,
      warning: 3,
      danger: 4,
      error: 5,
      submit: 6,
      outline: 7,
      link: 8,
      text: 9,
      icon: 10,
      round: 11,
      class: 12
    });
    (0, import_internal2.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Button",
      options,
      id: create_fragment2.name
    });
  }
  get element() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get success() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set success(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get warning() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set warning(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get danger() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set danger(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get submit() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set submit(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get outline() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set outline(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get link() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set link(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get text() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get icon() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set icon(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Button_default = Button;

// src/button-group/ButtonGroup.svelte
var import_internal3 = __toESM(require_internal());
var file2 = "src/button-group/ButtonGroup.svelte";
function create_fragment3(ctx) {
  let div2;
  let div1;
  let div0;
  let div2_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = (0, import_internal3.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  const block = {
    c: function create() {
      div2 = (0, import_internal3.element)("div");
      div1 = (0, import_internal3.element)("div");
      div0 = (0, import_internal3.element)("div");
      if (default_slot)
        default_slot.c();
      (0, import_internal3.attr_dev)(div0, "class", "button-group-inner");
      (0, import_internal3.attr_dev)(div0, "role", "group");
      (0, import_internal3.add_location)(div0, file2, 2, 2, 112);
      (0, import_internal3.attr_dev)(div1, "class", "button-group-scroller");
      (0, import_internal3.add_location)(div1, file2, 1, 1, 74);
      (0, import_internal3.attr_dev)(div2, "class", div2_class_value = "button-group " + /*className*/
      ctx[1]);
      (0, import_internal3.toggle_class)(
        div2,
        "round",
        /*round*/
        ctx[2]
      );
      (0, import_internal3.add_location)(div2, file2, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal3.insert_dev)(target, div2, anchor);
      (0, import_internal3.append_dev)(div2, div1);
      (0, import_internal3.append_dev)(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      ctx[5](div2);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          (0, import_internal3.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? (0, import_internal3.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[3]
            ) : (0, import_internal3.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div2_class_value !== (div2_class_value = "button-group " + /*className*/
      ctx2[1])) {
        (0, import_internal3.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*className, round*/
      6) {
        (0, import_internal3.toggle_class)(
          div2,
          "round",
          /*round*/
          ctx2[2]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal3.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal3.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal3.detach_dev)(div2);
      if (default_slot)
        default_slot.d(detaching);
      ctx[5](null);
    }
  };
  (0, import_internal3.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal3.validate_slots)("ButtonGroup", slots2, ["default"]);
  let { class: className2 = "" } = $$props2;
  let { round = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const writable_props = ["class", "round", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ButtonGroup> was created with unknown prop '${key}'`);
  });
  function div2_binding2($$value) {
    import_internal3.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("round" in $$props3)
      $$invalidate2(2, round = $$props3.round);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("$$scope" in $$props3)
      $$invalidate2(3, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({ className: className2, round, element: element41 });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("round" in $$props3)
      $$invalidate2(2, round = $$props3.round);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, round, $$scope2, slots2, div2_binding2];
}
var ButtonGroup = class extends import_internal3.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal3.init)(this, options, instance3, create_fragment3, import_internal3.safe_not_equal, { class: 1, round: 2, element: 0 });
    (0, import_internal3.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ButtonGroup",
      options,
      id: create_fragment3.name
    });
  }
  get class() {
    throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<ButtonGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<ButtonGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ButtonGroup_default = ButtonGroup;

// src/dialog/Dialog.svelte
var import_internal4 = __toESM(require_internal());
var import_svelte = __toESM(require_svelte());
var file3 = "src/dialog/Dialog.svelte";
var get_footer_slot_changes = (dirty) => ({});
var get_footer_slot_context = (ctx) => ({});
function create_fragment4(ctx) {
  let div5;
  let div4;
  let div0;
  let t0;
  let h1;
  let t1;
  let t2;
  let div1;
  let t3;
  let div2;
  let t4;
  let div3;
  let div5_class_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = (0, import_internal4.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    null
  );
  const footer_slot_template = (
    /*#slots*/
    ctx[14].footer
  );
  const footer_slot = (0, import_internal4.create_slot)(
    footer_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    get_footer_slot_context
  );
  const block = {
    c: function create() {
      div5 = (0, import_internal4.element)("div");
      div4 = (0, import_internal4.element)("div");
      div0 = (0, import_internal4.element)("div");
      t0 = (0, import_internal4.space)();
      h1 = (0, import_internal4.element)("h1");
      t1 = (0, import_internal4.text)(
        /*title*/
        ctx[3]
      );
      t2 = (0, import_internal4.space)();
      div1 = (0, import_internal4.element)("div");
      if (default_slot)
        default_slot.c();
      t3 = (0, import_internal4.space)();
      div2 = (0, import_internal4.element)("div");
      if (footer_slot)
        footer_slot.c();
      t4 = (0, import_internal4.space)();
      div3 = (0, import_internal4.element)("div");
      (0, import_internal4.attr_dev)(div0, "tabindex", "0");
      (0, import_internal4.attr_dev)(div0, "class", "focus-trap focus-trap-top");
      (0, import_internal4.add_location)(div0, file3, 11, 2, 325);
      (0, import_internal4.attr_dev)(h1, "class", "dialog-header");
      (0, import_internal4.add_location)(h1, file3, 12, 2, 409);
      (0, import_internal4.attr_dev)(div1, "class", "dialog-content");
      (0, import_internal4.add_location)(div1, file3, 13, 2, 450);
      (0, import_internal4.attr_dev)(div2, "class", "dialog-footer");
      (0, import_internal4.add_location)(div2, file3, 14, 2, 518);
      (0, import_internal4.attr_dev)(div3, "tabindex", "0");
      (0, import_internal4.attr_dev)(div3, "class", "focus-trap focus-trap-bottom");
      (0, import_internal4.add_location)(div3, file3, 15, 2, 598);
      (0, import_internal4.attr_dev)(div4, "class", "dialog");
      (0, import_internal4.add_location)(div4, file3, 10, 1, 279);
      (0, import_internal4.attr_dev)(div5, "role", "dialog");
      (0, import_internal4.attr_dev)(div5, "aria-modal", "true");
      (0, import_internal4.attr_dev)(
        div5,
        "aria-label",
        /*title*/
        ctx[3]
      );
      (0, import_internal4.attr_dev)(div5, "class", div5_class_value = "dialog-backdrop " + /*className*/
      ctx[2]);
      (0, import_internal4.toggle_class)(
        div5,
        "opened",
        /*opened*/
        ctx[0]
      );
      (0, import_internal4.add_location)(div5, file3, 2, 0, 112);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal4.insert_dev)(target, div5, anchor);
      (0, import_internal4.append_dev)(div5, div4);
      (0, import_internal4.append_dev)(div4, div0);
      (0, import_internal4.append_dev)(div4, t0);
      (0, import_internal4.append_dev)(div4, h1);
      (0, import_internal4.append_dev)(h1, t1);
      (0, import_internal4.append_dev)(div4, t2);
      (0, import_internal4.append_dev)(div4, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      ctx[15](div1);
      (0, import_internal4.append_dev)(div4, t3);
      (0, import_internal4.append_dev)(div4, div2);
      if (footer_slot) {
        footer_slot.m(div2, null);
      }
      ctx[16](div2);
      (0, import_internal4.append_dev)(div4, t4);
      (0, import_internal4.append_dev)(div4, div3);
      ctx[17](div4);
      ctx[18](div5);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal4.listen_dev)(
            div0,
            "focus",
            /*focusLast*/
            ctx[8],
            false,
            false,
            false,
            false
          ),
          (0, import_internal4.listen_dev)(
            div3,
            "focus",
            /*focusFirst*/
            ctx[7],
            false,
            false,
            false,
            false
          ),
          (0, import_internal4.listen_dev)(
            div5,
            "click",
            /*onBackdropClick*/
            ctx[9],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (!current || dirty & /*title*/
      8)
        (0, import_internal4.set_data_dev)(
          t1,
          /*title*/
          ctx2[3]
        );
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          (0, import_internal4.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? (0, import_internal4.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[13]
            ) : (0, import_internal4.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (footer_slot) {
        if (footer_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          (0, import_internal4.update_slot_base)(
            footer_slot,
            footer_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? (0, import_internal4.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[13]
            ) : (0, import_internal4.get_slot_changes)(
              footer_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              get_footer_slot_changes
            ),
            get_footer_slot_context
          );
        }
      }
      if (!current || dirty & /*title*/
      8) {
        (0, import_internal4.attr_dev)(
          div5,
          "aria-label",
          /*title*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*className*/
      4 && div5_class_value !== (div5_class_value = "dialog-backdrop " + /*className*/
      ctx2[2])) {
        (0, import_internal4.attr_dev)(div5, "class", div5_class_value);
      }
      if (!current || dirty & /*className, opened*/
      5) {
        (0, import_internal4.toggle_class)(
          div5,
          "opened",
          /*opened*/
          ctx2[0]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal4.transition_in)(default_slot, local);
      (0, import_internal4.transition_in)(footer_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal4.transition_out)(default_slot, local);
      (0, import_internal4.transition_out)(footer_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal4.detach_dev)(div5);
      if (default_slot)
        default_slot.d(detaching);
      ctx[15](null);
      if (footer_slot)
        footer_slot.d(detaching);
      ctx[16](null);
      ctx[17](null);
      ctx[18](null);
      mounted = false;
      (0, import_internal4.run_all)(dispose);
    }
  };
  (0, import_internal4.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function focusOtherButton(target, key) {
  const btnMap = {
    ArrowLeft: "nextElementSibling",
    ArrowRight: "previousElementSibling"
  };
  const otherBtn = btnMap[key] && target[btnMap[key]];
  if (otherBtn && otherBtn.tagName === "BUTTON")
    otherBtn.focus();
}
function instance4($$self2, $$props2, $$invalidate2) {
  let $ANIMATION_SPEED;
  (0, import_internal4.validate_store)(ANIMATION_SPEED, "ANIMATION_SPEED");
  (0, import_internal4.component_subscribe)($$self2, ANIMATION_SPEED, ($$value) => $$invalidate2(22, $ANIMATION_SPEED = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal4.validate_slots)("Dialog", slots2, ["default", "footer"]);
  let { class: className2 = "" } = $$props2;
  let { title = "" } = $$props2;
  let { opened = false } = $$props2;
  let { skipFirstFocus = false } = $$props2;
  let { element: element41 } = $$props2;
  const dispatch2 = (0, import_svelte.createEventDispatcher)();
  let dialogEl, contentEl, footerEl, triggerEl, openTimer, closeTimer;
  (0, import_svelte.onMount)(() => {
    document.body.appendChild(element41);
  });
  function focusFirst() {
    let first = getFocusableElements().shift();
    const last = getFocusableElements().pop();
    if (!first && !last) {
      contentEl.setAttribute("tabindex", 0);
      first = contentEl;
    }
    if (last)
      last.scrollIntoView({ block: "end" });
    if (first)
      first.focus();
  }
  function focusLast() {
    const first = getFocusableElements().shift();
    let last = getFocusableElements().pop();
    if (!first && !last) {
      contentEl.setAttribute("tabindex", 0);
      last = contentEl;
    }
    if (first)
      first.scrollIntoView({ block: "end" });
    if (last)
      last.focus();
  }
  function getFocusableElements() {
    const contentElements = Array.from(contentEl.querySelectorAll(FOCUSABLE_SELECTOR));
    const footerElements = Array.from(footerEl.querySelectorAll(FOCUSABLE_SELECTOR));
    return [...contentElements, ...footerElements];
  }
  function onBackdropClick(e) {
    if (!dialogEl.contains(e.target)) {
      e.stopPropagation();
      close();
    }
  }
  function onDocKeydown(e) {
    if (!opened)
      return;
    const hasFocus = element41.contains(document.activeElement);
    if (e.key === "Tab" && !hasFocus)
      return focusFirst();
    if (e.key === "Escape") {
      e.stopPropagation();
      return close();
    }
    const target = e.target && e.target.closest("button");
    if (target && e.key.startsWith("Arrow")) {
      e.preventDefault();
      focusOtherButton(target, e.key);
    }
  }
  function open(openedBy) {
    if (opened)
      return;
    triggerEl = openedBy || document.activeElement;
    $$invalidate2(1, element41.style.display = "flex", element41);
    if (openTimer)
      clearTimeout(openTimer);
    openTimer = setTimeout(
      () => {
        $$invalidate2(0, opened = true);
        $$invalidate2(1, element41.style.display = "flex", element41);
        if (skipFirstFocus !== true && skipFirstFocus !== "true")
          focusFirst();
        document.addEventListener("keydown", onDocKeydown);
        dispatch2("open");
      },
      100
    );
  }
  function close() {
    if (!opened)
      return;
    $$invalidate2(0, opened = false);
    if (triggerEl && triggerEl.focus)
      triggerEl.focus();
    if (closeTimer)
      clearTimeout(closeTimer);
    closeTimer = setTimeout(
      () => {
        $$invalidate2(0, opened = false);
        $$invalidate2(1, element41.style.display = "none", element41);
        document.removeEventListener("keydown", onDocKeydown);
        dispatch2("close");
      },
      $ANIMATION_SPEED
    );
  }
  $$self2.$$.on_mount.push(function() {
    if (element41 === void 0 && !("element" in $$props2 || $$self2.$$.bound[$$self2.$$.props["element"]])) {
      console.warn("<Dialog> was created without expected prop 'element'");
    }
  });
  const writable_props = ["class", "title", "opened", "skipFirstFocus", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Dialog> was created with unknown prop '${key}'`);
  });
  function div1_binding($$value) {
    import_internal4.binding_callbacks[$$value ? "unshift" : "push"](() => {
      contentEl = $$value;
      $$invalidate2(5, contentEl);
    });
  }
  function div2_binding2($$value) {
    import_internal4.binding_callbacks[$$value ? "unshift" : "push"](() => {
      footerEl = $$value;
      $$invalidate2(6, footerEl);
    });
  }
  function div4_binding($$value) {
    import_internal4.binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialogEl = $$value;
      $$invalidate2(4, dialogEl);
    });
  }
  function div5_binding($$value) {
    import_internal4.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(2, className2 = $$props3.class);
    if ("title" in $$props3)
      $$invalidate2(3, title = $$props3.title);
    if ("opened" in $$props3)
      $$invalidate2(0, opened = $$props3.opened);
    if ("skipFirstFocus" in $$props3)
      $$invalidate2(10, skipFirstFocus = $$props3.skipFirstFocus);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("$$scope" in $$props3)
      $$invalidate2(13, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte.createEventDispatcher,
    onMount: import_svelte.onMount,
    ANIMATION_SPEED,
    FOCUSABLE_SELECTOR,
    className: className2,
    title,
    opened,
    skipFirstFocus,
    element: element41,
    dispatch: dispatch2,
    dialogEl,
    contentEl,
    footerEl,
    triggerEl,
    openTimer,
    closeTimer,
    focusFirst,
    focusLast,
    getFocusableElements,
    onBackdropClick,
    focusOtherButton,
    onDocKeydown,
    open,
    close,
    $ANIMATION_SPEED
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(2, className2 = $$props3.className);
    if ("title" in $$props3)
      $$invalidate2(3, title = $$props3.title);
    if ("opened" in $$props3)
      $$invalidate2(0, opened = $$props3.opened);
    if ("skipFirstFocus" in $$props3)
      $$invalidate2(10, skipFirstFocus = $$props3.skipFirstFocus);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("dialogEl" in $$props3)
      $$invalidate2(4, dialogEl = $$props3.dialogEl);
    if ("contentEl" in $$props3)
      $$invalidate2(5, contentEl = $$props3.contentEl);
    if ("footerEl" in $$props3)
      $$invalidate2(6, footerEl = $$props3.footerEl);
    if ("triggerEl" in $$props3)
      triggerEl = $$props3.triggerEl;
    if ("openTimer" in $$props3)
      openTimer = $$props3.openTimer;
    if ("closeTimer" in $$props3)
      closeTimer = $$props3.closeTimer;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    opened,
    element41,
    className2,
    title,
    dialogEl,
    contentEl,
    footerEl,
    focusFirst,
    focusLast,
    onBackdropClick,
    skipFirstFocus,
    open,
    close,
    $$scope2,
    slots2,
    div1_binding,
    div2_binding2,
    div4_binding,
    div5_binding
  ];
}
var Dialog = class extends import_internal4.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal4.init)(this, options, instance4, create_fragment4, import_internal4.safe_not_equal, {
      class: 2,
      title: 3,
      opened: 0,
      skipFirstFocus: 10,
      element: 1,
      open: 11,
      close: 12
    });
    (0, import_internal4.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Dialog",
      options,
      id: create_fragment4.name
    });
  }
  get class() {
    return this.$$.ctx[2];
  }
  set class(className2) {
    this.$$set({ class: className2 });
    (0, import_internal4.flush)();
  }
  get title() {
    return this.$$.ctx[3];
  }
  set title(title) {
    this.$$set({ title });
    (0, import_internal4.flush)();
  }
  get opened() {
    return this.$$.ctx[0];
  }
  set opened(opened) {
    this.$$set({ opened });
    (0, import_internal4.flush)();
  }
  get skipFirstFocus() {
    return this.$$.ctx[10];
  }
  set skipFirstFocus(skipFirstFocus) {
    this.$$set({ skipFirstFocus });
    (0, import_internal4.flush)();
  }
  get element() {
    return this.$$.ctx[1];
  }
  set element(element41) {
    this.$$set({ element: element41 });
    (0, import_internal4.flush)();
  }
  get open() {
    return this.$$.ctx[11];
  }
  set open(value2) {
    throw new Error("<Dialog>: Cannot set read-only property 'open'");
  }
  get close() {
    return this.$$.ctx[12];
  }
  set close(value2) {
    throw new Error("<Dialog>: Cannot set read-only property 'close'");
  }
};
var Dialog_default = Dialog;

// src/drawer/Drawer.svelte
var import_internal5 = __toESM(require_internal());
var import_svelte2 = __toESM(require_svelte());
var import_transition = __toESM(require_transition());
var file4 = "src/drawer/Drawer.svelte";
function create_if_block2(ctx) {
  let div3;
  let div0;
  let t0;
  let header;
  let h2;
  let t1;
  let t2;
  let button;
  let t3;
  let div1;
  let t4;
  let div2;
  let div3_class_value;
  let docclick_action;
  let div3_intro;
  let div3_outro;
  let current;
  let mounted;
  let dispose;
  button = new Button_default({
    props: {
      round: true,
      text: true,
      icon: "close",
      class: "btn-close",
      title: "Close"
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*close*/
    ctx[3]
  );
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = (0, import_internal5.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  const block = {
    c: function create() {
      div3 = (0, import_internal5.element)("div");
      div0 = (0, import_internal5.element)("div");
      t0 = (0, import_internal5.space)();
      header = (0, import_internal5.element)("header");
      h2 = (0, import_internal5.element)("h2");
      t1 = (0, import_internal5.text)(
        /*title*/
        ctx[2]
      );
      t2 = (0, import_internal5.space)();
      (0, import_internal5.create_component)(button.$$.fragment);
      t3 = (0, import_internal5.space)();
      div1 = (0, import_internal5.element)("div");
      if (default_slot)
        default_slot.c();
      t4 = (0, import_internal5.space)();
      div2 = (0, import_internal5.element)("div");
      (0, import_internal5.attr_dev)(div0, "tabindex", "0");
      (0, import_internal5.attr_dev)(div0, "class", "focus-trap focus-trap-top");
      (0, import_internal5.add_location)(div0, file4, 10, 2, 301);
      (0, import_internal5.add_location)(h2, file4, 12, 3, 443);
      (0, import_internal5.attr_dev)(header, "class", "drawer-header");
      (0, import_internal5.add_location)(header, file4, 11, 2, 385);
      (0, import_internal5.attr_dev)(div1, "class", "drawer-content");
      (0, import_internal5.add_location)(div1, file4, 15, 2, 562);
      (0, import_internal5.attr_dev)(div2, "tabindex", "0");
      (0, import_internal5.attr_dev)(div2, "class", "focus-trap focus-trap-bottom");
      (0, import_internal5.add_location)(div2, file4, 16, 2, 612);
      (0, import_internal5.attr_dev)(div3, "class", div3_class_value = "drawer " + /*className*/
      ctx[1]);
      (0, import_internal5.attr_dev)(div3, "tabindex", "-1");
      (0, import_internal5.add_location)(div3, file4, 2, 1, 73);
    },
    m: function mount(target, anchor) {
      (0, import_internal5.insert_dev)(target, div3, anchor);
      (0, import_internal5.append_dev)(div3, div0);
      (0, import_internal5.append_dev)(div3, t0);
      (0, import_internal5.append_dev)(div3, header);
      (0, import_internal5.append_dev)(header, h2);
      (0, import_internal5.append_dev)(h2, t1);
      (0, import_internal5.append_dev)(header, t2);
      (0, import_internal5.mount_component)(button, header, null);
      ctx[14](header);
      (0, import_internal5.append_dev)(div3, t3);
      (0, import_internal5.append_dev)(div3, div1);
      if (default_slot) {
        default_slot.m(div1, null);
      }
      (0, import_internal5.append_dev)(div3, t4);
      (0, import_internal5.append_dev)(div3, div2);
      ctx[15](div3);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal5.listen_dev)(
            div0,
            "focus",
            /*focusLast*/
            ctx[9],
            false,
            false,
            false,
            false
          ),
          (0, import_internal5.listen_dev)(
            div2,
            "focus",
            /*focusFirst*/
            ctx[8],
            false,
            false,
            false,
            false
          ),
          (0, import_internal5.action_destroyer)(docclick_action = /*docclick*/
          ctx[7].call(null, div3))
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*title*/
      4)
        (0, import_internal5.set_data_dev)(
          t1,
          /*title*/
          ctx[2]
        );
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          (0, import_internal5.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[12],
            !current ? (0, import_internal5.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx[12]
            ) : (0, import_internal5.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx[12],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div3_class_value !== (div3_class_value = "drawer " + /*className*/
      ctx[1])) {
        (0, import_internal5.attr_dev)(div3, "class", div3_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal5.transition_in)(button.$$.fragment, local);
      (0, import_internal5.transition_in)(default_slot, local);
      (0, import_internal5.add_render_callback)(() => {
        if (!current)
          return;
        if (div3_outro)
          div3_outro.end(1);
        div3_intro = (0, import_internal5.create_in_transition)(div3, import_transition.fly, {
          x: 300,
          duration: (
            /*$ANIMATION_SPEED*/
            ctx[6]
          )
        });
        div3_intro.start();
      });
      current = true;
    },
    o: function outro(local) {
      (0, import_internal5.transition_out)(button.$$.fragment, local);
      (0, import_internal5.transition_out)(default_slot, local);
      if (div3_intro)
        div3_intro.invalidate();
      div3_outro = (0, import_internal5.create_out_transition)(div3, import_transition.fly, {
        x: 300,
        duration: (
          /*$ANIMATION_SPEED*/
          ctx[6] ? (
            /*$ANIMATION_SPEED*/
            ctx[6] + 100
          ) : 0
        )
      });
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal5.detach_dev)(div3);
      (0, import_internal5.destroy_component)(button);
      ctx[14](null);
      if (default_slot)
        default_slot.d(detaching);
      ctx[15](null);
      if (detaching && div3_outro)
        div3_outro.end();
      mounted = false;
      (0, import_internal5.run_all)(dispose);
    }
  };
  (0, import_internal5.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(1:0) {#if isVisible}",
    ctx
  });
  return block;
}
function create_fragment5(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*isVisible*/
    ctx[4] && create_if_block2(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal5.empty)();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal5.insert_dev)(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*isVisible*/
        ctx2[4]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*isVisible*/
          16) {
            (0, import_internal5.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          (0, import_internal5.transition_in)(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        (0, import_internal5.group_outros)();
        (0, import_internal5.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal5.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal5.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal5.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal5.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal5.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance5($$self2, $$props2, $$invalidate2) {
  let $ANIMATION_SPEED;
  (0, import_internal5.validate_store)(ANIMATION_SPEED, "ANIMATION_SPEED");
  (0, import_internal5.component_subscribe)($$self2, ANIMATION_SPEED, ($$value) => $$invalidate2(6, $ANIMATION_SPEED = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal5.validate_slots)("Drawer", slots2, ["default"]);
  let { class: className2 = "" } = $$props2;
  let { title = "Drawer" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte2.createEventDispatcher)();
  let isVisible = false;
  let headerEl, targetBtn;
  function docclick() {
    requestAnimationFrame(() => document.addEventListener("click", onDocClick));
    return {
      destroy: () => document.removeEventListener("click", onDocClick)
    };
  }
  function onDocClick(e) {
    if (element41.contains(e.target))
      return;
    if (!isVisible)
      return;
    e.preventDefault();
    e.stopPropagation();
    close();
  }
  function toggle(target) {
    if (target)
      targetBtn = target;
    isVisible ? close() : open(target);
  }
  function open(target) {
    targetBtn = target || document.activeElement;
    $$invalidate2(4, isVisible = true);
    requestAnimationFrame(() => headerEl.querySelector(".btn-close").focus());
    dispatch2("open");
  }
  function close() {
    $$invalidate2(4, isVisible = false);
    if (targetBtn)
      targetBtn.focus();
    dispatch2("close");
  }
  function focusFirst() {
    const first = getFocusableElements().shift();
    const last = getFocusableElements().pop();
    if (last && last.scrollIntoView)
      last.scrollIntoView({ block: "end" });
    if (first && first.focus)
      first.focus();
  }
  function focusLast() {
    const first = getFocusableElements().shift();
    const last = getFocusableElements().pop();
    if (first && first.scrollIntoView)
      first.scrollIntoView({ block: "end" });
    if (last && last.focus)
      last.focus();
  }
  function getFocusableElements() {
    return Array.from(element41.querySelectorAll(FOCUSABLE_SELECTOR));
  }
  const writable_props = ["class", "title", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Drawer> was created with unknown prop '${key}'`);
  });
  function header_binding($$value) {
    import_internal5.binding_callbacks[$$value ? "unshift" : "push"](() => {
      headerEl = $$value;
      $$invalidate2(5, headerEl);
    });
  }
  function div3_binding($$value) {
    import_internal5.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("title" in $$props3)
      $$invalidate2(2, title = $$props3.title);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("$$scope" in $$props3)
      $$invalidate2(12, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte2.createEventDispatcher,
    fly: import_transition.fly,
    ANIMATION_SPEED,
    FOCUSABLE_SELECTOR,
    Button: Button_default,
    className: className2,
    title,
    element: element41,
    dispatch: dispatch2,
    isVisible,
    headerEl,
    targetBtn,
    docclick,
    onDocClick,
    toggle,
    open,
    close,
    focusFirst,
    focusLast,
    getFocusableElements,
    $ANIMATION_SPEED
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("title" in $$props3)
      $$invalidate2(2, title = $$props3.title);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("isVisible" in $$props3)
      $$invalidate2(4, isVisible = $$props3.isVisible);
    if ("headerEl" in $$props3)
      $$invalidate2(5, headerEl = $$props3.headerEl);
    if ("targetBtn" in $$props3)
      targetBtn = $$props3.targetBtn;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    element41,
    className2,
    title,
    close,
    isVisible,
    headerEl,
    $ANIMATION_SPEED,
    docclick,
    focusFirst,
    focusLast,
    toggle,
    open,
    $$scope2,
    slots2,
    header_binding,
    div3_binding
  ];
}
var Drawer = class extends import_internal5.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal5.init)(this, options, instance5, create_fragment5, import_internal5.safe_not_equal, {
      class: 1,
      title: 2,
      element: 0,
      toggle: 10,
      open: 11,
      close: 3
    });
    (0, import_internal5.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Drawer",
      options,
      id: create_fragment5.name
    });
  }
  get class() {
    return this.$$.ctx[1];
  }
  set class(className2) {
    this.$$set({ class: className2 });
    (0, import_internal5.flush)();
  }
  get title() {
    return this.$$.ctx[2];
  }
  set title(title) {
    this.$$set({ title });
    (0, import_internal5.flush)();
  }
  get element() {
    return this.$$.ctx[0];
  }
  set element(element41) {
    this.$$set({ element: element41 });
    (0, import_internal5.flush)();
  }
  get toggle() {
    return this.$$.ctx[10];
  }
  set toggle(value2) {
    throw new Error("<Drawer>: Cannot set read-only property 'toggle'");
  }
  get open() {
    return this.$$.ctx[11];
  }
  set open(value2) {
    throw new Error("<Drawer>: Cannot set read-only property 'open'");
  }
  get close() {
    return this.$$.ctx[3];
  }
  set close(value2) {
    throw new Error("<Drawer>: Cannot set read-only property 'close'");
  }
};
var Drawer_default = Drawer;

// src/input/autocomplete/Autocomplete.svelte
var import_internal13 = __toESM(require_internal());
var import_svelte3 = __toESM(require_svelte());

// src/input/autocomplete/utils.js
function groupData(items) {
  const nogroup = [];
  const _groups = {};
  items.forEach((item) => {
    if (!item.group)
      return nogroup.push(item);
    _groups[item.group] = _groups[item.group] || { name: item.group, items: [] };
    _groups[item.group].items.push(item);
  });
  const groups = Object.values(_groups).filter((g) => !!g.items.length);
  if (nogroup.length)
    groups.unshift({ items: nogroup });
  return groups;
}
function highlight(listEl) {
  requestAnimationFrame(() => {
    const selectedEl = listEl.querySelector(".selected");
    if (!selectedEl || !listEl.scrollTo)
      return;
    const paddingTop = 3;
    let top = selectedEl.offsetTop - paddingTop;
    if (listEl.scrollTop > top)
      listEl.scrollTo({ top });
    else {
      const paddingBottom = 6;
      top = selectedEl.offsetTop + selectedEl.offsetHeight - listEl.offsetHeight + paddingBottom;
      if (listEl.scrollTop < top)
        listEl.scrollTo({ top });
    }
  });
}
function quickPositionRecalc(listEl, inputEl) {
  const inputBox = inputEl.getBoundingClientRect();
  listEl.style.top = inputBox.top + inputBox.height + 3 + "px";
  listEl.style.left = inputBox.left - 1 + "px";
}
function properRecalculateListPosition(listEl, inputEl, elevated) {
  const offsetX = 1;
  const offsetY = 3;
  const inputBox = inputEl.getBoundingClientRect();
  if (elevated) {
    listEl.style.top = inputBox.top + inputBox.height + offsetY + "px";
    listEl.style.left = inputBox.left - offsetX + "px";
  } else
    listEl.style.top = offsetY + "px";
  listEl.style.minWidth = inputBox.width + "px";
  listEl.style.height = "auto";
  const listBox = listEl.getBoundingClientRect();
  const listT = listBox.top;
  const listH = listBox.height;
  const winH = window.innerHeight;
  let maxH = 0;
  if (listT + listH + 10 > winH) {
    maxH = Math.max(winH - listT - 10, 100);
    listEl.style.height = maxH + "px";
  }
  if (listT + maxH + 10 > winH) {
    listEl.style.height = listBox.height + "px";
    if (elevated)
      listEl.style.top = inputBox.top - listBox.height - offsetY + "px";
    else
      listEl.style.top = -inputBox.height - listBox.height - offsetY + "px";
  }
}
function recalculateListPosition(listEl, inputEl, elevated) {
  if (elevated)
    quickPositionRecalc(listEl, inputEl);
  requestAnimationFrame(() => {
    if (!listEl || !listEl.style)
      return;
    properRecalculateListPosition(listEl, inputEl, elevated);
  });
}
function deepCopy(o) {
  return structuredClone(o);
}
function fuzzy(hay = "", s = "") {
  if (s.length === 0)
    return true;
  if (hay.length === 0)
    return false;
  if (s.length > hay.length)
    return false;
  if (s === hay)
    return true;
  hay = hay.toLowerCase();
  s = s.toLowerCase();
  let n = -1;
  for (const l of s)
    if (!~(n = hay.indexOf(l, n + 1)))
      return false;
  return true;
}
function emphasize(str, q) {
  if (!q)
    return str;
  str = "" + str;
  let idx = 0;
  const low = str.toLowerCase();
  if (low.includes(q))
    return str.replace(new RegExp(`(${q})`, "ig"), "<b>$1</b>");
  const stra = str.split("");
  q = q.toLowerCase();
  for (const l of q) {
    idx = low.indexOf(l, idx);
    const letter = stra[idx];
    if (letter) {
      stra.splice(idx, 1, `<b>${letter}</b>`);
      idx += 1;
    }
  }
  return stra.join("");
}

// src/info-bar/InfoBar.svelte
var import_internal6 = __toESM(require_internal());
var file5 = "src/info-bar/InfoBar.svelte";
function create_if_block3(ctx) {
  let div;
  let icon;
  let t;
  let p;
  let div_class_value;
  let current;
  icon = new Icon_default({
    props: { name: (
      /*type*/
      ctx[4]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      div = (0, import_internal6.element)("div");
      (0, import_internal6.create_component)(icon.$$.fragment);
      t = (0, import_internal6.space)();
      p = (0, import_internal6.element)("p");
      (0, import_internal6.attr_dev)(
        p,
        "id",
        /*id*/
        ctx[2]
      );
      (0, import_internal6.add_location)(p, file5, 3, 2, 110);
      (0, import_internal6.attr_dev)(div, "class", div_class_value = "info-bar info-bar-" + /*type*/
      ctx[4] + " " + /*className*/
      ctx[1]);
      (0, import_internal6.add_location)(div, file5, 1, 1, 11);
    },
    m: function mount(target, anchor) {
      (0, import_internal6.insert_dev)(target, div, anchor);
      (0, import_internal6.mount_component)(icon, div, null);
      (0, import_internal6.append_dev)(div, t);
      (0, import_internal6.append_dev)(div, p);
      p.innerHTML = /*msg*/
      ctx[3];
      ctx[5](div);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*type*/
      16)
        icon_changes.name = /*type*/
        ctx2[4];
      icon.$set(icon_changes);
      if (!current || dirty & /*msg*/
      8)
        p.innerHTML = /*msg*/
        ctx2[3];
      ;
      if (!current || dirty & /*id*/
      4) {
        (0, import_internal6.attr_dev)(
          p,
          "id",
          /*id*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*type, className*/
      18 && div_class_value !== (div_class_value = "info-bar info-bar-" + /*type*/
      ctx2[4] + " " + /*className*/
      ctx2[1])) {
        (0, import_internal6.attr_dev)(div, "class", div_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal6.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal6.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal6.detach_dev)(div);
      (0, import_internal6.destroy_component)(icon);
      ctx[5](null);
    }
  };
  (0, import_internal6.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block3.name,
    type: "if",
    source: "(1:0) {#if msg}",
    ctx
  });
  return block;
}
function create_fragment6(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*msg*/
    ctx[3] && create_if_block3(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal6.empty)();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal6.insert_dev)(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*msg*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*msg*/
          8) {
            (0, import_internal6.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block3(ctx2);
          if_block.c();
          (0, import_internal6.transition_in)(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        (0, import_internal6.group_outros)();
        (0, import_internal6.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal6.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal6.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal6.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal6.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal6.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance6($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal6.validate_slots)("InfoBar", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { id: id2 = void 0 } = $$props2;
  let { msg = "" } = $$props2;
  let { type = "info" } = $$props2;
  const writable_props = ["class", "element", "id", "msg", "type"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InfoBar> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    import_internal6.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
    if ("type" in $$props3)
      $$invalidate2(4, type = $$props3.type);
  };
  $$self2.$capture_state = () => ({ Icon: Icon_default, className: className2, element: element41, id: id2, msg, type });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
    if ("type" in $$props3)
      $$invalidate2(4, type = $$props3.type);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, id2, msg, type, div_binding];
}
var InfoBar = class extends import_internal6.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal6.init)(this, options, instance6, create_fragment6, import_internal6.safe_not_equal, {
      class: 1,
      element: 0,
      id: 2,
      msg: 3,
      type: 4
    });
    (0, import_internal6.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InfoBar",
      options,
      id: create_fragment6.name
    });
  }
  get class() {
    throw new Error("<InfoBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<InfoBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<InfoBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<InfoBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<InfoBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<InfoBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get msg() {
    throw new Error("<InfoBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set msg(value2) {
    throw new Error("<InfoBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get type() {
    throw new Error("<InfoBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set type(value2) {
    throw new Error("<InfoBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InfoBar_default = InfoBar;

// src/info-bar/Error.svelte
var import_internal7 = __toESM(require_internal());
var { Error: Error_1 } = import_internal7.globals;
function create_fragment7(ctx) {
  let infobar;
  let updating_element;
  let current;
  function infobar_element_binding(value2) {
    ctx[4](value2);
  }
  let infobar_props = {
    class: (
      /*className*/
      ctx[1]
    ),
    id: (
      /*id*/
      ctx[2]
    ),
    msg: (
      /*msg*/
      ctx[3]
    ),
    type: "error"
  };
  if (
    /*element*/
    ctx[0] !== void 0
  ) {
    infobar_props.element = /*element*/
    ctx[0];
  }
  infobar = new InfoBar_default({ props: infobar_props, $$inline: true });
  import_internal7.binding_callbacks.push(() => (0, import_internal7.bind)(infobar, "element", infobar_element_binding));
  const block = {
    c: function create() {
      (0, import_internal7.create_component)(infobar.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal7.mount_component)(infobar, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const infobar_changes = {};
      if (dirty & /*className*/
      2)
        infobar_changes.class = /*className*/
        ctx2[1];
      if (dirty & /*id*/
      4)
        infobar_changes.id = /*id*/
        ctx2[2];
      if (dirty & /*msg*/
      8)
        infobar_changes.msg = /*msg*/
        ctx2[3];
      if (!updating_element && dirty & /*element*/
      1) {
        updating_element = true;
        infobar_changes.element = /*element*/
        ctx2[0];
        (0, import_internal7.add_flush_callback)(() => updating_element = false);
      }
      infobar.$set(infobar_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal7.transition_in)(infobar.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal7.transition_out)(infobar.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal7.destroy_component)(infobar, detaching);
    }
  };
  (0, import_internal7.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment7.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance7($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal7.validate_slots)("Error", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { id: id2 = void 0 } = $$props2;
  let { msg = "" } = $$props2;
  const writable_props = ["class", "element", "id", "msg"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Error> was created with unknown prop '${key}'`);
  });
  function infobar_element_binding(value2) {
    element41 = value2;
    $$invalidate2(0, element41);
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  $$self2.$capture_state = () => ({ InfoBar: InfoBar_default, className: className2, element: element41, id: id2, msg });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, id2, msg, infobar_element_binding];
}
var Error2 = class extends import_internal7.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal7.init)(this, options, instance7, create_fragment7, import_internal7.safe_not_equal, { class: 1, element: 0, id: 2, msg: 3 });
    (0, import_internal7.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Error",
      options,
      id: create_fragment7.name
    });
  }
  get class() {
    throw new Error_1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error_1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error_1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error_1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error_1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error_1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get msg() {
    throw new Error_1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set msg(value2) {
    throw new Error_1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Error_default = Error2;

// src/info-bar/Info.svelte
var import_internal8 = __toESM(require_internal());
function create_fragment8(ctx) {
  let infobar;
  let updating_element;
  let current;
  function infobar_element_binding(value2) {
    ctx[4](value2);
  }
  let infobar_props = {
    class: (
      /*className*/
      ctx[1]
    ),
    id: (
      /*id*/
      ctx[2]
    ),
    msg: (
      /*msg*/
      ctx[3]
    ),
    type: "info"
  };
  if (
    /*element*/
    ctx[0] !== void 0
  ) {
    infobar_props.element = /*element*/
    ctx[0];
  }
  infobar = new InfoBar_default({ props: infobar_props, $$inline: true });
  import_internal8.binding_callbacks.push(() => (0, import_internal8.bind)(infobar, "element", infobar_element_binding));
  const block = {
    c: function create() {
      (0, import_internal8.create_component)(infobar.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal8.mount_component)(infobar, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const infobar_changes = {};
      if (dirty & /*className*/
      2)
        infobar_changes.class = /*className*/
        ctx2[1];
      if (dirty & /*id*/
      4)
        infobar_changes.id = /*id*/
        ctx2[2];
      if (dirty & /*msg*/
      8)
        infobar_changes.msg = /*msg*/
        ctx2[3];
      if (!updating_element && dirty & /*element*/
      1) {
        updating_element = true;
        infobar_changes.element = /*element*/
        ctx2[0];
        (0, import_internal8.add_flush_callback)(() => updating_element = false);
      }
      infobar.$set(infobar_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal8.transition_in)(infobar.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal8.transition_out)(infobar.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal8.destroy_component)(infobar, detaching);
    }
  };
  (0, import_internal8.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment8.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance8($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal8.validate_slots)("Info", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { id: id2 = void 0 } = $$props2;
  let { msg = "" } = $$props2;
  const writable_props = ["class", "element", "id", "msg"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Info> was created with unknown prop '${key}'`);
  });
  function infobar_element_binding(value2) {
    element41 = value2;
    $$invalidate2(0, element41);
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  $$self2.$capture_state = () => ({ InfoBar: InfoBar_default, className: className2, element: element41, id: id2, msg });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, id2, msg, infobar_element_binding];
}
var Info = class extends import_internal8.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal8.init)(this, options, instance8, create_fragment8, import_internal8.safe_not_equal, { class: 1, element: 0, id: 2, msg: 3 });
    (0, import_internal8.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Info",
      options,
      id: create_fragment8.name
    });
  }
  get class() {
    throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get msg() {
    throw new Error("<Info>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set msg(value2) {
    throw new Error("<Info>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Info_default = Info;

// src/info-bar/Success.svelte
var import_internal9 = __toESM(require_internal());
function create_fragment9(ctx) {
  let infobar;
  let updating_element;
  let current;
  function infobar_element_binding(value2) {
    ctx[4](value2);
  }
  let infobar_props = {
    class: (
      /*className*/
      ctx[1]
    ),
    id: (
      /*id*/
      ctx[2]
    ),
    msg: (
      /*msg*/
      ctx[3]
    ),
    type: "success"
  };
  if (
    /*element*/
    ctx[0] !== void 0
  ) {
    infobar_props.element = /*element*/
    ctx[0];
  }
  infobar = new InfoBar_default({ props: infobar_props, $$inline: true });
  import_internal9.binding_callbacks.push(() => (0, import_internal9.bind)(infobar, "element", infobar_element_binding));
  const block = {
    c: function create() {
      (0, import_internal9.create_component)(infobar.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal9.mount_component)(infobar, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const infobar_changes = {};
      if (dirty & /*className*/
      2)
        infobar_changes.class = /*className*/
        ctx2[1];
      if (dirty & /*id*/
      4)
        infobar_changes.id = /*id*/
        ctx2[2];
      if (dirty & /*msg*/
      8)
        infobar_changes.msg = /*msg*/
        ctx2[3];
      if (!updating_element && dirty & /*element*/
      1) {
        updating_element = true;
        infobar_changes.element = /*element*/
        ctx2[0];
        (0, import_internal9.add_flush_callback)(() => updating_element = false);
      }
      infobar.$set(infobar_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal9.transition_in)(infobar.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal9.transition_out)(infobar.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal9.destroy_component)(infobar, detaching);
    }
  };
  (0, import_internal9.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment9.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance9($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal9.validate_slots)("Success", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { id: id2 = void 0 } = $$props2;
  let { msg = "" } = $$props2;
  const writable_props = ["class", "element", "id", "msg"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Success> was created with unknown prop '${key}'`);
  });
  function infobar_element_binding(value2) {
    element41 = value2;
    $$invalidate2(0, element41);
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  $$self2.$capture_state = () => ({ InfoBar: InfoBar_default, className: className2, element: element41, id: id2, msg });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, id2, msg, infobar_element_binding];
}
var Success = class extends import_internal9.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal9.init)(this, options, instance9, create_fragment9, import_internal9.safe_not_equal, { class: 1, element: 0, id: 2, msg: 3 });
    (0, import_internal9.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Success",
      options,
      id: create_fragment9.name
    });
  }
  get class() {
    throw new Error("<Success>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Success>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Success>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Success>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Success>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Success>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get msg() {
    throw new Error("<Success>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set msg(value2) {
    throw new Error("<Success>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Success_default = Success;

// src/info-bar/Warning.svelte
var import_internal10 = __toESM(require_internal());
function create_fragment10(ctx) {
  let infobar;
  let updating_element;
  let current;
  function infobar_element_binding(value2) {
    ctx[4](value2);
  }
  let infobar_props = {
    class: (
      /*className*/
      ctx[1]
    ),
    id: (
      /*id*/
      ctx[2]
    ),
    msg: (
      /*msg*/
      ctx[3]
    ),
    type: "warning"
  };
  if (
    /*element*/
    ctx[0] !== void 0
  ) {
    infobar_props.element = /*element*/
    ctx[0];
  }
  infobar = new InfoBar_default({ props: infobar_props, $$inline: true });
  import_internal10.binding_callbacks.push(() => (0, import_internal10.bind)(infobar, "element", infobar_element_binding));
  const block = {
    c: function create() {
      (0, import_internal10.create_component)(infobar.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal10.mount_component)(infobar, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const infobar_changes = {};
      if (dirty & /*className*/
      2)
        infobar_changes.class = /*className*/
        ctx2[1];
      if (dirty & /*id*/
      4)
        infobar_changes.id = /*id*/
        ctx2[2];
      if (dirty & /*msg*/
      8)
        infobar_changes.msg = /*msg*/
        ctx2[3];
      if (!updating_element && dirty & /*element*/
      1) {
        updating_element = true;
        infobar_changes.element = /*element*/
        ctx2[0];
        (0, import_internal10.add_flush_callback)(() => updating_element = false);
      }
      infobar.$set(infobar_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal10.transition_in)(infobar.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal10.transition_out)(infobar.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal10.destroy_component)(infobar, detaching);
    }
  };
  (0, import_internal10.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment10.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance10($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal10.validate_slots)("Warning", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { id: id2 = void 0 } = $$props2;
  let { msg = "" } = $$props2;
  const writable_props = ["class", "element", "id", "msg"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Warning> was created with unknown prop '${key}'`);
  });
  function infobar_element_binding(value2) {
    element41 = value2;
    $$invalidate2(0, element41);
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  $$self2.$capture_state = () => ({ InfoBar: InfoBar_default, className: className2, element: element41, id: id2, msg });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("id" in $$props3)
      $$invalidate2(2, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(3, msg = $$props3.msg);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, id2, msg, infobar_element_binding];
}
var Warning = class extends import_internal10.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal10.init)(this, options, instance10, create_fragment10, import_internal10.safe_not_equal, { class: 1, element: 0, id: 2, msg: 3 });
    (0, import_internal10.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Warning",
      options,
      id: create_fragment10.name
    });
  }
  get class() {
    throw new Error("<Warning>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Warning>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Warning>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Warning>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Warning>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Warning>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get msg() {
    throw new Error("<Warning>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set msg(value2) {
    throw new Error("<Warning>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Warning_default = Warning;

// src/input/input-error/InputError.svelte
var import_internal11 = __toESM(require_internal());
var { Error: Error_12 } = import_internal11.globals;
var file6 = "src/input/input-error/InputError.svelte";
function create_if_block4(ctx) {
  let div;
  let error2;
  let div_transition;
  let current;
  error2 = new Error_default({
    props: { id: (
      /*id*/
      ctx[1]
    ), msg: (
      /*msg*/
      ctx[2]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      div = (0, import_internal11.element)("div");
      (0, import_internal11.create_component)(error2.$$.fragment);
      (0, import_internal11.attr_dev)(div, "class", "error-wrap");
      (0, import_internal11.add_location)(div, file6, 1, 1, 11);
    },
    m: function mount(target, anchor) {
      (0, import_internal11.insert_dev)(target, div, anchor);
      (0, import_internal11.mount_component)(error2, div, null);
      ctx[8](div);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const error_changes = {};
      if (dirty & /*id*/
      2)
        error_changes.id = /*id*/
        ctx2[1];
      if (dirty & /*msg*/
      4)
        error_changes.msg = /*msg*/
        ctx2[2];
      error2.$set(error_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal11.transition_in)(error2.$$.fragment, local);
      if (local) {
        (0, import_internal11.add_render_callback)(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = (0, import_internal11.create_bidirectional_transition)(
              div,
              /*slideError*/
              ctx[3],
              {},
              true
            );
          div_transition.run(1);
        });
      }
      current = true;
    },
    o: function outro(local) {
      (0, import_internal11.transition_out)(error2.$$.fragment, local);
      if (local) {
        if (!div_transition)
          div_transition = (0, import_internal11.create_bidirectional_transition)(
            div,
            /*slideError*/
            ctx[3],
            {},
            false
          );
        div_transition.run(0);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal11.detach_dev)(div);
      (0, import_internal11.destroy_component)(error2);
      ctx[8](null);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
  (0, import_internal11.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block4.name,
    type: "if",
    source: "(1:0) {#if msg}",
    ctx
  });
  return block;
}
function create_fragment11(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*msg*/
    ctx[2] && create_if_block4(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal11.empty)();
    },
    l: function claim(nodes) {
      throw new Error_12("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal11.insert_dev)(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*msg*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*msg*/
          4) {
            (0, import_internal11.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block4(ctx2);
          if_block.c();
          (0, import_internal11.transition_in)(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        (0, import_internal11.group_outros)();
        (0, import_internal11.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal11.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal11.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal11.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal11.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal11.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment11.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance11($$self2, $$props2, $$invalidate2) {
  let _animOffset;
  let _hasOffset;
  let _animOpacity;
  let $ANIMATION_SPEED;
  (0, import_internal11.validate_store)(ANIMATION_SPEED, "ANIMATION_SPEED");
  (0, import_internal11.component_subscribe)($$self2, ANIMATION_SPEED, ($$value) => $$invalidate2(10, $ANIMATION_SPEED = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal11.validate_slots)("InputError", slots2, []);
  let { id: id2 = void 0 } = $$props2;
  let { msg = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { animOffset = 0 } = $$props2;
  let { animOpacity = false } = $$props2;
  function slideError(node) {
    const o = node.getBoundingClientRect().height;
    return {
      duration: $ANIMATION_SPEED,
      css: (t) => {
        return `height: ${t * o}px;` + (_animOpacity ? `opacity: ${t};` : "") + (_hasOffset ? `margin-bottom: ${t * _animOffset - _animOffset}px;` : "");
      }
    };
  }
  const writable_props = ["id", "msg", "element", "animOffset", "animOpacity"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InputError> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    import_internal11.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("id" in $$props3)
      $$invalidate2(1, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(2, msg = $$props3.msg);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("animOffset" in $$props3)
      $$invalidate2(4, animOffset = $$props3.animOffset);
    if ("animOpacity" in $$props3)
      $$invalidate2(5, animOpacity = $$props3.animOpacity);
  };
  $$self2.$capture_state = () => ({
    ANIMATION_SPEED,
    Error: Error_default,
    id: id2,
    msg,
    element: element41,
    animOffset,
    animOpacity,
    slideError,
    _animOffset,
    _hasOffset,
    _animOpacity,
    $ANIMATION_SPEED
  });
  $$self2.$inject_state = ($$props3) => {
    if ("id" in $$props3)
      $$invalidate2(1, id2 = $$props3.id);
    if ("msg" in $$props3)
      $$invalidate2(2, msg = $$props3.msg);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("animOffset" in $$props3)
      $$invalidate2(4, animOffset = $$props3.animOffset);
    if ("animOpacity" in $$props3)
      $$invalidate2(5, animOpacity = $$props3.animOpacity);
    if ("_animOffset" in $$props3)
      $$invalidate2(6, _animOffset = $$props3._animOffset);
    if ("_hasOffset" in $$props3)
      $$invalidate2(7, _hasOffset = $$props3._hasOffset);
    if ("_animOpacity" in $$props3)
      _animOpacity = $$props3._animOpacity;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*animOffset*/
    16) {
      $:
        $$invalidate2(6, _animOffset = parseInt(animOffset, 10) || 0);
    }
    if ($$self2.$$.dirty & /*_animOffset*/
    64) {
      $:
        $$invalidate2(7, _hasOffset = _animOffset > 0);
    }
    if ($$self2.$$.dirty & /*animOpacity, _hasOffset*/
    160) {
      $:
        _animOpacity = animOpacity === "true" || animOpacity === true || _hasOffset;
    }
  };
  return [
    element41,
    id2,
    msg,
    slideError,
    animOffset,
    animOpacity,
    _animOffset,
    _hasOffset,
    div_binding
  ];
}
var InputError = class extends import_internal11.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal11.init)(this, options, instance11, create_fragment11, import_internal11.safe_not_equal, {
      id: 1,
      msg: 2,
      element: 0,
      animOffset: 4,
      animOpacity: 5
    });
    (0, import_internal11.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputError",
      options,
      id: create_fragment11.name
    });
  }
  get id() {
    throw new Error_12("<InputError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error_12("<InputError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get msg() {
    throw new Error_12("<InputError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set msg(value2) {
    throw new Error_12("<InputError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error_12("<InputError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error_12("<InputError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animOffset() {
    throw new Error_12("<InputError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animOffset(value2) {
    throw new Error_12("<InputError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animOpacity() {
    throw new Error_12("<InputError>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animOpacity(value2) {
    throw new Error_12("<InputError>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InputError_default = InputError;

// src/input/label/Label.svelte
var import_internal12 = __toESM(require_internal());
var file7 = "src/input/label/Label.svelte";
function create_if_block5(ctx) {
  let label_1;
  let t;
  let label_1_class_value;
  const block = {
    c: function create() {
      label_1 = (0, import_internal12.element)("label");
      t = (0, import_internal12.text)(
        /*label*/
        ctx[3]
      );
      (0, import_internal12.attr_dev)(label_1, "class", label_1_class_value = "label " + /*className*/
      ctx[1]);
      (0, import_internal12.attr_dev)(
        label_1,
        "for",
        /*_for*/
        ctx[2]
      );
      (0, import_internal12.toggle_class)(
        label_1,
        "disabled",
        /*disabled*/
        ctx[4]
      );
      (0, import_internal12.add_location)(label_1, file7, 1, 1, 13);
    },
    m: function mount(target, anchor) {
      (0, import_internal12.insert_dev)(target, label_1, anchor);
      (0, import_internal12.append_dev)(label_1, t);
      ctx[5](label_1);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*label*/
      8)
        (0, import_internal12.set_data_dev)(
          t,
          /*label*/
          ctx2[3]
        );
      if (dirty & /*className*/
      2 && label_1_class_value !== (label_1_class_value = "label " + /*className*/
      ctx2[1])) {
        (0, import_internal12.attr_dev)(label_1, "class", label_1_class_value);
      }
      if (dirty & /*_for*/
      4) {
        (0, import_internal12.attr_dev)(
          label_1,
          "for",
          /*_for*/
          ctx2[2]
        );
      }
      if (dirty & /*className, disabled*/
      18) {
        (0, import_internal12.toggle_class)(
          label_1,
          "disabled",
          /*disabled*/
          ctx2[4]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal12.detach_dev)(label_1);
      ctx[5](null);
    }
  };
  (0, import_internal12.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block5.name,
    type: "if",
    source: "(1:0) {#if label}",
    ctx
  });
  return block;
}
function create_fragment12(ctx) {
  let if_block_anchor;
  let if_block = (
    /*label*/
    ctx[3] && create_if_block5(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal12.empty)();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal12.insert_dev)(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*label*/
        ctx2[3]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: import_internal12.noop,
    o: import_internal12.noop,
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal12.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal12.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment12.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance12($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal12.validate_slots)("Label", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { for: _for = "" } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const writable_props = ["class", "for", "label", "disabled", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Label> was created with unknown prop '${key}'`);
  });
  function label_1_binding($$value) {
    import_internal12.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("for" in $$props3)
      $$invalidate2(2, _for = $$props3.for);
    if ("label" in $$props3)
      $$invalidate2(3, label2 = $$props3.label);
    if ("disabled" in $$props3)
      $$invalidate2(4, disabled2 = $$props3.disabled);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    className: className2,
    _for,
    label: label2,
    disabled: disabled2,
    element: element41
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("_for" in $$props3)
      $$invalidate2(2, _for = $$props3._for);
    if ("label" in $$props3)
      $$invalidate2(3, label2 = $$props3.label);
    if ("disabled" in $$props3)
      $$invalidate2(4, disabled2 = $$props3.disabled);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, className2, _for, label2, disabled2, label_1_binding];
}
var Label = class extends import_internal12.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal12.init)(this, options, instance12, create_fragment12, import_internal12.safe_not_equal, {
      class: 1,
      for: 2,
      label: 3,
      disabled: 4,
      element: 0
    });
    (0, import_internal12.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Label",
      options,
      id: create_fragment12.name
    });
  }
  get class() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get for() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set for(value2) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Label_default = Label;

// src/input/autocomplete/Autocomplete.svelte
var file8 = "src/input/autocomplete/Autocomplete.svelte";
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[66] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[69] = list[i];
  return child_ctx;
}
function create_if_block_4(ctx) {
  let div;
  const block = {
    c: function create() {
      div = (0, import_internal13.element)("div");
      div.textContent = "No items found";
      (0, import_internal13.attr_dev)(div, "class", "autocomplete-list-empty");
      (0, import_internal13.add_location)(div, file8, 70, 5, 2130);
    },
    m: function mount(target, anchor) {
      (0, import_internal13.insert_dev)(target, div, anchor);
    },
    p: import_internal13.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal13.detach_dev)(div);
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_4.name,
    type: "if",
    source: "(70:55) ",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let each_1_anchor;
  let each_value = (
    /*groupedData*/
    ctx[15]
  );
  (0, import_internal13.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = (0, import_internal13.empty)();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      (0, import_internal13.insert_dev)(target, each_1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & /*groupedData, highlightIndex, onclick*/
      67158016) {
        each_value = /*groupedData*/
        ctx2[15];
        (0, import_internal13.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      (0, import_internal13.destroy_each)(each_blocks, detaching);
      if (detaching)
        (0, import_internal13.detach_dev)(each_1_anchor);
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(50:4) {#if filteredData.length}",
    ctx
  });
  return block;
}
function create_if_block_3(ctx) {
  let div;
  let t_value = (
    /*group*/
    ctx[66].name + ""
  );
  let t;
  const block = {
    c: function create() {
      div = (0, import_internal13.element)("div");
      t = (0, import_internal13.text)(t_value);
      (0, import_internal13.attr_dev)(div, "class", "autocomplete-list-header");
      (0, import_internal13.add_location)(div, file8, 52, 7, 1501);
    },
    m: function mount(target, anchor) {
      (0, import_internal13.insert_dev)(target, div, anchor);
      (0, import_internal13.append_dev)(div, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & /*groupedData*/
      32768 && t_value !== (t_value = /*group*/
      ctx2[66].name + ""))
        (0, import_internal13.set_data_dev)(t, t_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal13.detach_dev)(div);
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(52:6) {#if group.name}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let each_1_anchor;
  let each_value_1 = (
    /*group*/
    ctx[66].items
  );
  (0, import_internal13.validate_each_argument)(each_value_1);
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = (0, import_internal13.empty)();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      (0, import_internal13.insert_dev)(target, each_1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & /*groupedData, highlightIndex, onclick*/
      67158016) {
        each_value_1 = /*group*/
        ctx2[66].items;
        (0, import_internal13.validate_each_argument)(each_value_1);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d: function destroy(detaching) {
      (0, import_internal13.destroy_each)(each_blocks, detaching);
      if (detaching)
        (0, import_internal13.detach_dev)(each_1_anchor);
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(55:6) {#if group.items}",
    ctx
  });
  return block;
}
function create_each_block_1(ctx) {
  let div;
  let html_tag;
  let raw_value = (
    /*item*/
    (ctx[69].highlightedName || /*item*/
    ctx[69].name) + ""
  );
  let t;
  let div_aria_selected_value;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[40](
        /*item*/
        ctx[69]
      )
    );
  }
  const block = {
    c: function create() {
      div = (0, import_internal13.element)("div");
      html_tag = new import_internal13.HtmlTag(false);
      t = (0, import_internal13.space)();
      html_tag.a = t;
      (0, import_internal13.attr_dev)(div, "role", "option");
      (0, import_internal13.attr_dev)(div, "aria-selected", div_aria_selected_value = /*item*/
      ctx[69].idx === /*highlightIndex*/
      ctx[14]);
      (0, import_internal13.attr_dev)(div, "class", "autocomplete-list-item");
      (0, import_internal13.toggle_class)(div, "in-group", !!/*item*/
      ctx[69].group);
      (0, import_internal13.toggle_class)(
        div,
        "selected",
        /*item*/
        ctx[69].idx === /*highlightIndex*/
        ctx[14]
      );
      (0, import_internal13.add_location)(div, file8, 57, 8, 1700);
    },
    m: function mount(target, anchor) {
      (0, import_internal13.insert_dev)(target, div, anchor);
      html_tag.m(raw_value, div);
      (0, import_internal13.append_dev)(div, t);
      if (!mounted) {
        dispose = (0, import_internal13.listen_dev)(div, "click", click_handler, false, false, false, false);
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*groupedData*/
      32768 && raw_value !== (raw_value = /*item*/
      (ctx[69].highlightedName || /*item*/
      ctx[69].name) + ""))
        html_tag.p(raw_value);
      if (dirty[0] & /*groupedData, highlightIndex*/
      49152 && div_aria_selected_value !== (div_aria_selected_value = /*item*/
      ctx[69].idx === /*highlightIndex*/
      ctx[14])) {
        (0, import_internal13.attr_dev)(div, "aria-selected", div_aria_selected_value);
      }
      if (dirty[0] & /*groupedData*/
      32768) {
        (0, import_internal13.toggle_class)(div, "in-group", !!/*item*/
        ctx[69].group);
      }
      if (dirty[0] & /*groupedData, highlightIndex*/
      49152) {
        (0, import_internal13.toggle_class)(
          div,
          "selected",
          /*item*/
          ctx[69].idx === /*highlightIndex*/
          ctx[14]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal13.detach_dev)(div);
      mounted = false;
      dispose();
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(56:7) {#each group.items as item}",
    ctx
  });
  return block;
}
function create_each_block(ctx) {
  let t;
  let if_block1_anchor;
  let if_block0 = (
    /*group*/
    ctx[66].name && create_if_block_3(ctx)
  );
  let if_block1 = (
    /*group*/
    ctx[66].items && create_if_block_2(ctx)
  );
  const block = {
    c: function create() {
      if (if_block0)
        if_block0.c();
      t = (0, import_internal13.space)();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = (0, import_internal13.empty)();
    },
    m: function mount(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      (0, import_internal13.insert_dev)(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      (0, import_internal13.insert_dev)(target, if_block1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (
        /*group*/
        ctx2[66].name
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_3(ctx2);
          if_block0.c();
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*group*/
        ctx2[66].items
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_2(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    d: function destroy(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        (0, import_internal13.detach_dev)(t);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        (0, import_internal13.detach_dev)(if_block1_anchor);
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(51:5) {#each groupedData as group}",
    ctx
  });
  return block;
}
function create_if_block6(ctx) {
  let div0;
  let t1;
  let div1;
  let t2_value = (
    /*inputElement*/
    ctx[0].value + ""
  );
  let t2;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div0 = (0, import_internal13.element)("div");
      div0.textContent = "Create new item";
      t1 = (0, import_internal13.space)();
      div1 = (0, import_internal13.element)("div");
      t2 = (0, import_internal13.text)(t2_value);
      (0, import_internal13.attr_dev)(div0, "class", "autocomplete-list-header");
      (0, import_internal13.add_location)(div0, file8, 74, 5, 2232);
      (0, import_internal13.attr_dev)(div1, "class", "autocomplete-list-item");
      (0, import_internal13.toggle_class)(
        div1,
        "selected",
        /*highlightIndex*/
        ctx[14] === /*filteredData*/
        ctx[11].length
      );
      (0, import_internal13.add_location)(div1, file8, 75, 5, 2297);
    },
    m: function mount(target, anchor) {
      (0, import_internal13.insert_dev)(target, div0, anchor);
      (0, import_internal13.insert_dev)(target, t1, anchor);
      (0, import_internal13.insert_dev)(target, div1, anchor);
      (0, import_internal13.append_dev)(div1, t2);
      if (!mounted) {
        dispose = (0, import_internal13.listen_dev)(
          div1,
          "click",
          /*click_handler_1*/
          ctx[41],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & /*inputElement*/
      1 && t2_value !== (t2_value = /*inputElement*/
      ctx2[0].value + ""))
        (0, import_internal13.set_data_dev)(t2, t2_value);
      if (dirty[0] & /*highlightIndex, filteredData*/
      18432) {
        (0, import_internal13.toggle_class)(
          div1,
          "selected",
          /*highlightIndex*/
          ctx2[14] === /*filteredData*/
          ctx2[11].length
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal13.detach_dev)(div0);
      if (detaching)
        (0, import_internal13.detach_dev)(t1);
      if (detaching)
        (0, import_internal13.detach_dev)(div1);
      mounted = false;
      dispose();
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block6.name,
    type: "if",
    source: "(74:4) {#if shouldShowNewItem}",
    ctx
  });
  return block;
}
function create_fragment13(ctx) {
  let div4;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div3;
  let inputerror;
  let t2;
  let div0;
  let button;
  let t3;
  let input;
  let input_aria_controls_value;
  let input_aria_errormessage_value;
  let input_value_value;
  let t4;
  let div2;
  let div1;
  let t5;
  let div1_id_value;
  let div1_class_value;
  let div4_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[8]
      ),
      disabled: (
        /*disabled*/
        ctx[5]
      ),
      for: (
        /*_id*/
        ctx[18]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[10]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[20]
      ),
      msg: (
        /*error*/
        ctx[9]
      )
    },
    $$inline: true
  });
  button = new Button_default({
    props: {
      link: true,
      icon: "dots",
      class: "autocomplete-button"
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*onIconClick*/
    ctx[29]
  );
  let input_levels = [
    { type: "text" },
    { role: "combobox" },
    { "aria-autocomplete": "list" },
    {
      "aria-controls": input_aria_controls_value = "autocomplete-list-" + /*gui*/
      ctx[19]
    },
    { "aria-expanded": (
      /*opened*/
      ctx[12]
    ) },
    { "aria-invalid": (
      /*error*/
      ctx[9]
    ) },
    {
      "aria-errormessage": input_aria_errormessage_value = /*error*/
      ctx[9] ? (
        /*errorMessageId*/
        ctx[20]
      ) : void 0
    },
    { "aria-required": (
      /*required*/
      ctx[6]
    ) },
    { autocomplete: "off" },
    {
      value: input_value_value = /*value*/
      ctx[1] && /*value*/
      ctx[1].name || ""
    },
    /*props*/
    ctx[17],
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { id: (
      /*_id*/
      ctx[18]
    ) }
  ];
  let input_data = {};
  for (let i = 0; i < input_levels.length; i += 1) {
    input_data = (0, import_internal13.assign)(input_data, input_levels[i]);
  }
  function select_block_type(ctx2, dirty) {
    if (
      /*filteredData*/
      ctx2[11].length
    )
      return create_if_block_1;
    if (
      /*allowNew*/
      ctx2[7] !== true && /*allowNew*/
      ctx2[7] !== "true"
    )
      return create_if_block_4;
  }
  let current_block_type = select_block_type(ctx, [-1, -1, -1]);
  let if_block0 = current_block_type && current_block_type(ctx);
  let if_block1 = (
    /*shouldShowNewItem*/
    ctx[16] && create_if_block6(ctx)
  );
  const block = {
    c: function create() {
      div4 = (0, import_internal13.element)("div");
      (0, import_internal13.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal13.space)();
      (0, import_internal13.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal13.space)();
      div3 = (0, import_internal13.element)("div");
      (0, import_internal13.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal13.space)();
      div0 = (0, import_internal13.element)("div");
      (0, import_internal13.create_component)(button.$$.fragment);
      t3 = (0, import_internal13.space)();
      input = (0, import_internal13.element)("input");
      t4 = (0, import_internal13.space)();
      div2 = (0, import_internal13.element)("div");
      div1 = (0, import_internal13.element)("div");
      if (if_block0)
        if_block0.c();
      t5 = (0, import_internal13.space)();
      if (if_block1)
        if_block1.c();
      (0, import_internal13.set_attributes)(input, input_data);
      (0, import_internal13.add_location)(input, file8, 15, 3, 450);
      (0, import_internal13.attr_dev)(div0, "class", "input-row");
      (0, import_internal13.add_location)(div0, file8, 13, 2, 340);
      (0, import_internal13.attr_dev)(div1, "id", div1_id_value = "autocomplete-list-" + /*gui*/
      ctx[19]);
      (0, import_internal13.attr_dev)(div1, "class", div1_class_value = "autocomplete-list " + /*opened*/
      (ctx[12] ? "" : "hidden"));
      (0, import_internal13.attr_dev)(div1, "role", "listbox");
      (0, import_internal13.add_location)(div1, file8, 41, 3, 1114);
      (0, import_internal13.attr_dev)(div2, "class", "input-row");
      (0, import_internal13.add_location)(div2, file8, 40, 2, 1087);
      (0, import_internal13.attr_dev)(div3, "class", "input-inner");
      (0, import_internal13.toggle_class)(
        div3,
        "disabled",
        /*disabled*/
        ctx[5]
      );
      (0, import_internal13.add_location)(div3, file8, 10, 1, 243);
      (0, import_internal13.attr_dev)(div4, "class", div4_class_value = "input autocomplete " + /*className*/
      ctx[4]);
      (0, import_internal13.toggle_class)(
        div4,
        "open",
        /*opened*/
        ctx[12]
      );
      (0, import_internal13.toggle_class)(
        div4,
        "has-error",
        /*error*/
        ctx[9]
      );
      (0, import_internal13.add_location)(div4, file8, 1, 0, 57);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal13.insert_dev)(target, div4, anchor);
      (0, import_internal13.mount_component)(label_1, div4, null);
      (0, import_internal13.append_dev)(div4, t0);
      (0, import_internal13.mount_component)(info_1, div4, null);
      (0, import_internal13.append_dev)(div4, t1);
      (0, import_internal13.append_dev)(div4, div3);
      (0, import_internal13.mount_component)(inputerror, div3, null);
      (0, import_internal13.append_dev)(div3, t2);
      (0, import_internal13.append_dev)(div3, div0);
      (0, import_internal13.mount_component)(button, div0, null);
      (0, import_internal13.append_dev)(div0, t3);
      (0, import_internal13.append_dev)(div0, input);
      if ("value" in input_data) {
        input.value = input_data.value;
      }
      if (input.autofocus)
        input.focus();
      ctx[39](input);
      (0, import_internal13.append_dev)(div3, t4);
      (0, import_internal13.append_dev)(div3, div2);
      (0, import_internal13.append_dev)(div2, div1);
      if (if_block0)
        if_block0.m(div1, null);
      (0, import_internal13.append_dev)(div1, t5);
      if (if_block1)
        if_block1.m(div1, null);
      ctx[44](div1);
      ctx[45](div4);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal13.listen_dev)(
            input,
            "input",
            /*oninput*/
            ctx[23],
            false,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            input,
            "focus",
            /*onfocus*/
            ctx[22],
            false,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            input,
            "click",
            /*open*/
            ctx[21],
            false,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            input,
            "blur",
            /*onblur*/
            ctx[24],
            false,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            input,
            "keydown",
            /*onkeydown*/
            ctx[27],
            true,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            input,
            "keypress",
            /*onkeypress*/
            ctx[28],
            false,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            div1,
            "mouseenter",
            /*mouseenter_handler*/
            ctx[42],
            true,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            div1,
            "mouseleave",
            /*mouseleave_handler*/
            ctx[43],
            true,
            false,
            false,
            false
          ),
          (0, import_internal13.listen_dev)(
            div1,
            "mousedown",
            /*onListMouseDown*/
            ctx[25],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      const label_1_changes = {};
      if (dirty[0] & /*label*/
      256)
        label_1_changes.label = /*label*/
        ctx2[8];
      if (dirty[0] & /*disabled*/
      32)
        label_1_changes.disabled = /*disabled*/
        ctx2[5];
      if (dirty[0] & /*_id*/
      262144)
        label_1_changes.for = /*_id*/
        ctx2[18];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty[0] & /*info*/
      1024)
        info_1_changes.msg = /*info*/
        ctx2[10];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty[0] & /*error*/
      512)
        inputerror_changes.msg = /*error*/
        ctx2[9];
      inputerror.$set(inputerror_changes);
      (0, import_internal13.set_attributes)(input, input_data = (0, import_internal13.get_spread_update)(input_levels, [
        { type: "text" },
        { role: "combobox" },
        { "aria-autocomplete": "list" },
        {
          "aria-controls": input_aria_controls_value
        },
        (!current || dirty[0] & /*opened*/
        4096) && { "aria-expanded": (
          /*opened*/
          ctx2[12]
        ) },
        (!current || dirty[0] & /*error*/
        512) && { "aria-invalid": (
          /*error*/
          ctx2[9]
        ) },
        (!current || dirty[0] & /*error*/
        512 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
        ctx2[9] ? (
          /*errorMessageId*/
          ctx2[20]
        ) : void 0)) && {
          "aria-errormessage": input_aria_errormessage_value
        },
        (!current || dirty[0] & /*required*/
        64) && { "aria-required": (
          /*required*/
          ctx2[6]
        ) },
        { autocomplete: "off" },
        (!current || dirty[0] & /*value*/
        2 && input_value_value !== (input_value_value = /*value*/
        ctx2[1] && /*value*/
        ctx2[1].name || "") && input.value !== input_value_value) && { value: input_value_value },
        dirty[0] & /*props*/
        131072 && /*props*/
        ctx2[17],
        (!current || dirty[0] & /*disabled*/
        32) && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        (!current || dirty[0] & /*_id*/
        262144) && { id: (
          /*_id*/
          ctx2[18]
        ) }
      ]));
      if ("value" in input_data) {
        input.value = input_data.value;
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if (if_block0)
          if_block0.d(1);
        if_block0 = current_block_type && current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div1, t5);
        }
      }
      if (
        /*shouldShowNewItem*/
        ctx2[16]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block6(ctx2);
          if_block1.c();
          if_block1.m(div1, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty[0] & /*opened*/
      4096 && div1_class_value !== (div1_class_value = "autocomplete-list " + /*opened*/
      (ctx2[12] ? "" : "hidden"))) {
        (0, import_internal13.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty[0] & /*disabled*/
      32) {
        (0, import_internal13.toggle_class)(
          div3,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty[0] & /*className*/
      16 && div4_class_value !== (div4_class_value = "input autocomplete " + /*className*/
      ctx2[4])) {
        (0, import_internal13.attr_dev)(div4, "class", div4_class_value);
      }
      if (!current || dirty[0] & /*className, opened*/
      4112) {
        (0, import_internal13.toggle_class)(
          div4,
          "open",
          /*opened*/
          ctx2[12]
        );
      }
      if (!current || dirty[0] & /*className, error*/
      528) {
        (0, import_internal13.toggle_class)(
          div4,
          "has-error",
          /*error*/
          ctx2[9]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal13.transition_in)(label_1.$$.fragment, local);
      (0, import_internal13.transition_in)(info_1.$$.fragment, local);
      (0, import_internal13.transition_in)(inputerror.$$.fragment, local);
      (0, import_internal13.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal13.transition_out)(label_1.$$.fragment, local);
      (0, import_internal13.transition_out)(info_1.$$.fragment, local);
      (0, import_internal13.transition_out)(inputerror.$$.fragment, local);
      (0, import_internal13.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal13.detach_dev)(div4);
      (0, import_internal13.destroy_component)(label_1);
      (0, import_internal13.destroy_component)(info_1);
      (0, import_internal13.destroy_component)(inputerror);
      (0, import_internal13.destroy_component)(button);
      ctx[39](null);
      if (if_block0) {
        if_block0.d();
      }
      if (if_block1)
        if_block1.d();
      ctx[44](null);
      ctx[45](null);
      mounted = false;
      (0, import_internal13.run_all)(dispose);
    }
  };
  (0, import_internal13.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment13.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance13($$self2, $$props2, $$invalidate2) {
  let _id2;
  let elevated;
  let props2;
  let valueMatchesItem;
  let shouldShowNewItem;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal13.validate_slots)("Autocomplete", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { data = [] } = $$props2;
  let { value: value2 = null } = $$props2;
  let { allowNew = false } = $$props2;
  let { showAllInitially = true } = $$props2;
  let { clearOnEsc = false } = $$props2;
  let { elevate = false } = $$props2;
  let { showOnFocus = false } = $$props2;
  let { hideOnScroll = false } = $$props2;
  let { hideOnResize = false } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  let { listElement = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte3.createEventDispatcher)();
  const gui = guid();
  const errorMessageId2 = guid();
  let opened = false;
  let hasEdited = false;
  let mouseOverList = false;
  let highlightIndex = 0;
  let filteredData = [], groupedData = [];
  let originalText = "";
  let hasSetValue = true;
  let isSelecting = false;
  (0, import_svelte3.onMount)(() => {
    if (elevated)
      document.body.appendChild(listElement);
  });
  (0, import_svelte3.onDestroy)(() => {
    if (elevated)
      listElement.remove();
  });
  (0, import_svelte3.afterUpdate)(() => {
    if (!opened && data.length) {
      if (data.length && typeof data[0] === "string") {
        $$invalidate2(30, data = data.map((item) => ({ name: item })));
      }
      filter();
      setInitialValue();
    }
  });
  function filter() {
    let filtered = deepCopy(data);
    const showAll = (showAllInitially === true || showAllInitially === "true") && !hasEdited;
    if (!showAll && inputElement2.value) {
      const q = inputElement2.value.toLowerCase().trim();
      filtered = filtered.filter((item) => fuzzy(item.name, q)).map((item) => {
        item.highlightedName = emphasize(item.name, q);
        item.score = 1;
        if (item.name.toLowerCase().includes(q))
          item.score = 2;
        if (item.name.includes(q))
          item.score = 3;
        if (item.name.toLowerCase() === q)
          item.score = 4;
        if (item.name === q)
          item.score = 5;
        return item;
      });
      filtered = filtered.sort((a, b) => b.score - a.score);
      filtered.forEach((item) => {
        item.highlightedName = emphasize(item.name, q);
      });
    }
    $$invalidate2(15, groupedData = groupData(filtered));
    const filteredAndSorted = [];
    let idx = 0;
    groupedData.forEach((g) => {
      g.items.forEach((i) => i.idx = idx++);
      filteredAndSorted.push(...g.items);
    });
    $$invalidate2(11, filteredData = filteredAndSorted);
    $$invalidate2(14, highlightIndex = 0);
    if (listElement)
      highlight(listElement);
  }
  function open(e) {
    if (opened)
      return;
    $$invalidate2(12, opened = true);
    hasEdited = false;
    addEventListeners();
    recalculateListPosition(listElement, inputElement2, elevated);
    highlight(listElement);
    requestAnimationFrame(() => {
      if (e && e.type === "focus")
        inputElement2.select();
    });
  }
  function close() {
    if (!opened)
      return;
    removeEventListeners();
    $$invalidate2(13, mouseOverList = false);
    $$invalidate2(12, opened = false);
    isSelecting = false;
  }
  function selectItem() {
    if (hasSetValue)
      return;
    const oldValue = value2;
    if (filteredData[highlightIndex]) {
      $$invalidate2(1, value2 = filteredData[highlightIndex]);
      if (value2 && value2.name && inputElement2.value !== value2.name)
        $$invalidate2(0, inputElement2.value = value2.name, inputElement2);
    } else if (allowNew) {
      $$invalidate2(1, value2 = { name: inputElement2.value });
    } else {
      if (value2 && value2.name && inputElement2.value !== value2.name)
        $$invalidate2(0, inputElement2.value = value2.name, inputElement2);
    }
    hasSetValue = true;
    dispatch2("change", { value: value2, oldValue });
    close();
  }
  function setInitialValue() {
    if (filteredData && filteredData.length) {
      let itemId = value2;
      if (typeof value2 === "object" && value2 !== null) {
        itemId = value2.id || value2.name;
      }
      if (itemId) {
        const idx = filteredData.findIndex((i) => i.id === itemId || i.name === itemId);
        if (idx > -1) {
          $$invalidate2(14, highlightIndex = idx);
          $$invalidate2(0, inputElement2.value = filteredData[highlightIndex].name, inputElement2);
        }
        highlight(listElement);
      } else
        $$invalidate2(0, inputElement2.value = "", inputElement2);
    }
  }
  function up() {
    if (!opened)
      return open();
    let idx = highlightIndex - 1;
    while (idx > 0 && !filteredData[idx])
      idx -= 1;
    if (idx !== highlightIndex && filteredData[idx]) {
      $$invalidate2(14, highlightIndex = filteredData[idx].idx);
      highlight(listElement);
    }
  }
  function down() {
    if (!opened)
      return open();
    let idx = highlightIndex + 1;
    while (idx < filteredData.length - 1 && !filteredData[idx])
      idx += 1;
    let item = filteredData[idx];
    if (shouldShowNewItem && idx === filteredData.length) {
      item = { idx: filteredData.length };
    }
    if (idx !== highlightIndex && item) {
      $$invalidate2(14, highlightIndex = item.idx);
      highlight(listElement);
    }
  }
  function revert() {
    if (originalText && originalText !== inputElement2.value)
      $$invalidate2(0, inputElement2.value = originalText, inputElement2);
    else if (value2 && value2.name)
      $$invalidate2(0, inputElement2.value = value2.name, inputElement2);
    else
      $$invalidate2(0, inputElement2.value = "", inputElement2);
  }
  function clear() {
    $$invalidate2(0, inputElement2.value = "", inputElement2);
    filter();
    requestAnimationFrame(() => inputElement2.focus());
  }
  function onfocus() {
    originalText = inputElement2.value;
    if (showOnFocus === true || showOnFocus === "true")
      open();
  }
  function oninput() {
    $$invalidate2(0, inputElement2);
    open();
    requestAnimationFrame(filter);
    recalculateListPosition(listElement, inputElement2, elevated);
    hasEdited = true;
    hasSetValue = false;
  }
  function onblur() {
    if (isSelecting)
      return;
    if (opened && !inputElement2.value)
      return revert();
    selectItem();
    setTimeout(
      () => {
        if (document.activeElement != inputElement2)
          close();
      },
      200
    );
  }
  function onListMouseDown() {
    isSelecting = true;
  }
  function onclick(item) {
    const oldValue = value2;
    $$invalidate2(1, value2 = item);
    $$invalidate2(0, inputElement2.value = item.name, inputElement2);
    $$invalidate2(14, highlightIndex = item.idx);
    dispatch2("change", { value: value2, oldValue });
    requestAnimationFrame(() => {
      inputElement2.focus();
      close();
    });
  }
  function onkeydown2(e) {
    if (e.key === "Tab") {
      selectItem();
      return close();
    }
    const fnmap = {
      ArrowDown: down,
      ArrowUp: up,
      Escape: onEsc
    };
    if (typeof fnmap[e.key] === "function") {
      e.preventDefault();
      fnmap[e.key](e);
    }
  }
  function onkeypress(e) {
    if (e.key === "Enter" && opened) {
      e.preventDefault();
      hasSetValue = false;
      selectItem();
    }
  }
  function onEsc(e) {
    if (clearOnEsc && inputElement2.value) {
      e.stopPropagation();
      return clear();
    }
    if (opened) {
      e.stopPropagation();
      revert();
      inputElement2.focus();
      return close();
    }
    dispatch2("keydown", e);
  }
  function onIconClick() {
    inputElement2.focus();
    inputElement2.click();
  }
  function onScrollOrResize(e) {
    if (!opened)
      return;
    if (e.target === listElement || e.target === inputElement2 || mouseOverList)
      return;
    if (e.type === "resize" && hideOnResize !== true && hideOnResize !== "true")
      return;
    if (e.type === "scroll" && hideOnScroll !== true && hideOnScroll !== "true")
      return;
    inputElement2.blur();
    return close();
  }
  function onDocumentClick(e) {
    const notEl = element41 && !element41.contains(e.target);
    const notList = listElement && !listElement.contains(e.target);
    if (open && notEl && notList) {
      e.stopPropagation();
      close();
    }
  }
  function addEventListeners() {
    window.addEventListener("resize", onScrollOrResize);
    document.addEventListener("scroll", onScrollOrResize, true);
    document.addEventListener("click", onDocumentClick, true);
  }
  function removeEventListeners() {
    window.removeEventListener("resize", onScrollOrResize);
    document.removeEventListener("scroll", onScrollOrResize, true);
    document.removeEventListener("click", onDocumentClick, true);
  }
  function input_binding2($$value) {
    import_internal13.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(0, inputElement2);
    });
  }
  const click_handler = (item) => onclick(item);
  const click_handler_1 = () => onclick({
    name: inputElement2.value,
    idx: filteredData.length
  });
  const mouseenter_handler = () => $$invalidate2(13, mouseOverList = true);
  const mouseleave_handler = () => $$invalidate2(13, mouseOverList = false);
  function div1_binding($$value) {
    import_internal13.binding_callbacks[$$value ? "unshift" : "push"](() => {
      listElement = $$value;
      $$invalidate2(3, listElement);
    });
  }
  function div4_binding($$value) {
    import_internal13.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(2, element41);
    });
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(65, $$props2 = (0, import_internal13.assign)((0, import_internal13.assign)({}, $$props2), (0, import_internal13.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate2(4, className2 = $$new_props.class);
    if ("disabled" in $$new_props)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("required" in $$new_props)
      $$invalidate2(6, required2 = $$new_props.required);
    if ("id" in $$new_props)
      $$invalidate2(31, id2 = $$new_props.id);
    if ("data" in $$new_props)
      $$invalidate2(30, data = $$new_props.data);
    if ("value" in $$new_props)
      $$invalidate2(1, value2 = $$new_props.value);
    if ("allowNew" in $$new_props)
      $$invalidate2(7, allowNew = $$new_props.allowNew);
    if ("showAllInitially" in $$new_props)
      $$invalidate2(32, showAllInitially = $$new_props.showAllInitially);
    if ("clearOnEsc" in $$new_props)
      $$invalidate2(33, clearOnEsc = $$new_props.clearOnEsc);
    if ("elevate" in $$new_props)
      $$invalidate2(34, elevate = $$new_props.elevate);
    if ("showOnFocus" in $$new_props)
      $$invalidate2(35, showOnFocus = $$new_props.showOnFocus);
    if ("hideOnScroll" in $$new_props)
      $$invalidate2(36, hideOnScroll = $$new_props.hideOnScroll);
    if ("hideOnResize" in $$new_props)
      $$invalidate2(37, hideOnResize = $$new_props.hideOnResize);
    if ("label" in $$new_props)
      $$invalidate2(8, label2 = $$new_props.label);
    if ("error" in $$new_props)
      $$invalidate2(9, error2 = $$new_props.error);
    if ("info" in $$new_props)
      $$invalidate2(10, info2 = $$new_props.info);
    if ("element" in $$new_props)
      $$invalidate2(2, element41 = $$new_props.element);
    if ("inputElement" in $$new_props)
      $$invalidate2(0, inputElement2 = $$new_props.inputElement);
    if ("listElement" in $$new_props)
      $$invalidate2(3, listElement = $$new_props.listElement);
  };
  $$self2.$capture_state = () => ({
    afterUpdate: import_svelte3.afterUpdate,
    createEventDispatcher: import_svelte3.createEventDispatcher,
    onDestroy: import_svelte3.onDestroy,
    onMount: import_svelte3.onMount,
    deepCopy,
    emphasize,
    fuzzy,
    highlight,
    recalculateListPosition,
    groupData,
    pluck,
    guid,
    Button: Button_default,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    disabled: disabled2,
    required: required2,
    id: id2,
    data,
    value: value2,
    allowNew,
    showAllInitially,
    clearOnEsc,
    elevate,
    showOnFocus,
    hideOnScroll,
    hideOnResize,
    label: label2,
    error: error2,
    info: info2,
    element: element41,
    inputElement: inputElement2,
    listElement,
    dispatch: dispatch2,
    gui,
    errorMessageId: errorMessageId2,
    opened,
    hasEdited,
    mouseOverList,
    highlightIndex,
    filteredData,
    groupedData,
    originalText,
    hasSetValue,
    isSelecting,
    filter,
    open,
    close,
    selectItem,
    setInitialValue,
    up,
    down,
    revert,
    clear,
    onfocus,
    oninput,
    onblur,
    onListMouseDown,
    onclick,
    onkeydown: onkeydown2,
    onkeypress,
    onEsc,
    onIconClick,
    onScrollOrResize,
    onDocumentClick,
    addEventListeners,
    removeEventListeners,
    elevated,
    shouldShowNewItem,
    valueMatchesItem,
    props: props2,
    _id: _id2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(65, $$props2 = (0, import_internal13.assign)((0, import_internal13.assign)({}, $$props2), $$new_props));
    if ("className" in $$props2)
      $$invalidate2(4, className2 = $$new_props.className);
    if ("disabled" in $$props2)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("required" in $$props2)
      $$invalidate2(6, required2 = $$new_props.required);
    if ("id" in $$props2)
      $$invalidate2(31, id2 = $$new_props.id);
    if ("data" in $$props2)
      $$invalidate2(30, data = $$new_props.data);
    if ("value" in $$props2)
      $$invalidate2(1, value2 = $$new_props.value);
    if ("allowNew" in $$props2)
      $$invalidate2(7, allowNew = $$new_props.allowNew);
    if ("showAllInitially" in $$props2)
      $$invalidate2(32, showAllInitially = $$new_props.showAllInitially);
    if ("clearOnEsc" in $$props2)
      $$invalidate2(33, clearOnEsc = $$new_props.clearOnEsc);
    if ("elevate" in $$props2)
      $$invalidate2(34, elevate = $$new_props.elevate);
    if ("showOnFocus" in $$props2)
      $$invalidate2(35, showOnFocus = $$new_props.showOnFocus);
    if ("hideOnScroll" in $$props2)
      $$invalidate2(36, hideOnScroll = $$new_props.hideOnScroll);
    if ("hideOnResize" in $$props2)
      $$invalidate2(37, hideOnResize = $$new_props.hideOnResize);
    if ("label" in $$props2)
      $$invalidate2(8, label2 = $$new_props.label);
    if ("error" in $$props2)
      $$invalidate2(9, error2 = $$new_props.error);
    if ("info" in $$props2)
      $$invalidate2(10, info2 = $$new_props.info);
    if ("element" in $$props2)
      $$invalidate2(2, element41 = $$new_props.element);
    if ("inputElement" in $$props2)
      $$invalidate2(0, inputElement2 = $$new_props.inputElement);
    if ("listElement" in $$props2)
      $$invalidate2(3, listElement = $$new_props.listElement);
    if ("opened" in $$props2)
      $$invalidate2(12, opened = $$new_props.opened);
    if ("hasEdited" in $$props2)
      hasEdited = $$new_props.hasEdited;
    if ("mouseOverList" in $$props2)
      $$invalidate2(13, mouseOverList = $$new_props.mouseOverList);
    if ("highlightIndex" in $$props2)
      $$invalidate2(14, highlightIndex = $$new_props.highlightIndex);
    if ("filteredData" in $$props2)
      $$invalidate2(11, filteredData = $$new_props.filteredData);
    if ("groupedData" in $$props2)
      $$invalidate2(15, groupedData = $$new_props.groupedData);
    if ("originalText" in $$props2)
      originalText = $$new_props.originalText;
    if ("hasSetValue" in $$props2)
      hasSetValue = $$new_props.hasSetValue;
    if ("isSelecting" in $$props2)
      isSelecting = $$new_props.isSelecting;
    if ("elevated" in $$props2)
      elevated = $$new_props.elevated;
    if ("shouldShowNewItem" in $$props2)
      $$invalidate2(16, shouldShowNewItem = $$new_props.shouldShowNewItem);
    if ("valueMatchesItem" in $$props2)
      $$invalidate2(38, valueMatchesItem = $$new_props.valueMatchesItem);
    if ("props" in $$props2)
      $$invalidate2(17, props2 = $$new_props.props);
    if ("_id" in $$props2)
      $$invalidate2(18, _id2 = $$new_props._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty[1] & /*id*/
    1) {
      $:
        $$invalidate2(18, _id2 = id2 || name || guid());
    }
    if ($$self2.$$.dirty[1] & /*elevate*/
    8) {
      $:
        elevated = elevate === "true" || elevate === true;
    }
    $:
      $$invalidate2(17, props2 = pluck($$props2, ["title", "name", "placeholder"]));
    if ($$self2.$$.dirty[0] & /*filteredData, inputElement*/
    2049) {
      $:
        $$invalidate2(38, valueMatchesItem = filteredData && filteredData.length && filteredData.find((i) => i.name === inputElement2.value));
    }
    if ($$self2.$$.dirty[0] & /*allowNew, inputElement*/
    129 | $$self2.$$.dirty[1] & /*valueMatchesItem*/
    128) {
      $:
        $$invalidate2(16, shouldShowNewItem = (allowNew === true || allowNew === "true") && inputElement2 && inputElement2.value && !valueMatchesItem);
    }
  };
  $$props2 = (0, import_internal13.exclude_internal_props)($$props2);
  return [
    inputElement2,
    value2,
    element41,
    listElement,
    className2,
    disabled2,
    required2,
    allowNew,
    label2,
    error2,
    info2,
    filteredData,
    opened,
    mouseOverList,
    highlightIndex,
    groupedData,
    shouldShowNewItem,
    props2,
    _id2,
    gui,
    errorMessageId2,
    open,
    onfocus,
    oninput,
    onblur,
    onListMouseDown,
    onclick,
    onkeydown2,
    onkeypress,
    onIconClick,
    data,
    id2,
    showAllInitially,
    clearOnEsc,
    elevate,
    showOnFocus,
    hideOnScroll,
    hideOnResize,
    valueMatchesItem,
    input_binding2,
    click_handler,
    click_handler_1,
    mouseenter_handler,
    mouseleave_handler,
    div1_binding,
    div4_binding
  ];
}
var Autocomplete = class extends import_internal13.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal13.init)(
      this,
      options,
      instance13,
      create_fragment13,
      import_internal13.safe_not_equal,
      {
        class: 4,
        disabled: 5,
        required: 6,
        id: 31,
        data: 30,
        value: 1,
        allowNew: 7,
        showAllInitially: 32,
        clearOnEsc: 33,
        elevate: 34,
        showOnFocus: 35,
        hideOnScroll: 36,
        hideOnResize: 37,
        label: 8,
        error: 9,
        info: 10,
        element: 2,
        inputElement: 0,
        listElement: 3
      },
      null,
      [-1, -1, -1]
    );
    (0, import_internal13.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Autocomplete",
      options,
      id: create_fragment13.name
    });
  }
  get class() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get data() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get allowNew() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set allowNew(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get showAllInitially() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set showAllInitially(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get clearOnEsc() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set clearOnEsc(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get elevate() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set elevate(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get showOnFocus() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set showOnFocus(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hideOnScroll() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hideOnScroll(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hideOnResize() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hideOnResize(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get listElement() {
    throw new Error("<Autocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set listElement(value2) {
    throw new Error("<Autocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Autocomplete_default = Autocomplete;

// src/input/button-toggle/ButtonToggle.svelte
var import_internal14 = __toESM(require_internal());
var import_svelte4 = __toESM(require_svelte());
var file9 = "src/input/button-toggle/ButtonToggle.svelte";
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  return child_ctx;
}
function create_if_block7(ctx) {
  let icon;
  let current;
  icon = new Icon_default({
    props: { name: (
      /*item*/
      ctx[19].icon
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal14.create_component)(icon.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal14.mount_component)(icon, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*_items*/
      1024)
        icon_changes.name = /*item*/
        ctx2[19].icon;
      icon.$set(icon_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal14.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal14.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal14.destroy_component)(icon, detaching);
    }
  };
  (0, import_internal14.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block7.name,
    type: "if",
    source: "(26:7) {#if item.icon}",
    ctx
  });
  return block;
}
function create_each_block2(ctx) {
  let label_1;
  let t0;
  let t1_value = (
    /*item*/
    (ctx[19].name || "") + ""
  );
  let t1;
  let t2;
  let input;
  let input_checked_value;
  let input_value_value;
  let t3;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*item*/
    ctx[19].icon && create_if_block7(ctx)
  );
  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[16](
        /*item*/
        ctx[19],
        ...args
      )
    );
  }
  const block = {
    c: function create() {
      label_1 = (0, import_internal14.element)("label");
      if (if_block)
        if_block.c();
      t0 = (0, import_internal14.space)();
      t1 = (0, import_internal14.text)(t1_value);
      t2 = (0, import_internal14.space)();
      input = (0, import_internal14.element)("input");
      t3 = (0, import_internal14.space)();
      input.disabled = /*disabled*/
      ctx[3];
      (0, import_internal14.attr_dev)(
        input,
        "name",
        /*name*/
        ctx[5]
      );
      (0, import_internal14.attr_dev)(input, "type", "radio");
      input.checked = input_checked_value = /*item*/
      ctx[19].value === /*value*/
      ctx[0];
      input.value = input_value_value = /*item*/
      ctx[19].value;
      (0, import_internal14.add_location)(input, file9, 29, 7, 744);
      (0, import_internal14.attr_dev)(
        label_1,
        "disabled",
        /*disabled*/
        ctx[3]
      );
      (0, import_internal14.attr_dev)(label_1, "class", "button button-normal");
      (0, import_internal14.toggle_class)(
        label_1,
        "button-has-text",
        /*item*/
        ctx[19].name
      );
      (0, import_internal14.add_location)(label_1, file9, 19, 5, 468);
    },
    m: function mount(target, anchor) {
      (0, import_internal14.insert_dev)(target, label_1, anchor);
      if (if_block)
        if_block.m(label_1, null);
      (0, import_internal14.append_dev)(label_1, t0);
      (0, import_internal14.append_dev)(label_1, t1);
      (0, import_internal14.append_dev)(label_1, t2);
      (0, import_internal14.append_dev)(label_1, input);
      (0, import_internal14.append_dev)(label_1, t3);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal14.listen_dev)(input, "change", change_handler, false, false, false, false),
          (0, import_internal14.listen_dev)(label_1, "touchstart", onmousedown, false, false, false, false),
          (0, import_internal14.listen_dev)(label_1, "mousedown", onmousedown, false, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*item*/
        ctx[19].icon
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty & /*_items*/
          1024) {
            (0, import_internal14.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block7(ctx);
          if_block.c();
          (0, import_internal14.transition_in)(if_block, 1);
          if_block.m(label_1, t0);
        }
      } else if (if_block) {
        (0, import_internal14.group_outros)();
        (0, import_internal14.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal14.check_outros)();
      }
      if ((!current || dirty & /*_items*/
      1024) && t1_value !== (t1_value = /*item*/
      (ctx[19].name || "") + ""))
        (0, import_internal14.set_data_dev)(t1, t1_value);
      if (!current || dirty & /*disabled*/
      8) {
        (0, import_internal14.prop_dev)(
          input,
          "disabled",
          /*disabled*/
          ctx[3]
        );
      }
      if (!current || dirty & /*name*/
      32) {
        (0, import_internal14.attr_dev)(
          input,
          "name",
          /*name*/
          ctx[5]
        );
      }
      if (!current || dirty & /*_items, value*/
      1025 && input_checked_value !== (input_checked_value = /*item*/
      ctx[19].value === /*value*/
      ctx[0])) {
        (0, import_internal14.prop_dev)(input, "checked", input_checked_value);
      }
      if (!current || dirty & /*_items*/
      1024 && input_value_value !== (input_value_value = /*item*/
      ctx[19].value)) {
        (0, import_internal14.prop_dev)(input, "value", input_value_value);
      }
      if (!current || dirty & /*disabled*/
      8) {
        (0, import_internal14.attr_dev)(
          label_1,
          "disabled",
          /*disabled*/
          ctx[3]
        );
      }
      if (!current || dirty & /*_items*/
      1024) {
        (0, import_internal14.toggle_class)(
          label_1,
          "button-has-text",
          /*item*/
          ctx[19].name
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal14.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal14.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal14.detach_dev)(label_1);
      if (if_block)
        if_block.d();
      mounted = false;
      (0, import_internal14.run_all)(dispose);
    }
  };
  (0, import_internal14.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block2.name,
    type: "each",
    source: "(19:4) {#each _items as item}",
    ctx
  });
  return block;
}
function create_fragment14(ctx) {
  let div3;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div2;
  let inputerror;
  let t2;
  let div1;
  let div0;
  let div3_class_value;
  let div3_aria_errormessage_value;
  let current;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[7]
      ),
      disabled: (
        /*disabled*/
        ctx[3]
      ),
      for: (
        /*_id*/
        ctx[11]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[9]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[12]
      ),
      msg: (
        /*error*/
        ctx[8]
      )
    },
    $$inline: true
  });
  let each_value = (
    /*_items*/
    ctx[10]
  );
  (0, import_internal14.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const out = (i) => (0, import_internal14.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      div3 = (0, import_internal14.element)("div");
      (0, import_internal14.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal14.space)();
      (0, import_internal14.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal14.space)();
      div2 = (0, import_internal14.element)("div");
      (0, import_internal14.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal14.space)();
      div1 = (0, import_internal14.element)("div");
      div0 = (0, import_internal14.element)("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal14.attr_dev)(div0, "class", "input-row");
      (0, import_internal14.attr_dev)(
        div0,
        "id",
        /*_id*/
        ctx[11]
      );
      (0, import_internal14.add_location)(div0, file9, 17, 3, 401);
      (0, import_internal14.attr_dev)(div1, "class", "input-scroller");
      (0, import_internal14.add_location)(div1, file9, 16, 2, 369);
      (0, import_internal14.attr_dev)(div2, "class", "input-inner");
      (0, import_internal14.add_location)(div2, file9, 13, 1, 287);
      (0, import_internal14.attr_dev)(div3, "class", div3_class_value = "input button-toggle " + /*className*/
      ctx[2]);
      (0, import_internal14.attr_dev)(div3, "role", "radiogroup");
      (0, import_internal14.attr_dev)(
        div3,
        "aria-invalid",
        /*error*/
        ctx[8]
      );
      (0, import_internal14.attr_dev)(div3, "aria-errormessage", div3_aria_errormessage_value = /*error*/
      ctx[8] ? (
        /*errorMessageId*/
        ctx[12]
      ) : void 0);
      (0, import_internal14.attr_dev)(
        div3,
        "title",
        /*title*/
        ctx[6]
      );
      (0, import_internal14.toggle_class)(
        div3,
        "round",
        /*round*/
        ctx[4]
      );
      (0, import_internal14.toggle_class)(
        div3,
        "has-error",
        /*error*/
        ctx[8]
      );
      (0, import_internal14.add_location)(div3, file9, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal14.insert_dev)(target, div3, anchor);
      (0, import_internal14.mount_component)(label_1, div3, null);
      (0, import_internal14.append_dev)(div3, t0);
      (0, import_internal14.mount_component)(info_1, div3, null);
      (0, import_internal14.append_dev)(div3, t1);
      (0, import_internal14.append_dev)(div3, div2);
      (0, import_internal14.mount_component)(inputerror, div2, null);
      (0, import_internal14.append_dev)(div2, t2);
      (0, import_internal14.append_dev)(div2, div1);
      (0, import_internal14.append_dev)(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      ctx[17](div3);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      128)
        label_1_changes.label = /*label*/
        ctx2[7];
      if (dirty & /*disabled*/
      8)
        label_1_changes.disabled = /*disabled*/
        ctx2[3];
      if (dirty & /*_id*/
      2048)
        label_1_changes.for = /*_id*/
        ctx2[11];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      512)
        info_1_changes.msg = /*info*/
        ctx2[9];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      256)
        inputerror_changes.msg = /*error*/
        ctx2[8];
      inputerror.$set(inputerror_changes);
      if (dirty & /*disabled, _items, onmousedown, name, value, onchange*/
      9257) {
        each_value = /*_items*/
        ctx2[10];
        (0, import_internal14.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0, import_internal14.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            (0, import_internal14.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div0, null);
          }
        }
        (0, import_internal14.group_outros)();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        (0, import_internal14.check_outros)();
      }
      if (!current || dirty & /*_id*/
      2048) {
        (0, import_internal14.attr_dev)(
          div0,
          "id",
          /*_id*/
          ctx2[11]
        );
      }
      if (!current || dirty & /*className*/
      4 && div3_class_value !== (div3_class_value = "input button-toggle " + /*className*/
      ctx2[2])) {
        (0, import_internal14.attr_dev)(div3, "class", div3_class_value);
      }
      if (!current || dirty & /*error*/
      256) {
        (0, import_internal14.attr_dev)(
          div3,
          "aria-invalid",
          /*error*/
          ctx2[8]
        );
      }
      if (!current || dirty & /*error*/
      256 && div3_aria_errormessage_value !== (div3_aria_errormessage_value = /*error*/
      ctx2[8] ? (
        /*errorMessageId*/
        ctx2[12]
      ) : void 0)) {
        (0, import_internal14.attr_dev)(div3, "aria-errormessage", div3_aria_errormessage_value);
      }
      if (!current || dirty & /*title*/
      64) {
        (0, import_internal14.attr_dev)(
          div3,
          "title",
          /*title*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*className, round*/
      20) {
        (0, import_internal14.toggle_class)(
          div3,
          "round",
          /*round*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*className, error*/
      260) {
        (0, import_internal14.toggle_class)(
          div3,
          "has-error",
          /*error*/
          ctx2[8]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal14.transition_in)(label_1.$$.fragment, local);
      (0, import_internal14.transition_in)(info_1.$$.fragment, local);
      (0, import_internal14.transition_in)(inputerror.$$.fragment, local);
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal14.transition_in)(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      (0, import_internal14.transition_out)(label_1.$$.fragment, local);
      (0, import_internal14.transition_out)(info_1.$$.fragment, local);
      (0, import_internal14.transition_out)(inputerror.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal14.transition_out)(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal14.detach_dev)(div3);
      (0, import_internal14.destroy_component)(label_1);
      (0, import_internal14.destroy_component)(info_1);
      (0, import_internal14.destroy_component)(inputerror);
      (0, import_internal14.destroy_each)(each_blocks, detaching);
      ctx[17](null);
    }
  };
  (0, import_internal14.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment14.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onmousedown(e) {
  const btnEl = e.target.querySelector("input");
  if (!btnEl)
    return;
  requestAnimationFrame(() => btnEl.focus());
}
function instance14($$self2, $$props2, $$invalidate2) {
  let _id2;
  let _items;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal14.validate_slots)("ButtonToggle", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { disabled: disabled2 = void 0 } = $$props2;
  let { round = void 0 } = $$props2;
  let { items = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { name: name2 = guid() } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { title = void 0 } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const errorMessageId2 = guid();
  const dispatch2 = (0, import_svelte4.createEventDispatcher)();
  function onchange4(e, button) {
    if (button.value === value2)
      return;
    const btnEl = e.target && e.target.closest("label");
    if (btnEl)
      btnEl.scrollIntoView({ block: "nearest", inline: "nearest" });
    $$invalidate2(0, value2 = button.value);
    dispatch2("change", value2);
  }
  const writable_props = [
    "class",
    "disabled",
    "round",
    "items",
    "id",
    "name",
    "value",
    "title",
    "label",
    "error",
    "info",
    "element"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ButtonToggle> was created with unknown prop '${key}'`);
  });
  const change_handler = (item, e) => onchange4(e, item);
  function div3_binding($$value) {
    import_internal14.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(2, className2 = $$props3.class);
    if ("disabled" in $$props3)
      $$invalidate2(3, disabled2 = $$props3.disabled);
    if ("round" in $$props3)
      $$invalidate2(4, round = $$props3.round);
    if ("items" in $$props3)
      $$invalidate2(14, items = $$props3.items);
    if ("id" in $$props3)
      $$invalidate2(15, id2 = $$props3.id);
    if ("name" in $$props3)
      $$invalidate2(5, name2 = $$props3.name);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("title" in $$props3)
      $$invalidate2(6, title = $$props3.title);
    if ("label" in $$props3)
      $$invalidate2(7, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(8, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(9, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte4.createEventDispatcher,
    guid,
    Icon: Icon_default,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    disabled: disabled2,
    round,
    items,
    id: id2,
    name: name2,
    value: value2,
    title,
    label: label2,
    error: error2,
    info: info2,
    element: element41,
    errorMessageId: errorMessageId2,
    dispatch: dispatch2,
    onmousedown,
    onchange: onchange4,
    _items,
    _id: _id2
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(2, className2 = $$props3.className);
    if ("disabled" in $$props3)
      $$invalidate2(3, disabled2 = $$props3.disabled);
    if ("round" in $$props3)
      $$invalidate2(4, round = $$props3.round);
    if ("items" in $$props3)
      $$invalidate2(14, items = $$props3.items);
    if ("id" in $$props3)
      $$invalidate2(15, id2 = $$props3.id);
    if ("name" in $$props3)
      $$invalidate2(5, name2 = $$props3.name);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("title" in $$props3)
      $$invalidate2(6, title = $$props3.title);
    if ("label" in $$props3)
      $$invalidate2(7, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(8, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(9, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("_items" in $$props3)
      $$invalidate2(10, _items = $$props3._items);
    if ("_id" in $$props3)
      $$invalidate2(11, _id2 = $$props3._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*id, name*/
    32800) {
      $:
        $$invalidate2(11, _id2 = id2 || name2 || guid());
    }
    if ($$self2.$$.dirty & /*items*/
    16384) {
      $:
        $$invalidate2(10, _items = items.map((item) => {
          if (typeof item === "string") {
            return { name: item, value: item };
          }
          return item;
        }));
    }
  };
  return [
    value2,
    element41,
    className2,
    disabled2,
    round,
    name2,
    title,
    label2,
    error2,
    info2,
    _items,
    _id2,
    errorMessageId2,
    onchange4,
    items,
    id2,
    change_handler,
    div3_binding
  ];
}
var ButtonToggle = class extends import_internal14.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal14.init)(this, options, instance14, create_fragment14, import_internal14.safe_not_equal, {
      class: 2,
      disabled: 3,
      round: 4,
      items: 14,
      id: 15,
      name: 5,
      value: 0,
      title: 6,
      label: 7,
      error: 8,
      info: 9,
      element: 1
    });
    (0, import_internal14.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ButtonToggle",
      options,
      id: create_fragment14.name
    });
  }
  get class() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get items() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set items(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<ButtonToggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<ButtonToggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ButtonToggle_default = ButtonToggle;

// src/input/checkbox/Checkbox.svelte
var import_internal15 = __toESM(require_internal());
var import_svelte5 = __toESM(require_svelte());
var file10 = "src/input/checkbox/Checkbox.svelte";
function create_fragment15(ctx) {
  let div1;
  let info_1;
  let t0;
  let inputerror;
  let t1;
  let div0;
  let input;
  let input_aria_errormessage_value;
  let t2;
  let label_1;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[8]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[14]
      ),
      msg: (
        /*error*/
        ctx[7]
      ),
      animOffset: "8"
    },
    $$inline: true
  });
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[6]
      ),
      for: (
        /*_id*/
        ctx[13]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      div1 = (0, import_internal15.element)("div");
      (0, import_internal15.create_component)(info_1.$$.fragment);
      t0 = (0, import_internal15.space)();
      (0, import_internal15.create_component)(inputerror.$$.fragment);
      t1 = (0, import_internal15.space)();
      div0 = (0, import_internal15.element)("div");
      input = (0, import_internal15.element)("input");
      t2 = (0, import_internal15.space)();
      (0, import_internal15.create_component)(label_1.$$.fragment);
      (0, import_internal15.attr_dev)(input, "type", "checkbox");
      (0, import_internal15.attr_dev)(
        input,
        "name",
        /*name*/
        ctx[11]
      );
      (0, import_internal15.attr_dev)(
        input,
        "id",
        /*_id*/
        ctx[13]
      );
      input.disabled = /*disabled*/
      ctx[5];
      (0, import_internal15.attr_dev)(
        input,
        "tabindex",
        /*tabindex*/
        ctx[10]
      );
      (0, import_internal15.attr_dev)(
        input,
        "aria-invalid",
        /*error*/
        ctx[7]
      );
      (0, import_internal15.attr_dev)(input, "aria-errormessage", input_aria_errormessage_value = /*error*/
      ctx[7] ? (
        /*errorMessageId*/
        ctx[14]
      ) : void 0);
      (0, import_internal15.attr_dev)(
        input,
        "aria-required",
        /*required*/
        ctx[12]
      );
      if (
        /*checked*/
        ctx[1] === void 0 || /*indeterminate*/
        ctx[0] === void 0
      )
        (0, import_internal15.add_render_callback)(() => (
          /*input_change_handler*/
          ctx[18].call(input)
        ));
      (0, import_internal15.add_location)(input, file10, 12, 2, 254);
      (0, import_internal15.attr_dev)(div0, "class", "checkbox-row");
      (0, import_internal15.add_location)(div0, file10, 11, 1, 225);
      (0, import_internal15.attr_dev)(
        div1,
        "title",
        /*title*/
        ctx[9]
      );
      (0, import_internal15.attr_dev)(div1, "class", div1_class_value = "checkbox " + /*className*/
      ctx[4]);
      (0, import_internal15.toggle_class)(
        div1,
        "indeterminate",
        /*indeterminate*/
        ctx[0]
      );
      (0, import_internal15.toggle_class)(
        div1,
        "disabled",
        /*disabled*/
        ctx[5]
      );
      (0, import_internal15.toggle_class)(
        div1,
        "has-error",
        /*error*/
        ctx[7]
      );
      (0, import_internal15.add_location)(div1, file10, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal15.insert_dev)(target, div1, anchor);
      (0, import_internal15.mount_component)(info_1, div1, null);
      (0, import_internal15.append_dev)(div1, t0);
      (0, import_internal15.mount_component)(inputerror, div1, null);
      (0, import_internal15.append_dev)(div1, t1);
      (0, import_internal15.append_dev)(div1, div0);
      (0, import_internal15.append_dev)(div0, input);
      ctx[17](input);
      input.checked = /*checked*/
      ctx[1];
      input.indeterminate = /*indeterminate*/
      ctx[0];
      (0, import_internal15.append_dev)(div0, t2);
      (0, import_internal15.mount_component)(label_1, div0, null);
      ctx[19](div1);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal15.listen_dev)(
            input,
            "change",
            /*input_change_handler*/
            ctx[18]
          ),
          (0, import_internal15.listen_dev)(
            input,
            "change",
            /*onchange*/
            ctx[15],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const info_1_changes = {};
      if (dirty & /*info*/
      256)
        info_1_changes.msg = /*info*/
        ctx2[8];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      128)
        inputerror_changes.msg = /*error*/
        ctx2[7];
      inputerror.$set(inputerror_changes);
      if (!current || dirty & /*name*/
      2048) {
        (0, import_internal15.attr_dev)(
          input,
          "name",
          /*name*/
          ctx2[11]
        );
      }
      if (!current || dirty & /*_id*/
      8192) {
        (0, import_internal15.attr_dev)(
          input,
          "id",
          /*_id*/
          ctx2[13]
        );
      }
      if (!current || dirty & /*disabled*/
      32) {
        (0, import_internal15.prop_dev)(
          input,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*tabindex*/
      1024) {
        (0, import_internal15.attr_dev)(
          input,
          "tabindex",
          /*tabindex*/
          ctx2[10]
        );
      }
      if (!current || dirty & /*error*/
      128) {
        (0, import_internal15.attr_dev)(
          input,
          "aria-invalid",
          /*error*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*error*/
      128 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
      ctx2[7] ? (
        /*errorMessageId*/
        ctx2[14]
      ) : void 0)) {
        (0, import_internal15.attr_dev)(input, "aria-errormessage", input_aria_errormessage_value);
      }
      if (!current || dirty & /*required*/
      4096) {
        (0, import_internal15.attr_dev)(
          input,
          "aria-required",
          /*required*/
          ctx2[12]
        );
      }
      if (dirty & /*checked*/
      2) {
        input.checked = /*checked*/
        ctx2[1];
      }
      if (dirty & /*indeterminate*/
      1) {
        input.indeterminate = /*indeterminate*/
        ctx2[0];
      }
      const label_1_changes = {};
      if (dirty & /*label*/
      64)
        label_1_changes.label = /*label*/
        ctx2[6];
      if (dirty & /*_id*/
      8192)
        label_1_changes.for = /*_id*/
        ctx2[13];
      label_1.$set(label_1_changes);
      if (!current || dirty & /*title*/
      512) {
        (0, import_internal15.attr_dev)(
          div1,
          "title",
          /*title*/
          ctx2[9]
        );
      }
      if (!current || dirty & /*className*/
      16 && div1_class_value !== (div1_class_value = "checkbox " + /*className*/
      ctx2[4])) {
        (0, import_internal15.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*className, indeterminate*/
      17) {
        (0, import_internal15.toggle_class)(
          div1,
          "indeterminate",
          /*indeterminate*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*className, disabled*/
      48) {
        (0, import_internal15.toggle_class)(
          div1,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*className, error*/
      144) {
        (0, import_internal15.toggle_class)(
          div1,
          "has-error",
          /*error*/
          ctx2[7]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal15.transition_in)(info_1.$$.fragment, local);
      (0, import_internal15.transition_in)(inputerror.$$.fragment, local);
      (0, import_internal15.transition_in)(label_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal15.transition_out)(info_1.$$.fragment, local);
      (0, import_internal15.transition_out)(inputerror.$$.fragment, local);
      (0, import_internal15.transition_out)(label_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal15.detach_dev)(div1);
      (0, import_internal15.destroy_component)(info_1);
      (0, import_internal15.destroy_component)(inputerror);
      ctx[17](null);
      (0, import_internal15.destroy_component)(label_1);
      ctx[19](null);
      mounted = false;
      (0, import_internal15.run_all)(dispose);
    }
  };
  (0, import_internal15.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment15.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance15($$self2, $$props2, $$invalidate2) {
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal15.validate_slots)("Checkbox", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { indeterminate = false } = $$props2;
  let { checked = false } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { title = void 0 } = $$props2;
  let { tabindex = void 0 } = $$props2;
  let { name: name2 = "" } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const errorMessageId2 = guid();
  const dispatch2 = (0, import_svelte5.createEventDispatcher)();
  function onchange4(event2) {
    $$invalidate2(1, checked = event2.target.checked);
    $$invalidate2(0, indeterminate = event2.target.indeterminate);
    dispatch2("change", { event: event2, checked, indeterminate });
  }
  const writable_props = [
    "class",
    "indeterminate",
    "checked",
    "disabled",
    "id",
    "label",
    "error",
    "info",
    "title",
    "tabindex",
    "name",
    "required",
    "element",
    "inputElement"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Checkbox> was created with unknown prop '${key}'`);
  });
  function input_binding2($$value) {
    import_internal15.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(3, inputElement2);
    });
  }
  function input_change_handler() {
    checked = this.checked;
    indeterminate = this.indeterminate;
    $$invalidate2(1, checked);
    $$invalidate2(0, indeterminate);
  }
  function div1_binding($$value) {
    import_internal15.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(2, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(4, className2 = $$props3.class);
    if ("indeterminate" in $$props3)
      $$invalidate2(0, indeterminate = $$props3.indeterminate);
    if ("checked" in $$props3)
      $$invalidate2(1, checked = $$props3.checked);
    if ("disabled" in $$props3)
      $$invalidate2(5, disabled2 = $$props3.disabled);
    if ("id" in $$props3)
      $$invalidate2(16, id2 = $$props3.id);
    if ("label" in $$props3)
      $$invalidate2(6, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(7, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(8, info2 = $$props3.info);
    if ("title" in $$props3)
      $$invalidate2(9, title = $$props3.title);
    if ("tabindex" in $$props3)
      $$invalidate2(10, tabindex = $$props3.tabindex);
    if ("name" in $$props3)
      $$invalidate2(11, name2 = $$props3.name);
    if ("required" in $$props3)
      $$invalidate2(12, required2 = $$props3.required);
    if ("element" in $$props3)
      $$invalidate2(2, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(3, inputElement2 = $$props3.inputElement);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte5.createEventDispatcher,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    indeterminate,
    checked,
    disabled: disabled2,
    id: id2,
    label: label2,
    error: error2,
    info: info2,
    title,
    tabindex,
    name: name2,
    required: required2,
    element: element41,
    inputElement: inputElement2,
    errorMessageId: errorMessageId2,
    dispatch: dispatch2,
    onchange: onchange4,
    _id: _id2
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(4, className2 = $$props3.className);
    if ("indeterminate" in $$props3)
      $$invalidate2(0, indeterminate = $$props3.indeterminate);
    if ("checked" in $$props3)
      $$invalidate2(1, checked = $$props3.checked);
    if ("disabled" in $$props3)
      $$invalidate2(5, disabled2 = $$props3.disabled);
    if ("id" in $$props3)
      $$invalidate2(16, id2 = $$props3.id);
    if ("label" in $$props3)
      $$invalidate2(6, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(7, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(8, info2 = $$props3.info);
    if ("title" in $$props3)
      $$invalidate2(9, title = $$props3.title);
    if ("tabindex" in $$props3)
      $$invalidate2(10, tabindex = $$props3.tabindex);
    if ("name" in $$props3)
      $$invalidate2(11, name2 = $$props3.name);
    if ("required" in $$props3)
      $$invalidate2(12, required2 = $$props3.required);
    if ("element" in $$props3)
      $$invalidate2(2, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(3, inputElement2 = $$props3.inputElement);
    if ("_id" in $$props3)
      $$invalidate2(13, _id2 = $$props3._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*id, name*/
    67584) {
      $:
        $$invalidate2(13, _id2 = id2 || name2 || guid());
    }
  };
  return [
    indeterminate,
    checked,
    element41,
    inputElement2,
    className2,
    disabled2,
    label2,
    error2,
    info2,
    title,
    tabindex,
    name2,
    required2,
    _id2,
    errorMessageId2,
    onchange4,
    id2,
    input_binding2,
    input_change_handler,
    div1_binding
  ];
}
var Checkbox = class extends import_internal15.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal15.init)(this, options, instance15, create_fragment15, import_internal15.safe_not_equal, {
      class: 4,
      indeterminate: 0,
      checked: 1,
      disabled: 5,
      id: 16,
      label: 6,
      error: 7,
      info: 8,
      title: 9,
      tabindex: 10,
      name: 11,
      required: 12,
      element: 2,
      inputElement: 3
    });
    (0, import_internal15.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Checkbox",
      options,
      id: create_fragment15.name
    });
  }
  get class() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get indeterminate() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set indeterminate(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get checked() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set checked(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tabindex() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tabindex(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Checkbox_default = Checkbox;

// src/input/input-date/InputDate.svelte
var import_internal16 = __toESM(require_internal());
var import_svelte6 = __toESM(require_svelte());

// node_modules/vanillajs-datepicker/js/lib/utils.js
function lastItemOf(arr) {
  return arr[arr.length - 1];
}
function pushUnique(arr, ...items) {
  items.forEach((item) => {
    if (arr.includes(item)) {
      return;
    }
    arr.push(item);
  });
  return arr;
}
function stringToArray(str, separator) {
  return str ? str.split(separator) : [];
}
function isInRange(testVal, min, max) {
  const minOK = min === void 0 || testVal >= min;
  const maxOK = max === void 0 || testVal <= max;
  return minOK && maxOK;
}
function limitToRange(val, min, max) {
  if (val < min) {
    return min;
  }
  if (val > max) {
    return max;
  }
  return val;
}
function createTagRepeat(tagName, repeat, attributes = {}, index = 0, html = "") {
  const openTagSrc = Object.keys(attributes).reduce((src, attr) => {
    let val = attributes[attr];
    if (typeof val === "function") {
      val = val(index);
    }
    return `${src} ${attr}="${val}"`;
  }, tagName);
  html += `<${openTagSrc}></${tagName}>`;
  const next = index + 1;
  return next < repeat ? createTagRepeat(tagName, repeat, attributes, next, html) : html;
}
function optimizeTemplateHTML(html) {
  return html.replace(/>\s+/g, ">").replace(/\s+</, "<");
}

// node_modules/vanillajs-datepicker/js/lib/date.js
function stripTime(timeValue) {
  return new Date(timeValue).setHours(0, 0, 0, 0);
}
function today() {
  return (/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0);
}
function dateValue(...args) {
  switch (args.length) {
    case 0:
      return today();
    case 1:
      return stripTime(args[0]);
  }
  const newDate = /* @__PURE__ */ new Date(0);
  newDate.setFullYear(...args);
  return newDate.setHours(0, 0, 0, 0);
}
function addDays(date, amount2) {
  const newDate = new Date(date);
  return newDate.setDate(newDate.getDate() + amount2);
}
function addWeeks(date, amount2) {
  return addDays(date, amount2 * 7);
}
function addMonths(date, amount2) {
  const newDate = new Date(date);
  const monthsToSet = newDate.getMonth() + amount2;
  let expectedMonth = monthsToSet % 12;
  if (expectedMonth < 0) {
    expectedMonth += 12;
  }
  const time = newDate.setMonth(monthsToSet);
  return newDate.getMonth() !== expectedMonth ? newDate.setDate(0) : time;
}
function addYears(date, amount2) {
  const newDate = new Date(date);
  const expectedMonth = newDate.getMonth();
  const time = newDate.setFullYear(newDate.getFullYear() + amount2);
  return expectedMonth === 1 && newDate.getMonth() === 2 ? newDate.setDate(0) : time;
}
function dayDiff(day, from) {
  return (day - from + 7) % 7;
}
function dayOfTheWeekOf(baseDate, dayOfWeek, weekStart = 0) {
  const baseDay = new Date(baseDate).getDay();
  return addDays(baseDate, dayDiff(dayOfWeek, weekStart) - dayDiff(baseDay, weekStart));
}
function calcWeekNum(dayOfTheWeek, sameDayOfFirstWeek) {
  return Math.round((dayOfTheWeek - sameDayOfFirstWeek) / 6048e5) + 1;
}
function getIsoWeek(date) {
  const thuOfTheWeek = dayOfTheWeekOf(date, 4, 1);
  const firstThu = dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0, 4), 4, 1);
  return calcWeekNum(thuOfTheWeek, firstThu);
}
function calcTraditionalWeekNumber(date, weekStart) {
  const startOfFirstWeek = dayOfTheWeekOf(new Date(date).setMonth(0, 1), weekStart, weekStart);
  const startOfTheWeek = dayOfTheWeekOf(date, weekStart, weekStart);
  const weekNum = calcWeekNum(startOfTheWeek, startOfFirstWeek);
  if (weekNum < 53) {
    return weekNum;
  }
  const weekOneOfNextYear = dayOfTheWeekOf(new Date(date).setDate(32), weekStart, weekStart);
  return startOfTheWeek === weekOneOfNextYear ? 1 : weekNum;
}
function getWesternTradWeek(date) {
  return calcTraditionalWeekNumber(date, 0);
}
function getMidEasternWeek(date) {
  return calcTraditionalWeekNumber(date, 6);
}
function startOfYearPeriod(date, years) {
  const year = new Date(date).getFullYear();
  return Math.floor(year / years) * years;
}
function regularizeDate(date, timeSpan, useLastDate) {
  if (timeSpan !== 1 && timeSpan !== 2) {
    return date;
  }
  const newDate = new Date(date);
  if (timeSpan === 1) {
    useLastDate ? newDate.setMonth(newDate.getMonth() + 1, 0) : newDate.setDate(1);
  } else {
    useLastDate ? newDate.setFullYear(newDate.getFullYear() + 1, 0, 0) : newDate.setMonth(0, 1);
  }
  return newDate.setHours(0, 0, 0, 0);
}

// node_modules/vanillajs-datepicker/js/lib/date-format.js
var reFormatTokens = /dd?|DD?|mm?|MM?|yy?(?:yy)?/;
var reNonDateParts = /[\s!-/:-@[-`{-~年月日]+/;
var knownFormats = {};
var parseFns = {
  y(date, year) {
    return new Date(date).setFullYear(parseInt(year, 10));
  },
  m(date, month, locale) {
    const newDate = new Date(date);
    let monthIndex = parseInt(month, 10) - 1;
    if (isNaN(monthIndex)) {
      if (!month) {
        return NaN;
      }
      const monthName = month.toLowerCase();
      const compareNames = (name2) => name2.toLowerCase().startsWith(monthName);
      monthIndex = locale.monthsShort.findIndex(compareNames);
      if (monthIndex < 0) {
        monthIndex = locale.months.findIndex(compareNames);
      }
      if (monthIndex < 0) {
        return NaN;
      }
    }
    newDate.setMonth(monthIndex);
    return newDate.getMonth() !== normalizeMonth(monthIndex) ? newDate.setDate(0) : newDate.getTime();
  },
  d(date, day) {
    return new Date(date).setDate(parseInt(day, 10));
  }
};
var formatFns = {
  d(date) {
    return date.getDate();
  },
  dd(date) {
    return padZero(date.getDate(), 2);
  },
  D(date, locale) {
    return locale.daysShort[date.getDay()];
  },
  DD(date, locale) {
    return locale.days[date.getDay()];
  },
  m(date) {
    return date.getMonth() + 1;
  },
  mm(date) {
    return padZero(date.getMonth() + 1, 2);
  },
  M(date, locale) {
    return locale.monthsShort[date.getMonth()];
  },
  MM(date, locale) {
    return locale.months[date.getMonth()];
  },
  y(date) {
    return date.getFullYear();
  },
  yy(date) {
    return padZero(date.getFullYear(), 2).slice(-2);
  },
  yyyy(date) {
    return padZero(date.getFullYear(), 4);
  }
};
function normalizeMonth(monthIndex) {
  return monthIndex > -1 ? monthIndex % 12 : normalizeMonth(monthIndex + 12);
}
function padZero(num2, length) {
  return num2.toString().padStart(length, "0");
}
function parseFormatString(format) {
  if (typeof format !== "string") {
    throw new Error("Invalid date format.");
  }
  if (format in knownFormats) {
    return knownFormats[format];
  }
  const separators = format.split(reFormatTokens);
  const parts = format.match(new RegExp(reFormatTokens, "g"));
  if (separators.length === 0 || !parts) {
    throw new Error("Invalid date format.");
  }
  const partFormatters = parts.map((token) => formatFns[token]);
  const partParserKeys = Object.keys(parseFns).reduce((keys, key) => {
    const token = parts.find((part) => part[0] !== "D" && part[0].toLowerCase() === key);
    if (token) {
      keys.push(key);
    }
    return keys;
  }, []);
  return knownFormats[format] = {
    parser(dateStr, locale) {
      const dateParts = dateStr.split(reNonDateParts).reduce((dtParts, part, index) => {
        if (part.length > 0 && parts[index]) {
          const token = parts[index][0];
          if (token === "M") {
            dtParts.m = part;
          } else if (token !== "D") {
            dtParts[token] = part;
          }
        }
        return dtParts;
      }, {});
      return partParserKeys.reduce((origDate, key) => {
        const newDate = parseFns[key](origDate, dateParts[key], locale);
        return isNaN(newDate) ? origDate : newDate;
      }, today());
    },
    formatter(date, locale) {
      let dateStr = partFormatters.reduce((str, fn, index) => {
        return str += `${separators[index]}${fn(date, locale)}`;
      }, "");
      return dateStr += lastItemOf(separators);
    }
  };
}
function parseDate(dateStr, format, locale) {
  if (dateStr instanceof Date || typeof dateStr === "number") {
    const date = stripTime(dateStr);
    return isNaN(date) ? void 0 : date;
  }
  if (!dateStr) {
    return void 0;
  }
  if (dateStr === "today") {
    return today();
  }
  if (format && format.toValue) {
    const date = format.toValue(dateStr, format, locale);
    return isNaN(date) ? void 0 : stripTime(date);
  }
  return parseFormatString(format).parser(dateStr, locale);
}
function formatDate(date, format, locale) {
  if (isNaN(date) || !date && date !== 0) {
    return "";
  }
  const dateObj = typeof date === "number" ? new Date(date) : date;
  if (format.toDisplay) {
    return format.toDisplay(dateObj, format, locale);
  }
  return parseFormatString(format).formatter(dateObj, locale);
}

// node_modules/vanillajs-datepicker/js/lib/dom.js
var range = document.createRange();
function parseHTML(html) {
  return range.createContextualFragment(html);
}
function getParent(el) {
  return el.parentElement || (el.parentNode instanceof ShadowRoot ? el.parentNode.host : void 0);
}
function isActiveElement(el) {
  return el.getRootNode().activeElement === el;
}
function hideElement(el) {
  if (el.style.display === "none") {
    return;
  }
  if (el.style.display) {
    el.dataset.styleDisplay = el.style.display;
  }
  el.style.display = "none";
}
function showElement(el) {
  if (el.style.display !== "none") {
    return;
  }
  if (el.dataset.styleDisplay) {
    el.style.display = el.dataset.styleDisplay;
    delete el.dataset.styleDisplay;
  } else {
    el.style.display = "";
  }
}
function emptyChildNodes(el) {
  if (el.firstChild) {
    el.removeChild(el.firstChild);
    emptyChildNodes(el);
  }
}
function replaceChildNodes(el, newChildNodes) {
  emptyChildNodes(el);
  if (newChildNodes instanceof DocumentFragment) {
    el.appendChild(newChildNodes);
  } else if (typeof newChildNodes === "string") {
    el.appendChild(parseHTML(newChildNodes));
  } else if (typeof newChildNodes.forEach === "function") {
    newChildNodes.forEach((node) => {
      el.appendChild(node);
    });
  }
}

// node_modules/vanillajs-datepicker/js/lib/event.js
var listenerRegistry = /* @__PURE__ */ new WeakMap();
var { addEventListener, removeEventListener } = EventTarget.prototype;
function registerListeners(keyObj, listeners) {
  let registered = listenerRegistry.get(keyObj);
  if (!registered) {
    registered = [];
    listenerRegistry.set(keyObj, registered);
  }
  listeners.forEach((listener) => {
    addEventListener.call(...listener);
    registered.push(listener);
  });
}
function unregisterListeners(keyObj) {
  let listeners = listenerRegistry.get(keyObj);
  if (!listeners) {
    return;
  }
  listeners.forEach((listener) => {
    removeEventListener.call(...listener);
  });
  listenerRegistry.delete(keyObj);
}
if (!Event.prototype.composedPath) {
  const getComposedPath = (node, path = []) => {
    path.push(node);
    let parent;
    if (node.parentNode) {
      parent = node.parentNode;
    } else if (node.host) {
      parent = node.host;
    } else if (node.defaultView) {
      parent = node.defaultView;
    }
    return parent ? getComposedPath(parent, path) : path;
  };
  Event.prototype.composedPath = function() {
    return getComposedPath(this.target);
  };
}
function findFromPath(path, criteria, currentTarget) {
  const [node, ...rest] = path;
  if (criteria(node)) {
    return node;
  }
  if (node === currentTarget || node.tagName === "HTML" || rest.length === 0) {
    return;
  }
  return findFromPath(rest, criteria, currentTarget);
}
function findElementInEventPath(ev, selector) {
  const criteria = typeof selector === "function" ? selector : (el) => el instanceof Element && el.matches(selector);
  return findFromPath(ev.composedPath(), criteria, ev.currentTarget);
}

// node_modules/vanillajs-datepicker/js/i18n/base-locales.js
var base_locales_default = {
  en: {
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    today: "Today",
    clear: "Clear",
    titleFormat: "MM y"
  }
};

// node_modules/vanillajs-datepicker/js/options/defaultOptions.js
var defaultOptions_default = {
  autohide: false,
  beforeShowDay: null,
  beforeShowDecade: null,
  beforeShowMonth: null,
  beforeShowYear: null,
  clearButton: false,
  dateDelimiter: ",",
  datesDisabled: [],
  daysOfWeekDisabled: [],
  daysOfWeekHighlighted: [],
  defaultViewDate: void 0,
  // placeholder, defaults to today() by the program
  disableTouchKeyboard: false,
  enableOnReadonly: true,
  format: "mm/dd/yyyy",
  language: "en",
  maxDate: null,
  maxNumberOfDates: 1,
  maxView: 3,
  minDate: null,
  nextArrow: "\xBB",
  orientation: "auto",
  pickLevel: 0,
  prevArrow: "\xAB",
  showDaysOfWeek: true,
  showOnClick: true,
  showOnFocus: true,
  startView: 0,
  title: "",
  todayButton: false,
  todayButtonMode: 0,
  todayHighlight: false,
  updateOnBlur: true,
  weekNumbers: 0,
  weekStart: 0
};

// node_modules/vanillajs-datepicker/js/options/processOptions.js
var {
  language: defaultLang,
  format: defaultFormat,
  weekStart: defaultWeekStart
} = defaultOptions_default;
function sanitizeDOW(dow, day) {
  return dow.length < 6 && day >= 0 && day < 7 ? pushUnique(dow, day) : dow;
}
function determineGetWeekMethod(numberingMode, weekStart) {
  const methodId = numberingMode === 4 ? weekStart === 6 ? 3 : !weekStart + 1 : numberingMode;
  switch (methodId) {
    case 1:
      return getIsoWeek;
    case 2:
      return getWesternTradWeek;
    case 3:
      return getMidEasternWeek;
  }
}
function updateWeekStart(newValue, config2, weekNumbers) {
  config2.weekStart = newValue;
  config2.weekEnd = (newValue + 6) % 7;
  if (weekNumbers === 4) {
    config2.getWeekNumber = determineGetWeekMethod(4, newValue);
  }
  return newValue;
}
function validateDate(value2, format, locale, origValue) {
  const date = parseDate(value2, format, locale);
  return date !== void 0 ? date : origValue;
}
function validateViewId(value2, origValue, max = 3) {
  const viewId = parseInt(value2, 10);
  return viewId >= 0 && viewId <= max ? viewId : origValue;
}
function replaceOptions(options, from, to, convert = void 0) {
  if (from in options) {
    if (!(to in options)) {
      options[to] = convert ? convert(options[from]) : options[from];
    }
    delete options[from];
  }
}
function processOptions(options, datepicker) {
  const inOpts = Object.assign({}, options);
  const config2 = {};
  const locales = datepicker.constructor.locales;
  const rangeEnd = !!datepicker.rangeSideIndex;
  let {
    datesDisabled,
    format,
    language,
    locale,
    maxDate,
    maxView,
    minDate,
    pickLevel,
    startView,
    weekNumbers,
    weekStart
  } = datepicker.config || {};
  replaceOptions(inOpts, "calendarWeeks", "weekNumbers", (val) => val ? 1 : 0);
  replaceOptions(inOpts, "clearBtn", "clearButton");
  replaceOptions(inOpts, "todayBtn", "todayButton");
  replaceOptions(inOpts, "todayBtnMode", "todayButtonMode");
  if (inOpts.language) {
    let lang;
    if (inOpts.language !== language) {
      if (locales[inOpts.language]) {
        lang = inOpts.language;
      } else {
        lang = inOpts.language.split("-")[0];
        if (!locales[lang]) {
          lang = false;
        }
      }
    }
    delete inOpts.language;
    if (lang) {
      language = config2.language = lang;
      const origLocale = locale || locales[defaultLang];
      locale = Object.assign({
        format: defaultFormat,
        weekStart: defaultWeekStart
      }, locales[defaultLang]);
      if (language !== defaultLang) {
        Object.assign(locale, locales[language]);
      }
      config2.locale = locale;
      if (format === origLocale.format) {
        format = config2.format = locale.format;
      }
      if (weekStart === origLocale.weekStart) {
        weekStart = updateWeekStart(locale.weekStart, config2, weekNumbers);
      }
    }
  }
  if (inOpts.format) {
    const hasToDisplay = typeof inOpts.format.toDisplay === "function";
    const hasToValue = typeof inOpts.format.toValue === "function";
    const validFormatString = reFormatTokens.test(inOpts.format);
    if (hasToDisplay && hasToValue || validFormatString) {
      format = config2.format = inOpts.format;
    }
    delete inOpts.format;
  }
  let newPickLevel = pickLevel;
  if ("pickLevel" in inOpts) {
    newPickLevel = validateViewId(inOpts.pickLevel, pickLevel, 2);
    delete inOpts.pickLevel;
  }
  if (newPickLevel !== pickLevel) {
    if (newPickLevel > pickLevel) {
      if (!("minDate" in inOpts)) {
        inOpts.minDate = minDate;
      }
      if (!("maxDate" in inOpts)) {
        inOpts.maxDate = maxDate;
      }
    }
    if (datesDisabled && !inOpts.datesDisabled) {
      inOpts.datesDisabled = [];
    }
    pickLevel = config2.pickLevel = newPickLevel;
  }
  let minDt = minDate;
  let maxDt = maxDate;
  if ("minDate" in inOpts) {
    const defaultMinDt = dateValue(0, 0, 1);
    minDt = inOpts.minDate === null ? defaultMinDt : validateDate(inOpts.minDate, format, locale, minDt);
    if (minDt !== defaultMinDt) {
      minDt = regularizeDate(minDt, pickLevel, false);
    }
    delete inOpts.minDate;
  }
  if ("maxDate" in inOpts) {
    maxDt = inOpts.maxDate === null ? void 0 : validateDate(inOpts.maxDate, format, locale, maxDt);
    if (maxDt !== void 0) {
      maxDt = regularizeDate(maxDt, pickLevel, true);
    }
    delete inOpts.maxDate;
  }
  if (maxDt < minDt) {
    minDate = config2.minDate = maxDt;
    maxDate = config2.maxDate = minDt;
  } else {
    if (minDate !== minDt) {
      minDate = config2.minDate = minDt;
    }
    if (maxDate !== maxDt) {
      maxDate = config2.maxDate = maxDt;
    }
  }
  if (inOpts.datesDisabled) {
    const dtsDisabled = inOpts.datesDisabled;
    if (typeof dtsDisabled === "function") {
      config2.datesDisabled = null;
      config2.checkDisabled = (timeValue, viewId) => dtsDisabled(
        new Date(timeValue),
        viewId,
        rangeEnd
      );
    } else {
      const disabled2 = config2.datesDisabled = dtsDisabled.reduce((dates, dt) => {
        const date = parseDate(dt, format, locale);
        return date !== void 0 ? pushUnique(dates, regularizeDate(date, pickLevel, rangeEnd)) : dates;
      }, []);
      config2.checkDisabled = (timeValue) => disabled2.includes(timeValue);
    }
    delete inOpts.datesDisabled;
  }
  if ("defaultViewDate" in inOpts) {
    const viewDate = parseDate(inOpts.defaultViewDate, format, locale);
    if (viewDate !== void 0) {
      config2.defaultViewDate = viewDate;
    }
    delete inOpts.defaultViewDate;
  }
  if ("weekStart" in inOpts) {
    const wkStart = Number(inOpts.weekStart) % 7;
    if (!isNaN(wkStart)) {
      weekStart = updateWeekStart(wkStart, config2, weekNumbers);
    }
    delete inOpts.weekStart;
  }
  if (inOpts.daysOfWeekDisabled) {
    config2.daysOfWeekDisabled = inOpts.daysOfWeekDisabled.reduce(sanitizeDOW, []);
    delete inOpts.daysOfWeekDisabled;
  }
  if (inOpts.daysOfWeekHighlighted) {
    config2.daysOfWeekHighlighted = inOpts.daysOfWeekHighlighted.reduce(sanitizeDOW, []);
    delete inOpts.daysOfWeekHighlighted;
  }
  if ("weekNumbers" in inOpts) {
    let method = inOpts.weekNumbers;
    if (method) {
      const getWeekNumber = typeof method === "function" ? (timeValue, startOfWeek) => method(new Date(timeValue), startOfWeek) : determineGetWeekMethod(method = parseInt(method, 10), weekStart);
      if (getWeekNumber) {
        weekNumbers = config2.weekNumbers = method;
        config2.getWeekNumber = getWeekNumber;
      }
    } else {
      weekNumbers = config2.weekNumbers = 0;
      config2.getWeekNumber = null;
    }
    delete inOpts.weekNumbers;
  }
  if ("maxNumberOfDates" in inOpts) {
    const maxNumberOfDates = parseInt(inOpts.maxNumberOfDates, 10);
    if (maxNumberOfDates >= 0) {
      config2.maxNumberOfDates = maxNumberOfDates;
      config2.multidate = maxNumberOfDates !== 1;
    }
    delete inOpts.maxNumberOfDates;
  }
  if (inOpts.dateDelimiter) {
    config2.dateDelimiter = String(inOpts.dateDelimiter);
    delete inOpts.dateDelimiter;
  }
  let newMaxView = maxView;
  if ("maxView" in inOpts) {
    newMaxView = validateViewId(inOpts.maxView, maxView);
    delete inOpts.maxView;
  }
  newMaxView = pickLevel > newMaxView ? pickLevel : newMaxView;
  if (newMaxView !== maxView) {
    maxView = config2.maxView = newMaxView;
  }
  let newStartView = startView;
  if ("startView" in inOpts) {
    newStartView = validateViewId(inOpts.startView, newStartView);
    delete inOpts.startView;
  }
  if (newStartView < pickLevel) {
    newStartView = pickLevel;
  } else if (newStartView > maxView) {
    newStartView = maxView;
  }
  if (newStartView !== startView) {
    config2.startView = newStartView;
  }
  if (inOpts.prevArrow) {
    const prevArrow = parseHTML(inOpts.prevArrow);
    if (prevArrow.childNodes.length > 0) {
      config2.prevArrow = prevArrow.childNodes;
    }
    delete inOpts.prevArrow;
  }
  if (inOpts.nextArrow) {
    const nextArrow = parseHTML(inOpts.nextArrow);
    if (nextArrow.childNodes.length > 0) {
      config2.nextArrow = nextArrow.childNodes;
    }
    delete inOpts.nextArrow;
  }
  if ("disableTouchKeyboard" in inOpts) {
    config2.disableTouchKeyboard = "ontouchstart" in document && !!inOpts.disableTouchKeyboard;
    delete inOpts.disableTouchKeyboard;
  }
  if (inOpts.orientation) {
    const orientation = inOpts.orientation.toLowerCase().split(/\s+/g);
    config2.orientation = {
      x: orientation.find((x) => x === "left" || x === "right") || "auto",
      y: orientation.find((y) => y === "top" || y === "bottom") || "auto"
    };
    delete inOpts.orientation;
  }
  if ("todayButtonMode" in inOpts) {
    switch (inOpts.todayButtonMode) {
      case 0:
      case 1:
        config2.todayButtonMode = inOpts.todayButtonMode;
    }
    delete inOpts.todayButtonMode;
  }
  Object.entries(inOpts).forEach(([key, value2]) => {
    if (value2 !== void 0 && key in defaultOptions_default) {
      config2[key] = value2;
    }
  });
  return config2;
}

// node_modules/vanillajs-datepicker/js/options/shortcutKeys.js
var defaultShortcutKeys = {
  show: { key: "ArrowDown" },
  hide: null,
  toggle: { key: "Escape" },
  prevButton: { key: "ArrowLeft", ctrlOrMetaKey: true },
  nextButton: { key: "ArrowRight", ctrlOrMetaKey: true },
  viewSwitch: { key: "ArrowUp", ctrlOrMetaKey: true },
  clearButton: { key: "Backspace", ctrlOrMetaKey: true },
  todayButton: { key: ".", ctrlOrMetaKey: true },
  exitEditMode: { key: "ArrowDown", ctrlOrMetaKey: true }
};
function createShortcutKeyConfig(options) {
  return Object.keys(defaultShortcutKeys).reduce((keyDefs, shortcut) => {
    const keyDef = options[shortcut] === void 0 ? defaultShortcutKeys[shortcut] : options[shortcut];
    const key = keyDef && keyDef.key;
    if (!key || typeof key !== "string") {
      return keyDefs;
    }
    const normalizedDef = {
      key,
      ctrlOrMetaKey: !!(keyDef.ctrlOrMetaKey || keyDef.ctrlKey || keyDef.metaKey)
    };
    if (key.length > 1) {
      normalizedDef.altKey = !!keyDef.altKey;
      normalizedDef.shiftKey = !!keyDef.shiftKey;
    }
    keyDefs[shortcut] = normalizedDef;
    return keyDefs;
  }, {});
}

// node_modules/vanillajs-datepicker/js/picker/templates/pickerTemplate.js
var pickerTemplate_default = optimizeTemplateHTML(`<div class="datepicker">
  <div class="datepicker-picker">
    <div class="datepicker-header">
      <div class="datepicker-title"></div>
      <div class="datepicker-controls">
        <button type="button" class="%buttonClass% prev-button prev-btn"></button>
        <button type="button" class="%buttonClass% view-switch"></button>
        <button type="button" class="%buttonClass% next-button next-btn"></button>
      </div>
    </div>
    <div class="datepicker-main"></div>
    <div class="datepicker-footer">
      <div class="datepicker-controls">
        <button type="button" class="%buttonClass% today-button today-btn"></button>
        <button type="button" class="%buttonClass% clear-button clear-btn"></button>
      </div>
    </div>
  </div>
</div>`);

// node_modules/vanillajs-datepicker/js/picker/templates/daysTemplate.js
var daysTemplate_default = optimizeTemplateHTML(`<div class="days">
  <div class="days-of-week">${createTagRepeat("span", 7, { class: "dow" })}</div>
  <div class="datepicker-grid">${createTagRepeat("span", 42)}</div>
</div>`);

// node_modules/vanillajs-datepicker/js/picker/templates/weekNumbersTemplate.js
var weekNumbersTemplate_default = optimizeTemplateHTML(`<div class="week-numbers calendar-weeks">
  <div class="days-of-week"><span class="dow"></span></div>
  <div class="weeks">${createTagRepeat("span", 6, { class: "week" })}</div>
</div>`);

// node_modules/vanillajs-datepicker/js/picker/views/View.js
var View = class {
  constructor(picker, config2) {
    Object.assign(this, config2, {
      picker,
      element: parseHTML(`<div class="datepicker-view"></div>`).firstChild,
      selected: [],
      isRangeEnd: !!picker.datepicker.rangeSideIndex
    });
    this.init(this.picker.datepicker.config);
  }
  init(options) {
    if ("pickLevel" in options) {
      this.isMinView = this.id === options.pickLevel;
    }
    this.setOptions(options);
    this.updateFocus();
    this.updateSelection();
  }
  prepareForRender(switchLabel, prevButtonDisabled, nextButtonDisabled) {
    this.disabled = [];
    const picker = this.picker;
    picker.setViewSwitchLabel(switchLabel);
    picker.setPrevButtonDisabled(prevButtonDisabled);
    picker.setNextButtonDisabled(nextButtonDisabled);
  }
  setDisabled(date, classList) {
    classList.add("disabled");
    pushUnique(this.disabled, date);
  }
  // Execute beforeShow() callback and apply the result to the element
  // args:
  performBeforeHook(el, timeValue) {
    let result = this.beforeShow(new Date(timeValue));
    switch (typeof result) {
      case "boolean":
        result = { enabled: result };
        break;
      case "string":
        result = { classes: result };
    }
    if (result) {
      const classList = el.classList;
      if (result.enabled === false) {
        this.setDisabled(timeValue, classList);
      }
      if (result.classes) {
        const extraClasses = result.classes.split(/\s+/);
        classList.add(...extraClasses);
        if (extraClasses.includes("disabled")) {
          this.setDisabled(timeValue, classList);
        }
      }
      if (result.content) {
        replaceChildNodes(el, result.content);
      }
    }
  }
  renderCell(el, content, cellVal, date, { selected, range: range2 }, outOfScope, extraClasses = []) {
    el.textContent = content;
    if (this.isMinView) {
      el.dataset.date = date;
    }
    const classList = el.classList;
    el.className = `datepicker-cell ${this.cellClass}`;
    if (cellVal < this.first) {
      classList.add("prev");
    } else if (cellVal > this.last) {
      classList.add("next");
    }
    classList.add(...extraClasses);
    if (outOfScope || this.checkDisabled(date, this.id)) {
      this.setDisabled(date, classList);
    }
    if (range2) {
      const [rangeStart, rangeEnd] = range2;
      if (cellVal > rangeStart && cellVal < rangeEnd) {
        classList.add("range");
      }
      if (cellVal === rangeStart) {
        classList.add("range-start");
      }
      if (cellVal === rangeEnd) {
        classList.add("range-end");
      }
    }
    if (selected.includes(cellVal)) {
      classList.add("selected");
    }
    if (cellVal === this.focused) {
      classList.add("focused");
    }
    if (this.beforeShow) {
      this.performBeforeHook(el, date);
    }
  }
  refreshCell(el, cellVal, selected, [rangeStart, rangeEnd]) {
    const classList = el.classList;
    classList.remove("range", "range-start", "range-end", "selected", "focused");
    if (cellVal > rangeStart && cellVal < rangeEnd) {
      classList.add("range");
    }
    if (cellVal === rangeStart) {
      classList.add("range-start");
    }
    if (cellVal === rangeEnd) {
      classList.add("range-end");
    }
    if (selected.includes(cellVal)) {
      classList.add("selected");
    }
    if (cellVal === this.focused) {
      classList.add("focused");
    }
  }
  changeFocusedCell(cellIndex) {
    this.grid.querySelectorAll(".focused").forEach((el) => {
      el.classList.remove("focused");
    });
    this.grid.children[cellIndex].classList.add("focused");
  }
};

// node_modules/vanillajs-datepicker/js/picker/views/DaysView.js
var DaysView = class extends View {
  constructor(picker) {
    super(picker, {
      id: 0,
      name: "days",
      cellClass: "day"
    });
  }
  init(options, onConstruction = true) {
    if (onConstruction) {
      const inner = parseHTML(daysTemplate_default).firstChild;
      this.dow = inner.firstChild;
      this.grid = inner.lastChild;
      this.element.appendChild(inner);
    }
    super.init(options);
  }
  setOptions(options) {
    let updateDOW;
    if ("minDate" in options) {
      this.minDate = options.minDate;
    }
    if ("maxDate" in options) {
      this.maxDate = options.maxDate;
    }
    if (options.checkDisabled) {
      this.checkDisabled = options.checkDisabled;
    }
    if (options.daysOfWeekDisabled) {
      this.daysOfWeekDisabled = options.daysOfWeekDisabled;
      updateDOW = true;
    }
    if (options.daysOfWeekHighlighted) {
      this.daysOfWeekHighlighted = options.daysOfWeekHighlighted;
    }
    if ("todayHighlight" in options) {
      this.todayHighlight = options.todayHighlight;
    }
    if ("weekStart" in options) {
      this.weekStart = options.weekStart;
      this.weekEnd = options.weekEnd;
      updateDOW = true;
    }
    if (options.locale) {
      const locale = this.locale = options.locale;
      this.dayNames = locale.daysMin;
      this.switchLabelFormat = locale.titleFormat;
      updateDOW = true;
    }
    if ("beforeShowDay" in options) {
      this.beforeShow = typeof options.beforeShowDay === "function" ? options.beforeShowDay : void 0;
    }
    if ("weekNumbers" in options) {
      if (options.weekNumbers && !this.weekNumbers) {
        const weeksElem = parseHTML(weekNumbersTemplate_default).firstChild;
        this.weekNumbers = {
          element: weeksElem,
          dow: weeksElem.firstChild,
          weeks: weeksElem.lastChild
        };
        this.element.insertBefore(weeksElem, this.element.firstChild);
      } else if (this.weekNumbers && !options.weekNumbers) {
        this.element.removeChild(this.weekNumbers.element);
        this.weekNumbers = null;
      }
    }
    if ("getWeekNumber" in options) {
      this.getWeekNumber = options.getWeekNumber;
    }
    if ("showDaysOfWeek" in options) {
      if (options.showDaysOfWeek) {
        showElement(this.dow);
        if (this.weekNumbers) {
          showElement(this.weekNumbers.dow);
        }
      } else {
        hideElement(this.dow);
        if (this.weekNumbers) {
          hideElement(this.weekNumbers.dow);
        }
      }
    }
    if (updateDOW) {
      Array.from(this.dow.children).forEach((el, index) => {
        const dow = (this.weekStart + index) % 7;
        el.textContent = this.dayNames[dow];
        el.className = this.daysOfWeekDisabled.includes(dow) ? "dow disabled" : "dow";
      });
    }
  }
  // Apply update on the focused date to view's settings
  updateFocus() {
    const viewDate = new Date(this.picker.viewDate);
    const viewYear = viewDate.getFullYear();
    const viewMonth = viewDate.getMonth();
    const firstOfMonth = dateValue(viewYear, viewMonth, 1);
    const start = dayOfTheWeekOf(firstOfMonth, this.weekStart, this.weekStart);
    this.first = firstOfMonth;
    this.last = dateValue(viewYear, viewMonth + 1, 0);
    this.start = start;
    this.focused = this.picker.viewDate;
  }
  // Apply update on the selected dates to view's settings
  updateSelection() {
    const { dates, rangepicker } = this.picker.datepicker;
    this.selected = dates;
    if (rangepicker) {
      this.range = rangepicker.dates;
    }
  }
  // Update the entire view UI
  render() {
    this.today = this.todayHighlight ? today() : void 0;
    this.prepareForRender(
      formatDate(this.focused, this.switchLabelFormat, this.locale),
      this.first <= this.minDate,
      this.last >= this.maxDate
    );
    if (this.weekNumbers) {
      const weekStart = this.weekStart;
      const startOfWeek = dayOfTheWeekOf(this.first, weekStart, weekStart);
      Array.from(this.weekNumbers.weeks.children).forEach((el, index) => {
        const dateOfWeekStart = addWeeks(startOfWeek, index);
        el.textContent = this.getWeekNumber(dateOfWeekStart, weekStart);
        if (index > 3) {
          el.classList[dateOfWeekStart > this.last ? "add" : "remove"]("next");
        }
      });
    }
    Array.from(this.grid.children).forEach((el, index) => {
      const current = addDays(this.start, index);
      const dateObj = new Date(current);
      const day = dateObj.getDay();
      const extraClasses = [];
      if (this.today === current) {
        extraClasses.push("today");
      }
      if (this.daysOfWeekHighlighted.includes(day)) {
        extraClasses.push("highlighted");
      }
      this.renderCell(
        el,
        dateObj.getDate(),
        current,
        current,
        this,
        current < this.minDate || current > this.maxDate || this.daysOfWeekDisabled.includes(day),
        extraClasses
      );
    });
  }
  // Update the view UI by applying the changes of selected and focused items
  refresh() {
    const range2 = this.range || [];
    Array.from(this.grid.children).forEach((el) => {
      this.refreshCell(el, Number(el.dataset.date), this.selected, range2);
    });
  }
  // Update the view UI by applying the change of focused item
  refreshFocus() {
    this.changeFocusedCell(Math.round((this.focused - this.start) / 864e5));
  }
};

// node_modules/vanillajs-datepicker/js/picker/views/MonthsView.js
function computeMonthRange(range2, thisYear) {
  if (!range2 || !range2[0] || !range2[1]) {
    return;
  }
  const [[startY2, startM], [endY, endM]] = range2;
  if (startY2 > thisYear || endY < thisYear) {
    return;
  }
  return [
    startY2 === thisYear ? startM : -1,
    endY === thisYear ? endM : 12
  ];
}
var MonthsView = class extends View {
  constructor(picker) {
    super(picker, {
      id: 1,
      name: "months",
      cellClass: "month"
    });
  }
  init(options, onConstruction = true) {
    if (onConstruction) {
      this.grid = this.element;
      this.element.classList.add("months", "datepicker-grid");
      this.grid.appendChild(parseHTML(createTagRepeat("span", 12, { "data-month": (ix) => ix })));
      this.first = 0;
      this.last = 11;
    }
    super.init(options);
  }
  setOptions(options) {
    if (options.locale) {
      this.monthNames = options.locale.monthsShort;
    }
    if ("minDate" in options) {
      if (options.minDate === void 0) {
        this.minYear = this.minMonth = this.minDate = void 0;
      } else {
        const minDateObj = new Date(options.minDate);
        this.minYear = minDateObj.getFullYear();
        this.minMonth = minDateObj.getMonth();
        this.minDate = minDateObj.setDate(1);
      }
    }
    if ("maxDate" in options) {
      if (options.maxDate === void 0) {
        this.maxYear = this.maxMonth = this.maxDate = void 0;
      } else {
        const maxDateObj = new Date(options.maxDate);
        this.maxYear = maxDateObj.getFullYear();
        this.maxMonth = maxDateObj.getMonth();
        this.maxDate = dateValue(this.maxYear, this.maxMonth + 1, 0);
      }
    }
    if (options.checkDisabled) {
      this.checkDisabled = this.isMinView || options.datesDisabled === null ? options.checkDisabled : () => false;
    }
    if ("beforeShowMonth" in options) {
      this.beforeShow = typeof options.beforeShowMonth === "function" ? options.beforeShowMonth : void 0;
    }
  }
  // Update view's settings to reflect the viewDate set on the picker
  updateFocus() {
    const viewDate = new Date(this.picker.viewDate);
    this.year = viewDate.getFullYear();
    this.focused = viewDate.getMonth();
  }
  // Update view's settings to reflect the selected dates
  updateSelection() {
    const { dates, rangepicker } = this.picker.datepicker;
    this.selected = dates.reduce((selected, timeValue) => {
      const date = new Date(timeValue);
      const year = date.getFullYear();
      const month = date.getMonth();
      if (selected[year] === void 0) {
        selected[year] = [month];
      } else {
        pushUnique(selected[year], month);
      }
      return selected;
    }, {});
    if (rangepicker && rangepicker.dates) {
      this.range = rangepicker.dates.map((timeValue) => {
        const date = new Date(timeValue);
        return isNaN(date) ? void 0 : [date.getFullYear(), date.getMonth()];
      });
    }
  }
  // Update the entire view UI
  render() {
    this.prepareForRender(
      this.year,
      this.year <= this.minYear,
      this.year >= this.maxYear
    );
    const selected = this.selected[this.year] || [];
    const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;
    const isMinYear = this.year === this.minYear;
    const isMaxYear = this.year === this.maxYear;
    const range2 = computeMonthRange(this.range, this.year);
    Array.from(this.grid.children).forEach((el, index) => {
      const date = regularizeDate(new Date(this.year, index, 1), 1, this.isRangeEnd);
      this.renderCell(
        el,
        this.monthNames[index],
        index,
        date,
        { selected, range: range2 },
        yrOutOfRange || isMinYear && index < this.minMonth || isMaxYear && index > this.maxMonth
      );
    });
  }
  // Update the view UI by applying the changes of selected and focused items
  refresh() {
    const selected = this.selected[this.year] || [];
    const range2 = computeMonthRange(this.range, this.year) || [];
    Array.from(this.grid.children).forEach((el, index) => {
      this.refreshCell(el, index, selected, range2);
    });
  }
  // Update the view UI by applying the change of focused item
  refreshFocus() {
    this.changeFocusedCell(this.focused);
  }
};

// node_modules/vanillajs-datepicker/js/picker/views/YearsView.js
function toTitleCase(word) {
  return [...word].reduce((str, ch, ix) => str += ix ? ch : ch.toUpperCase(), "");
}
var YearsView = class extends View {
  constructor(picker, config2) {
    super(picker, config2);
  }
  init(options, onConstruction = true) {
    if (onConstruction) {
      this.navStep = this.step * 10;
      this.beforeShowOption = `beforeShow${toTitleCase(this.cellClass)}`;
      this.grid = this.element;
      this.element.classList.add(this.name, "datepicker-grid");
      this.grid.appendChild(parseHTML(createTagRepeat("span", 12)));
    }
    super.init(options);
  }
  setOptions(options) {
    if ("minDate" in options) {
      if (options.minDate === void 0) {
        this.minYear = this.minDate = void 0;
      } else {
        this.minYear = startOfYearPeriod(options.minDate, this.step);
        this.minDate = dateValue(this.minYear, 0, 1);
      }
    }
    if ("maxDate" in options) {
      if (options.maxDate === void 0) {
        this.maxYear = this.maxDate = void 0;
      } else {
        this.maxYear = startOfYearPeriod(options.maxDate, this.step);
        this.maxDate = dateValue(this.maxYear, 11, 31);
      }
    }
    if (options.checkDisabled) {
      this.checkDisabled = this.isMinView || options.datesDisabled === null ? options.checkDisabled : () => false;
    }
    if (this.beforeShowOption in options) {
      const beforeShow = options[this.beforeShowOption];
      this.beforeShow = typeof beforeShow === "function" ? beforeShow : void 0;
    }
  }
  // Update view's settings to reflect the viewDate set on the picker
  updateFocus() {
    const viewDate = new Date(this.picker.viewDate);
    const first = startOfYearPeriod(viewDate, this.navStep);
    const last = first + 9 * this.step;
    this.first = first;
    this.last = last;
    this.start = first - this.step;
    this.focused = startOfYearPeriod(viewDate, this.step);
  }
  // Update view's settings to reflect the selected dates
  updateSelection() {
    const { dates, rangepicker } = this.picker.datepicker;
    this.selected = dates.reduce((years, timeValue) => {
      return pushUnique(years, startOfYearPeriod(timeValue, this.step));
    }, []);
    if (rangepicker && rangepicker.dates) {
      this.range = rangepicker.dates.map((timeValue) => {
        if (timeValue !== void 0) {
          return startOfYearPeriod(timeValue, this.step);
        }
      });
    }
  }
  // Update the entire view UI
  render() {
    this.prepareForRender(
      `${this.first}-${this.last}`,
      this.first <= this.minYear,
      this.last >= this.maxYear
    );
    Array.from(this.grid.children).forEach((el, index) => {
      const current = this.start + index * this.step;
      const date = regularizeDate(new Date(current, 0, 1), 2, this.isRangeEnd);
      el.dataset.year = current;
      this.renderCell(
        el,
        current,
        current,
        date,
        this,
        current < this.minYear || current > this.maxYear
      );
    });
  }
  // Update the view UI by applying the changes of selected and focused items
  refresh() {
    const range2 = this.range || [];
    Array.from(this.grid.children).forEach((el) => {
      this.refreshCell(el, Number(el.textContent), this.selected, range2);
    });
  }
  // Update the view UI by applying the change of focused item
  refreshFocus() {
    this.changeFocusedCell(Math.round((this.focused - this.start) / this.step));
  }
};

// node_modules/vanillajs-datepicker/js/events/functions.js
function triggerDatepickerEvent(datepicker, type) {
  const detail = {
    date: datepicker.getDate(),
    viewDate: new Date(datepicker.picker.viewDate),
    viewId: datepicker.picker.currentView.id,
    datepicker
  };
  datepicker.element.dispatchEvent(new CustomEvent(type, { detail }));
}
function goToPrevOrNext(datepicker, direction) {
  const { config: config2, picker } = datepicker;
  const { currentView, viewDate } = picker;
  let newViewDate;
  switch (currentView.id) {
    case 0:
      newViewDate = addMonths(viewDate, direction);
      break;
    case 1:
      newViewDate = addYears(viewDate, direction);
      break;
    default:
      newViewDate = addYears(viewDate, direction * currentView.navStep);
  }
  newViewDate = limitToRange(newViewDate, config2.minDate, config2.maxDate);
  picker.changeFocus(newViewDate).render();
}
function switchView(datepicker) {
  const viewId = datepicker.picker.currentView.id;
  if (viewId === datepicker.config.maxView) {
    return;
  }
  datepicker.picker.changeView(viewId + 1).render();
}
function clearSelection(datepicker) {
  datepicker.setDate({ clear: true });
}
function goToOrSelectToday(datepicker) {
  const currentDate = today();
  if (datepicker.config.todayButtonMode === 1) {
    datepicker.setDate(currentDate, { forceRefresh: true, viewDate: currentDate });
  } else {
    datepicker.setFocusedDate(currentDate, true);
  }
}
function unfocus(datepicker) {
  const onBlur = () => {
    if (datepicker.config.updateOnBlur) {
      datepicker.update({ revert: true });
    } else {
      datepicker.refresh("input");
    }
    datepicker.hide();
  };
  const element41 = datepicker.element;
  if (isActiveElement(element41)) {
    element41.addEventListener("blur", onBlur, { once: true });
  } else {
    onBlur();
  }
}

// node_modules/vanillajs-datepicker/js/events/pickerListeners.js
function goToSelectedMonthOrYear(datepicker, selection) {
  const picker = datepicker.picker;
  const viewDate = new Date(picker.viewDate);
  const viewId = picker.currentView.id;
  const newDate = viewId === 1 ? addMonths(viewDate, selection - viewDate.getMonth()) : addYears(viewDate, selection - viewDate.getFullYear());
  picker.changeFocus(newDate).changeView(viewId - 1).render();
}
function onClickViewSwitch(datepicker) {
  switchView(datepicker);
}
function onClickPrevButton(datepicker) {
  goToPrevOrNext(datepicker, -1);
}
function onClickNextButton(datepicker) {
  goToPrevOrNext(datepicker, 1);
}
function onClickView(datepicker, ev) {
  const target = findElementInEventPath(ev, ".datepicker-cell");
  if (!target || target.classList.contains("disabled")) {
    return;
  }
  const { id: id2, isMinView } = datepicker.picker.currentView;
  const data = target.dataset;
  if (isMinView) {
    datepicker.setDate(Number(data.date));
  } else if (id2 === 1) {
    goToSelectedMonthOrYear(datepicker, Number(data.month));
  } else {
    goToSelectedMonthOrYear(datepicker, Number(data.year));
  }
}
function onMousedownPicker(ev) {
  ev.preventDefault();
}

// node_modules/vanillajs-datepicker/js/picker/Picker.js
var orientClasses = ["left", "top", "right", "bottom"].reduce((obj, key) => {
  obj[key] = `datepicker-orient-${key}`;
  return obj;
}, {});
var toPx = (num2) => num2 ? `${num2}px` : num2;
function processPickerOptions(picker, options) {
  if ("title" in options) {
    if (options.title) {
      picker.controls.title.textContent = options.title;
      showElement(picker.controls.title);
    } else {
      picker.controls.title.textContent = "";
      hideElement(picker.controls.title);
    }
  }
  if (options.prevArrow) {
    const prevButton = picker.controls.prevButton;
    emptyChildNodes(prevButton);
    options.prevArrow.forEach((node) => {
      prevButton.appendChild(node.cloneNode(true));
    });
  }
  if (options.nextArrow) {
    const nextButton = picker.controls.nextButton;
    emptyChildNodes(nextButton);
    options.nextArrow.forEach((node) => {
      nextButton.appendChild(node.cloneNode(true));
    });
  }
  if (options.locale) {
    picker.controls.todayButton.textContent = options.locale.today;
    picker.controls.clearButton.textContent = options.locale.clear;
  }
  if ("todayButton" in options) {
    if (options.todayButton) {
      showElement(picker.controls.todayButton);
    } else {
      hideElement(picker.controls.todayButton);
    }
  }
  if ("minDate" in options || "maxDate" in options) {
    const { minDate, maxDate } = picker.datepicker.config;
    picker.controls.todayButton.disabled = !isInRange(today(), minDate, maxDate);
  }
  if ("clearButton" in options) {
    if (options.clearButton) {
      showElement(picker.controls.clearButton);
    } else {
      hideElement(picker.controls.clearButton);
    }
  }
}
function computeResetViewDate(datepicker) {
  const { dates, config: config2, rangeSideIndex } = datepicker;
  const viewDate = dates.length > 0 ? lastItemOf(dates) : regularizeDate(config2.defaultViewDate, config2.pickLevel, rangeSideIndex);
  return limitToRange(viewDate, config2.minDate, config2.maxDate);
}
function setViewDate(picker, newDate) {
  if (!("_oldViewDate" in picker) && newDate !== picker.viewDate) {
    picker._oldViewDate = picker.viewDate;
  }
  picker.viewDate = newDate;
  const { id: id2, year, first, last } = picker.currentView;
  const viewYear = new Date(newDate).getFullYear();
  switch (id2) {
    case 0:
      return newDate < first || newDate > last;
    case 1:
      return viewYear !== year;
    default:
      return viewYear < first || viewYear > last;
  }
}
function getTextDirection(el) {
  return window.getComputedStyle(el).direction;
}
function findScrollParents(el) {
  const parent = getParent(el);
  if (parent === document.body || !parent) {
    return;
  }
  return window.getComputedStyle(parent).overflow !== "visible" ? parent : findScrollParents(parent);
}
var Picker = class {
  constructor(datepicker) {
    const { config: config2, inputField } = this.datepicker = datepicker;
    const template = pickerTemplate_default.replace(/%buttonClass%/g, config2.buttonClass);
    const element41 = this.element = parseHTML(template).firstChild;
    const [header, main, footer] = element41.firstChild.children;
    const title = header.firstElementChild;
    const [prevButton, viewSwitch, nextButton] = header.lastElementChild.children;
    const [todayButton, clearButton] = footer.firstChild.children;
    const controls = {
      title,
      prevButton,
      viewSwitch,
      nextButton,
      todayButton,
      clearButton
    };
    this.main = main;
    this.controls = controls;
    const elementClass = inputField ? "dropdown" : "inline";
    element41.classList.add(`datepicker-${elementClass}`);
    processPickerOptions(this, config2);
    this.viewDate = computeResetViewDate(datepicker);
    registerListeners(datepicker, [
      [element41, "mousedown", onMousedownPicker],
      [main, "click", onClickView.bind(null, datepicker)],
      [controls.viewSwitch, "click", onClickViewSwitch.bind(null, datepicker)],
      [controls.prevButton, "click", onClickPrevButton.bind(null, datepicker)],
      [controls.nextButton, "click", onClickNextButton.bind(null, datepicker)],
      [controls.todayButton, "click", goToOrSelectToday.bind(null, datepicker)],
      [controls.clearButton, "click", clearSelection.bind(null, datepicker)]
    ]);
    this.views = [
      new DaysView(this),
      new MonthsView(this),
      new YearsView(this, { id: 2, name: "years", cellClass: "year", step: 1 }),
      new YearsView(this, { id: 3, name: "decades", cellClass: "decade", step: 10 })
    ];
    this.currentView = this.views[config2.startView];
    this.currentView.render();
    this.main.appendChild(this.currentView.element);
    if (config2.container) {
      config2.container.appendChild(this.element);
    } else {
      inputField.after(this.element);
    }
  }
  setOptions(options) {
    processPickerOptions(this, options);
    this.views.forEach((view) => {
      view.init(options, false);
    });
    this.currentView.render();
  }
  detach() {
    this.element.remove();
  }
  show() {
    if (this.active) {
      return;
    }
    const { datepicker, element: element41 } = this;
    const inputField = datepicker.inputField;
    if (inputField) {
      const inputDirection = getTextDirection(inputField);
      if (inputDirection !== getTextDirection(getParent(element41))) {
        element41.dir = inputDirection;
      } else if (element41.dir) {
        element41.removeAttribute("dir");
      }
      element41.style.visibility = "hidden";
      element41.classList.add("active");
      this.place();
      element41.style.visibility = "";
      if (datepicker.config.disableTouchKeyboard) {
        inputField.blur();
      }
    } else {
      element41.classList.add("active");
    }
    this.active = true;
    triggerDatepickerEvent(datepicker, "show");
  }
  hide() {
    if (!this.active) {
      return;
    }
    this.datepicker.exitEditMode();
    this.element.classList.remove("active");
    this.active = false;
    triggerDatepickerEvent(this.datepicker, "hide");
  }
  place() {
    const { classList, offsetParent, style } = this.element;
    const { config: config2, inputField } = this.datepicker;
    const {
      width: calendarWidth,
      height: calendarHeight
    } = this.element.getBoundingClientRect();
    const {
      left: inputLeft,
      top: inputTop,
      right: inputRight,
      bottom: inputBottom,
      width: inputWidth,
      height: inputHeight
    } = inputField.getBoundingClientRect();
    let { x: orientX, y: orientY } = config2.orientation;
    let left = inputLeft;
    let top = inputTop;
    if (offsetParent === document.body || !offsetParent) {
      left += window.scrollX;
      top += window.scrollY;
    } else {
      const offsetParentRect = offsetParent.getBoundingClientRect();
      left -= offsetParentRect.left - offsetParent.scrollLeft;
      top -= offsetParentRect.top - offsetParent.scrollTop;
    }
    const scrollParent = findScrollParents(inputField);
    let scrollAreaLeft = 0;
    let scrollAreaTop = 0;
    let {
      clientWidth: scrollAreaRight,
      clientHeight: scrollAreaBottom
    } = document.documentElement;
    if (scrollParent) {
      const scrollParentRect = scrollParent.getBoundingClientRect();
      if (scrollParentRect.top > 0) {
        scrollAreaTop = scrollParentRect.top;
      }
      if (scrollParentRect.left > 0) {
        scrollAreaLeft = scrollParentRect.left;
      }
      if (scrollParentRect.right < scrollAreaRight) {
        scrollAreaRight = scrollParentRect.right;
      }
      if (scrollParentRect.bottom < scrollAreaBottom) {
        scrollAreaBottom = scrollParentRect.bottom;
      }
    }
    let adjustment = 0;
    if (orientX === "auto") {
      if (inputLeft < scrollAreaLeft) {
        orientX = "left";
        adjustment = scrollAreaLeft - inputLeft;
      } else if (inputLeft + calendarWidth > scrollAreaRight) {
        orientX = "right";
        if (scrollAreaRight < inputRight) {
          adjustment = scrollAreaRight - inputRight;
        }
      } else if (getTextDirection(inputField) === "rtl") {
        orientX = inputRight - calendarWidth < scrollAreaLeft ? "left" : "right";
      } else {
        orientX = "left";
      }
    }
    if (orientX === "right") {
      left += inputWidth - calendarWidth;
    }
    left += adjustment;
    if (orientY === "auto") {
      if (inputTop - calendarHeight > scrollAreaTop) {
        orientY = inputBottom + calendarHeight > scrollAreaBottom ? "top" : "bottom";
      } else {
        orientY = "bottom";
      }
    }
    if (orientY === "top") {
      top -= calendarHeight;
    } else {
      top += inputHeight;
    }
    classList.remove(...Object.values(orientClasses));
    classList.add(orientClasses[orientX], orientClasses[orientY]);
    style.left = toPx(left);
    style.top = toPx(top);
  }
  setViewSwitchLabel(labelText) {
    this.controls.viewSwitch.textContent = labelText;
  }
  setPrevButtonDisabled(disabled2) {
    this.controls.prevButton.disabled = disabled2;
  }
  setNextButtonDisabled(disabled2) {
    this.controls.nextButton.disabled = disabled2;
  }
  changeView(viewId) {
    const currentView = this.currentView;
    if (viewId !== currentView.id) {
      if (!this._oldView) {
        this._oldView = currentView;
      }
      this.currentView = this.views[viewId];
      this._renderMethod = "render";
    }
    return this;
  }
  // Change the focused date (view date)
  changeFocus(newViewDate) {
    this._renderMethod = setViewDate(this, newViewDate) ? "render" : "refreshFocus";
    this.views.forEach((view) => {
      view.updateFocus();
    });
    return this;
  }
  // Apply the change of the selected dates
  update(viewDate = void 0) {
    const newViewDate = viewDate === void 0 ? computeResetViewDate(this.datepicker) : viewDate;
    this._renderMethod = setViewDate(this, newViewDate) ? "render" : "refresh";
    this.views.forEach((view) => {
      view.updateFocus();
      view.updateSelection();
    });
    return this;
  }
  // Refresh the picker UI
  render(quickRender = true) {
    const { currentView, datepicker, _oldView: oldView } = this;
    const oldViewDate = new Date(this._oldViewDate);
    const renderMethod = quickRender && this._renderMethod || "render";
    delete this._oldView;
    delete this._oldViewDate;
    delete this._renderMethod;
    currentView[renderMethod]();
    if (oldView) {
      this.main.replaceChild(currentView.element, oldView.element);
      triggerDatepickerEvent(datepicker, "changeView");
    }
    if (!isNaN(oldViewDate)) {
      const newViewDate = new Date(this.viewDate);
      if (newViewDate.getFullYear() !== oldViewDate.getFullYear()) {
        triggerDatepickerEvent(datepicker, "changeYear");
      }
      if (newViewDate.getMonth() !== oldViewDate.getMonth()) {
        triggerDatepickerEvent(datepicker, "changeMonth");
      }
    }
  }
};

// node_modules/vanillajs-datepicker/js/events/elementListeners.js
function findNextAvailableOne(date, addFn, increase, testFn, min, max) {
  if (!isInRange(date, min, max)) {
    return;
  }
  if (testFn(date)) {
    const newDate = addFn(date, increase);
    return findNextAvailableOne(newDate, addFn, increase, testFn, min, max);
  }
  return date;
}
function moveByArrowKey(datepicker, direction, vertical) {
  const picker = datepicker.picker;
  const currentView = picker.currentView;
  const step = currentView.step || 1;
  let viewDate = picker.viewDate;
  let addFn;
  switch (currentView.id) {
    case 0:
      viewDate = addDays(viewDate, vertical ? direction * 7 : direction);
      addFn = addDays;
      break;
    case 1:
      viewDate = addMonths(viewDate, vertical ? direction * 4 : direction);
      addFn = addMonths;
      break;
    default:
      viewDate = addYears(viewDate, direction * (vertical ? 4 : 1) * step);
      addFn = addYears;
  }
  viewDate = findNextAvailableOne(
    viewDate,
    addFn,
    direction < 0 ? -step : step,
    (date) => currentView.disabled.includes(date),
    currentView.minDate,
    currentView.maxDate
  );
  if (viewDate !== void 0) {
    picker.changeFocus(viewDate).render();
  }
}
function onKeydown(datepicker, ev) {
  const { config: config2, picker, editMode } = datepicker;
  const active = picker.active;
  const { key, altKey, shiftKey } = ev;
  const ctrlOrMetaKey = ev.ctrlKey || ev.metaKey;
  const cancelEvent = () => {
    ev.preventDefault();
    ev.stopPropagation();
  };
  if (key === "Tab") {
    unfocus(datepicker);
    return;
  }
  if (key === "Enter") {
    if (!active) {
      datepicker.update();
    } else if (editMode) {
      datepicker.exitEditMode({ update: true, autohide: config2.autohide });
    } else {
      const currentView = picker.currentView;
      if (currentView.isMinView) {
        datepicker.setDate(picker.viewDate);
      } else {
        picker.changeView(currentView.id - 1).render();
        cancelEvent();
      }
    }
    return;
  }
  const shortcutKeys = config2.shortcutKeys;
  const keyInfo = { key, ctrlOrMetaKey, altKey, shiftKey };
  const shortcut = Object.keys(shortcutKeys).find((item) => {
    const keyDef = shortcutKeys[item];
    return !Object.keys(keyDef).find((prop) => keyDef[prop] !== keyInfo[prop]);
  });
  if (shortcut) {
    let action;
    if (shortcut === "toggle") {
      action = shortcut;
    } else if (editMode) {
      if (shortcut === "exitEditMode") {
        action = shortcut;
      }
    } else if (active) {
      if (shortcut === "hide") {
        action = shortcut;
      } else if (shortcut === "prevButton") {
        action = [goToPrevOrNext, [datepicker, -1]];
      } else if (shortcut === "nextButton") {
        action = [goToPrevOrNext, [datepicker, 1]];
      } else if (shortcut === "viewSwitch") {
        action = [switchView, [datepicker]];
      } else if (config2.clearButton && shortcut === "clearButton") {
        action = [clearSelection, [datepicker]];
      } else if (config2.todayButton && shortcut === "todayButton") {
        action = [goToOrSelectToday, [datepicker]];
      }
    } else if (shortcut === "show") {
      action = shortcut;
    }
    if (action) {
      if (Array.isArray(action)) {
        action[0].apply(null, action[1]);
      } else {
        datepicker[action]();
      }
      cancelEvent();
      return;
    }
  }
  if (!active || editMode) {
    return;
  }
  const handleArrowKeyPress = (direction, vertical) => {
    if (shiftKey || ctrlOrMetaKey || altKey) {
      datepicker.enterEditMode();
    } else {
      moveByArrowKey(datepicker, direction, vertical);
      ev.preventDefault();
    }
  };
  if (key === "ArrowLeft") {
    handleArrowKeyPress(-1, false);
  } else if (key === "ArrowRight") {
    handleArrowKeyPress(1, false);
  } else if (key === "ArrowUp") {
    handleArrowKeyPress(-1, true);
  } else if (key === "ArrowDown") {
    handleArrowKeyPress(1, true);
  } else if (key === "Backspace" || key === "Delete" || key && key.length === 1 && !ctrlOrMetaKey) {
    datepicker.enterEditMode();
  }
}
function onFocus(datepicker) {
  if (datepicker.config.showOnFocus && !datepicker._showing) {
    datepicker.show();
  }
}
function onMousedown(datepicker, ev) {
  const el = ev.target;
  if (datepicker.picker.active || datepicker.config.showOnClick) {
    el._active = isActiveElement(el);
    el._clicking = setTimeout(() => {
      delete el._active;
      delete el._clicking;
    }, 2e3);
  }
}
function onClickInput(datepicker, ev) {
  const el = ev.target;
  if (!el._clicking) {
    return;
  }
  clearTimeout(el._clicking);
  delete el._clicking;
  if (el._active) {
    datepicker.enterEditMode();
  }
  delete el._active;
  if (datepicker.config.showOnClick) {
    datepicker.show();
  }
}
function onPaste(datepicker, ev) {
  if (ev.clipboardData.types.includes("text/plain")) {
    datepicker.enterEditMode();
  }
}

// node_modules/vanillajs-datepicker/js/events/otherListeners.js
function onClickOutside(datepicker, ev) {
  const { element: element41, picker } = datepicker;
  if (!picker.active && !isActiveElement(element41)) {
    return;
  }
  const pickerElem = picker.element;
  if (findElementInEventPath(ev, (el) => el === element41 || el === pickerElem)) {
    return;
  }
  unfocus(datepicker);
}

// node_modules/vanillajs-datepicker/js/Datepicker.js
function stringifyDates(dates, config2) {
  return dates.map((dt) => formatDate(dt, config2.format, config2.locale)).join(config2.dateDelimiter);
}
function processInputDates(datepicker, inputDates, clear = false) {
  if (inputDates.length === 0) {
    return clear ? [] : void 0;
  }
  const { config: config2, dates: origDates, rangeSideIndex } = datepicker;
  const { pickLevel, maxNumberOfDates } = config2;
  let newDates = inputDates.reduce((dates, dt) => {
    let date = parseDate(dt, config2.format, config2.locale);
    if (date === void 0) {
      return dates;
    }
    date = regularizeDate(date, pickLevel, rangeSideIndex);
    if (isInRange(date, config2.minDate, config2.maxDate) && !dates.includes(date) && !config2.checkDisabled(date, pickLevel) && (pickLevel > 0 || !config2.daysOfWeekDisabled.includes(new Date(date).getDay()))) {
      dates.push(date);
    }
    return dates;
  }, []);
  if (newDates.length === 0) {
    return;
  }
  if (config2.multidate && !clear) {
    newDates = newDates.reduce((dates, date) => {
      if (!origDates.includes(date)) {
        dates.push(date);
      }
      return dates;
    }, origDates.filter((date) => !newDates.includes(date)));
  }
  return maxNumberOfDates && newDates.length > maxNumberOfDates ? newDates.slice(maxNumberOfDates * -1) : newDates;
}
function refreshUI(datepicker, mode = 3, quickRender = true, viewDate = void 0) {
  const { config: config2, picker, inputField } = datepicker;
  if (mode & 2) {
    const newView = picker.active ? config2.pickLevel : config2.startView;
    picker.update(viewDate).changeView(newView).render(quickRender);
  }
  if (mode & 1 && inputField) {
    inputField.value = stringifyDates(datepicker.dates, config2);
  }
}
function setDate(datepicker, inputDates, options) {
  const config2 = datepicker.config;
  let { clear, render, autohide, revert, forceRefresh, viewDate } = options;
  if (render === void 0) {
    render = true;
  }
  if (!render) {
    autohide = forceRefresh = false;
  } else if (autohide === void 0) {
    autohide = config2.autohide;
  }
  viewDate = parseDate(viewDate, config2.format, config2.locale);
  const newDates = processInputDates(datepicker, inputDates, clear);
  if (!newDates && !revert) {
    return;
  }
  if (newDates && newDates.toString() !== datepicker.dates.toString()) {
    datepicker.dates = newDates;
    refreshUI(datepicker, render ? 3 : 1, true, viewDate);
    triggerDatepickerEvent(datepicker, "changeDate");
  } else {
    refreshUI(datepicker, forceRefresh ? 3 : 1, true, viewDate);
  }
  if (autohide) {
    datepicker.hide();
  }
}
function getOutputConverter(datepicker, format) {
  return format ? (date) => formatDate(date, format, datepicker.config.locale) : (date) => new Date(date);
}
var Datepicker = class {
  /**
   * Create a date picker
   * @param  {Element} element - element to bind a date picker
   * @param  {Object} [options] - config options
   * @param  {DateRangePicker} [rangepicker] - DateRangePicker instance the
   * date picker belongs to. Use this only when creating date picker as a part
   * of date range picker
   */
  constructor(element41, options = {}, rangepicker = void 0) {
    element41.datepicker = this;
    this.element = element41;
    this.dates = [];
    const config2 = this.config = Object.assign({
      buttonClass: options.buttonClass && String(options.buttonClass) || "button",
      container: null,
      defaultViewDate: today(),
      maxDate: void 0,
      minDate: void 0
    }, processOptions(defaultOptions_default, this));
    let inputField;
    if (element41.tagName === "INPUT") {
      inputField = this.inputField = element41;
      inputField.classList.add("datepicker-input");
      if (options.container) {
        config2.container = options.container instanceof HTMLElement ? options.container : document.querySelector(options.container);
      }
    } else {
      config2.container = element41;
    }
    if (rangepicker) {
      const index = rangepicker.inputs.indexOf(inputField);
      const datepickers = rangepicker.datepickers;
      if (index < 0 || index > 1 || !Array.isArray(datepickers)) {
        throw Error("Invalid rangepicker object.");
      }
      datepickers[index] = this;
      this.rangepicker = rangepicker;
      this.rangeSideIndex = index;
    }
    this._options = options;
    Object.assign(config2, processOptions(options, this));
    config2.shortcutKeys = createShortcutKeyConfig(options.shortcutKeys || {});
    const initialDates = stringToArray(
      element41.value || element41.dataset.date,
      config2.dateDelimiter
    );
    delete element41.dataset.date;
    const inputDateValues = processInputDates(this, initialDates);
    if (inputDateValues && inputDateValues.length > 0) {
      this.dates = inputDateValues;
    }
    if (inputField) {
      inputField.value = stringifyDates(this.dates, config2);
    }
    const picker = this.picker = new Picker(this);
    const keydownListener = [element41, "keydown", onKeydown.bind(null, this)];
    if (inputField) {
      registerListeners(this, [
        keydownListener,
        [inputField, "focus", onFocus.bind(null, this)],
        [inputField, "mousedown", onMousedown.bind(null, this)],
        [inputField, "click", onClickInput.bind(null, this)],
        [inputField, "paste", onPaste.bind(null, this)],
        // To detect a click on outside, just listening to mousedown is enough,
        // no need to listen to touchstart.
        // Actually, listening to touchstart can be a problem because, while
        // mousedown is fired only on tapping but not on swiping/pinching,
        // touchstart is fired on swiping/pinching as well.
        // (issue #95)
        [document, "mousedown", onClickOutside.bind(null, this)],
        [window, "resize", picker.place.bind(picker)]
      ]);
    } else {
      registerListeners(this, [keydownListener]);
      this.show();
    }
  }
  /**
   * Format Date object or time value in given format and language
   * @param  {Date|Number} date - date or time value to format
   * @param  {String|Object} format - format string or object that contains
   * toDisplay() custom formatter, whose signature is
   * - args:
   *   - date: {Date} - Date instance of the date passed to the method
   *   - format: {Object} - the format object passed to the method
   *   - locale: {Object} - locale for the language specified by `lang`
   * - return:
   *     {String} formatted date
   * @param  {String} [lang=en] - language code for the locale to use
   * @return {String} formatted date
   */
  static formatDate(date, format, lang) {
    return formatDate(date, format, lang && base_locales_default[lang] || base_locales_default.en);
  }
  /**
   * Parse date string
   * @param  {String|Date|Number} dateStr - date string, Date object or time
   * value to parse
   * @param  {String|Object} format - format string or object that contains
   * toValue() custom parser, whose signature is
   * - args:
   *   - dateStr: {String|Date|Number} - the dateStr passed to the method
   *   - format: {Object} - the format object passed to the method
   *   - locale: {Object} - locale for the language specified by `lang`
   * - return:
   *     {Date|Number} parsed date or its time value
   * @param  {String} [lang=en] - language code for the locale to use
   * @return {Number} time value of parsed date
   */
  static parseDate(dateStr, format, lang) {
    return parseDate(dateStr, format, lang && base_locales_default[lang] || base_locales_default.en);
  }
  /**
   * @type {Object} - Installed locales in `[languageCode]: localeObject` format
   * en`:_English (US)_ is pre-installed.
   */
  static get locales() {
    return base_locales_default;
  }
  /**
   * @type {Boolean} - Whether the picker element is shown. `true` whne shown
   */
  get active() {
    return !!(this.picker && this.picker.active);
  }
  /**
   * @type {HTMLDivElement} - DOM object of picker element
   */
  get pickerElement() {
    return this.picker ? this.picker.element : void 0;
  }
  /**
   * Set new values to the config options
   * @param {Object} options - config options to update
   */
  setOptions(options) {
    const newOptions = processOptions(options, this);
    Object.assign(this._options, options);
    Object.assign(this.config, newOptions);
    this.picker.setOptions(newOptions);
    refreshUI(this, 3);
  }
  /**
   * Show the picker element
   */
  show() {
    if (this.inputField) {
      const { config: config2, inputField } = this;
      if (inputField.disabled || inputField.readOnly && !config2.enableOnReadonly) {
        return;
      }
      if (!isActiveElement(inputField) && !config2.disableTouchKeyboard) {
        this._showing = true;
        inputField.focus();
        delete this._showing;
      }
    }
    this.picker.show();
  }
  /**
   * Hide the picker element
   * Not available on inline picker
   */
  hide() {
    if (!this.inputField) {
      return;
    }
    this.picker.hide();
    this.picker.update().changeView(this.config.startView).render();
  }
  /**
   * Toggle the display of the picker element
   * Not available on inline picker
   *
   * Unlike hide(), the picker does not return to the start view when hiding.
   */
  toggle() {
    if (!this.picker.active) {
      this.show();
    } else if (this.inputField) {
      this.picker.hide();
    }
  }
  /**
   * Destroy the Datepicker instance
   * @return {Detepicker} - the instance destroyed
   */
  destroy() {
    this.hide();
    unregisterListeners(this);
    this.picker.detach();
    const element41 = this.element;
    element41.classList.remove("datepicker-input");
    delete element41.datepicker;
    return this;
  }
  /**
   * Get the selected date(s)
   *
   * The method returns a Date object of selected date by default, and returns
   * an array of selected dates in multidate mode. If format string is passed,
   * it returns date string(s) formatted in given format.
   *
   * @param  {String} [format] - format string to stringify the date(s)
   * @return {Date|String|Date[]|String[]} - selected date(s), or if none is
   * selected, empty array in multidate mode and undefined in sigledate mode
   */
  getDate(format = void 0) {
    const callback = getOutputConverter(this, format);
    if (this.config.multidate) {
      return this.dates.map(callback);
    }
    if (this.dates.length > 0) {
      return callback(this.dates[0]);
    }
  }
  /**
   * Set selected date(s)
   *
   * In multidate mode, you can pass multiple dates as a series of arguments
   * or an array. (Since each date is parsed individually, the type of the
   * dates doesn't have to be the same.)
   * The given dates are used to toggle the select status of each date. The
   * number of selected dates is kept from exceeding the length set to
   * maxNumberOfDates.
   *
   * With clear: true option, the method can be used to clear the selection
   * and to replace the selection instead of toggling in multidate mode.
   * If the option is passed with no date arguments or an empty dates array,
   * it works as "clear" (clear the selection then set nothing), and if the
   * option is passed with new dates to select, it works as "replace" (clear
   * the selection then set the given dates)
   *
   * When render: false option is used, the method omits re-rendering the
   * picker element. In this case, you need to call refresh() method later in
   * order for the picker element to reflect the changes. The input field is
   * refreshed always regardless of this option.
   *
   * When invalid (unparsable, repeated, disabled or out-of-range) dates are
   * passed, the method ignores them and applies only valid ones. In the case
   * that all the given dates are invalid, which is distinguished from passing
   * no dates, the method considers it as an error and leaves the selection
   * untouched. (The input field also remains untouched unless revert: true
   * option is used.)
   * Replacing the selection with the same date(s) also causes a similar
   * situation. In both cases, the method does not refresh the picker element
   * unless forceRefresh: true option is used.
   *
   * If viewDate option is used, the method changes the focused date to the
   * specified date instead of the last item of the selection.
   *
   * @param {...(Date|Number|String)|Array} [dates] - Date strings, Date
   * objects, time values or mix of those for new selection
   * @param {Object} [options] - function options
   * - clear: {boolean} - Whether to clear the existing selection
   *     defualt: false
   * - render: {boolean} - Whether to re-render the picker element
   *     default: true
   * - autohide: {boolean} - Whether to hide the picker element after re-render
   *     Ignored when used with render: false
   *     default: config.autohide
   * - revert: {boolean} - Whether to refresh the input field when all the
   *     passed dates are invalid
   *     default: false
   * - forceRefresh: {boolean} - Whether to refresh the picker element when
   *     passed dates don't change the existing selection
   *     default: false
   * - viewDate: {Date|Number|String} - Date to be focused after setiing date(s)
   *     default: The last item of the resulting selection, or defaultViewDate
   *     config option if none is selected
   */
  setDate(...args) {
    const dates = [...args];
    const opts = {};
    const lastArg = lastItemOf(args);
    if (lastArg && typeof lastArg === "object" && !Array.isArray(lastArg) && !(lastArg instanceof Date)) {
      Object.assign(opts, dates.pop());
    }
    const inputDates = Array.isArray(dates[0]) ? dates[0] : dates;
    setDate(this, inputDates, opts);
  }
  /**
   * Update the selected date(s) with input field's value
   * Not available on inline picker
   *
   * The input field will be refreshed with properly formatted date string.
   *
   * In the case that all the entered dates are invalid (unparsable, repeated,
   * disabled or out-of-range), which is distinguished from empty input field,
   * the method leaves the input field untouched as well as the selection by
   * default. If revert: true option is used in this case, the input field is
   * refreshed with the existing selection.
   * The method also doesn't refresh the picker element in this case and when
   * the entered dates are the same as the existing selection. If
   * forceRefresh: true option is used, the picker element is refreshed in
   * these cases too.
   *
   * @param  {Object} [options] - function options
   * - autohide: {boolean} - whether to hide the picker element after refresh
   *     default: false
   * - revert: {boolean} - Whether to refresh the input field when all the
   *     passed dates are invalid
   *     default: false
   * - forceRefresh: {boolean} - Whether to refresh the picer element when
   *     input field's value doesn't change the existing selection
   *     default: false
   */
  update(options = void 0) {
    if (!this.inputField) {
      return;
    }
    const opts = Object.assign(options || {}, { clear: true, render: true, viewDate: void 0 });
    const inputDates = stringToArray(this.inputField.value, this.config.dateDelimiter);
    setDate(this, inputDates, opts);
  }
  /**
   * Get the focused date
   *
   * The method returns a Date object of focused date by default. If format
   * string is passed, it returns date string formatted in given format.
   *
   * @param  {String} [format] - format string to stringify the date
   * @return {Date|String} - focused date (viewDate)
   */
  getFocusedDate(format = void 0) {
    return getOutputConverter(this, format)(this.picker.viewDate);
  }
  /**
   * Set focused date
   *
   * By default, the method updates the focus on the view shown at the time,
   * or the one set to the startView config option if the picker is hidden.
   * When resetView: true is passed, the view displayed is changed to the
   * pickLevel config option's if the picker is shown.
   *
   * @param {Date|Number|String} viewDate - date string, Date object, time
   * values of the date to focus
   * @param {Boolean} [resetView] - whether to change the view to pickLevel
   * config option's when the picker is shown. Ignored when the picker is
   * hidden
   */
  setFocusedDate(viewDate, resetView = false) {
    const { config: config2, picker, active, rangeSideIndex } = this;
    const pickLevel = config2.pickLevel;
    const newViewDate = parseDate(viewDate, config2.format, config2.locale);
    if (newViewDate === void 0) {
      return;
    }
    picker.changeFocus(regularizeDate(newViewDate, pickLevel, rangeSideIndex));
    if (active && resetView) {
      picker.changeView(pickLevel);
    }
    picker.render();
  }
  /**
   * Refresh the picker element and the associated input field
   * @param {String} [target] - target item when refreshing one item only
   * 'picker' or 'input'
   * @param {Boolean} [forceRender] - whether to re-render the picker element
   * regardless of its state instead of optimized refresh
   */
  refresh(target = void 0, forceRender = false) {
    if (target && typeof target !== "string") {
      forceRender = target;
      target = void 0;
    }
    let mode;
    if (target === "picker") {
      mode = 2;
    } else if (target === "input") {
      mode = 1;
    } else {
      mode = 3;
    }
    refreshUI(this, mode, !forceRender);
  }
  /**
   * Enter edit mode
   * Not available on inline picker or when the picker element is hidden
   */
  enterEditMode() {
    const inputField = this.inputField;
    if (!inputField || inputField.readOnly || !this.picker.active || this.editMode) {
      return;
    }
    this.editMode = true;
    inputField.classList.add("in-edit");
  }
  /**
   * Exit from edit mode
   * Not available on inline picker
   * @param  {Object} [options] - function options
   * - update: {boolean} - whether to call update() after exiting
   *     If false, input field is revert to the existing selection
   *     default: false
   */
  exitEditMode(options = void 0) {
    if (!this.inputField || !this.editMode) {
      return;
    }
    const opts = Object.assign({ update: false }, options);
    delete this.editMode;
    this.inputField.classList.remove("in-edit");
    if (opts.update) {
      this.update(opts);
    }
  }
};

// src/input/input-date/InputDate.svelte
var file11 = "src/input/input-date/InputDate.svelte";
function create_fragment16(ctx) {
  let div2;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div1;
  let inputerror;
  let t2;
  let div0;
  let button;
  let t3;
  let input;
  let input_aria_errormessage_value;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[7]
      ),
      disabled: (
        /*disabled*/
        ctx[5]
      ),
      for: (
        /*_id*/
        ctx[13]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[11]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[14]
      ),
      msg: (
        /*error*/
        ctx[10]
      )
    },
    $$inline: true
  });
  button = new Button_default({
    props: {
      link: true,
      icon: "calendar",
      class: "input-date-button"
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*onIconClick*/
    ctx[20]
  );
  const block = {
    c: function create() {
      div2 = (0, import_internal16.element)("div");
      (0, import_internal16.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal16.space)();
      (0, import_internal16.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal16.space)();
      div1 = (0, import_internal16.element)("div");
      (0, import_internal16.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal16.space)();
      div0 = (0, import_internal16.element)("div");
      (0, import_internal16.create_component)(button.$$.fragment);
      t3 = (0, import_internal16.space)();
      input = (0, import_internal16.element)("input");
      (0, import_internal16.attr_dev)(input, "type", "text");
      (0, import_internal16.attr_dev)(input, "autocomplete", "off");
      (0, import_internal16.attr_dev)(
        input,
        "aria-invalid",
        /*error*/
        ctx[10]
      );
      (0, import_internal16.attr_dev)(input, "aria-errormessage", input_aria_errormessage_value = /*error*/
      ctx[10] ? (
        /*errorMessageId*/
        ctx[14]
      ) : void 0);
      (0, import_internal16.attr_dev)(
        input,
        "aria-required",
        /*required*/
        ctx[6]
      );
      (0, import_internal16.attr_dev)(
        input,
        "placeholder",
        /*placeholder*/
        ctx[4]
      );
      (0, import_internal16.attr_dev)(
        input,
        "title",
        /*title*/
        ctx[8]
      );
      (0, import_internal16.attr_dev)(
        input,
        "name",
        /*name*/
        ctx[9]
      );
      input.disabled = /*disabled*/
      ctx[5];
      (0, import_internal16.attr_dev)(
        input,
        "id",
        /*_id*/
        ctx[13]
      );
      (0, import_internal16.add_location)(input, file11, 15, 3, 406);
      (0, import_internal16.attr_dev)(div0, "class", "input-row");
      (0, import_internal16.add_location)(div0, file11, 13, 2, 294);
      (0, import_internal16.attr_dev)(div1, "class", "input-inner");
      (0, import_internal16.toggle_class)(
        div1,
        "disabled",
        /*disabled*/
        ctx[5]
      );
      (0, import_internal16.add_location)(div1, file11, 10, 1, 197);
      (0, import_internal16.attr_dev)(div2, "class", div2_class_value = "input input-date " + /*className*/
      ctx[3]);
      (0, import_internal16.attr_dev)(
        div2,
        "aria-expanded",
        /*open*/
        ctx[12]
      );
      (0, import_internal16.toggle_class)(
        div2,
        "open",
        /*open*/
        ctx[12]
      );
      (0, import_internal16.toggle_class)(
        div2,
        "has-error",
        /*error*/
        ctx[10]
      );
      (0, import_internal16.add_location)(div2, file11, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal16.insert_dev)(target, div2, anchor);
      (0, import_internal16.mount_component)(label_1, div2, null);
      (0, import_internal16.append_dev)(div2, t0);
      (0, import_internal16.mount_component)(info_1, div2, null);
      (0, import_internal16.append_dev)(div2, t1);
      (0, import_internal16.append_dev)(div2, div1);
      (0, import_internal16.mount_component)(inputerror, div1, null);
      (0, import_internal16.append_dev)(div1, t2);
      (0, import_internal16.append_dev)(div1, div0);
      (0, import_internal16.mount_component)(button, div0, null);
      (0, import_internal16.append_dev)(div0, t3);
      (0, import_internal16.append_dev)(div0, input);
      ctx[26](input);
      (0, import_internal16.set_input_value)(
        input,
        /*value*/
        ctx[0]
      );
      ctx[28](div2);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal16.listen_dev)(
            input,
            "changeDate",
            /*onchange*/
            ctx[17],
            false,
            false,
            false,
            false
          ),
          (0, import_internal16.listen_dev)(
            input,
            "input",
            /*oninput*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          (0, import_internal16.listen_dev)(
            input,
            "keydown",
            /*onkeydown*/
            ctx[15],
            true,
            false,
            false,
            false
          ),
          (0, import_internal16.listen_dev)(
            input,
            "show",
            /*onshow*/
            ctx[18],
            false,
            false,
            false,
            false
          ),
          (0, import_internal16.listen_dev)(
            input,
            "hide",
            /*onhide*/
            ctx[19],
            false,
            false,
            false,
            false
          ),
          (0, import_internal16.listen_dev)(
            input,
            "input",
            /*input_input_handler*/
            ctx[27]
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      const label_1_changes = {};
      if (dirty[0] & /*label*/
      128)
        label_1_changes.label = /*label*/
        ctx2[7];
      if (dirty[0] & /*disabled*/
      32)
        label_1_changes.disabled = /*disabled*/
        ctx2[5];
      if (dirty[0] & /*_id*/
      8192)
        label_1_changes.for = /*_id*/
        ctx2[13];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty[0] & /*info*/
      2048)
        info_1_changes.msg = /*info*/
        ctx2[11];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty[0] & /*error*/
      1024)
        inputerror_changes.msg = /*error*/
        ctx2[10];
      inputerror.$set(inputerror_changes);
      if (!current || dirty[0] & /*error*/
      1024) {
        (0, import_internal16.attr_dev)(
          input,
          "aria-invalid",
          /*error*/
          ctx2[10]
        );
      }
      if (!current || dirty[0] & /*error*/
      1024 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
      ctx2[10] ? (
        /*errorMessageId*/
        ctx2[14]
      ) : void 0)) {
        (0, import_internal16.attr_dev)(input, "aria-errormessage", input_aria_errormessage_value);
      }
      if (!current || dirty[0] & /*required*/
      64) {
        (0, import_internal16.attr_dev)(
          input,
          "aria-required",
          /*required*/
          ctx2[6]
        );
      }
      if (!current || dirty[0] & /*placeholder*/
      16) {
        (0, import_internal16.attr_dev)(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[4]
        );
      }
      if (!current || dirty[0] & /*title*/
      256) {
        (0, import_internal16.attr_dev)(
          input,
          "title",
          /*title*/
          ctx2[8]
        );
      }
      if (!current || dirty[0] & /*name*/
      512) {
        (0, import_internal16.attr_dev)(
          input,
          "name",
          /*name*/
          ctx2[9]
        );
      }
      if (!current || dirty[0] & /*disabled*/
      32) {
        (0, import_internal16.prop_dev)(
          input,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty[0] & /*_id*/
      8192) {
        (0, import_internal16.attr_dev)(
          input,
          "id",
          /*_id*/
          ctx2[13]
        );
      }
      if (dirty[0] & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        (0, import_internal16.set_input_value)(
          input,
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty[0] & /*disabled*/
      32) {
        (0, import_internal16.toggle_class)(
          div1,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty[0] & /*className*/
      8 && div2_class_value !== (div2_class_value = "input input-date " + /*className*/
      ctx2[3])) {
        (0, import_internal16.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty[0] & /*open*/
      4096) {
        (0, import_internal16.attr_dev)(
          div2,
          "aria-expanded",
          /*open*/
          ctx2[12]
        );
      }
      if (!current || dirty[0] & /*className, open*/
      4104) {
        (0, import_internal16.toggle_class)(
          div2,
          "open",
          /*open*/
          ctx2[12]
        );
      }
      if (!current || dirty[0] & /*className, error*/
      1032) {
        (0, import_internal16.toggle_class)(
          div2,
          "has-error",
          /*error*/
          ctx2[10]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal16.transition_in)(label_1.$$.fragment, local);
      (0, import_internal16.transition_in)(info_1.$$.fragment, local);
      (0, import_internal16.transition_in)(inputerror.$$.fragment, local);
      (0, import_internal16.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal16.transition_out)(label_1.$$.fragment, local);
      (0, import_internal16.transition_out)(info_1.$$.fragment, local);
      (0, import_internal16.transition_out)(inputerror.$$.fragment, local);
      (0, import_internal16.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal16.detach_dev)(div2);
      (0, import_internal16.destroy_component)(label_1);
      (0, import_internal16.destroy_component)(info_1);
      (0, import_internal16.destroy_component)(inputerror);
      (0, import_internal16.destroy_component)(button);
      ctx[26](null);
      ctx[28](null);
      mounted = false;
      (0, import_internal16.run_all)(dispose);
    }
  };
  (0, import_internal16.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment16.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance16($$self2, $$props2, $$invalidate2) {
  let _id2;
  let elevated;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal16.validate_slots)("InputDate", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { format = "yyyy-mm-dd" } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { placeholder = format } = $$props2;
  let { elevate = false } = $$props2;
  let { showOnFocus = false } = $$props2;
  let { orientation = "auto" } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { title = void 0 } = $$props2;
  let { name: name2 = void 0 } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const errorMessageId2 = guid();
  const dispatch2 = (0, import_svelte6.createEventDispatcher)();
  let picker;
  let open = false;
  (0, import_svelte6.onMount)(() => {
    picker = new Datepicker(
      inputElement2,
      {
        autohide: true,
        buttonClass: "button button-text info",
        container: elevated ? document.body : void 0,
        format,
        todayBtn: true,
        todayBtnMode: 1,
        orientation,
        todayHighlight: true,
        showOnFocus: showOnFocus === "true" || showOnFocus === true,
        prevArrow: icons.chevronLeft,
        nextArrow: icons.chevronRight,
        updateOnBlur: true,
        weekStart: 1
      }
    );
  });
  function onkeydown2(e) {
    const isActive = picker.active;
    const params = { event: e, component: picker };
    if (e.key === "Escape") {
      if (isActive)
        e.stopPropagation();
      else
        dispatch2("keydown", params);
      requestAnimationFrame(() => picker.hide());
    } else if (e.key === "Enter") {
      if (isActive)
        e.preventDefault();
      else
        dispatch2("keydown", params);
      requestAnimationFrame(() => picker.hide());
    } else
      dispatch2("keydown", params);
  }
  function oninput() {
    const wasOpen = open;
    requestAnimationFrame(() => {
      const d = Datepicker.parseDate(value2, format);
      const df = Datepicker.formatDate(d, format);
      if (df === value2) {
        picker.setDate(value2);
        if (wasOpen)
          picker.show();
      }
    });
  }
  function onchange4() {
    $$invalidate2(0, value2 = picker.getDate(format));
    dispatch2("change", value2);
  }
  function onshow() {
    $$invalidate2(12, open = true);
  }
  function onhide() {
    $$invalidate2(12, open = false);
  }
  function onIconClick() {
    inputElement2.focus();
    picker.show();
  }
  const writable_props = [
    "class",
    "format",
    "value",
    "placeholder",
    "elevate",
    "showOnFocus",
    "orientation",
    "disabled",
    "required",
    "id",
    "label",
    "title",
    "name",
    "error",
    "info",
    "element",
    "inputElement"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InputDate> was created with unknown prop '${key}'`);
  });
  function input_binding2($$value) {
    import_internal16.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
    });
  }
  function input_input_handler2() {
    value2 = this.value;
    $$invalidate2(0, value2);
  }
  function div2_binding2($$value) {
    import_internal16.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(3, className2 = $$props3.class);
    if ("format" in $$props3)
      $$invalidate2(21, format = $$props3.format);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("placeholder" in $$props3)
      $$invalidate2(4, placeholder = $$props3.placeholder);
    if ("elevate" in $$props3)
      $$invalidate2(22, elevate = $$props3.elevate);
    if ("showOnFocus" in $$props3)
      $$invalidate2(23, showOnFocus = $$props3.showOnFocus);
    if ("orientation" in $$props3)
      $$invalidate2(24, orientation = $$props3.orientation);
    if ("disabled" in $$props3)
      $$invalidate2(5, disabled2 = $$props3.disabled);
    if ("required" in $$props3)
      $$invalidate2(6, required2 = $$props3.required);
    if ("id" in $$props3)
      $$invalidate2(25, id2 = $$props3.id);
    if ("label" in $$props3)
      $$invalidate2(7, label2 = $$props3.label);
    if ("title" in $$props3)
      $$invalidate2(8, title = $$props3.title);
    if ("name" in $$props3)
      $$invalidate2(9, name2 = $$props3.name);
    if ("error" in $$props3)
      $$invalidate2(10, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(11, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(2, inputElement2 = $$props3.inputElement);
  };
  $$self2.$capture_state = () => ({
    onMount: import_svelte6.onMount,
    createEventDispatcher: import_svelte6.createEventDispatcher,
    Datepicker,
    icons,
    Button: Button_default,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    format,
    value: value2,
    placeholder,
    elevate,
    showOnFocus,
    orientation,
    disabled: disabled2,
    required: required2,
    id: id2,
    label: label2,
    title,
    name: name2,
    error: error2,
    info: info2,
    element: element41,
    inputElement: inputElement2,
    errorMessageId: errorMessageId2,
    dispatch: dispatch2,
    picker,
    open,
    onkeydown: onkeydown2,
    oninput,
    onchange: onchange4,
    onshow,
    onhide,
    onIconClick,
    elevated,
    _id: _id2
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(3, className2 = $$props3.className);
    if ("format" in $$props3)
      $$invalidate2(21, format = $$props3.format);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("placeholder" in $$props3)
      $$invalidate2(4, placeholder = $$props3.placeholder);
    if ("elevate" in $$props3)
      $$invalidate2(22, elevate = $$props3.elevate);
    if ("showOnFocus" in $$props3)
      $$invalidate2(23, showOnFocus = $$props3.showOnFocus);
    if ("orientation" in $$props3)
      $$invalidate2(24, orientation = $$props3.orientation);
    if ("disabled" in $$props3)
      $$invalidate2(5, disabled2 = $$props3.disabled);
    if ("required" in $$props3)
      $$invalidate2(6, required2 = $$props3.required);
    if ("id" in $$props3)
      $$invalidate2(25, id2 = $$props3.id);
    if ("label" in $$props3)
      $$invalidate2(7, label2 = $$props3.label);
    if ("title" in $$props3)
      $$invalidate2(8, title = $$props3.title);
    if ("name" in $$props3)
      $$invalidate2(9, name2 = $$props3.name);
    if ("error" in $$props3)
      $$invalidate2(10, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(11, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(2, inputElement2 = $$props3.inputElement);
    if ("picker" in $$props3)
      picker = $$props3.picker;
    if ("open" in $$props3)
      $$invalidate2(12, open = $$props3.open);
    if ("elevated" in $$props3)
      elevated = $$props3.elevated;
    if ("_id" in $$props3)
      $$invalidate2(13, _id2 = $$props3._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty[0] & /*id, name*/
    33554944) {
      $:
        $$invalidate2(13, _id2 = id2 || name2 || guid());
    }
    if ($$self2.$$.dirty[0] & /*elevate*/
    4194304) {
      $:
        elevated = elevate === true || elevate === "true";
    }
  };
  return [
    value2,
    element41,
    inputElement2,
    className2,
    placeholder,
    disabled2,
    required2,
    label2,
    title,
    name2,
    error2,
    info2,
    open,
    _id2,
    errorMessageId2,
    onkeydown2,
    oninput,
    onchange4,
    onshow,
    onhide,
    onIconClick,
    format,
    elevate,
    showOnFocus,
    orientation,
    id2,
    input_binding2,
    input_input_handler2,
    div2_binding2
  ];
}
var InputDate = class extends import_internal16.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal16.init)(
      this,
      options,
      instance16,
      create_fragment16,
      import_internal16.safe_not_equal,
      {
        class: 3,
        format: 21,
        value: 0,
        placeholder: 4,
        elevate: 22,
        showOnFocus: 23,
        orientation: 24,
        disabled: 5,
        required: 6,
        id: 25,
        label: 7,
        title: 8,
        name: 9,
        error: 10,
        info: 11,
        element: 1,
        inputElement: 2
      },
      null,
      [-1, -1]
    );
    (0, import_internal16.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputDate",
      options,
      id: create_fragment16.name
    });
  }
  get class() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get format() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set format(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get placeholder() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set placeholder(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get elevate() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set elevate(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get showOnFocus() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set showOnFocus(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get orientation() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set orientation(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<InputDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<InputDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InputDate_default = InputDate;

// src/input/input-math/InputMath.svelte
var import_internal17 = __toESM(require_internal());
var import_svelte7 = __toESM(require_svelte());
var file12 = "src/input/input-math/InputMath.svelte";
function create_fragment17(ctx) {
  let div2;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div1;
  let inputerror;
  let t2;
  let div0;
  let icon;
  let t3;
  let input;
  let input_aria_errormessage_value;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[6]
      ),
      for: (
        /*_id*/
        ctx[10]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[8]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[11]
      ),
      msg: (
        /*error*/
        ctx[7]
      )
    },
    $$inline: true
  });
  icon = new Icon_default({
    props: { name: "calculator" },
    $$inline: true
  });
  let input_levels = [
    { type: "text" },
    { autocomplete: "off" },
    /*props*/
    ctx[9],
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { id: (
      /*_id*/
      ctx[10]
    ) },
    { "aria-invalid": (
      /*error*/
      ctx[7]
    ) },
    {
      "aria-errormessage": input_aria_errormessage_value = /*error*/
      ctx[7] ? (
        /*errorMessageId*/
        ctx[11]
      ) : void 0
    },
    { "aria-required": (
      /*required*/
      ctx[4]
    ) }
  ];
  let input_data = {};
  for (let i = 0; i < input_levels.length; i += 1) {
    input_data = (0, import_internal17.assign)(input_data, input_levels[i]);
  }
  const block = {
    c: function create() {
      div2 = (0, import_internal17.element)("div");
      (0, import_internal17.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal17.space)();
      (0, import_internal17.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal17.space)();
      div1 = (0, import_internal17.element)("div");
      (0, import_internal17.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal17.space)();
      div0 = (0, import_internal17.element)("div");
      (0, import_internal17.create_component)(icon.$$.fragment);
      t3 = (0, import_internal17.space)();
      input = (0, import_internal17.element)("input");
      (0, import_internal17.set_attributes)(input, input_data);
      (0, import_internal17.add_location)(input, file12, 13, 3, 303);
      (0, import_internal17.attr_dev)(div0, "class", "input-row");
      (0, import_internal17.add_location)(div0, file12, 11, 2, 247);
      (0, import_internal17.attr_dev)(div1, "class", "input-inner");
      (0, import_internal17.toggle_class)(
        div1,
        "disabled",
        /*disabled*/
        ctx[5]
      );
      (0, import_internal17.add_location)(div1, file12, 8, 1, 150);
      (0, import_internal17.attr_dev)(div2, "class", div2_class_value = "input input-math " + /*className*/
      ctx[3]);
      (0, import_internal17.toggle_class)(
        div2,
        "has-error",
        /*error*/
        ctx[7]
      );
      (0, import_internal17.add_location)(div2, file12, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal17.insert_dev)(target, div2, anchor);
      (0, import_internal17.mount_component)(label_1, div2, null);
      (0, import_internal17.append_dev)(div2, t0);
      (0, import_internal17.mount_component)(info_1, div2, null);
      (0, import_internal17.append_dev)(div2, t1);
      (0, import_internal17.append_dev)(div2, div1);
      (0, import_internal17.mount_component)(inputerror, div1, null);
      (0, import_internal17.append_dev)(div1, t2);
      (0, import_internal17.append_dev)(div1, div0);
      (0, import_internal17.mount_component)(icon, div0, null);
      (0, import_internal17.append_dev)(div0, t3);
      (0, import_internal17.append_dev)(div0, input);
      if (input.autofocus)
        input.focus();
      ctx[18](input);
      (0, import_internal17.set_input_value)(
        input,
        /*value*/
        ctx[0]
      );
      ctx[20](div2);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal17.listen_dev)(
            input,
            "input",
            /*input_input_handler*/
            ctx[19]
          ),
          (0, import_internal17.listen_dev)(
            input,
            "input",
            /*input_handler*/
            ctx[15],
            false,
            false,
            false,
            false
          ),
          (0, import_internal17.listen_dev)(
            input,
            "keydown",
            /*onkeydown*/
            ctx[12],
            false,
            false,
            false,
            false
          ),
          (0, import_internal17.listen_dev)(
            input,
            "change",
            /*onchange*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          (0, import_internal17.listen_dev)(
            input,
            "focus",
            /*focus_handler*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          (0, import_internal17.listen_dev)(
            input,
            "blur",
            /*blur_handler*/
            ctx[17],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      64)
        label_1_changes.label = /*label*/
        ctx2[6];
      if (dirty & /*_id*/
      1024)
        label_1_changes.for = /*_id*/
        ctx2[10];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      256)
        info_1_changes.msg = /*info*/
        ctx2[8];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      128)
        inputerror_changes.msg = /*error*/
        ctx2[7];
      inputerror.$set(inputerror_changes);
      (0, import_internal17.set_attributes)(input, input_data = (0, import_internal17.get_spread_update)(input_levels, [
        { type: "text" },
        { autocomplete: "off" },
        dirty & /*props*/
        512 && /*props*/
        ctx2[9],
        (!current || dirty & /*disabled*/
        32) && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        (!current || dirty & /*_id*/
        1024) && { id: (
          /*_id*/
          ctx2[10]
        ) },
        (!current || dirty & /*error*/
        128) && { "aria-invalid": (
          /*error*/
          ctx2[7]
        ) },
        (!current || dirty & /*error*/
        128 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
        ctx2[7] ? (
          /*errorMessageId*/
          ctx2[11]
        ) : void 0)) && {
          "aria-errormessage": input_aria_errormessage_value
        },
        (!current || dirty & /*required*/
        16) && { "aria-required": (
          /*required*/
          ctx2[4]
        ) }
      ]));
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        (0, import_internal17.set_input_value)(
          input,
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*disabled*/
      32) {
        (0, import_internal17.toggle_class)(
          div1,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*className*/
      8 && div2_class_value !== (div2_class_value = "input input-math " + /*className*/
      ctx2[3])) {
        (0, import_internal17.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*className, error*/
      136) {
        (0, import_internal17.toggle_class)(
          div2,
          "has-error",
          /*error*/
          ctx2[7]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal17.transition_in)(label_1.$$.fragment, local);
      (0, import_internal17.transition_in)(info_1.$$.fragment, local);
      (0, import_internal17.transition_in)(inputerror.$$.fragment, local);
      (0, import_internal17.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal17.transition_out)(label_1.$$.fragment, local);
      (0, import_internal17.transition_out)(info_1.$$.fragment, local);
      (0, import_internal17.transition_out)(inputerror.$$.fragment, local);
      (0, import_internal17.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal17.detach_dev)(div2);
      (0, import_internal17.destroy_component)(label_1);
      (0, import_internal17.destroy_component)(info_1);
      (0, import_internal17.destroy_component)(inputerror);
      (0, import_internal17.destroy_component)(icon);
      ctx[18](null);
      ctx[20](null);
      mounted = false;
      (0, import_internal17.run_all)(dispose);
    }
  };
  (0, import_internal17.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment17.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var DECIMAL_SEPARATOR = ".";
function instance17($$self, $$props, $$invalidate) {
  let props;
  let _id;
  let { $$slots: slots = {}, $$scope } = $$props;
  (0, import_internal17.validate_slots)("InputMath", slots, []);
  let { class: className = "" } = $$props;
  let { id = "" } = $$props;
  let { required = void 0 } = $$props;
  let { disabled = false } = $$props;
  let { value = "" } = $$props;
  let { label = "" } = $$props;
  let { error = void 0 } = $$props;
  let { info = void 0 } = $$props;
  let { element = void 0 } = $$props;
  let { inputElement = void 0 } = $$props;
  const errorMessageId = guid();
  const dispatch = (0, import_svelte7.createEventDispatcher)();
  const allowedKeys = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "+",
    "-",
    "/",
    "*",
    "(",
    ")",
    "Meta",
    "ArrowLeft",
    "ArrowDown",
    "ArrowUp",
    "ArrowRight",
    "Backspace",
    "Delete",
    "Tab",
    "Enter",
    "Ctrl"
  ];
  function onkeydown(e) {
    dispatch("keydown", e);
    if (e.key === "Enter") {
      const num2 = parseAmount(value);
      $$invalidate(0, value = isNaN(num2) ? "" : num2);
      return;
    }
    if (allowedKeys.includes(e.key))
      return;
    if (e.metaKey || e.ctrlKey)
      return;
    if (e.key === DECIMAL_SEPARATOR)
      return;
    e.preventDefault();
  }
  function onchange(e) {
    const num2 = parseAmount(value);
    $$invalidate(0, value = isNaN(num2) ? "" : num2);
    dispatch("change", e);
  }
  function parseAmount(amount) {
    if (!amount)
      return "";
    amount = ("" + amount).replace(/[\s,]/g, "");
    if (!/^[+\-\\*/()\d.]+$/i.test(amount))
      return 0;
    if (/[+\-\\*/.]+/i.test(amount)) {
      try {
        amount = eval(amount);
      } catch (e) {
        amount = 0;
      }
    }
    const num = parseFloat(amount);
    return num === Infinity || isNaN(num) ? 0 : roundAmount(num);
  }
  function input_handler(event2) {
    import_internal17.bubble.call(this, $$self, event2);
  }
  function focus_handler(event2) {
    import_internal17.bubble.call(this, $$self, event2);
  }
  function blur_handler(event2) {
    import_internal17.bubble.call(this, $$self, event2);
  }
  function input_binding($$value) {
    import_internal17.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement = $$value;
      $$invalidate(2, inputElement);
    });
  }
  function input_input_handler() {
    value = this.value;
    $$invalidate(0, value);
  }
  function div2_binding($$value) {
    import_internal17.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element = $$value;
      $$invalidate(1, element);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(24, $$props = (0, import_internal17.assign)((0, import_internal17.assign)({}, $$props), (0, import_internal17.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate(3, className = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate(14, id = $$new_props.id);
    if ("required" in $$new_props)
      $$invalidate(4, required = $$new_props.required);
    if ("disabled" in $$new_props)
      $$invalidate(5, disabled = $$new_props.disabled);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("label" in $$new_props)
      $$invalidate(6, label = $$new_props.label);
    if ("error" in $$new_props)
      $$invalidate(7, error = $$new_props.error);
    if ("info" in $$new_props)
      $$invalidate(8, info = $$new_props.info);
    if ("element" in $$new_props)
      $$invalidate(1, element = $$new_props.element);
    if ("inputElement" in $$new_props)
      $$invalidate(2, inputElement = $$new_props.inputElement);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher: import_svelte7.createEventDispatcher,
    Icon: Icon_default,
    pluck,
    roundAmount,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className,
    id,
    required,
    disabled,
    value,
    label,
    error,
    info,
    element,
    inputElement,
    errorMessageId,
    dispatch,
    DECIMAL_SEPARATOR,
    allowedKeys,
    onkeydown,
    onchange,
    parseAmount,
    props,
    _id
  });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(24, $$props = (0, import_internal17.assign)((0, import_internal17.assign)({}, $$props), $$new_props));
    if ("className" in $$props)
      $$invalidate(3, className = $$new_props.className);
    if ("id" in $$props)
      $$invalidate(14, id = $$new_props.id);
    if ("required" in $$props)
      $$invalidate(4, required = $$new_props.required);
    if ("disabled" in $$props)
      $$invalidate(5, disabled = $$new_props.disabled);
    if ("value" in $$props)
      $$invalidate(0, value = $$new_props.value);
    if ("label" in $$props)
      $$invalidate(6, label = $$new_props.label);
    if ("error" in $$props)
      $$invalidate(7, error = $$new_props.error);
    if ("info" in $$props)
      $$invalidate(8, info = $$new_props.info);
    if ("element" in $$props)
      $$invalidate(1, element = $$new_props.element);
    if ("inputElement" in $$props)
      $$invalidate(2, inputElement = $$new_props.inputElement);
    if ("props" in $$props)
      $$invalidate(9, props = $$new_props.props);
    if ("_id" in $$props)
      $$invalidate(10, _id = $$new_props._id);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    $:
      $$invalidate(9, props = pluck($$props, ["title", "name", "placeholder"]));
    if ($$self.$$.dirty & /*id, props*/
    16896) {
      $:
        $$invalidate(10, _id = id || props.name || guid());
    }
  };
  $$props = (0, import_internal17.exclude_internal_props)($$props);
  return [
    value,
    element,
    inputElement,
    className,
    required,
    disabled,
    label,
    error,
    info,
    props,
    _id,
    errorMessageId,
    onkeydown,
    onchange,
    id,
    input_handler,
    focus_handler,
    blur_handler,
    input_binding,
    input_input_handler,
    div2_binding
  ];
}
var InputMath = class extends import_internal17.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal17.init)(this, options, instance17, create_fragment17, import_internal17.safe_not_equal, {
      class: 3,
      id: 14,
      required: 4,
      disabled: 5,
      value: 0,
      label: 6,
      error: 7,
      info: 8,
      element: 1,
      inputElement: 2
    });
    (0, import_internal17.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputMath",
      options,
      id: create_fragment17.name
    });
  }
  get class() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<InputMath>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<InputMath>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InputMath_default = InputMath;

// src/input/input-number/InputNumber.svelte
var import_internal18 = __toESM(require_internal());
var import_svelte8 = __toESM(require_svelte());
var file13 = "src/input/input-number/InputNumber.svelte";
function create_fragment18(ctx) {
  let div1;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div0;
  let inputerror;
  let t2;
  let input;
  let input_aria_errormessage_value;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[7]
      ),
      disabled: (
        /*disabled*/
        ctx[5]
      ),
      for: (
        /*_id*/
        ctx[10]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[9]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[12]
      ),
      msg: (
        /*error*/
        ctx[8]
      )
    },
    $$inline: true
  });
  let input_levels = [
    { type: "text" },
    { autocomplete: "off" },
    /*props*/
    ctx[11],
    { name: (
      /*name*/
      ctx[4]
    ) },
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { id: (
      /*_id*/
      ctx[10]
    ) },
    { "aria-invalid": (
      /*error*/
      ctx[8]
    ) },
    {
      "aria-errormessage": input_aria_errormessage_value = /*error*/
      ctx[8] ? (
        /*errorMessageId*/
        ctx[12]
      ) : void 0
    },
    { "aria-required": (
      /*required*/
      ctx[6]
    ) }
  ];
  let input_data = {};
  for (let i = 0; i < input_levels.length; i += 1) {
    input_data = (0, import_internal18.assign)(input_data, input_levels[i]);
  }
  const block = {
    c: function create() {
      div1 = (0, import_internal18.element)("div");
      (0, import_internal18.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal18.space)();
      (0, import_internal18.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal18.space)();
      div0 = (0, import_internal18.element)("div");
      (0, import_internal18.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal18.space)();
      input = (0, import_internal18.element)("input");
      (0, import_internal18.set_attributes)(input, input_data);
      (0, import_internal18.add_location)(input, file13, 11, 2, 245);
      (0, import_internal18.attr_dev)(div0, "class", "input-inner");
      (0, import_internal18.add_location)(div0, file13, 8, 1, 163);
      (0, import_internal18.attr_dev)(div1, "class", div1_class_value = "input input-number " + /*className*/
      ctx[3]);
      (0, import_internal18.toggle_class)(
        div1,
        "has-error",
        /*error*/
        ctx[8]
      );
      (0, import_internal18.add_location)(div1, file13, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal18.insert_dev)(target, div1, anchor);
      (0, import_internal18.mount_component)(label_1, div1, null);
      (0, import_internal18.append_dev)(div1, t0);
      (0, import_internal18.mount_component)(info_1, div1, null);
      (0, import_internal18.append_dev)(div1, t1);
      (0, import_internal18.append_dev)(div1, div0);
      (0, import_internal18.mount_component)(inputerror, div0, null);
      (0, import_internal18.append_dev)(div0, t2);
      (0, import_internal18.append_dev)(div0, input);
      if (input.autofocus)
        input.focus();
      ctx[20](input);
      (0, import_internal18.set_input_value)(
        input,
        /*value*/
        ctx[0]
      );
      ctx[22](div1);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal18.listen_dev)(
            input,
            "input",
            /*input_input_handler*/
            ctx[21]
          ),
          (0, import_internal18.listen_dev)(
            input,
            "keydown",
            /*onkeydown*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          (0, import_internal18.listen_dev)(
            input,
            "change",
            /*onchange*/
            ctx[14],
            false,
            false,
            false,
            false
          ),
          (0, import_internal18.listen_dev)(
            input,
            "input",
            /*input_handler*/
            ctx[17],
            false,
            false,
            false,
            false
          ),
          (0, import_internal18.listen_dev)(
            input,
            "focus",
            /*focus_handler*/
            ctx[18],
            false,
            false,
            false,
            false
          ),
          (0, import_internal18.listen_dev)(
            input,
            "blur",
            /*blur_handler*/
            ctx[19],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      128)
        label_1_changes.label = /*label*/
        ctx2[7];
      if (dirty & /*disabled*/
      32)
        label_1_changes.disabled = /*disabled*/
        ctx2[5];
      if (dirty & /*_id*/
      1024)
        label_1_changes.for = /*_id*/
        ctx2[10];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      512)
        info_1_changes.msg = /*info*/
        ctx2[9];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      256)
        inputerror_changes.msg = /*error*/
        ctx2[8];
      inputerror.$set(inputerror_changes);
      (0, import_internal18.set_attributes)(input, input_data = (0, import_internal18.get_spread_update)(input_levels, [
        { type: "text" },
        { autocomplete: "off" },
        dirty & /*props*/
        2048 && /*props*/
        ctx2[11],
        (!current || dirty & /*name*/
        16) && { name: (
          /*name*/
          ctx2[4]
        ) },
        (!current || dirty & /*disabled*/
        32) && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        (!current || dirty & /*_id*/
        1024) && { id: (
          /*_id*/
          ctx2[10]
        ) },
        (!current || dirty & /*error*/
        256) && { "aria-invalid": (
          /*error*/
          ctx2[8]
        ) },
        (!current || dirty & /*error*/
        256 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
        ctx2[8] ? (
          /*errorMessageId*/
          ctx2[12]
        ) : void 0)) && {
          "aria-errormessage": input_aria_errormessage_value
        },
        (!current || dirty & /*required*/
        64) && { "aria-required": (
          /*required*/
          ctx2[6]
        ) }
      ]));
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        (0, import_internal18.set_input_value)(
          input,
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*className*/
      8 && div1_class_value !== (div1_class_value = "input input-number " + /*className*/
      ctx2[3])) {
        (0, import_internal18.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*className, error*/
      264) {
        (0, import_internal18.toggle_class)(
          div1,
          "has-error",
          /*error*/
          ctx2[8]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal18.transition_in)(label_1.$$.fragment, local);
      (0, import_internal18.transition_in)(info_1.$$.fragment, local);
      (0, import_internal18.transition_in)(inputerror.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal18.transition_out)(label_1.$$.fragment, local);
      (0, import_internal18.transition_out)(info_1.$$.fragment, local);
      (0, import_internal18.transition_out)(inputerror.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal18.detach_dev)(div1);
      (0, import_internal18.destroy_component)(label_1);
      (0, import_internal18.destroy_component)(info_1);
      (0, import_internal18.destroy_component)(inputerror);
      ctx[20](null);
      ctx[22](null);
      mounted = false;
      (0, import_internal18.run_all)(dispose);
    }
  };
  (0, import_internal18.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment18.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance18($$self2, $$props2, $$invalidate2) {
  let props2;
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal18.validate_slots)("InputNumber", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { name: name2 = guid() } = $$props2;
  let { disabled: disabled2 = void 0 } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { separator = "." } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte8.createEventDispatcher)();
  const errorMessageId2 = guid();
  const allowedKeys2 = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "ArrowLeft",
    "ArrowDown",
    "ArrowUp",
    "ArrowRight",
    "Backspace",
    "Delete",
    "Tab",
    "Meta"
  ];
  function fireKeydown(event2) {
    dispatch2("keydown", { event: event2, value: value2 });
  }
  function onkeydown2(e) {
    const key = e.key;
    const val = "" + value2;
    if (allowedKeys2.includes(key))
      return fireKeydown(e);
    if (key === "-" && !val.includes("-"))
      return fireKeydown(e);
    if (key === separator && !val.includes(separator))
      return fireKeydown(e);
    e.preventDefault();
  }
  function onchange4() {
    const v = ("" + value2).replace(separator, ".");
    const num2 = parseFloat(v);
    $$invalidate2(0, value2 = isNaN(num2) ? "" : ("" + num2).replace(".", separator));
    dispatch2("change", { value: value2 });
  }
  function input_handler2(event2) {
    import_internal18.bubble.call(this, $$self2, event2);
  }
  function focus_handler2(event2) {
    import_internal18.bubble.call(this, $$self2, event2);
  }
  function blur_handler2(event2) {
    import_internal18.bubble.call(this, $$self2, event2);
  }
  function input_binding2($$value) {
    import_internal18.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
    });
  }
  function input_input_handler2() {
    value2 = this.value;
    $$invalidate2(0, value2);
  }
  function div1_binding($$value) {
    import_internal18.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(26, $$props2 = (0, import_internal18.assign)((0, import_internal18.assign)({}, $$props2), (0, import_internal18.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate2(3, className2 = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate2(15, id2 = $$new_props.id);
    if ("name" in $$new_props)
      $$invalidate2(4, name2 = $$new_props.name);
    if ("disabled" in $$new_props)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("required" in $$new_props)
      $$invalidate2(6, required2 = $$new_props.required);
    if ("value" in $$new_props)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("label" in $$new_props)
      $$invalidate2(7, label2 = $$new_props.label);
    if ("error" in $$new_props)
      $$invalidate2(8, error2 = $$new_props.error);
    if ("info" in $$new_props)
      $$invalidate2(9, info2 = $$new_props.info);
    if ("separator" in $$new_props)
      $$invalidate2(16, separator = $$new_props.separator);
    if ("element" in $$new_props)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$new_props)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte8.createEventDispatcher,
    pluck,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    id: id2,
    name: name2,
    disabled: disabled2,
    required: required2,
    value: value2,
    label: label2,
    error: error2,
    info: info2,
    separator,
    element: element41,
    inputElement: inputElement2,
    dispatch: dispatch2,
    errorMessageId: errorMessageId2,
    allowedKeys: allowedKeys2,
    fireKeydown,
    onkeydown: onkeydown2,
    onchange: onchange4,
    _id: _id2,
    props: props2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(26, $$props2 = (0, import_internal18.assign)((0, import_internal18.assign)({}, $$props2), $$new_props));
    if ("className" in $$props2)
      $$invalidate2(3, className2 = $$new_props.className);
    if ("id" in $$props2)
      $$invalidate2(15, id2 = $$new_props.id);
    if ("name" in $$props2)
      $$invalidate2(4, name2 = $$new_props.name);
    if ("disabled" in $$props2)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("required" in $$props2)
      $$invalidate2(6, required2 = $$new_props.required);
    if ("value" in $$props2)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("label" in $$props2)
      $$invalidate2(7, label2 = $$new_props.label);
    if ("error" in $$props2)
      $$invalidate2(8, error2 = $$new_props.error);
    if ("info" in $$props2)
      $$invalidate2(9, info2 = $$new_props.info);
    if ("separator" in $$props2)
      $$invalidate2(16, separator = $$new_props.separator);
    if ("element" in $$props2)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$props2)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
    if ("_id" in $$props2)
      $$invalidate2(10, _id2 = $$new_props._id);
    if ("props" in $$props2)
      $$invalidate2(11, props2 = $$new_props.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(11, props2 = pluck($$props2, ["title", "placeholder"]));
    if ($$self2.$$.dirty & /*id, name*/
    32784) {
      $:
        $$invalidate2(10, _id2 = id2 || name2 || guid());
    }
  };
  $$props2 = (0, import_internal18.exclude_internal_props)($$props2);
  return [
    value2,
    element41,
    inputElement2,
    className2,
    name2,
    disabled2,
    required2,
    label2,
    error2,
    info2,
    _id2,
    props2,
    errorMessageId2,
    onkeydown2,
    onchange4,
    id2,
    separator,
    input_handler2,
    focus_handler2,
    blur_handler2,
    input_binding2,
    input_input_handler2,
    div1_binding
  ];
}
var InputNumber = class extends import_internal18.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal18.init)(this, options, instance18, create_fragment18, import_internal18.safe_not_equal, {
      class: 3,
      id: 15,
      name: 4,
      disabled: 5,
      required: 6,
      value: 0,
      label: 7,
      error: 8,
      info: 9,
      separator: 16,
      element: 1,
      inputElement: 2
    });
    (0, import_internal18.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputNumber",
      options,
      id: create_fragment18.name
    });
  }
  get class() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get separator() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set separator(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<InputNumber>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<InputNumber>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InputNumber_default = InputNumber;

// src/input/input-password/InputPassword.svelte
var import_internal19 = __toESM(require_internal());
var import_svelte9 = __toESM(require_svelte());
var file14 = "src/input/input-password/InputPassword.svelte";
function create_if_block8(ctx) {
  let div2;
  let div1;
  let div0;
  let div0_class_value;
  let t0;
  let div4;
  let div3;
  let h2;
  let t1;
  let t2;
  let small;
  let div3_class_value;
  const block = {
    c: function create() {
      div2 = (0, import_internal19.element)("div");
      div1 = (0, import_internal19.element)("div");
      div0 = (0, import_internal19.element)("div");
      t0 = (0, import_internal19.space)();
      div4 = (0, import_internal19.element)("div");
      div3 = (0, import_internal19.element)("div");
      h2 = (0, import_internal19.element)("h2");
      t1 = (0, import_internal19.text)(
        /*quality*/
        ctx[13]
      );
      t2 = (0, import_internal19.space)();
      small = (0, import_internal19.element)("small");
      (0, import_internal19.attr_dev)(div0, "class", div0_class_value = "password-strength-progress " + /*colorClass*/
      ctx[16]);
      (0, import_internal19.set_style)(
        div0,
        "width",
        /*percent*/
        ctx[14] + "%"
      );
      (0, import_internal19.add_location)(div0, file14, 35, 4, 867);
      (0, import_internal19.attr_dev)(div1, "class", "password-strength");
      (0, import_internal19.attr_dev)(
        div1,
        "title",
        /*quality*/
        ctx[13]
      );
      (0, import_internal19.add_location)(div1, file14, 34, 3, 813);
      (0, import_internal19.attr_dev)(div2, "class", "input-row");
      (0, import_internal19.add_location)(div2, file14, 33, 2, 786);
      (0, import_internal19.add_location)(h2, file14, 40, 4, 1055);
      (0, import_internal19.add_location)(small, file14, 41, 4, 1078);
      (0, import_internal19.attr_dev)(div3, "class", div3_class_value = "password-strength-info " + /*colorClass*/
      ctx[16]);
      (0, import_internal19.add_location)(div3, file14, 39, 3, 1001);
      (0, import_internal19.attr_dev)(div4, "class", "input-row");
      (0, import_internal19.add_location)(div4, file14, 38, 2, 974);
    },
    m: function mount(target, anchor) {
      (0, import_internal19.insert_dev)(target, div2, anchor);
      (0, import_internal19.append_dev)(div2, div1);
      (0, import_internal19.append_dev)(div1, div0);
      (0, import_internal19.insert_dev)(target, t0, anchor);
      (0, import_internal19.insert_dev)(target, div4, anchor);
      (0, import_internal19.append_dev)(div4, div3);
      (0, import_internal19.append_dev)(div3, h2);
      (0, import_internal19.append_dev)(h2, t1);
      (0, import_internal19.append_dev)(div3, t2);
      (0, import_internal19.append_dev)(div3, small);
      small.innerHTML = /*strengthInfoText*/
      ctx[15];
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & /*colorClass*/
      65536 && div0_class_value !== (div0_class_value = "password-strength-progress " + /*colorClass*/
      ctx2[16])) {
        (0, import_internal19.attr_dev)(div0, "class", div0_class_value);
      }
      if (dirty[0] & /*percent*/
      16384) {
        (0, import_internal19.set_style)(
          div0,
          "width",
          /*percent*/
          ctx2[14] + "%"
        );
      }
      if (dirty[0] & /*quality*/
      8192) {
        (0, import_internal19.attr_dev)(
          div1,
          "title",
          /*quality*/
          ctx2[13]
        );
      }
      if (dirty[0] & /*quality*/
      8192)
        (0, import_internal19.set_data_dev)(
          t1,
          /*quality*/
          ctx2[13]
        );
      if (dirty[0] & /*strengthInfoText*/
      32768)
        small.innerHTML = /*strengthInfoText*/
        ctx2[15];
      ;
      if (dirty[0] & /*colorClass*/
      65536 && div3_class_value !== (div3_class_value = "password-strength-info " + /*colorClass*/
      ctx2[16])) {
        (0, import_internal19.attr_dev)(div3, "class", div3_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal19.detach_dev)(div2);
      if (detaching)
        (0, import_internal19.detach_dev)(t0);
      if (detaching)
        (0, import_internal19.detach_dev)(div4);
    }
  };
  (0, import_internal19.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block8.name,
    type: "if",
    source: "(33:1) {#if strength && lib && value}",
    ctx
  });
  return block;
}
function create_fragment19(ctx) {
  let div2;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div1;
  let inputerror;
  let t2;
  let div0;
  let input;
  let input_aria_errormessage_value;
  let t3;
  let button;
  let t4;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[7]
      ),
      disabled: (
        /*disabled*/
        ctx[5]
      ),
      for: (
        /*_id*/
        ctx[17]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[9]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[19]
      ),
      msg: (
        /*error*/
        ctx[8]
      )
    },
    $$inline: true
  });
  let input_levels = [
    { autocomplete: "off" },
    /*props*/
    ctx[11],
    { id: (
      /*_id*/
      ctx[17]
    ) },
    { "aria-invalid": (
      /*error*/
      ctx[8]
    ) },
    {
      "aria-errormessage": input_aria_errormessage_value = /*error*/
      ctx[8] ? (
        /*errorMessageId*/
        ctx[19]
      ) : void 0
    },
    { "aria-required": (
      /*required*/
      ctx[4]
    ) },
    { type: (
      /*type*/
      ctx[18]
    ) },
    { value: (
      /*value*/
      ctx[0]
    ) },
    { disabled: (
      /*disabled*/
      ctx[5]
    ) }
  ];
  let input_data = {};
  for (let i = 0; i < input_levels.length; i += 1) {
    input_data = (0, import_internal19.assign)(input_data, input_levels[i]);
  }
  button = new Button_default({
    props: {
      link: true,
      icon: (
        /*visible*/
        ctx[10] ? "eye" : "eyeOff"
      ),
      class: "input-password-button"
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*toggle*/
    ctx[21]
  );
  let if_block = (
    /*strength*/
    ctx[6] && /*lib*/
    ctx[12] && /*value*/
    ctx[0] && create_if_block8(ctx)
  );
  const block = {
    c: function create() {
      div2 = (0, import_internal19.element)("div");
      (0, import_internal19.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal19.space)();
      (0, import_internal19.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal19.space)();
      div1 = (0, import_internal19.element)("div");
      (0, import_internal19.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal19.space)();
      div0 = (0, import_internal19.element)("div");
      input = (0, import_internal19.element)("input");
      t3 = (0, import_internal19.space)();
      (0, import_internal19.create_component)(button.$$.fragment);
      t4 = (0, import_internal19.space)();
      if (if_block)
        if_block.c();
      (0, import_internal19.set_attributes)(input, input_data);
      (0, import_internal19.add_location)(input, file14, 13, 3, 303);
      (0, import_internal19.attr_dev)(div0, "class", "input-row");
      (0, import_internal19.toggle_class)(
        div0,
        "visible",
        /*visible*/
        ctx[10]
      );
      (0, import_internal19.add_location)(div0, file14, 12, 2, 262);
      (0, import_internal19.attr_dev)(div1, "class", "input-inner");
      (0, import_internal19.add_location)(div1, file14, 9, 1, 180);
      (0, import_internal19.attr_dev)(div2, "class", div2_class_value = "input input-password " + /*className*/
      ctx[3]);
      (0, import_internal19.toggle_class)(
        div2,
        "has-error",
        /*error*/
        ctx[8]
      );
      (0, import_internal19.toggle_class)(
        div2,
        "visible",
        /*visible*/
        ctx[10]
      );
      (0, import_internal19.add_location)(div2, file14, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal19.insert_dev)(target, div2, anchor);
      (0, import_internal19.mount_component)(label_1, div2, null);
      (0, import_internal19.append_dev)(div2, t0);
      (0, import_internal19.mount_component)(info_1, div2, null);
      (0, import_internal19.append_dev)(div2, t1);
      (0, import_internal19.append_dev)(div2, div1);
      (0, import_internal19.mount_component)(inputerror, div1, null);
      (0, import_internal19.append_dev)(div1, t2);
      (0, import_internal19.append_dev)(div1, div0);
      (0, import_internal19.append_dev)(div0, input);
      if ("value" in input_data) {
        input.value = input_data.value;
      }
      if (input.autofocus)
        input.focus();
      ctx[27](input);
      (0, import_internal19.append_dev)(div0, t3);
      (0, import_internal19.mount_component)(button, div0, null);
      (0, import_internal19.append_dev)(div2, t4);
      if (if_block)
        if_block.m(div2, null);
      ctx[28](div2);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal19.listen_dev)(
            input,
            "input",
            /*oninput*/
            ctx[20],
            false,
            false,
            false,
            false
          ),
          (0, import_internal19.listen_dev)(
            input,
            "keydown",
            /*keydown_handler*/
            ctx[23],
            false,
            false,
            false,
            false
          ),
          (0, import_internal19.listen_dev)(
            input,
            "change",
            /*change_handler*/
            ctx[24],
            false,
            false,
            false,
            false
          ),
          (0, import_internal19.listen_dev)(
            input,
            "focus",
            /*focus_handler*/
            ctx[25],
            false,
            false,
            false,
            false
          ),
          (0, import_internal19.listen_dev)(
            input,
            "blur",
            /*blur_handler*/
            ctx[26],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      const label_1_changes = {};
      if (dirty[0] & /*label*/
      128)
        label_1_changes.label = /*label*/
        ctx2[7];
      if (dirty[0] & /*disabled*/
      32)
        label_1_changes.disabled = /*disabled*/
        ctx2[5];
      if (dirty[0] & /*_id*/
      131072)
        label_1_changes.for = /*_id*/
        ctx2[17];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty[0] & /*info*/
      512)
        info_1_changes.msg = /*info*/
        ctx2[9];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty[0] & /*error*/
      256)
        inputerror_changes.msg = /*error*/
        ctx2[8];
      inputerror.$set(inputerror_changes);
      (0, import_internal19.set_attributes)(input, input_data = (0, import_internal19.get_spread_update)(input_levels, [
        { autocomplete: "off" },
        dirty[0] & /*props*/
        2048 && /*props*/
        ctx2[11],
        (!current || dirty[0] & /*_id*/
        131072) && { id: (
          /*_id*/
          ctx2[17]
        ) },
        (!current || dirty[0] & /*error*/
        256) && { "aria-invalid": (
          /*error*/
          ctx2[8]
        ) },
        (!current || dirty[0] & /*error*/
        256 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
        ctx2[8] ? (
          /*errorMessageId*/
          ctx2[19]
        ) : void 0)) && {
          "aria-errormessage": input_aria_errormessage_value
        },
        (!current || dirty[0] & /*required*/
        16) && { "aria-required": (
          /*required*/
          ctx2[4]
        ) },
        (!current || dirty[0] & /*type*/
        262144) && { type: (
          /*type*/
          ctx2[18]
        ) },
        (!current || dirty[0] & /*value*/
        1 && input.value !== /*value*/
        ctx2[0]) && { value: (
          /*value*/
          ctx2[0]
        ) },
        (!current || dirty[0] & /*disabled*/
        32) && { disabled: (
          /*disabled*/
          ctx2[5]
        ) }
      ]));
      if ("value" in input_data) {
        input.value = input_data.value;
      }
      const button_changes = {};
      if (dirty[0] & /*visible*/
      1024)
        button_changes.icon = /*visible*/
        ctx2[10] ? "eye" : "eyeOff";
      button.$set(button_changes);
      if (!current || dirty[0] & /*visible*/
      1024) {
        (0, import_internal19.toggle_class)(
          div0,
          "visible",
          /*visible*/
          ctx2[10]
        );
      }
      if (
        /*strength*/
        ctx2[6] && /*lib*/
        ctx2[12] && /*value*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block8(ctx2);
          if_block.c();
          if_block.m(div2, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (!current || dirty[0] & /*className*/
      8 && div2_class_value !== (div2_class_value = "input input-password " + /*className*/
      ctx2[3])) {
        (0, import_internal19.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty[0] & /*className, error*/
      264) {
        (0, import_internal19.toggle_class)(
          div2,
          "has-error",
          /*error*/
          ctx2[8]
        );
      }
      if (!current || dirty[0] & /*className, visible*/
      1032) {
        (0, import_internal19.toggle_class)(
          div2,
          "visible",
          /*visible*/
          ctx2[10]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal19.transition_in)(label_1.$$.fragment, local);
      (0, import_internal19.transition_in)(info_1.$$.fragment, local);
      (0, import_internal19.transition_in)(inputerror.$$.fragment, local);
      (0, import_internal19.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal19.transition_out)(label_1.$$.fragment, local);
      (0, import_internal19.transition_out)(info_1.$$.fragment, local);
      (0, import_internal19.transition_out)(inputerror.$$.fragment, local);
      (0, import_internal19.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal19.detach_dev)(div2);
      (0, import_internal19.destroy_component)(label_1);
      (0, import_internal19.destroy_component)(info_1);
      (0, import_internal19.destroy_component)(inputerror);
      ctx[27](null);
      (0, import_internal19.destroy_component)(button);
      if (if_block)
        if_block.d();
      ctx[28](null);
      mounted = false;
      (0, import_internal19.run_all)(dispose);
    }
  };
  (0, import_internal19.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment19.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance19($$self2, $$props2, $$invalidate2) {
  let props2;
  let type;
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal19.validate_slots)("InputPassword", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { disabled: disabled2 = void 0 } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { strength = false } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const qualities = ["Very Poor", "Poor", "Average", "Safe", "Excellent"];
  const colorClassNames = ["danger", "danger", "warning", "info", "success"];
  const dispatch2 = (0, import_svelte9.createEventDispatcher)();
  const errorMessageId2 = guid();
  let visible = false;
  let lib;
  let quality = "";
  let percent = 0;
  let strengthInfoText = "";
  let colorClass = "";
  (0, import_svelte9.onMount)(() => {
    requestAnimationFrame(checkLib);
  });
  function oninput(e) {
    $$invalidate2(0, value2 = e.target.value);
    dispatch2("input", { event, value: value2 });
  }
  function checkLib() {
    $$invalidate2(12, lib = window.zxcvbn);
    if (strength && !lib)
      console.error("zxcvbn library is missing.");
  }
  function measure(pass) {
    if (strength && !lib)
      $$invalidate2(12, lib = window.zxcvbn);
    if (!lib || !pass || !strength)
      return { score: 0, info: "" };
    const res = lib(pass);
    const warning = res.feedback.warning;
    const suggestion = res.feedback.suggestions;
    const text40 = [warning, ...suggestion].filter((i) => i.length).join(".<br>");
    return { score: res.score, text: text40 };
  }
  function toggle() {
    $$invalidate2(10, visible = !visible);
    requestAnimationFrame(() => element41.querySelector("input").focus());
  }
  function keydown_handler(event2) {
    import_internal19.bubble.call(this, $$self2, event2);
  }
  function change_handler(event2) {
    import_internal19.bubble.call(this, $$self2, event2);
  }
  function focus_handler2(event2) {
    import_internal19.bubble.call(this, $$self2, event2);
  }
  function blur_handler2(event2) {
    import_internal19.bubble.call(this, $$self2, event2);
  }
  function input_binding2($$value) {
    import_internal19.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
    });
  }
  function div2_binding2($$value) {
    import_internal19.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(34, $$props2 = (0, import_internal19.assign)((0, import_internal19.assign)({}, $$props2), (0, import_internal19.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate2(3, className2 = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate2(22, id2 = $$new_props.id);
    if ("required" in $$new_props)
      $$invalidate2(4, required2 = $$new_props.required);
    if ("disabled" in $$new_props)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("value" in $$new_props)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("strength" in $$new_props)
      $$invalidate2(6, strength = $$new_props.strength);
    if ("label" in $$new_props)
      $$invalidate2(7, label2 = $$new_props.label);
    if ("error" in $$new_props)
      $$invalidate2(8, error2 = $$new_props.error);
    if ("info" in $$new_props)
      $$invalidate2(9, info2 = $$new_props.info);
    if ("element" in $$new_props)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$new_props)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
  };
  $$self2.$capture_state = () => ({
    onMount: import_svelte9.onMount,
    createEventDispatcher: import_svelte9.createEventDispatcher,
    Button: Button_default,
    pluck,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    id: id2,
    required: required2,
    disabled: disabled2,
    value: value2,
    strength,
    label: label2,
    error: error2,
    info: info2,
    element: element41,
    inputElement: inputElement2,
    qualities,
    colorClassNames,
    dispatch: dispatch2,
    errorMessageId: errorMessageId2,
    visible,
    lib,
    quality,
    percent,
    strengthInfoText,
    colorClass,
    oninput,
    checkLib,
    measure,
    toggle,
    props: props2,
    _id: _id2,
    type
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(34, $$props2 = (0, import_internal19.assign)((0, import_internal19.assign)({}, $$props2), $$new_props));
    if ("className" in $$props2)
      $$invalidate2(3, className2 = $$new_props.className);
    if ("id" in $$props2)
      $$invalidate2(22, id2 = $$new_props.id);
    if ("required" in $$props2)
      $$invalidate2(4, required2 = $$new_props.required);
    if ("disabled" in $$props2)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("value" in $$props2)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("strength" in $$props2)
      $$invalidate2(6, strength = $$new_props.strength);
    if ("label" in $$props2)
      $$invalidate2(7, label2 = $$new_props.label);
    if ("error" in $$props2)
      $$invalidate2(8, error2 = $$new_props.error);
    if ("info" in $$props2)
      $$invalidate2(9, info2 = $$new_props.info);
    if ("element" in $$props2)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$props2)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
    if ("visible" in $$props2)
      $$invalidate2(10, visible = $$new_props.visible);
    if ("lib" in $$props2)
      $$invalidate2(12, lib = $$new_props.lib);
    if ("quality" in $$props2)
      $$invalidate2(13, quality = $$new_props.quality);
    if ("percent" in $$props2)
      $$invalidate2(14, percent = $$new_props.percent);
    if ("strengthInfoText" in $$props2)
      $$invalidate2(15, strengthInfoText = $$new_props.strengthInfoText);
    if ("colorClass" in $$props2)
      $$invalidate2(16, colorClass = $$new_props.colorClass);
    if ("props" in $$props2)
      $$invalidate2(11, props2 = $$new_props.props);
    if ("_id" in $$props2)
      $$invalidate2(17, _id2 = $$new_props._id);
    if ("type" in $$props2)
      $$invalidate2(18, type = $$new_props.type);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(11, props2 = pluck($$props2, ["title", "name", "placeholder"]));
    if ($$self2.$$.dirty[0] & /*visible*/
    1024) {
      $:
        $$invalidate2(18, type = visible ? "text" : "password");
    }
    if ($$self2.$$.dirty[0] & /*id, props*/
    4196352) {
      $:
        $$invalidate2(17, _id2 = id2 || props2.name || guid());
    }
    if ($$self2.$$.dirty[0] & /*value*/
    1) {
      $: {
        const { score, text: text40 } = measure(value2);
        $$invalidate2(13, quality = qualities[score]);
        $$invalidate2(14, percent = score ? score * 25 : 5);
        $$invalidate2(16, colorClass = colorClassNames[score]);
        $$invalidate2(15, strengthInfoText = text40);
      }
    }
  };
  $$props2 = (0, import_internal19.exclude_internal_props)($$props2);
  return [
    value2,
    element41,
    inputElement2,
    className2,
    required2,
    disabled2,
    strength,
    label2,
    error2,
    info2,
    visible,
    props2,
    lib,
    quality,
    percent,
    strengthInfoText,
    colorClass,
    _id2,
    type,
    errorMessageId2,
    oninput,
    toggle,
    id2,
    keydown_handler,
    change_handler,
    focus_handler2,
    blur_handler2,
    input_binding2,
    div2_binding2
  ];
}
var InputPassword = class extends import_internal19.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal19.init)(
      this,
      options,
      instance19,
      create_fragment19,
      import_internal19.safe_not_equal,
      {
        class: 3,
        id: 22,
        required: 4,
        disabled: 5,
        value: 0,
        strength: 6,
        label: 7,
        error: 8,
        info: 9,
        element: 1,
        inputElement: 2
      },
      null,
      [-1, -1]
    );
    (0, import_internal19.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputPassword",
      options,
      id: create_fragment19.name
    });
  }
  get class() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get strength() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set strength(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<InputPassword>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<InputPassword>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InputPassword_default = InputPassword;

// src/input/input-text/InputText.svelte
var import_internal20 = __toESM(require_internal());
var file15 = "src/input/input-text/InputText.svelte";
function create_fragment20(ctx) {
  let div1;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div0;
  let inputerror;
  let t2;
  let input;
  let input_aria_errormessage_value;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[6]
      ),
      disabled: (
        /*disabled*/
        ctx[5]
      ),
      for: (
        /*_id*/
        ctx[9]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[8]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[11]
      ),
      msg: (
        /*error*/
        ctx[7]
      )
    },
    $$inline: true
  });
  let input_levels = [
    { autocomplete: "off" },
    { type: "text" },
    /*props*/
    ctx[10],
    { disabled: (
      /*disabled*/
      ctx[5]
    ) },
    { id: (
      /*_id*/
      ctx[9]
    ) },
    { "aria-invalid": (
      /*error*/
      ctx[7]
    ) },
    {
      "aria-errormessage": input_aria_errormessage_value = /*error*/
      ctx[7] ? (
        /*errorMessageId*/
        ctx[11]
      ) : void 0
    },
    { "aria-required": (
      /*required*/
      ctx[4]
    ) }
  ];
  let input_data = {};
  for (let i = 0; i < input_levels.length; i += 1) {
    input_data = (0, import_internal20.assign)(input_data, input_levels[i]);
  }
  const block = {
    c: function create() {
      div1 = (0, import_internal20.element)("div");
      (0, import_internal20.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal20.space)();
      (0, import_internal20.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal20.space)();
      div0 = (0, import_internal20.element)("div");
      (0, import_internal20.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal20.space)();
      input = (0, import_internal20.element)("input");
      (0, import_internal20.set_attributes)(input, input_data);
      (0, import_internal20.add_location)(input, file15, 11, 2, 258);
      (0, import_internal20.attr_dev)(div0, "class", "input-inner");
      (0, import_internal20.toggle_class)(
        div0,
        "disabled",
        /*disabled*/
        ctx[5]
      );
      (0, import_internal20.add_location)(div0, file15, 8, 1, 161);
      (0, import_internal20.attr_dev)(div1, "class", div1_class_value = "input input-text " + /*className*/
      ctx[3]);
      (0, import_internal20.toggle_class)(
        div1,
        "has-error",
        /*error*/
        ctx[7]
      );
      (0, import_internal20.add_location)(div1, file15, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal20.insert_dev)(target, div1, anchor);
      (0, import_internal20.mount_component)(label_1, div1, null);
      (0, import_internal20.append_dev)(div1, t0);
      (0, import_internal20.mount_component)(info_1, div1, null);
      (0, import_internal20.append_dev)(div1, t1);
      (0, import_internal20.append_dev)(div1, div0);
      (0, import_internal20.mount_component)(inputerror, div0, null);
      (0, import_internal20.append_dev)(div0, t2);
      (0, import_internal20.append_dev)(div0, input);
      if (input.autofocus)
        input.focus();
      ctx[18](input);
      (0, import_internal20.set_input_value)(
        input,
        /*value*/
        ctx[0]
      );
      ctx[20](div1);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal20.listen_dev)(
            input,
            "input",
            /*input_input_handler*/
            ctx[19]
          ),
          (0, import_internal20.listen_dev)(
            input,
            "input",
            /*input_handler*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          (0, import_internal20.listen_dev)(
            input,
            "keydown",
            /*keydown_handler*/
            ctx[14],
            false,
            false,
            false,
            false
          ),
          (0, import_internal20.listen_dev)(
            input,
            "change",
            /*change_handler*/
            ctx[15],
            false,
            false,
            false,
            false
          ),
          (0, import_internal20.listen_dev)(
            input,
            "focus",
            /*focus_handler*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          (0, import_internal20.listen_dev)(
            input,
            "blur",
            /*blur_handler*/
            ctx[17],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      64)
        label_1_changes.label = /*label*/
        ctx2[6];
      if (dirty & /*disabled*/
      32)
        label_1_changes.disabled = /*disabled*/
        ctx2[5];
      if (dirty & /*_id*/
      512)
        label_1_changes.for = /*_id*/
        ctx2[9];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      256)
        info_1_changes.msg = /*info*/
        ctx2[8];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      128)
        inputerror_changes.msg = /*error*/
        ctx2[7];
      inputerror.$set(inputerror_changes);
      (0, import_internal20.set_attributes)(input, input_data = (0, import_internal20.get_spread_update)(input_levels, [
        { autocomplete: "off" },
        { type: "text" },
        dirty & /*props*/
        1024 && /*props*/
        ctx2[10],
        (!current || dirty & /*disabled*/
        32) && { disabled: (
          /*disabled*/
          ctx2[5]
        ) },
        (!current || dirty & /*_id*/
        512) && { id: (
          /*_id*/
          ctx2[9]
        ) },
        (!current || dirty & /*error*/
        128) && { "aria-invalid": (
          /*error*/
          ctx2[7]
        ) },
        (!current || dirty & /*error*/
        128 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
        ctx2[7] ? (
          /*errorMessageId*/
          ctx2[11]
        ) : void 0)) && {
          "aria-errormessage": input_aria_errormessage_value
        },
        (!current || dirty & /*required*/
        16) && { "aria-required": (
          /*required*/
          ctx2[4]
        ) }
      ]));
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        (0, import_internal20.set_input_value)(
          input,
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*disabled*/
      32) {
        (0, import_internal20.toggle_class)(
          div0,
          "disabled",
          /*disabled*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*className*/
      8 && div1_class_value !== (div1_class_value = "input input-text " + /*className*/
      ctx2[3])) {
        (0, import_internal20.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*className, error*/
      136) {
        (0, import_internal20.toggle_class)(
          div1,
          "has-error",
          /*error*/
          ctx2[7]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal20.transition_in)(label_1.$$.fragment, local);
      (0, import_internal20.transition_in)(info_1.$$.fragment, local);
      (0, import_internal20.transition_in)(inputerror.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal20.transition_out)(label_1.$$.fragment, local);
      (0, import_internal20.transition_out)(info_1.$$.fragment, local);
      (0, import_internal20.transition_out)(inputerror.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal20.detach_dev)(div1);
      (0, import_internal20.destroy_component)(label_1);
      (0, import_internal20.destroy_component)(info_1);
      (0, import_internal20.destroy_component)(inputerror);
      ctx[18](null);
      ctx[20](null);
      mounted = false;
      (0, import_internal20.run_all)(dispose);
    }
  };
  (0, import_internal20.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment20.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance20($$self2, $$props2, $$invalidate2) {
  let props2;
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal20.validate_slots)("InputText", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const errorMessageId2 = guid();
  function input_handler2(event2) {
    import_internal20.bubble.call(this, $$self2, event2);
  }
  function keydown_handler(event2) {
    import_internal20.bubble.call(this, $$self2, event2);
  }
  function change_handler(event2) {
    import_internal20.bubble.call(this, $$self2, event2);
  }
  function focus_handler2(event2) {
    import_internal20.bubble.call(this, $$self2, event2);
  }
  function blur_handler2(event2) {
    import_internal20.bubble.call(this, $$self2, event2);
  }
  function input_binding2($$value) {
    import_internal20.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
    });
  }
  function input_input_handler2() {
    value2 = this.value;
    $$invalidate2(0, value2);
  }
  function div1_binding($$value) {
    import_internal20.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(21, $$props2 = (0, import_internal20.assign)((0, import_internal20.assign)({}, $$props2), (0, import_internal20.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate2(3, className2 = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate2(12, id2 = $$new_props.id);
    if ("required" in $$new_props)
      $$invalidate2(4, required2 = $$new_props.required);
    if ("disabled" in $$new_props)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("value" in $$new_props)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("label" in $$new_props)
      $$invalidate2(6, label2 = $$new_props.label);
    if ("error" in $$new_props)
      $$invalidate2(7, error2 = $$new_props.error);
    if ("info" in $$new_props)
      $$invalidate2(8, info2 = $$new_props.info);
    if ("element" in $$new_props)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$new_props)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
  };
  $$self2.$capture_state = () => ({
    pluck,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    id: id2,
    required: required2,
    disabled: disabled2,
    value: value2,
    label: label2,
    error: error2,
    info: info2,
    element: element41,
    inputElement: inputElement2,
    errorMessageId: errorMessageId2,
    _id: _id2,
    props: props2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(21, $$props2 = (0, import_internal20.assign)((0, import_internal20.assign)({}, $$props2), $$new_props));
    if ("className" in $$props2)
      $$invalidate2(3, className2 = $$new_props.className);
    if ("id" in $$props2)
      $$invalidate2(12, id2 = $$new_props.id);
    if ("required" in $$props2)
      $$invalidate2(4, required2 = $$new_props.required);
    if ("disabled" in $$props2)
      $$invalidate2(5, disabled2 = $$new_props.disabled);
    if ("value" in $$props2)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("label" in $$props2)
      $$invalidate2(6, label2 = $$new_props.label);
    if ("error" in $$props2)
      $$invalidate2(7, error2 = $$new_props.error);
    if ("info" in $$props2)
      $$invalidate2(8, info2 = $$new_props.info);
    if ("element" in $$props2)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$props2)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
    if ("_id" in $$props2)
      $$invalidate2(9, _id2 = $$new_props._id);
    if ("props" in $$props2)
      $$invalidate2(10, props2 = $$new_props.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(10, props2 = pluck($$props2, ["title", "name", "placeholder"]));
    if ($$self2.$$.dirty & /*id*/
    4096) {
      $:
        $$invalidate2(9, _id2 = id2 || name || guid());
    }
  };
  $$props2 = (0, import_internal20.exclude_internal_props)($$props2);
  return [
    value2,
    element41,
    inputElement2,
    className2,
    required2,
    disabled2,
    label2,
    error2,
    info2,
    _id2,
    props2,
    errorMessageId2,
    id2,
    input_handler2,
    keydown_handler,
    change_handler,
    focus_handler2,
    blur_handler2,
    input_binding2,
    input_input_handler2,
    div1_binding
  ];
}
var InputText = class extends import_internal20.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal20.init)(this, options, instance20, create_fragment20, import_internal20.safe_not_equal, {
      class: 3,
      id: 12,
      required: 4,
      disabled: 5,
      value: 0,
      label: 6,
      error: 7,
      info: 8,
      element: 1,
      inputElement: 2
    });
    (0, import_internal20.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputText",
      options,
      id: create_fragment20.name
    });
  }
  get class() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<InputText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<InputText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var InputText_default = InputText;

// src/input/radio/Radio.svelte
var import_internal21 = __toESM(require_internal());
var import_svelte10 = __toESM(require_svelte());
var file16 = "src/input/radio/Radio.svelte";
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i];
  return child_ctx;
}
function create_each_block3(key_1, ctx) {
  let div;
  let input;
  let input_id_value;
  let input_value_value;
  let input_checked_value;
  let input_disabled_value;
  let t0;
  let label_1;
  let t1;
  let current;
  let mounted;
  let dispose;
  function change_handler(...args) {
    return (
      /*change_handler*/
      ctx[15](
        /*item*/
        ctx[18],
        ...args
      )
    );
  }
  label_1 = new Label_default({
    props: {
      disabled: (
        /*disabled*/
        ctx[7] || /*item*/
        ctx[18].disabled
      ),
      for: (
        /*item*/
        ctx[18].id
      ),
      label: (
        /*item*/
        ctx[18].name
      )
    },
    $$inline: true
  });
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      div = (0, import_internal21.element)("div");
      input = (0, import_internal21.element)("input");
      t0 = (0, import_internal21.space)();
      (0, import_internal21.create_component)(label_1.$$.fragment);
      t1 = (0, import_internal21.space)();
      (0, import_internal21.attr_dev)(input, "type", "radio");
      (0, import_internal21.attr_dev)(input, "id", input_id_value = /*item*/
      ctx[18].id);
      (0, import_internal21.attr_dev)(
        input,
        "name",
        /*name*/
        ctx[4]
      );
      input.value = input_value_value = /*item*/
      ctx[18].value;
      input.checked = input_checked_value = /*item*/
      ctx[18].value === /*value*/
      ctx[0];
      input.disabled = input_disabled_value = /*disabled*/
      ctx[7] || /*item*/
      ctx[18].disabled;
      (0, import_internal21.add_location)(input, file16, 21, 5, 523);
      (0, import_internal21.attr_dev)(div, "class", "input-radio-item");
      (0, import_internal21.toggle_class)(
        div,
        "disabled",
        /*disabled*/
        ctx[7] || /*item*/
        ctx[18].disabled
      );
      (0, import_internal21.add_location)(div, file16, 16, 4, 347);
      this.first = div;
    },
    m: function mount(target, anchor) {
      (0, import_internal21.insert_dev)(target, div, anchor);
      (0, import_internal21.append_dev)(div, input);
      (0, import_internal21.append_dev)(div, t0);
      (0, import_internal21.mount_component)(label_1, div, null);
      (0, import_internal21.append_dev)(div, t1);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal21.listen_dev)(input, "change", change_handler, false, false, false, false),
          (0, import_internal21.listen_dev)(div, "touchstart", onmousedown2, true, false, false, false),
          (0, import_internal21.listen_dev)(div, "mousedown", onmousedown2, true, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & /*_items*/
      1024 && input_id_value !== (input_id_value = /*item*/
      ctx[18].id)) {
        (0, import_internal21.attr_dev)(input, "id", input_id_value);
      }
      if (!current || dirty & /*name*/
      16) {
        (0, import_internal21.attr_dev)(
          input,
          "name",
          /*name*/
          ctx[4]
        );
      }
      if (!current || dirty & /*_items*/
      1024 && input_value_value !== (input_value_value = /*item*/
      ctx[18].value)) {
        (0, import_internal21.prop_dev)(input, "value", input_value_value);
      }
      if (!current || dirty & /*_items, value*/
      1025 && input_checked_value !== (input_checked_value = /*item*/
      ctx[18].value === /*value*/
      ctx[0])) {
        (0, import_internal21.prop_dev)(input, "checked", input_checked_value);
      }
      if (!current || dirty & /*disabled, _items*/
      1152 && input_disabled_value !== (input_disabled_value = /*disabled*/
      ctx[7] || /*item*/
      ctx[18].disabled)) {
        (0, import_internal21.prop_dev)(input, "disabled", input_disabled_value);
      }
      const label_1_changes = {};
      if (dirty & /*disabled, _items*/
      1152)
        label_1_changes.disabled = /*disabled*/
        ctx[7] || /*item*/
        ctx[18].disabled;
      if (dirty & /*_items*/
      1024)
        label_1_changes.for = /*item*/
        ctx[18].id;
      if (dirty & /*_items*/
      1024)
        label_1_changes.label = /*item*/
        ctx[18].name;
      label_1.$set(label_1_changes);
      if (!current || dirty & /*disabled, _items*/
      1152) {
        (0, import_internal21.toggle_class)(
          div,
          "disabled",
          /*disabled*/
          ctx[7] || /*item*/
          ctx[18].disabled
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal21.transition_in)(label_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal21.transition_out)(label_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal21.detach_dev)(div);
      (0, import_internal21.destroy_component)(label_1);
      mounted = false;
      (0, import_internal21.run_all)(dispose);
    }
  };
  (0, import_internal21.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block3.name,
    type: "each",
    source: "(16:3) {#each _items as item (item.id)}",
    ctx
  });
  return block;
}
function create_fragment21(ctx) {
  let div2;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div1;
  let inputerror;
  let t2;
  let div0;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let div2_class_value;
  let current;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[6]
      ),
      disabled: (
        /*disabled*/
        ctx[7]
      ),
      for: (
        /*_id*/
        ctx[11]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[9]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[12]
      ),
      msg: (
        /*error*/
        ctx[8]
      )
    },
    $$inline: true
  });
  let each_value = (
    /*_items*/
    ctx[10]
  );
  (0, import_internal21.validate_each_argument)(each_value);
  const get_key = (ctx2) => (
    /*item*/
    ctx2[18].id
  );
  (0, import_internal21.validate_each_keys)(ctx, each_value, get_each_context3, get_key);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context3(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block3(key, child_ctx));
  }
  const block = {
    c: function create() {
      div2 = (0, import_internal21.element)("div");
      (0, import_internal21.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal21.space)();
      (0, import_internal21.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal21.space)();
      div1 = (0, import_internal21.element)("div");
      (0, import_internal21.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal21.space)();
      div0 = (0, import_internal21.element)("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal21.attr_dev)(div0, "class", "input-radio-items");
      (0, import_internal21.add_location)(div0, file16, 14, 2, 275);
      (0, import_internal21.attr_dev)(div1, "class", "input-radio-inner");
      (0, import_internal21.toggle_class)(
        div1,
        "disabled",
        /*disabled*/
        ctx[7]
      );
      (0, import_internal21.add_location)(div1, file16, 11, 1, 172);
      (0, import_internal21.attr_dev)(
        div2,
        "id",
        /*id*/
        ctx[3]
      );
      (0, import_internal21.attr_dev)(
        div2,
        "title",
        /*title*/
        ctx[5]
      );
      (0, import_internal21.attr_dev)(div2, "class", div2_class_value = "input-radio " + /*className*/
      ctx[2]);
      (0, import_internal21.toggle_class)(
        div2,
        "has-error",
        /*error*/
        ctx[8]
      );
      (0, import_internal21.add_location)(div2, file16, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal21.insert_dev)(target, div2, anchor);
      (0, import_internal21.mount_component)(label_1, div2, null);
      (0, import_internal21.append_dev)(div2, t0);
      (0, import_internal21.mount_component)(info_1, div2, null);
      (0, import_internal21.append_dev)(div2, t1);
      (0, import_internal21.append_dev)(div2, div1);
      (0, import_internal21.mount_component)(inputerror, div1, null);
      (0, import_internal21.append_dev)(div1, t2);
      (0, import_internal21.append_dev)(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      ctx[16](div2);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      64)
        label_1_changes.label = /*label*/
        ctx2[6];
      if (dirty & /*disabled*/
      128)
        label_1_changes.disabled = /*disabled*/
        ctx2[7];
      if (dirty & /*_id*/
      2048)
        label_1_changes.for = /*_id*/
        ctx2[11];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      512)
        info_1_changes.msg = /*info*/
        ctx2[9];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      256)
        inputerror_changes.msg = /*error*/
        ctx2[8];
      inputerror.$set(inputerror_changes);
      if (dirty & /*disabled, _items, onmousedown, name, value, onchange*/
      9361) {
        each_value = /*_items*/
        ctx2[10];
        (0, import_internal21.validate_each_argument)(each_value);
        (0, import_internal21.group_outros)();
        (0, import_internal21.validate_each_keys)(ctx2, each_value, get_each_context3, get_key);
        each_blocks = (0, import_internal21.update_keyed_each)(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div0, import_internal21.outro_and_destroy_block, create_each_block3, null, get_each_context3);
        (0, import_internal21.check_outros)();
      }
      if (!current || dirty & /*disabled*/
      128) {
        (0, import_internal21.toggle_class)(
          div1,
          "disabled",
          /*disabled*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*id*/
      8) {
        (0, import_internal21.attr_dev)(
          div2,
          "id",
          /*id*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*title*/
      32) {
        (0, import_internal21.attr_dev)(
          div2,
          "title",
          /*title*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*className*/
      4 && div2_class_value !== (div2_class_value = "input-radio " + /*className*/
      ctx2[2])) {
        (0, import_internal21.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*className, error*/
      260) {
        (0, import_internal21.toggle_class)(
          div2,
          "has-error",
          /*error*/
          ctx2[8]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal21.transition_in)(label_1.$$.fragment, local);
      (0, import_internal21.transition_in)(info_1.$$.fragment, local);
      (0, import_internal21.transition_in)(inputerror.$$.fragment, local);
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal21.transition_in)(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      (0, import_internal21.transition_out)(label_1.$$.fragment, local);
      (0, import_internal21.transition_out)(info_1.$$.fragment, local);
      (0, import_internal21.transition_out)(inputerror.$$.fragment, local);
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal21.transition_out)(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal21.detach_dev)(div2);
      (0, import_internal21.destroy_component)(label_1);
      (0, import_internal21.destroy_component)(info_1);
      (0, import_internal21.destroy_component)(inputerror);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      ctx[16](null);
    }
  };
  (0, import_internal21.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment21.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onmousedown2(e) {
  const inp = e.target.closest(".input-radio-item").querySelector("input");
  if (inp && !inp.disabled) {
    e.preventDefault();
    inp.click();
    inp.focus();
  }
}
function instance21($$self2, $$props2, $$invalidate2) {
  let _id2;
  let _items;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal21.validate_slots)("Radio", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { name: name2 = guid() } = $$props2;
  let { title = void 0 } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { items = [] } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { error: error2 = "" } = $$props2;
  let { info: info2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte10.createEventDispatcher)();
  const errorMessageId2 = guid();
  function onchange4(event2, item) {
    $$invalidate2(0, value2 = item.value);
    dispatch2("change", { event: event2, value: value2, item });
  }
  const writable_props = [
    "class",
    "id",
    "name",
    "title",
    "label",
    "disabled",
    "items",
    "value",
    "error",
    "info",
    "element"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Radio> was created with unknown prop '${key}'`);
  });
  const change_handler = (item, e) => onchange4(e, item);
  function div2_binding2($$value) {
    import_internal21.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(2, className2 = $$props3.class);
    if ("id" in $$props3)
      $$invalidate2(3, id2 = $$props3.id);
    if ("name" in $$props3)
      $$invalidate2(4, name2 = $$props3.name);
    if ("title" in $$props3)
      $$invalidate2(5, title = $$props3.title);
    if ("label" in $$props3)
      $$invalidate2(6, label2 = $$props3.label);
    if ("disabled" in $$props3)
      $$invalidate2(7, disabled2 = $$props3.disabled);
    if ("items" in $$props3)
      $$invalidate2(14, items = $$props3.items);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("error" in $$props3)
      $$invalidate2(8, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(9, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte10.createEventDispatcher,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    id: id2,
    name: name2,
    title,
    label: label2,
    disabled: disabled2,
    items,
    value: value2,
    error: error2,
    info: info2,
    element: element41,
    dispatch: dispatch2,
    errorMessageId: errorMessageId2,
    onmousedown: onmousedown2,
    onchange: onchange4,
    _items,
    _id: _id2
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(2, className2 = $$props3.className);
    if ("id" in $$props3)
      $$invalidate2(3, id2 = $$props3.id);
    if ("name" in $$props3)
      $$invalidate2(4, name2 = $$props3.name);
    if ("title" in $$props3)
      $$invalidate2(5, title = $$props3.title);
    if ("label" in $$props3)
      $$invalidate2(6, label2 = $$props3.label);
    if ("disabled" in $$props3)
      $$invalidate2(7, disabled2 = $$props3.disabled);
    if ("items" in $$props3)
      $$invalidate2(14, items = $$props3.items);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("error" in $$props3)
      $$invalidate2(8, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(9, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("_items" in $$props3)
      $$invalidate2(10, _items = $$props3._items);
    if ("_id" in $$props3)
      $$invalidate2(11, _id2 = $$props3._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*id, name*/
    24) {
      $:
        $$invalidate2(11, _id2 = id2 || name2 || guid());
    }
    if ($$self2.$$.dirty & /*items*/
    16384) {
      $:
        $$invalidate2(10, _items = items.map((item) => {
          if (typeof item === "string")
            item = { name: item, value: item };
          item.id = item.id || guid();
          return item;
        }));
    }
  };
  return [
    value2,
    element41,
    className2,
    id2,
    name2,
    title,
    label2,
    disabled2,
    error2,
    info2,
    _items,
    _id2,
    errorMessageId2,
    onchange4,
    items,
    change_handler,
    div2_binding2
  ];
}
var Radio = class extends import_internal21.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal21.init)(this, options, instance21, create_fragment21, import_internal21.safe_not_equal, {
      class: 2,
      id: 3,
      name: 4,
      title: 5,
      label: 6,
      disabled: 7,
      items: 14,
      value: 0,
      error: 8,
      info: 9,
      element: 1
    });
    (0, import_internal21.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Radio",
      options,
      id: create_fragment21.name
    });
  }
  get class() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get items() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set items(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Radio>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Radio>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Radio_default = Radio;

// src/input/select/Select.svelte
var import_internal22 = __toESM(require_internal());
var { Object: Object_1 } = import_internal22.globals;
var file17 = "src/input/select/Select.svelte";
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i];
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i];
  return child_ctx;
}
function create_if_block_12(ctx) {
  let option;
  let t;
  const block = {
    c: function create() {
      option = (0, import_internal22.element)("option");
      t = (0, import_internal22.text)(
        /*placeholder*/
        ctx[6]
      );
      option.__value = "";
      option.value = option.__value;
      (0, import_internal22.add_location)(option, file17, 27, 5, 562);
    },
    m: function mount(target, anchor) {
      (0, import_internal22.insert_dev)(target, option, anchor);
      (0, import_internal22.append_dev)(option, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*placeholder*/
      64)
        (0, import_internal22.set_data_dev)(
          t,
          /*placeholder*/
          ctx2[6]
        );
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal22.detach_dev)(option);
    }
  };
  (0, import_internal22.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_12.name,
    type: "if",
    source: "(27:4) {#if placeholder}",
    ctx
  });
  return block;
}
function create_else_block(ctx) {
  let option;
  let t_value = (
    /*group*/
    ctx[21].name + ""
  );
  let t;
  let option_value_value;
  const block = {
    c: function create() {
      option = (0, import_internal22.element)("option");
      t = (0, import_internal22.text)(t_value);
      option.__value = option_value_value = /*group*/
      ctx[21].id;
      option.value = option.__value;
      (0, import_internal22.add_location)(option, file17, 37, 6, 843);
    },
    m: function mount(target, anchor) {
      (0, import_internal22.insert_dev)(target, option, anchor);
      (0, import_internal22.append_dev)(option, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*groups*/
      4096 && t_value !== (t_value = /*group*/
      ctx2[21].name + ""))
        (0, import_internal22.set_data_dev)(t, t_value);
      if (dirty & /*groups*/
      4096 && option_value_value !== (option_value_value = /*group*/
      ctx2[21].id)) {
        (0, import_internal22.prop_dev)(option, "__value", option_value_value);
        option.value = option.__value;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal22.detach_dev)(option);
    }
  };
  (0, import_internal22.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(37:5) {:else}",
    ctx
  });
  return block;
}
function create_if_block9(ctx) {
  let optgroup;
  let optgroup_label_value;
  let each_value_1 = (
    /*group*/
    ctx[21].items
  );
  (0, import_internal22.validate_each_argument)(each_value_1);
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  const block = {
    c: function create() {
      optgroup = (0, import_internal22.element)("optgroup");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal22.attr_dev)(optgroup, "label", optgroup_label_value = /*group*/
      ctx[21].name);
      (0, import_internal22.add_location)(optgroup, file17, 31, 6, 669);
    },
    m: function mount(target, anchor) {
      (0, import_internal22.insert_dev)(target, optgroup, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(optgroup, null);
        }
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*groups*/
      4096) {
        each_value_1 = /*group*/
        ctx2[21].items;
        (0, import_internal22.validate_each_argument)(each_value_1);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_12(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(optgroup, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
      if (dirty & /*groups*/
      4096 && optgroup_label_value !== (optgroup_label_value = /*group*/
      ctx2[21].name)) {
        (0, import_internal22.attr_dev)(optgroup, "label", optgroup_label_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal22.detach_dev)(optgroup);
      (0, import_internal22.destroy_each)(each_blocks, detaching);
    }
  };
  (0, import_internal22.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block9.name,
    type: "if",
    source: "(31:5) {#if group.items}",
    ctx
  });
  return block;
}
function create_each_block_12(ctx) {
  let option;
  let t_value = (
    /*item*/
    ctx[24].name + ""
  );
  let t;
  let option_value_value;
  const block = {
    c: function create() {
      option = (0, import_internal22.element)("option");
      t = (0, import_internal22.text)(t_value);
      option.__value = option_value_value = /*item*/
      ctx[24].id;
      option.value = option.__value;
      (0, import_internal22.add_location)(option, file17, 33, 8, 744);
    },
    m: function mount(target, anchor) {
      (0, import_internal22.insert_dev)(target, option, anchor);
      (0, import_internal22.append_dev)(option, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*groups*/
      4096 && t_value !== (t_value = /*item*/
      ctx2[24].name + ""))
        (0, import_internal22.set_data_dev)(t, t_value);
      if (dirty & /*groups*/
      4096 && option_value_value !== (option_value_value = /*item*/
      ctx2[24].id)) {
        (0, import_internal22.prop_dev)(option, "__value", option_value_value);
        option.value = option.__value;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal22.detach_dev)(option);
    }
  };
  (0, import_internal22.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block_12.name,
    type: "each",
    source: "(33:7) {#each group.items as item}",
    ctx
  });
  return block;
}
function create_each_block4(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (
      /*group*/
      ctx2[21].items
    )
      return create_if_block9;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = (0, import_internal22.empty)();
    },
    m: function mount(target, anchor) {
      if_block.m(target, anchor);
      (0, import_internal22.insert_dev)(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d: function destroy(detaching) {
      if_block.d(detaching);
      if (detaching)
        (0, import_internal22.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal22.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block4.name,
    type: "each",
    source: "(30:4) {#each groups as group}",
    ctx
  });
  return block;
}
function create_fragment22(ctx) {
  let div2;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div1;
  let inputerror;
  let t2;
  let div0;
  let select;
  let if_block_anchor;
  let select_aria_errormessage_value;
  let div2_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[9]
      ),
      disabled: (
        /*disabled*/
        ctx[4]
      ),
      for: (
        /*_id*/
        ctx[13]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[11]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[14]
      ),
      msg: (
        /*error*/
        ctx[10]
      )
    },
    $$inline: true
  });
  let if_block = (
    /*placeholder*/
    ctx[6] && create_if_block_12(ctx)
  );
  let each_value = (
    /*groups*/
    ctx[12]
  );
  (0, import_internal22.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      div2 = (0, import_internal22.element)("div");
      (0, import_internal22.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal22.space)();
      (0, import_internal22.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal22.space)();
      div1 = (0, import_internal22.element)("div");
      (0, import_internal22.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal22.space)();
      div0 = (0, import_internal22.element)("div");
      select = (0, import_internal22.element)("select");
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal22.empty)();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal22.attr_dev)(
        select,
        "aria-invalid",
        /*error*/
        ctx[10]
      );
      (0, import_internal22.attr_dev)(select, "aria-errormessage", select_aria_errormessage_value = /*error*/
      ctx[10] ? (
        /*errorMessageId*/
        ctx[14]
      ) : void 0);
      (0, import_internal22.attr_dev)(
        select,
        "aria-required",
        /*required*/
        ctx[5]
      );
      (0, import_internal22.attr_dev)(
        select,
        "title",
        /*title*/
        ctx[7]
      );
      (0, import_internal22.attr_dev)(
        select,
        "name",
        /*name*/
        ctx[8]
      );
      select.disabled = /*disabled*/
      ctx[4];
      (0, import_internal22.attr_dev)(
        select,
        "id",
        /*_id*/
        ctx[13]
      );
      if (
        /*value*/
        ctx[0] === void 0
      )
        (0, import_internal22.add_render_callback)(() => (
          /*select_change_handler*/
          ctx[18].call(select)
        ));
      (0, import_internal22.add_location)(select, file17, 12, 3, 281);
      (0, import_internal22.attr_dev)(div0, "class", "input-row");
      (0, import_internal22.add_location)(div0, file17, 11, 2, 254);
      (0, import_internal22.attr_dev)(div1, "class", "input-inner");
      (0, import_internal22.toggle_class)(
        div1,
        "disabled",
        /*disabled*/
        ctx[4]
      );
      (0, import_internal22.add_location)(div1, file17, 8, 1, 157);
      (0, import_internal22.attr_dev)(div2, "class", div2_class_value = "input select " + /*className*/
      ctx[3]);
      (0, import_internal22.toggle_class)(
        div2,
        "has-error",
        /*error*/
        ctx[10]
      );
      (0, import_internal22.add_location)(div2, file17, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal22.insert_dev)(target, div2, anchor);
      (0, import_internal22.mount_component)(label_1, div2, null);
      (0, import_internal22.append_dev)(div2, t0);
      (0, import_internal22.mount_component)(info_1, div2, null);
      (0, import_internal22.append_dev)(div2, t1);
      (0, import_internal22.append_dev)(div2, div1);
      (0, import_internal22.mount_component)(inputerror, div1, null);
      (0, import_internal22.append_dev)(div1, t2);
      (0, import_internal22.append_dev)(div1, div0);
      (0, import_internal22.append_dev)(div0, select);
      if (if_block)
        if_block.m(select, null);
      (0, import_internal22.append_dev)(select, if_block_anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      (0, import_internal22.select_option)(
        select,
        /*value*/
        ctx[0],
        true
      );
      ctx[19](select);
      ctx[20](div2);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal22.listen_dev)(
            select,
            "change",
            /*select_change_handler*/
            ctx[18]
          ),
          (0, import_internal22.listen_dev)(
            select,
            "change",
            /*change_handler*/
            ctx[17],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      512)
        label_1_changes.label = /*label*/
        ctx2[9];
      if (dirty & /*disabled*/
      16)
        label_1_changes.disabled = /*disabled*/
        ctx2[4];
      if (dirty & /*_id*/
      8192)
        label_1_changes.for = /*_id*/
        ctx2[13];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      2048)
        info_1_changes.msg = /*info*/
        ctx2[11];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      1024)
        inputerror_changes.msg = /*error*/
        ctx2[10];
      inputerror.$set(inputerror_changes);
      if (
        /*placeholder*/
        ctx2[6]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_12(ctx2);
          if_block.c();
          if_block.m(select, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*groups*/
      4096) {
        each_value = /*groups*/
        ctx2[12];
        (0, import_internal22.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty & /*error*/
      1024) {
        (0, import_internal22.attr_dev)(
          select,
          "aria-invalid",
          /*error*/
          ctx2[10]
        );
      }
      if (!current || dirty & /*error*/
      1024 && select_aria_errormessage_value !== (select_aria_errormessage_value = /*error*/
      ctx2[10] ? (
        /*errorMessageId*/
        ctx2[14]
      ) : void 0)) {
        (0, import_internal22.attr_dev)(select, "aria-errormessage", select_aria_errormessage_value);
      }
      if (!current || dirty & /*required*/
      32) {
        (0, import_internal22.attr_dev)(
          select,
          "aria-required",
          /*required*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*title*/
      128) {
        (0, import_internal22.attr_dev)(
          select,
          "title",
          /*title*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*name*/
      256) {
        (0, import_internal22.attr_dev)(
          select,
          "name",
          /*name*/
          ctx2[8]
        );
      }
      if (!current || dirty & /*disabled*/
      16) {
        (0, import_internal22.prop_dev)(
          select,
          "disabled",
          /*disabled*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*_id*/
      8192) {
        (0, import_internal22.attr_dev)(
          select,
          "id",
          /*_id*/
          ctx2[13]
        );
      }
      if (dirty & /*value*/
      1) {
        (0, import_internal22.select_option)(
          select,
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*disabled*/
      16) {
        (0, import_internal22.toggle_class)(
          div1,
          "disabled",
          /*disabled*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*className*/
      8 && div2_class_value !== (div2_class_value = "input select " + /*className*/
      ctx2[3])) {
        (0, import_internal22.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*className, error*/
      1032) {
        (0, import_internal22.toggle_class)(
          div2,
          "has-error",
          /*error*/
          ctx2[10]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal22.transition_in)(label_1.$$.fragment, local);
      (0, import_internal22.transition_in)(info_1.$$.fragment, local);
      (0, import_internal22.transition_in)(inputerror.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal22.transition_out)(label_1.$$.fragment, local);
      (0, import_internal22.transition_out)(info_1.$$.fragment, local);
      (0, import_internal22.transition_out)(inputerror.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal22.detach_dev)(div2);
      (0, import_internal22.destroy_component)(label_1);
      (0, import_internal22.destroy_component)(info_1);
      (0, import_internal22.destroy_component)(inputerror);
      if (if_block)
        if_block.d();
      (0, import_internal22.destroy_each)(each_blocks, detaching);
      ctx[19](null);
      ctx[20](null);
      mounted = false;
      (0, import_internal22.run_all)(dispose);
    }
  };
  (0, import_internal22.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment22.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance22($$self2, $$props2, $$invalidate2) {
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal22.validate_slots)("Select", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { value: value2 = void 0 } = $$props2;
  let { placeholder = void 0 } = $$props2;
  let { items = [] } = $$props2;
  let { title = void 0 } = $$props2;
  let { name: name2 = void 0 } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  let groups = [];
  const errorMessageId2 = guid();
  const writable_props = [
    "class",
    "id",
    "disabled",
    "required",
    "value",
    "placeholder",
    "items",
    "title",
    "name",
    "label",
    "error",
    "info",
    "element",
    "inputElement"
  ];
  Object_1.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Select> was created with unknown prop '${key}'`);
  });
  function change_handler(event2) {
    import_internal22.bubble.call(this, $$self2, event2);
  }
  function select_change_handler() {
    value2 = (0, import_internal22.select_value)(this);
    $$invalidate2(0, value2);
  }
  function select_binding($$value) {
    import_internal22.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
      $$invalidate2(12, groups), $$invalidate2(16, items);
    });
  }
  function div2_binding2($$value) {
    import_internal22.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(3, className2 = $$props3.class);
    if ("id" in $$props3)
      $$invalidate2(15, id2 = $$props3.id);
    if ("disabled" in $$props3)
      $$invalidate2(4, disabled2 = $$props3.disabled);
    if ("required" in $$props3)
      $$invalidate2(5, required2 = $$props3.required);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("placeholder" in $$props3)
      $$invalidate2(6, placeholder = $$props3.placeholder);
    if ("items" in $$props3)
      $$invalidate2(16, items = $$props3.items);
    if ("title" in $$props3)
      $$invalidate2(7, title = $$props3.title);
    if ("name" in $$props3)
      $$invalidate2(8, name2 = $$props3.name);
    if ("label" in $$props3)
      $$invalidate2(9, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(10, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(11, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(2, inputElement2 = $$props3.inputElement);
  };
  $$self2.$capture_state = () => ({
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    id: id2,
    disabled: disabled2,
    required: required2,
    value: value2,
    placeholder,
    items,
    title,
    name: name2,
    label: label2,
    error: error2,
    info: info2,
    element: element41,
    inputElement: inputElement2,
    groups,
    errorMessageId: errorMessageId2,
    _id: _id2
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(3, className2 = $$props3.className);
    if ("id" in $$props3)
      $$invalidate2(15, id2 = $$props3.id);
    if ("disabled" in $$props3)
      $$invalidate2(4, disabled2 = $$props3.disabled);
    if ("required" in $$props3)
      $$invalidate2(5, required2 = $$props3.required);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("placeholder" in $$props3)
      $$invalidate2(6, placeholder = $$props3.placeholder);
    if ("items" in $$props3)
      $$invalidate2(16, items = $$props3.items);
    if ("title" in $$props3)
      $$invalidate2(7, title = $$props3.title);
    if ("name" in $$props3)
      $$invalidate2(8, name2 = $$props3.name);
    if ("label" in $$props3)
      $$invalidate2(9, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(10, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(11, info2 = $$props3.info);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(2, inputElement2 = $$props3.inputElement);
    if ("groups" in $$props3)
      $$invalidate2(12, groups = $$props3.groups);
    if ("_id" in $$props3)
      $$invalidate2(13, _id2 = $$props3._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*id, name*/
    33024) {
      $:
        $$invalidate2(13, _id2 = id2 || name2 || guid());
    }
    if ($$self2.$$.dirty & /*items*/
    65536) {
      $: {
        const nogroup = [];
        const _groups = {};
        items.forEach((item) => {
          if (!item.group)
            return nogroup.push(item);
          _groups[item.group] = _groups[item.group] || { name: item.group, items: [] };
          _groups[item.group].items.push(item);
        });
        let all = [...nogroup, ...Object.values(_groups)];
        if (typeof all[0] === "string") {
          all = all.map((item) => ({ id: item, name: item }));
        }
        $$invalidate2(12, groups = all);
      }
    }
  };
  return [
    value2,
    element41,
    inputElement2,
    className2,
    disabled2,
    required2,
    placeholder,
    title,
    name2,
    label2,
    error2,
    info2,
    groups,
    _id2,
    errorMessageId2,
    id2,
    items,
    change_handler,
    select_change_handler,
    select_binding,
    div2_binding2
  ];
}
var Select = class extends import_internal22.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal22.init)(this, options, instance22, create_fragment22, import_internal22.safe_not_equal, {
      class: 3,
      id: 15,
      disabled: 4,
      required: 5,
      value: 0,
      placeholder: 6,
      items: 16,
      title: 7,
      name: 8,
      label: 9,
      error: 10,
      info: 11,
      element: 1,
      inputElement: 2
    });
    (0, import_internal22.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Select",
      options,
      id: create_fragment22.name
    });
  }
  get class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get placeholder() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set placeholder(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get items() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set items(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Select_default = Select;

// src/input/textarea/Textarea.svelte
var import_internal23 = __toESM(require_internal());
var file18 = "src/input/textarea/Textarea.svelte";
function create_fragment23(ctx) {
  let div1;
  let label_1;
  let t0;
  let info_1;
  let t1;
  let div0;
  let inputerror;
  let t2;
  let textarea;
  let textarea_aria_errormessage_value;
  let div0_data_value_value;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  label_1 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[7]
      ),
      disabled: (
        /*disabled*/
        ctx[6]
      ),
      for: (
        /*_id*/
        ctx[10]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[9]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[12]
      ),
      msg: (
        /*error*/
        ctx[8]
      )
    },
    $$inline: true
  });
  let textarea_levels = [
    /*props*/
    ctx[11],
    { disabled: (
      /*disabled*/
      ctx[6]
    ) },
    { "aria-invalid": (
      /*error*/
      ctx[8]
    ) },
    {
      "aria-errormessage": textarea_aria_errormessage_value = /*error*/
      ctx[8] ? (
        /*errorMessageId*/
        ctx[12]
      ) : void 0
    },
    { "aria-required": (
      /*required*/
      ctx[5]
    ) },
    { id: (
      /*_id*/
      ctx[10]
    ) }
  ];
  let textarea_data = {};
  for (let i = 0; i < textarea_levels.length; i += 1) {
    textarea_data = (0, import_internal23.assign)(textarea_data, textarea_levels[i]);
  }
  const block = {
    c: function create() {
      div1 = (0, import_internal23.element)("div");
      (0, import_internal23.create_component)(label_1.$$.fragment);
      t0 = (0, import_internal23.space)();
      (0, import_internal23.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal23.space)();
      div0 = (0, import_internal23.element)("div");
      (0, import_internal23.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal23.space)();
      textarea = (0, import_internal23.element)("textarea");
      (0, import_internal23.set_attributes)(textarea, textarea_data);
      (0, import_internal23.add_location)(textarea, file18, 12, 2, 313);
      (0, import_internal23.attr_dev)(div0, "class", "textarea-inner");
      (0, import_internal23.attr_dev)(div0, "data-value", div0_data_value_value = /*autogrow*/
      ctx[4] ? (
        /*value*/
        ctx[0]
      ) : void 0);
      (0, import_internal23.toggle_class)(
        div0,
        "disabled",
        /*disabled*/
        ctx[6]
      );
      (0, import_internal23.add_location)(div0, file18, 9, 1, 169);
      (0, import_internal23.attr_dev)(div1, "class", div1_class_value = "textarea " + /*className*/
      ctx[3]);
      (0, import_internal23.toggle_class)(
        div1,
        "autogrow",
        /*autogrow*/
        ctx[4]
      );
      (0, import_internal23.toggle_class)(
        div1,
        "has-error",
        /*error*/
        ctx[8]
      );
      (0, import_internal23.add_location)(div1, file18, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal23.insert_dev)(target, div1, anchor);
      (0, import_internal23.mount_component)(label_1, div1, null);
      (0, import_internal23.append_dev)(div1, t0);
      (0, import_internal23.mount_component)(info_1, div1, null);
      (0, import_internal23.append_dev)(div1, t1);
      (0, import_internal23.append_dev)(div1, div0);
      (0, import_internal23.mount_component)(inputerror, div0, null);
      (0, import_internal23.append_dev)(div0, t2);
      (0, import_internal23.append_dev)(div0, textarea);
      if (textarea.autofocus)
        textarea.focus();
      ctx[16](textarea);
      (0, import_internal23.set_input_value)(
        textarea,
        /*value*/
        ctx[0]
      );
      ctx[18](div1);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal23.listen_dev)(
            textarea,
            "input",
            /*textarea_input_handler*/
            ctx[17]
          ),
          (0, import_internal23.listen_dev)(
            textarea,
            "change",
            /*change_handler*/
            ctx[14],
            false,
            false,
            false,
            false
          ),
          (0, import_internal23.listen_dev)(
            textarea,
            "input",
            /*input_handler*/
            ctx[15],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const label_1_changes = {};
      if (dirty & /*label*/
      128)
        label_1_changes.label = /*label*/
        ctx2[7];
      if (dirty & /*disabled*/
      64)
        label_1_changes.disabled = /*disabled*/
        ctx2[6];
      if (dirty & /*_id*/
      1024)
        label_1_changes.for = /*_id*/
        ctx2[10];
      label_1.$set(label_1_changes);
      const info_1_changes = {};
      if (dirty & /*info*/
      512)
        info_1_changes.msg = /*info*/
        ctx2[9];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty & /*error*/
      256)
        inputerror_changes.msg = /*error*/
        ctx2[8];
      inputerror.$set(inputerror_changes);
      (0, import_internal23.set_attributes)(textarea, textarea_data = (0, import_internal23.get_spread_update)(textarea_levels, [
        dirty & /*props*/
        2048 && /*props*/
        ctx2[11],
        (!current || dirty & /*disabled*/
        64) && { disabled: (
          /*disabled*/
          ctx2[6]
        ) },
        (!current || dirty & /*error*/
        256) && { "aria-invalid": (
          /*error*/
          ctx2[8]
        ) },
        (!current || dirty & /*error*/
        256 && textarea_aria_errormessage_value !== (textarea_aria_errormessage_value = /*error*/
        ctx2[8] ? (
          /*errorMessageId*/
          ctx2[12]
        ) : void 0)) && {
          "aria-errormessage": textarea_aria_errormessage_value
        },
        (!current || dirty & /*required*/
        32) && { "aria-required": (
          /*required*/
          ctx2[5]
        ) },
        (!current || dirty & /*_id*/
        1024) && { id: (
          /*_id*/
          ctx2[10]
        ) }
      ]));
      if (dirty & /*value*/
      1) {
        (0, import_internal23.set_input_value)(
          textarea,
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*autogrow, value*/
      17 && div0_data_value_value !== (div0_data_value_value = /*autogrow*/
      ctx2[4] ? (
        /*value*/
        ctx2[0]
      ) : void 0)) {
        (0, import_internal23.attr_dev)(div0, "data-value", div0_data_value_value);
      }
      if (!current || dirty & /*disabled*/
      64) {
        (0, import_internal23.toggle_class)(
          div0,
          "disabled",
          /*disabled*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*className*/
      8 && div1_class_value !== (div1_class_value = "textarea " + /*className*/
      ctx2[3])) {
        (0, import_internal23.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*className, autogrow*/
      24) {
        (0, import_internal23.toggle_class)(
          div1,
          "autogrow",
          /*autogrow*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*className, error*/
      264) {
        (0, import_internal23.toggle_class)(
          div1,
          "has-error",
          /*error*/
          ctx2[8]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal23.transition_in)(label_1.$$.fragment, local);
      (0, import_internal23.transition_in)(info_1.$$.fragment, local);
      (0, import_internal23.transition_in)(inputerror.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal23.transition_out)(label_1.$$.fragment, local);
      (0, import_internal23.transition_out)(info_1.$$.fragment, local);
      (0, import_internal23.transition_out)(inputerror.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal23.detach_dev)(div1);
      (0, import_internal23.destroy_component)(label_1);
      (0, import_internal23.destroy_component)(info_1);
      (0, import_internal23.destroy_component)(inputerror);
      ctx[16](null);
      ctx[18](null);
      mounted = false;
      (0, import_internal23.run_all)(dispose);
    }
  };
  (0, import_internal23.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment23.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance23($$self2, $$props2, $$invalidate2) {
  let props2;
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal23.validate_slots)("Textarea", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { value: value2 = "" } = $$props2;
  let { autogrow = false } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const errorMessageId2 = guid();
  function change_handler(event2) {
    import_internal23.bubble.call(this, $$self2, event2);
  }
  function input_handler2(event2) {
    import_internal23.bubble.call(this, $$self2, event2);
  }
  function textarea_binding($$value) {
    import_internal23.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
    });
  }
  function textarea_input_handler() {
    value2 = this.value;
    $$invalidate2(0, value2);
  }
  function div1_binding($$value) {
    import_internal23.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(19, $$props2 = (0, import_internal23.assign)((0, import_internal23.assign)({}, $$props2), (0, import_internal23.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate2(3, className2 = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate2(13, id2 = $$new_props.id);
    if ("value" in $$new_props)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("autogrow" in $$new_props)
      $$invalidate2(4, autogrow = $$new_props.autogrow);
    if ("required" in $$new_props)
      $$invalidate2(5, required2 = $$new_props.required);
    if ("disabled" in $$new_props)
      $$invalidate2(6, disabled2 = $$new_props.disabled);
    if ("label" in $$new_props)
      $$invalidate2(7, label2 = $$new_props.label);
    if ("error" in $$new_props)
      $$invalidate2(8, error2 = $$new_props.error);
    if ("info" in $$new_props)
      $$invalidate2(9, info2 = $$new_props.info);
    if ("element" in $$new_props)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$new_props)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
  };
  $$self2.$capture_state = () => ({
    pluck,
    guid,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    className: className2,
    id: id2,
    value: value2,
    autogrow,
    required: required2,
    disabled: disabled2,
    label: label2,
    error: error2,
    info: info2,
    element: element41,
    inputElement: inputElement2,
    errorMessageId: errorMessageId2,
    _id: _id2,
    props: props2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(19, $$props2 = (0, import_internal23.assign)((0, import_internal23.assign)({}, $$props2), $$new_props));
    if ("className" in $$props2)
      $$invalidate2(3, className2 = $$new_props.className);
    if ("id" in $$props2)
      $$invalidate2(13, id2 = $$new_props.id);
    if ("value" in $$props2)
      $$invalidate2(0, value2 = $$new_props.value);
    if ("autogrow" in $$props2)
      $$invalidate2(4, autogrow = $$new_props.autogrow);
    if ("required" in $$props2)
      $$invalidate2(5, required2 = $$new_props.required);
    if ("disabled" in $$props2)
      $$invalidate2(6, disabled2 = $$new_props.disabled);
    if ("label" in $$props2)
      $$invalidate2(7, label2 = $$new_props.label);
    if ("error" in $$props2)
      $$invalidate2(8, error2 = $$new_props.error);
    if ("info" in $$props2)
      $$invalidate2(9, info2 = $$new_props.info);
    if ("element" in $$props2)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("inputElement" in $$props2)
      $$invalidate2(2, inputElement2 = $$new_props.inputElement);
    if ("_id" in $$props2)
      $$invalidate2(10, _id2 = $$new_props._id);
    if ("props" in $$props2)
      $$invalidate2(11, props2 = $$new_props.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(11, props2 = pluck($$props2, ["title", "name", "placeholder"]));
    if ($$self2.$$.dirty & /*id*/
    8192) {
      $:
        $$invalidate2(10, _id2 = id2 || name || guid());
    }
  };
  $$props2 = (0, import_internal23.exclude_internal_props)($$props2);
  return [
    value2,
    element41,
    inputElement2,
    className2,
    autogrow,
    required2,
    disabled2,
    label2,
    error2,
    info2,
    _id2,
    props2,
    errorMessageId2,
    id2,
    change_handler,
    input_handler2,
    textarea_binding,
    textarea_input_handler,
    div1_binding
  ];
}
var Textarea = class extends import_internal23.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal23.init)(this, options, instance23, create_fragment23, import_internal23.safe_not_equal, {
      class: 3,
      id: 13,
      value: 0,
      autogrow: 4,
      required: 5,
      disabled: 6,
      label: 7,
      error: 8,
      info: 9,
      element: 1,
      inputElement: 2
    });
    (0, import_internal23.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Textarea",
      options,
      id: create_fragment23.name
    });
  }
  get class() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get autogrow() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set autogrow(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Textarea_default = Textarea;

// src/input/toggle/Toggle.svelte
var import_internal24 = __toESM(require_internal());
var import_svelte11 = __toESM(require_svelte());

// src/input/toggle/utils.js
var isTouchDevice = "ontouchstart" in document.documentElement;
function getMouseX2(e) {
  return e.type.includes("touch") ? e.touches[0].clientX : e.clientX;
}
function initialMeasure(toggleEl) {
  const isHidden = toggleEl.offsetParent === null;
  if (isHidden) {
    toggleEl = toggleEl.cloneNode(true);
    document.body.appendChild(toggleEl);
  }
  const toggleInnerEl = toggleEl.querySelector(".toggle-inner");
  const toggleInner = toggleInnerEl.getBoundingClientRect();
  const toggle = getComputedStyle(toggleEl);
  const togglePadding = parseFloat(toggle.paddingBlock);
  if (isHidden && toggleEl)
    toggleEl.remove();
  return {
    scrollerStartX: toggleInner.height - toggleInner.width,
    scrollerEndX: 0,
    handleStartX: toggleInner.height / 2 + togglePadding,
    handleEndX: toggleInner.width + togglePadding - toggleInner.height / 2
  };
}

// src/input/toggle/Toggle.svelte
var file19 = "src/input/toggle/Toggle.svelte";
function create_fragment24(ctx) {
  let div6;
  let label0;
  let t0;
  let info_1;
  let t1;
  let inputerror;
  let t2;
  let div5;
  let label1;
  let div4;
  let div0;
  let t3;
  let div2;
  let div1;
  let t4;
  let div3;
  let t5;
  let input;
  let input_aria_errormessage_value;
  let div6_class_value;
  let div6_tabindex_value;
  let current;
  let mounted;
  let dispose;
  label0 = new Label_default({
    props: {
      label: (
        /*label*/
        ctx[8]
      ),
      disabled: (
        /*disabled*/
        ctx[7]
      ),
      for: (
        /*_id*/
        ctx[13]
      )
    },
    $$inline: true
  });
  info_1 = new Info_default({
    props: { msg: (
      /*info*/
      ctx[10]
    ) },
    $$inline: true
  });
  inputerror = new InputError_default({
    props: {
      id: (
        /*errorMessageId*/
        ctx[14]
      ),
      msg: (
        /*error*/
        ctx[9]
      ),
      animOpacity: "true"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      div6 = (0, import_internal24.element)("div");
      (0, import_internal24.create_component)(label0.$$.fragment);
      t0 = (0, import_internal24.space)();
      (0, import_internal24.create_component)(info_1.$$.fragment);
      t1 = (0, import_internal24.space)();
      (0, import_internal24.create_component)(inputerror.$$.fragment);
      t2 = (0, import_internal24.space)();
      div5 = (0, import_internal24.element)("div");
      label1 = (0, import_internal24.element)("label");
      div4 = (0, import_internal24.element)("div");
      div0 = (0, import_internal24.element)("div");
      t3 = (0, import_internal24.space)();
      div2 = (0, import_internal24.element)("div");
      div1 = (0, import_internal24.element)("div");
      t4 = (0, import_internal24.space)();
      div3 = (0, import_internal24.element)("div");
      t5 = (0, import_internal24.space)();
      input = (0, import_internal24.element)("input");
      (0, import_internal24.attr_dev)(div0, "class", "toggle-option");
      (0, import_internal24.add_location)(div0, file19, 21, 4, 557);
      (0, import_internal24.attr_dev)(div1, "class", "toggle-knob");
      (0, import_internal24.add_location)(div1, file19, 22, 52, 643);
      (0, import_internal24.attr_dev)(div2, "class", "toggle-handle");
      (0, import_internal24.add_location)(div2, file19, 22, 4, 595);
      (0, import_internal24.attr_dev)(div3, "class", "toggle-option");
      (0, import_internal24.add_location)(div3, file19, 23, 4, 685);
      (0, import_internal24.attr_dev)(input, "class", "toggle-input");
      (0, import_internal24.attr_dev)(input, "type", "checkbox");
      input.disabled = /*disabled*/
      ctx[7];
      (0, import_internal24.attr_dev)(
        input,
        "id",
        /*_id*/
        ctx[13]
      );
      (0, import_internal24.attr_dev)(
        input,
        "name",
        /*name*/
        ctx[4]
      );
      (0, import_internal24.attr_dev)(
        input,
        "aria-invalid",
        /*error*/
        ctx[9]
      );
      (0, import_internal24.attr_dev)(input, "aria-errormessage", input_aria_errormessage_value = /*error*/
      ctx[9] ? (
        /*errorMessageId*/
        ctx[14]
      ) : void 0);
      (0, import_internal24.attr_dev)(
        input,
        "aria-required",
        /*required*/
        ctx[6]
      );
      (0, import_internal24.add_location)(input, file19, 24, 4, 723);
      (0, import_internal24.attr_dev)(div4, "class", "toggle-scroller");
      (0, import_internal24.add_location)(div4, file19, 20, 3, 500);
      (0, import_internal24.attr_dev)(label1, "class", "toggle-label");
      (0, import_internal24.attr_dev)(
        label1,
        "title",
        /*title*/
        ctx[5]
      );
      (0, import_internal24.add_location)(label1, file19, 19, 2, 460);
      (0, import_internal24.attr_dev)(div5, "class", "toggle-inner");
      (0, import_internal24.add_location)(div5, file19, 18, 1, 431);
      (0, import_internal24.attr_dev)(div6, "class", div6_class_value = "toggle " + /*className*/
      ctx[3]);
      (0, import_internal24.attr_dev)(div6, "role", "switch");
      (0, import_internal24.attr_dev)(
        div6,
        "aria-checked",
        /*value*/
        ctx[0]
      );
      (0, import_internal24.attr_dev)(div6, "tabindex", div6_tabindex_value = /*disabled*/
      ctx[7] ? void 0 : 0);
      (0, import_internal24.toggle_class)(
        div6,
        "has-error",
        /*error*/
        ctx[9]
      );
      (0, import_internal24.add_location)(div6, file19, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal24.insert_dev)(target, div6, anchor);
      (0, import_internal24.mount_component)(label0, div6, null);
      (0, import_internal24.append_dev)(div6, t0);
      (0, import_internal24.mount_component)(info_1, div6, null);
      (0, import_internal24.append_dev)(div6, t1);
      (0, import_internal24.mount_component)(inputerror, div6, null);
      (0, import_internal24.append_dev)(div6, t2);
      (0, import_internal24.append_dev)(div6, div5);
      (0, import_internal24.append_dev)(div5, label1);
      (0, import_internal24.append_dev)(label1, div4);
      (0, import_internal24.append_dev)(div4, div0);
      (0, import_internal24.append_dev)(div4, t3);
      (0, import_internal24.append_dev)(div4, div2);
      (0, import_internal24.append_dev)(div2, div1);
      ctx[20](div2);
      (0, import_internal24.append_dev)(div4, t4);
      (0, import_internal24.append_dev)(div4, div3);
      (0, import_internal24.append_dev)(div4, t5);
      (0, import_internal24.append_dev)(div4, input);
      ctx[21](input);
      input.checked = /*value*/
      ctx[0];
      ctx[23](div4);
      ctx[24](div6);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal24.listen_dev)(
            input,
            "change",
            /*input_change_handler*/
            ctx[22]
          ),
          (0, import_internal24.listen_dev)(
            div6,
            "keydown",
            /*onKey*/
            ctx[15],
            false,
            false,
            false,
            false
          ),
          (0, import_internal24.listen_dev)(
            div6,
            "touchstart",
            /*dragStart*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          (0, import_internal24.listen_dev)(
            div6,
            "mousedown",
            /*dragStart*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          (0, import_internal24.listen_dev)(div6, "contextmenu", (0, import_internal24.prevent_default)(
            /*contextmenu_handler*/
            ctx[18]
          ), false, true, false, false),
          (0, import_internal24.listen_dev)(div6, "click", (0, import_internal24.prevent_default)(
            /*click_handler*/
            ctx[19]
          ), false, true, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      const label0_changes = {};
      if (dirty[0] & /*label*/
      256)
        label0_changes.label = /*label*/
        ctx2[8];
      if (dirty[0] & /*disabled*/
      128)
        label0_changes.disabled = /*disabled*/
        ctx2[7];
      if (dirty[0] & /*_id*/
      8192)
        label0_changes.for = /*_id*/
        ctx2[13];
      label0.$set(label0_changes);
      const info_1_changes = {};
      if (dirty[0] & /*info*/
      1024)
        info_1_changes.msg = /*info*/
        ctx2[10];
      info_1.$set(info_1_changes);
      const inputerror_changes = {};
      if (dirty[0] & /*error*/
      512)
        inputerror_changes.msg = /*error*/
        ctx2[9];
      inputerror.$set(inputerror_changes);
      if (!current || dirty[0] & /*disabled*/
      128) {
        (0, import_internal24.prop_dev)(
          input,
          "disabled",
          /*disabled*/
          ctx2[7]
        );
      }
      if (!current || dirty[0] & /*_id*/
      8192) {
        (0, import_internal24.attr_dev)(
          input,
          "id",
          /*_id*/
          ctx2[13]
        );
      }
      if (!current || dirty[0] & /*name*/
      16) {
        (0, import_internal24.attr_dev)(
          input,
          "name",
          /*name*/
          ctx2[4]
        );
      }
      if (!current || dirty[0] & /*error*/
      512) {
        (0, import_internal24.attr_dev)(
          input,
          "aria-invalid",
          /*error*/
          ctx2[9]
        );
      }
      if (!current || dirty[0] & /*error*/
      512 && input_aria_errormessage_value !== (input_aria_errormessage_value = /*error*/
      ctx2[9] ? (
        /*errorMessageId*/
        ctx2[14]
      ) : void 0)) {
        (0, import_internal24.attr_dev)(input, "aria-errormessage", input_aria_errormessage_value);
      }
      if (!current || dirty[0] & /*required*/
      64) {
        (0, import_internal24.attr_dev)(
          input,
          "aria-required",
          /*required*/
          ctx2[6]
        );
      }
      if (dirty[0] & /*value*/
      1) {
        input.checked = /*value*/
        ctx2[0];
      }
      if (!current || dirty[0] & /*title*/
      32) {
        (0, import_internal24.attr_dev)(
          label1,
          "title",
          /*title*/
          ctx2[5]
        );
      }
      if (!current || dirty[0] & /*className*/
      8 && div6_class_value !== (div6_class_value = "toggle " + /*className*/
      ctx2[3])) {
        (0, import_internal24.attr_dev)(div6, "class", div6_class_value);
      }
      if (!current || dirty[0] & /*value*/
      1) {
        (0, import_internal24.attr_dev)(
          div6,
          "aria-checked",
          /*value*/
          ctx2[0]
        );
      }
      if (!current || dirty[0] & /*disabled*/
      128 && div6_tabindex_value !== (div6_tabindex_value = /*disabled*/
      ctx2[7] ? void 0 : 0)) {
        (0, import_internal24.attr_dev)(div6, "tabindex", div6_tabindex_value);
      }
      if (!current || dirty[0] & /*className, error*/
      520) {
        (0, import_internal24.toggle_class)(
          div6,
          "has-error",
          /*error*/
          ctx2[9]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal24.transition_in)(label0.$$.fragment, local);
      (0, import_internal24.transition_in)(info_1.$$.fragment, local);
      (0, import_internal24.transition_in)(inputerror.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal24.transition_out)(label0.$$.fragment, local);
      (0, import_internal24.transition_out)(info_1.$$.fragment, local);
      (0, import_internal24.transition_out)(inputerror.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal24.detach_dev)(div6);
      (0, import_internal24.destroy_component)(label0);
      (0, import_internal24.destroy_component)(info_1);
      (0, import_internal24.destroy_component)(inputerror);
      ctx[20](null);
      ctx[21](null);
      ctx[23](null);
      ctx[24](null);
      mounted = false;
      (0, import_internal24.run_all)(dispose);
    }
  };
  (0, import_internal24.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment24.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance24($$self2, $$props2, $$invalidate2) {
  let _id2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal24.validate_slots)("Toggle", slots2, []);
  const dispatch2 = (0, import_svelte11.createEventDispatcher)();
  let { class: className2 = "" } = $$props2;
  let { id: id2 = "" } = $$props2;
  let { name: name2 = guid() } = $$props2;
  let { title = "" } = $$props2;
  let { required: required2 = void 0 } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { label: label2 = "" } = $$props2;
  let { error: error2 = void 0 } = $$props2;
  let { info: info2 = void 0 } = $$props2;
  let { value: value2 = false } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { inputElement: inputElement2 = void 0 } = $$props2;
  const errorMessageId2 = guid();
  let scroller, handle, startX2, currentX = 0;
  let scrollerStartX, scrollerEndX, handleStartX;
  let isClick = false, isDragging = false;
  let oldValue;
  (0, import_svelte11.onMount)(() => {
    toggleTransitions(false);
    ({ scrollerStartX, scrollerEndX, handleStartX } = initialMeasure(element41));
  });
  (0, import_svelte11.afterUpdate)(() => {
    if (typeof value2 !== "boolean")
      $$invalidate2(0, value2 = !!value2);
    setValue(value2);
  });
  function setValue(v = false, force = false) {
    if (typeof v !== "boolean")
      v = !!v;
    if (v !== value2)
      return $$invalidate2(0, value2 = v);
    if (value2 === oldValue && !force)
      return;
    startX2 = currentX = value2 ? scrollerEndX : scrollerStartX;
    oldValue = value2;
    setKnobPosition();
    dispatch2("change", value2);
  }
  function onKey2(e) {
    toggleTransitions(true);
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      setValue(!value2);
    }
  }
  function dragStart(e) {
    const target = e.target;
    if (!target.closest(".toggle-inner, .toggle>label"))
      return;
    if (isTouchDevice && e.type !== "touchstart")
      return;
    if (e.type === "touchstart") {
      document.addEventListener("touchend", dragEnd);
      document.addEventListener("touchmove", drag, { passive: false });
    } else {
      document.addEventListener("mouseup", dragEnd);
      document.addEventListener("mousemove", drag, { passive: false });
    }
    toggleTransitions(false);
    startX2 = getMouseX2(e) - currentX;
    isDragging = true;
    isClick = true;
  }
  function dragEnd() {
    document.removeEventListener("mouseup", dragEnd);
    document.removeEventListener("mousemove", drag);
    document.removeEventListener("touchend", dragEnd);
    document.removeEventListener("touchmove", drag);
    toggleTransitions(true);
    isDragging = false;
    if (isClick)
      setValue(!value2);
    else {
      setValue(currentX - scrollerStartX >= (scrollerEndX - scrollerStartX) / 2, true);
    }
  }
  function drag(e) {
    if (!isDragging)
      return;
    isClick = false;
    e.preventDefault();
    currentX = getMouseX2(e) - startX2 - scrollerEndX;
    setKnobPosition();
  }
  function toggleTransitions(enable) {
    $$invalidate2(12, handle.style.transition = enable ? "" : "none", handle);
    $$invalidate2(11, scroller.style.transition = enable ? "" : "none", scroller);
  }
  function setKnobPosition() {
    if (currentX < scrollerStartX)
      currentX = scrollerStartX;
    if (currentX > scrollerEndX)
      currentX = scrollerEndX;
    $$invalidate2(11, scroller.style.marginLeft = Math.round(currentX) + "px", scroller);
    let handleLeft = handleStartX;
    if (isDragging || value2)
      handleLeft -= scrollerStartX;
    if (isDragging)
      handleLeft += currentX;
    $$invalidate2(12, handle.style.left = `${Math.round(handleLeft - 1)}px`, handle);
  }
  const writable_props = [
    "class",
    "id",
    "name",
    "title",
    "required",
    "disabled",
    "label",
    "error",
    "info",
    "value",
    "element",
    "inputElement"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Toggle> was created with unknown prop '${key}'`);
  });
  function contextmenu_handler(event2) {
    import_internal24.bubble.call(this, $$self2, event2);
  }
  function click_handler(event2) {
    import_internal24.bubble.call(this, $$self2, event2);
  }
  function div2_binding2($$value) {
    import_internal24.binding_callbacks[$$value ? "unshift" : "push"](() => {
      handle = $$value;
      $$invalidate2(12, handle);
    });
  }
  function input_binding2($$value) {
    import_internal24.binding_callbacks[$$value ? "unshift" : "push"](() => {
      inputElement2 = $$value;
      $$invalidate2(2, inputElement2);
    });
  }
  function input_change_handler() {
    value2 = this.checked;
    $$invalidate2(0, value2);
  }
  function div4_binding($$value) {
    import_internal24.binding_callbacks[$$value ? "unshift" : "push"](() => {
      scroller = $$value;
      $$invalidate2(11, scroller);
    });
  }
  function div6_binding($$value) {
    import_internal24.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(3, className2 = $$props3.class);
    if ("id" in $$props3)
      $$invalidate2(17, id2 = $$props3.id);
    if ("name" in $$props3)
      $$invalidate2(4, name2 = $$props3.name);
    if ("title" in $$props3)
      $$invalidate2(5, title = $$props3.title);
    if ("required" in $$props3)
      $$invalidate2(6, required2 = $$props3.required);
    if ("disabled" in $$props3)
      $$invalidate2(7, disabled2 = $$props3.disabled);
    if ("label" in $$props3)
      $$invalidate2(8, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(9, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(10, info2 = $$props3.info);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(2, inputElement2 = $$props3.inputElement);
  };
  $$self2.$capture_state = () => ({
    onMount: import_svelte11.onMount,
    afterUpdate: import_svelte11.afterUpdate,
    createEventDispatcher: import_svelte11.createEventDispatcher,
    guid,
    getMouseX: getMouseX2,
    isTouchDevice,
    initialMeasure,
    Info: Info_default,
    InputError: InputError_default,
    Label: Label_default,
    dispatch: dispatch2,
    className: className2,
    id: id2,
    name: name2,
    title,
    required: required2,
    disabled: disabled2,
    label: label2,
    error: error2,
    info: info2,
    value: value2,
    element: element41,
    inputElement: inputElement2,
    errorMessageId: errorMessageId2,
    scroller,
    handle,
    startX: startX2,
    currentX,
    scrollerStartX,
    scrollerEndX,
    handleStartX,
    isClick,
    isDragging,
    oldValue,
    setValue,
    onKey: onKey2,
    dragStart,
    dragEnd,
    drag,
    toggleTransitions,
    setKnobPosition,
    _id: _id2
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(3, className2 = $$props3.className);
    if ("id" in $$props3)
      $$invalidate2(17, id2 = $$props3.id);
    if ("name" in $$props3)
      $$invalidate2(4, name2 = $$props3.name);
    if ("title" in $$props3)
      $$invalidate2(5, title = $$props3.title);
    if ("required" in $$props3)
      $$invalidate2(6, required2 = $$props3.required);
    if ("disabled" in $$props3)
      $$invalidate2(7, disabled2 = $$props3.disabled);
    if ("label" in $$props3)
      $$invalidate2(8, label2 = $$props3.label);
    if ("error" in $$props3)
      $$invalidate2(9, error2 = $$props3.error);
    if ("info" in $$props3)
      $$invalidate2(10, info2 = $$props3.info);
    if ("value" in $$props3)
      $$invalidate2(0, value2 = $$props3.value);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("inputElement" in $$props3)
      $$invalidate2(2, inputElement2 = $$props3.inputElement);
    if ("scroller" in $$props3)
      $$invalidate2(11, scroller = $$props3.scroller);
    if ("handle" in $$props3)
      $$invalidate2(12, handle = $$props3.handle);
    if ("startX" in $$props3)
      startX2 = $$props3.startX;
    if ("currentX" in $$props3)
      currentX = $$props3.currentX;
    if ("scrollerStartX" in $$props3)
      scrollerStartX = $$props3.scrollerStartX;
    if ("scrollerEndX" in $$props3)
      scrollerEndX = $$props3.scrollerEndX;
    if ("handleStartX" in $$props3)
      handleStartX = $$props3.handleStartX;
    if ("isClick" in $$props3)
      isClick = $$props3.isClick;
    if ("isDragging" in $$props3)
      isDragging = $$props3.isDragging;
    if ("oldValue" in $$props3)
      oldValue = $$props3.oldValue;
    if ("_id" in $$props3)
      $$invalidate2(13, _id2 = $$props3._id);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty[0] & /*id, name*/
    131088) {
      $:
        $$invalidate2(13, _id2 = id2 || name2 || guid());
    }
  };
  return [
    value2,
    element41,
    inputElement2,
    className2,
    name2,
    title,
    required2,
    disabled2,
    label2,
    error2,
    info2,
    scroller,
    handle,
    _id2,
    errorMessageId2,
    onKey2,
    dragStart,
    id2,
    contextmenu_handler,
    click_handler,
    div2_binding2,
    input_binding2,
    input_change_handler,
    div4_binding,
    div6_binding
  ];
}
var Toggle = class extends import_internal24.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal24.init)(
      this,
      options,
      instance24,
      create_fragment24,
      import_internal24.safe_not_equal,
      {
        class: 3,
        id: 17,
        name: 4,
        title: 5,
        required: 6,
        disabled: 7,
        label: 8,
        error: 9,
        info: 10,
        value: 0,
        element: 1,
        inputElement: 2
      },
      null,
      [-1, -1]
    );
    (0, import_internal24.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Toggle",
      options,
      id: create_fragment24.name
    });
  }
  get class() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get error() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set error(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputElement() {
    throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputElement(value2) {
    throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Toggle_default = Toggle;

// src/menu/Menu.svelte
var import_internal25 = __toESM(require_internal());
var import_svelte12 = __toESM(require_svelte());

// src/menu/utils.js
var typeQuery = "";
var typeTimer;
function matchQuery(buttons, key) {
  if (!/^\w| $/i.test(key))
    return;
  if (typeTimer)
    clearTimeout(typeTimer);
  typeTimer = setTimeout(() => typeQuery = "", 300);
  typeQuery += key;
  return buttons.find((b) => b.text.startsWith(typeQuery));
}
function removeArias(selectorOrEl) {
  if (typeof selectorOrEl === "string" && selectorOrEl !== "body") {
    const elems = document.querySelectorAll(selectorOrEl);
    if (elems && elems.length)
      elems.forEach((el) => el.setAttribute("aria-expanded", "false"));
  } else if (selectorOrEl instanceof Element) {
    selectorOrEl.setAttribute("aria-expanded", "false");
  }
}
function addArias(el) {
  if (!el)
    return;
  el.setAttribute("aria-haspopup", "true");
  el.setAttribute("aria-expanded", "true");
}
function updatePosition(e, type, menuEl, offset, align, isBelowTarget) {
  if (!menuEl)
    return isBelowTarget;
  if (e && e.detail && e.detail instanceof Event)
    e = e.detail;
  const etype = e && e.type;
  if (type === "context") {
    if (etype === "contextmenu") {
      menuEl.style.top = e.y + "px";
      menuEl.style.left = e.x + "px";
    } else if (etype === "longpress") {
      menuEl.style.top = e.detail.y + "px";
      menuEl.style.left = e.detail.x + "px";
    }
  } else if (etype === "click" || etype === "focus") {
    const btnBox = e.target.getBoundingClientRect();
    menuEl.style.top = btnBox.top + btnBox.height + offset + "px";
    menuEl.style.left = btnBox.left + "px";
    if (align === "right") {
      menuEl.style.left = btnBox.left + btnBox.width - menuEl.offsetWidth + "px";
    }
  }
  const { x, y, width, height } = menuEl.getBoundingClientRect();
  const winH = window.innerHeight;
  const winW = window.innerWidth;
  const padding = 10;
  if (etype === "click" || etype === "focus") {
    const btnBox = e.target.getBoundingClientRect();
    const spaceAbove = btnBox.top - padding;
    const spaceBelow = winH - btnBox.top - btnBox.height - padding;
    menuEl.style.maxHeight = Math.max(spaceAbove, spaceBelow) + "px";
    if (spaceAbove > spaceBelow) {
      isBelowTarget = false;
      const top = winH - height - padding;
      if (top < y) {
        menuEl.style.top = btnBox.top - height - offset + "px";
      }
    } else
      isBelowTarget = true;
  } else if (y > winH - height - padding) {
    let top = winH - height - padding;
    if (top < 0)
      top = 2;
    menuEl.style.top = top + "px";
  }
  if (x > winW - width - padding) {
    let left = winW - width - padding;
    if (left < 0)
      left = 2;
    menuEl.style.left = left + "px";
  }
  if (x < padding)
    menuEl.style.left = padding + "px";
  return isBelowTarget;
}

// src/menu/longpress.js
var maxDiffX = 10;
var maxDiffY = 10;
var startX = 0;
var startY = 0;
var EVENT_NAME = "longpress";
var DELAY = 500;
var timer = null;
function fireLongPressEvent(originalEvent) {
  clearTimer();
  originalEvent = unifyEvent(originalEvent);
  const event2 = new CustomEvent(EVENT_NAME, {
    bubbles: true,
    cancelable: true,
    detail: {
      x: originalEvent.clientX,
      y: originalEvent.clientY
    }
  });
  originalEvent.target.dispatchEvent(event2);
}
function unifyEvent(e) {
  if (e.changedTouches !== void 0)
    return e.changedTouches[0];
  return e;
}
function startTimer(e) {
  clearTimer();
  timer = setTimeout(() => fireLongPressEvent(e), DELAY);
}
function clearTimer() {
  if (!timer)
    return;
  clearTimeout(timer);
  timer = null;
}
function mouseDownHandler(e) {
  startX = e.clientX;
  startY = e.clientY;
  startTimer(e);
}
function mouseMoveHandler(e) {
  const diffX = Math.abs(startX - e.clientX);
  const diffY = Math.abs(startY - e.clientY);
  if (diffX >= maxDiffX || diffY >= maxDiffY)
    clearTimer();
}
function init25(delay = 500, eventName = "longpress") {
  if (window["longPressEventInitialised"])
    return;
  DELAY = delay;
  EVENT_NAME = eventName;
  const isTouch = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator["msMaxTouchPoints"] > 0;
  const hasPointerEvents = "PointerEvent" in window || navigator && "msPointerEnabled" in navigator;
  const mouseDown = isTouch ? "touchstart" : hasPointerEvents ? "pointerdown" : "mousedown";
  const mouseUp = isTouch ? "touchend" : hasPointerEvents ? "pointerup" : "mouseup";
  const mouseMove = isTouch ? "touchmove" : hasPointerEvents ? "pointermove" : "mousemove";
  document.addEventListener(mouseDown, mouseDownHandler, true);
  document.addEventListener(mouseMove, mouseMoveHandler, true);
  document.addEventListener(mouseUp, clearTimer, true);
  document.addEventListener("scroll", clearTimer, true);
  window["longPressEventInitialised"] = true;
}

// src/menu/Menu.svelte
var file20 = "src/menu/Menu.svelte";
function create_if_block10(ctx) {
  let menu;
  let menu_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = (0, import_internal25.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  const block = {
    c: function create() {
      menu = (0, import_internal25.element)("menu");
      if (default_slot)
        default_slot.c();
      (0, import_internal25.attr_dev)(menu, "tabindex", "0");
      (0, import_internal25.attr_dev)(menu, "class", menu_class_value = "menu " + /*className*/
      ctx[1]);
      (0, import_internal25.add_location)(menu, file20, 2, 1, 69);
    },
    m: function mount(target, anchor) {
      (0, import_internal25.insert_dev)(target, menu, anchor);
      if (default_slot) {
        default_slot.m(menu, null);
      }
      ctx[13](menu);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        2048)) {
          (0, import_internal25.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? (0, import_internal25.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[11]
            ) : (0, import_internal25.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty[0] & /*className*/
      2 && menu_class_value !== (menu_class_value = "menu " + /*className*/
      ctx2[1])) {
        (0, import_internal25.attr_dev)(menu, "class", menu_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal25.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal25.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal25.detach_dev)(menu);
      if (default_slot)
        default_slot.d(detaching);
      ctx[13](null);
    }
  };
  (0, import_internal25.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block10.name,
    type: "if",
    source: "(2:0) {#if opened}",
    ctx
  });
  return block;
}
function create_fragment25(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*opened*/
    ctx[2] && create_if_block10(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal25.empty)();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal25.insert_dev)(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*opened*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*opened*/
          4) {
            (0, import_internal25.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          (0, import_internal25.transition_in)(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        (0, import_internal25.group_outros)();
        (0, import_internal25.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal25.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal25.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal25.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal25.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal25.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment25.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var buttonSelector = ".menu-item:not(.disabled,.menu-separator)";
function instance25($$self2, $$props2, $$invalidate2) {
  let elevated;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal25.validate_slots)("Menu", slots2, ["default"]);
  const dispatch2 = (0, import_svelte12.createEventDispatcher)();
  const isMobileSafari = navigator.userAgent.match(/safari/i) && navigator.vendor.match(/apple/i) && navigator.maxTouchPoints;
  const contextmenu = isMobileSafari ? "longpress" : "contextmenu";
  let { class: className2 = "" } = $$props2;
  let { type = void 0 } = $$props2;
  let { targetSelector = "body" } = $$props2;
  let { closeOnClick = true } = $$props2;
  let { elevate = false } = $$props2;
  let { offset = 2 } = $$props2;
  let { align = "left" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const menuButtons = [];
  let targetEl, focusedEl, opened = false;
  let isBelowTarget = true;
  let hovering = false;
  (0, import_svelte12.setContext)("MenuContext", { targetEl: () => targetEl });
  (0, import_svelte12.onMount)(() => {
    if (type === "context") {
      init25();
      document.addEventListener(contextmenu, onContextMenu);
    }
  });
  (0, import_svelte12.onDestroy)(() => {
    if (type === "context")
      document.removeEventListener(contextmenu, onContextMenu);
    if (elevated && element41)
      element41.remove();
  });
  function indexButtons() {
    if (!element41)
      return;
    menuButtons.length = 0;
    const addBtn = (el) => menuButtons.push({
      el,
      text: el.textContent.trim().toLowerCase()
    });
    element41.querySelectorAll(buttonSelector).forEach(addBtn);
  }
  function matchTypeQuery(key) {
    const btn = matchQuery(menuButtons, key);
    if (btn && btn.el)
      highlightElement(btn.el);
  }
  function onContextMenu(e) {
    _close();
    targetEl = e.target.closest(targetSelector);
    if (!targetEl)
      return;
    e.stopPropagation();
    e.preventDefault();
    open(e);
  }
  function onDocumentClick(e) {
    if (!element41.contains(e.target))
      _close();
    else {
      const shouldClose = closeOnClick === true || closeOnClick === "true";
      const clickedOnItem = !!e.target.closest(buttonSelector);
      if (shouldClose && clickedOnItem)
        close(e);
    }
  }
  function onscroll() {
    if (!hovering && opened)
      return _close();
  }
  function onmouseover(e) {
    const isOverMenu = e.target.closest(".menu");
    if (isOverMenu && !hovering)
      hovering = true;
    else if (!isOverMenu && hovering)
      hovering = false;
    if (hovering) {
      const btn = e.target.closest(buttonSelector);
      if (btn)
        highlightElement(btn);
    } else
      highlightElement(null);
  }
  function highlightElement(el) {
    focusedEl = el;
    if (focusedEl) {
      focusedEl.scrollIntoView({ block: "nearest" });
      focusedEl.focus();
    } else
      element41 && element41.focus();
  }
  function onKeydown2(e) {
    if (e.key === "Escape" || !element41.contains(e.target))
      return _close();
    if (e.key === "Enter" || e.key === " ")
      return;
    if (e.key === "Tab") {
      e.preventDefault();
      e.stopPropagation();
      if (e.shiftKey)
        return focusPrev();
      return focusNext();
    }
    if (e.key.startsWith("Arrow") || e.key.startsWith(" "))
      e.preventDefault();
    if (e.key === "ArrowDown")
      return focusNext();
    if (e.key === "ArrowUp")
      return focusPrev();
    if (e.key === "ArrowLeft")
      return focusFirst();
    if (e.key === "ArrowRight")
      return focusLast();
    matchTypeQuery(e.key);
  }
  function focusTarget() {
    if (targetEl && targetEl.focus)
      targetEl.focus();
  }
  function focusFirst() {
    const buttons = Array.from(element41.querySelectorAll(buttonSelector));
    highlightElement(buttons[0]);
  }
  function focusLast() {
    const buttons = Array.from(element41.querySelectorAll(buttonSelector));
    highlightElement(buttons[buttons.length - 1]);
  }
  function focusNext() {
    const buttons = Array.from(element41.querySelectorAll(buttonSelector));
    let idx = -1;
    if (focusedEl)
      idx = buttons.findIndex((el) => el === focusedEl);
    if (idx >= buttons.length - 1)
      idx = -1;
    highlightElement(buttons[idx + 1]);
  }
  function focusPrev() {
    const buttons = Array.from(element41.querySelectorAll(buttonSelector));
    let idx = buttons.length;
    if (focusedEl)
      idx = buttons.findIndex((el) => el === focusedEl);
    if (idx <= 0)
      idx = buttons.length;
    highlightElement(buttons[idx - 1]);
  }
  function open(e) {
    if (opened) {
      if (type !== "context")
        return close();
      return Promise.resolve();
    }
    $$invalidate2(2, opened = true);
    focusedEl = null;
    if (e && e.detail && e.detail instanceof Event)
      e = e.detail;
    if (type !== "context")
      targetEl = e && e.target;
    if (targetEl) {
      removeArias(targetSelector);
      addArias(targetEl);
    }
    return new Promise((resolve) => requestAnimationFrame(() => {
      if (elevated)
        document.body.appendChild(element41);
      indexButtons();
      isBelowTarget = updatePosition(e, type, element41, offset, align, isBelowTarget);
      dispatch2("open", { event: e, target: targetEl });
      addEventListeners();
      requestAnimationFrame(resolve);
      if (element41)
        element41.focus();
    }));
  }
  function close(e) {
    if (!opened)
      return Promise.resolve();
    if (e && e.detail && e.detail.target)
      e = e.detail;
    if (e && e.target)
      e.target.focus();
    return new Promise((resolve) => {
      setTimeout(
        () => {
          if (!e || !e.defaultPrevented)
            _close().then(() => resolve());
          else
            resolve();
        },
        220
      );
    });
  }
  function _close() {
    if (!opened)
      return Promise.resolve();
    $$invalidate2(2, opened = false);
    removeArias(targetSelector);
    removeArias(targetEl);
    return new Promise((resolve) => requestAnimationFrame(() => {
      dispatch2("close", { target: targetEl });
      removeEventListeners();
      focusTarget();
      requestAnimationFrame(resolve);
    }));
  }
  function addEventListeners() {
    document.addEventListener("click", onDocumentClick);
    document.addEventListener("keydown", onKeydown2);
    document.addEventListener("scroll", onscroll, true);
    document.addEventListener("mouseover", onmouseover);
  }
  function removeEventListeners() {
    document.removeEventListener("click", onDocumentClick);
    document.removeEventListener("keydown", onKeydown2);
    document.removeEventListener("scroll", onscroll, true);
    document.removeEventListener("mouseover", onmouseover);
  }
  const writable_props = [
    "class",
    "type",
    "targetSelector",
    "closeOnClick",
    "elevate",
    "offset",
    "align",
    "element"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Menu> was created with unknown prop '${key}'`);
  });
  function menu_binding($$value) {
    import_internal25.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("type" in $$props3)
      $$invalidate2(3, type = $$props3.type);
    if ("targetSelector" in $$props3)
      $$invalidate2(4, targetSelector = $$props3.targetSelector);
    if ("closeOnClick" in $$props3)
      $$invalidate2(5, closeOnClick = $$props3.closeOnClick);
    if ("elevate" in $$props3)
      $$invalidate2(6, elevate = $$props3.elevate);
    if ("offset" in $$props3)
      $$invalidate2(7, offset = $$props3.offset);
    if ("align" in $$props3)
      $$invalidate2(8, align = $$props3.align);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("$$scope" in $$props3)
      $$invalidate2(11, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte12.createEventDispatcher,
    onDestroy: import_svelte12.onDestroy,
    onMount: import_svelte12.onMount,
    setContext: import_svelte12.setContext,
    addArias,
    removeArias,
    matchQuery,
    updatePosition,
    initLongPressEvent: init25,
    dispatch: dispatch2,
    isMobileSafari,
    contextmenu,
    className: className2,
    type,
    targetSelector,
    closeOnClick,
    elevate,
    offset,
    align,
    element: element41,
    menuButtons,
    buttonSelector,
    targetEl,
    focusedEl,
    opened,
    isBelowTarget,
    hovering,
    indexButtons,
    matchTypeQuery,
    onContextMenu,
    onDocumentClick,
    onscroll,
    onmouseover,
    highlightElement,
    onKeydown: onKeydown2,
    focusTarget,
    focusFirst,
    focusLast,
    focusNext,
    focusPrev,
    open,
    close,
    _close,
    addEventListeners,
    removeEventListeners,
    elevated
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("type" in $$props3)
      $$invalidate2(3, type = $$props3.type);
    if ("targetSelector" in $$props3)
      $$invalidate2(4, targetSelector = $$props3.targetSelector);
    if ("closeOnClick" in $$props3)
      $$invalidate2(5, closeOnClick = $$props3.closeOnClick);
    if ("elevate" in $$props3)
      $$invalidate2(6, elevate = $$props3.elevate);
    if ("offset" in $$props3)
      $$invalidate2(7, offset = $$props3.offset);
    if ("align" in $$props3)
      $$invalidate2(8, align = $$props3.align);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("targetEl" in $$props3)
      targetEl = $$props3.targetEl;
    if ("focusedEl" in $$props3)
      focusedEl = $$props3.focusedEl;
    if ("opened" in $$props3)
      $$invalidate2(2, opened = $$props3.opened);
    if ("isBelowTarget" in $$props3)
      isBelowTarget = $$props3.isBelowTarget;
    if ("hovering" in $$props3)
      hovering = $$props3.hovering;
    if ("elevated" in $$props3)
      elevated = $$props3.elevated;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty[0] & /*elevate*/
    64) {
      $:
        elevated = elevate === "true" || elevate === true;
    }
  };
  return [
    element41,
    className2,
    opened,
    type,
    targetSelector,
    closeOnClick,
    elevate,
    offset,
    align,
    open,
    close,
    $$scope2,
    slots2,
    menu_binding
  ];
}
var Menu = class extends import_internal25.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal25.init)(
      this,
      options,
      instance25,
      create_fragment25,
      import_internal25.safe_not_equal,
      {
        class: 1,
        type: 3,
        targetSelector: 4,
        closeOnClick: 5,
        elevate: 6,
        offset: 7,
        align: 8,
        element: 0,
        open: 9,
        close: 10
      },
      null,
      [-1, -1]
    );
    (0, import_internal25.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Menu",
      options,
      id: create_fragment25.name
    });
  }
  get class() {
    return this.$$.ctx[1];
  }
  set class(className2) {
    this.$$set({ class: className2 });
    (0, import_internal25.flush)();
  }
  get type() {
    return this.$$.ctx[3];
  }
  set type(type) {
    this.$$set({ type });
    (0, import_internal25.flush)();
  }
  get targetSelector() {
    return this.$$.ctx[4];
  }
  set targetSelector(targetSelector) {
    this.$$set({ targetSelector });
    (0, import_internal25.flush)();
  }
  get closeOnClick() {
    return this.$$.ctx[5];
  }
  set closeOnClick(closeOnClick) {
    this.$$set({ closeOnClick });
    (0, import_internal25.flush)();
  }
  get elevate() {
    return this.$$.ctx[6];
  }
  set elevate(elevate) {
    this.$$set({ elevate });
    (0, import_internal25.flush)();
  }
  get offset() {
    return this.$$.ctx[7];
  }
  set offset(offset) {
    this.$$set({ offset });
    (0, import_internal25.flush)();
  }
  get align() {
    return this.$$.ctx[8];
  }
  set align(align) {
    this.$$set({ align });
    (0, import_internal25.flush)();
  }
  get element() {
    return this.$$.ctx[0];
  }
  set element(element41) {
    this.$$set({ element: element41 });
    (0, import_internal25.flush)();
  }
  get open() {
    return this.$$.ctx[9];
  }
  set open(value2) {
    throw new Error("<Menu>: Cannot set read-only property 'open'");
  }
  get close() {
    return this.$$.ctx[10];
  }
  set close(value2) {
    throw new Error("<Menu>: Cannot set read-only property 'close'");
  }
};
var Menu_default = Menu;

// src/menu/MenuItem.svelte
var import_internal26 = __toESM(require_internal());
var import_svelte13 = __toESM(require_svelte());
var file21 = "src/menu/MenuItem.svelte";
function create_if_block11(ctx) {
  let icon_1;
  let current;
  icon_1 = new Icon_default({
    props: { name: (
      /*icon*/
      ctx[2]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal26.create_component)(icon_1.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal26.mount_component)(icon_1, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const icon_1_changes = {};
      if (dirty & /*icon*/
      4)
        icon_1_changes.name = /*icon*/
        ctx2[2];
      icon_1.$set(icon_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal26.transition_in)(icon_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal26.transition_out)(icon_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal26.destroy_component)(icon_1, detaching);
    }
  };
  (0, import_internal26.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block11.name,
    type: "if",
    source: "(15:2) {#if icon}",
    ctx
  });
  return block;
}
function create_fragment26(ctx) {
  let button;
  let span0;
  let t0;
  let t1;
  let span1;
  let t2_value = replaceKeySymbols(
    /*shortcut*/
    ctx[1]
  ) + "";
  let t2;
  let button_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*icon*/
    ctx[2] && create_if_block11(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = (0, import_internal26.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  let button_levels = [
    { role: "menuitem" },
    {
      class: button_class_value = "menu-item " + /*className*/
      ctx[3]
    },
    /*props*/
    ctx[7]
  ];
  let button_data = {};
  for (let i = 0; i < button_levels.length; i += 1) {
    button_data = (0, import_internal26.assign)(button_data, button_levels[i]);
  }
  const block = {
    c: function create() {
      button = (0, import_internal26.element)("button");
      span0 = (0, import_internal26.element)("span");
      if (if_block)
        if_block.c();
      t0 = (0, import_internal26.space)();
      if (default_slot)
        default_slot.c();
      t1 = (0, import_internal26.space)();
      span1 = (0, import_internal26.element)("span");
      t2 = (0, import_internal26.text)(t2_value);
      (0, import_internal26.attr_dev)(span0, "class", "menu-item-content");
      (0, import_internal26.add_location)(span0, file21, 13, 1, 234);
      (0, import_internal26.attr_dev)(span1, "class", "menu-item-shortcut");
      (0, import_internal26.add_location)(span1, file21, 17, 1, 328);
      (0, import_internal26.set_attributes)(button, button_data);
      (0, import_internal26.toggle_class)(
        button,
        "disabled",
        /*props*/
        ctx[7].disabled
      );
      (0, import_internal26.toggle_class)(
        button,
        "success",
        /*success*/
        ctx[4]
      );
      (0, import_internal26.toggle_class)(
        button,
        "warning",
        /*warning*/
        ctx[5]
      );
      (0, import_internal26.toggle_class)(
        button,
        "danger",
        /*danger*/
        ctx[6]
      );
      (0, import_internal26.add_location)(button, file21, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal26.insert_dev)(target, button, anchor);
      (0, import_internal26.append_dev)(button, span0);
      if (if_block)
        if_block.m(span0, null);
      (0, import_internal26.append_dev)(span0, t0);
      if (default_slot) {
        default_slot.m(span0, null);
      }
      (0, import_internal26.append_dev)(button, t1);
      (0, import_internal26.append_dev)(button, span1);
      (0, import_internal26.append_dev)(span1, t2);
      if (button.autofocus)
        button.focus();
      ctx[12](button);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal26.listen_dev)(button, "mousedown", (0, import_internal26.prevent_default)(
            /*mousedown_handler*/
            ctx[11]
          ), false, true, false, false),
          (0, import_internal26.listen_dev)(
            button,
            "click",
            /*onclick*/
            ctx[8],
            true,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*icon*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*icon*/
          4) {
            (0, import_internal26.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block11(ctx2);
          if_block.c();
          (0, import_internal26.transition_in)(if_block, 1);
          if_block.m(span0, t0);
        }
      } else if (if_block) {
        (0, import_internal26.group_outros)();
        (0, import_internal26.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal26.check_outros)();
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          (0, import_internal26.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? (0, import_internal26.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[9]
            ) : (0, import_internal26.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if ((!current || dirty & /*shortcut*/
      2) && t2_value !== (t2_value = replaceKeySymbols(
        /*shortcut*/
        ctx2[1]
      ) + ""))
        (0, import_internal26.set_data_dev)(t2, t2_value);
      (0, import_internal26.set_attributes)(button, button_data = (0, import_internal26.get_spread_update)(button_levels, [
        { role: "menuitem" },
        (!current || dirty & /*className*/
        8 && button_class_value !== (button_class_value = "menu-item " + /*className*/
        ctx2[3])) && { class: button_class_value },
        dirty & /*props*/
        128 && /*props*/
        ctx2[7]
      ]));
      (0, import_internal26.toggle_class)(
        button,
        "disabled",
        /*props*/
        ctx2[7].disabled
      );
      (0, import_internal26.toggle_class)(
        button,
        "success",
        /*success*/
        ctx2[4]
      );
      (0, import_internal26.toggle_class)(
        button,
        "warning",
        /*warning*/
        ctx2[5]
      );
      (0, import_internal26.toggle_class)(
        button,
        "danger",
        /*danger*/
        ctx2[6]
      );
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal26.transition_in)(if_block);
      (0, import_internal26.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal26.transition_out)(if_block);
      (0, import_internal26.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal26.detach_dev)(button);
      if (if_block)
        if_block.d();
      if (default_slot)
        default_slot.d(detaching);
      ctx[12](null);
      mounted = false;
      (0, import_internal26.run_all)(dispose);
    }
  };
  (0, import_internal26.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment26.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function replaceKeySymbols(txt) {
  return ("" + txt).trim().toUpperCase().replace(/\+/g, "").replace(/CMD/g, "\u2318").replace(/ALT|OPTION/g, "\u2325").replace(/SHIFT/g, "\u21E7").replace(/CONTROL|CTRL/g, "\u2303").replace(/DELETE|DEL|BACKSPACE/g, "\u232B").replace(/ENTER|RETURN/g, "\u21A9").replace(/ESCAPE|ESC/g, "\u238B");
}
function instance26($$self2, $$props2, $$invalidate2) {
  let props2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal26.validate_slots)("MenuItem", slots2, ["default"]);
  let { shortcut = "" } = $$props2;
  let { icon = void 0 } = $$props2;
  let { class: className2 = "" } = $$props2;
  let { success = false } = $$props2;
  let { warning = false } = $$props2;
  let { danger = false } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte13.createEventDispatcher)();
  const { targetEl } = (0, import_svelte13.getContext)("MenuContext");
  function onclick(e) {
    const btn = e.target.closest(".menu-item");
    if (btn)
      btn.focus();
    blink(btn, 200).then(() => {
      const target = targetEl();
      const res = dispatch2("click", { event: e, target, button: btn }, { cancelable: true });
      if (res === false) {
        e.stopPropagation();
        e.preventDefault();
      }
    });
  }
  function mousedown_handler(event2) {
    import_internal26.bubble.call(this, $$self2, event2);
  }
  function button_binding($$value) {
    import_internal26.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(15, $$props2 = (0, import_internal26.assign)((0, import_internal26.assign)({}, $$props2), (0, import_internal26.exclude_internal_props)($$new_props)));
    if ("shortcut" in $$new_props)
      $$invalidate2(1, shortcut = $$new_props.shortcut);
    if ("icon" in $$new_props)
      $$invalidate2(2, icon = $$new_props.icon);
    if ("class" in $$new_props)
      $$invalidate2(3, className2 = $$new_props.class);
    if ("success" in $$new_props)
      $$invalidate2(4, success = $$new_props.success);
    if ("warning" in $$new_props)
      $$invalidate2(5, warning = $$new_props.warning);
    if ("danger" in $$new_props)
      $$invalidate2(6, danger = $$new_props.danger);
    if ("element" in $$new_props)
      $$invalidate2(0, element41 = $$new_props.element);
    if ("$$scope" in $$new_props)
      $$invalidate2(9, $$scope2 = $$new_props.$$scope);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte13.createEventDispatcher,
    getContext: import_svelte13.getContext,
    Icon: Icon_default,
    pluck,
    blink,
    shortcut,
    icon,
    className: className2,
    success,
    warning,
    danger,
    element: element41,
    dispatch: dispatch2,
    targetEl,
    replaceKeySymbols,
    onclick,
    props: props2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(15, $$props2 = (0, import_internal26.assign)((0, import_internal26.assign)({}, $$props2), $$new_props));
    if ("shortcut" in $$props2)
      $$invalidate2(1, shortcut = $$new_props.shortcut);
    if ("icon" in $$props2)
      $$invalidate2(2, icon = $$new_props.icon);
    if ("className" in $$props2)
      $$invalidate2(3, className2 = $$new_props.className);
    if ("success" in $$props2)
      $$invalidate2(4, success = $$new_props.success);
    if ("warning" in $$props2)
      $$invalidate2(5, warning = $$new_props.warning);
    if ("danger" in $$props2)
      $$invalidate2(6, danger = $$new_props.danger);
    if ("element" in $$props2)
      $$invalidate2(0, element41 = $$new_props.element);
    if ("props" in $$props2)
      $$invalidate2(7, props2 = $$new_props.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(7, props2 = pluck($$props2, ["id", "title", "disabled", "data"]));
  };
  $$props2 = (0, import_internal26.exclude_internal_props)($$props2);
  return [
    element41,
    shortcut,
    icon,
    className2,
    success,
    warning,
    danger,
    props2,
    onclick,
    $$scope2,
    slots2,
    mousedown_handler,
    button_binding
  ];
}
var MenuItem = class extends import_internal26.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal26.init)(this, options, instance26, create_fragment26, import_internal26.safe_not_equal, {
      shortcut: 1,
      icon: 2,
      class: 3,
      success: 4,
      warning: 5,
      danger: 6,
      element: 0
    });
    (0, import_internal26.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "MenuItem",
      options,
      id: create_fragment26.name
    });
  }
  get shortcut() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set shortcut(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get icon() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set icon(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get success() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set success(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get warning() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set warning(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get danger() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set danger(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<MenuItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<MenuItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MenuItem_default = MenuItem;

// src/menu/MenuSeparator.svelte
var import_internal27 = __toESM(require_internal());
var file22 = "src/menu/MenuSeparator.svelte";
function create_fragment27(ctx) {
  let li;
  const block = {
    c: function create() {
      li = (0, import_internal27.element)("li");
      (0, import_internal27.attr_dev)(li, "role", "separator");
      (0, import_internal27.attr_dev)(li, "class", "menu-item menu-separator");
      (0, import_internal27.add_location)(li, file22, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal27.insert_dev)(target, li, anchor);
      ctx[1](li);
    },
    p: import_internal27.noop,
    i: import_internal27.noop,
    o: import_internal27.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal27.detach_dev)(li);
      ctx[1](null);
    }
  };
  (0, import_internal27.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment27.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance27($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal27.validate_slots)("MenuSeparator", slots2, []);
  let { element: element41 = void 0 } = $$props2;
  const writable_props = ["element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<MenuSeparator> was created with unknown prop '${key}'`);
  });
  function li_binding($$value) {
    import_internal27.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({ element: element41 });
  $$self2.$inject_state = ($$props3) => {
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [element41, li_binding];
}
var MenuSeparator = class extends import_internal27.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal27.init)(this, options, instance27, create_fragment27, import_internal27.safe_not_equal, { element: 0 });
    (0, import_internal27.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "MenuSeparator",
      options,
      id: create_fragment27.name
    });
  }
  get element() {
    throw new Error("<MenuSeparator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<MenuSeparator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MenuSeparator_default = MenuSeparator;

// src/message-box/MessageBox.svelte
var import_internal28 = __toESM(require_internal());
var import_svelte14 = __toESM(require_svelte());

// src/message-box/MessageBox.js
var import_store2 = __toESM(require_store());
var config = (0, import_store2.writable)({});
var MessageType = {
  INFO: "info",
  WARNING: "warning",
  ERROR: "error",
  DANGER: "error",
  SUCCESS: "success"
};
function showMessage(message, type = "", title = "", btnLabel = "OK", cb) {
  if (typeof message === "object")
    return config.set(message);
  const buttons = [{ label: btnLabel, value: btnLabel, type }];
  return config.set({ message, title, cb, type, buttons });
}

// src/message-box/MessageBox.svelte
var file23 = "src/message-box/MessageBox.svelte";
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function create_default_slot(ctx) {
  let icon;
  let t;
  let div1;
  let div0;
  let raw_value = (
    /*$config*/
    ctx[2].message + ""
  );
  let current;
  icon = new Icon_default({
    props: {
      name: (
        /*$config*/
        ctx[2].icon || /*$config*/
        ctx[2].type
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal28.create_component)(icon.$$.fragment);
      t = (0, import_internal28.space)();
      div1 = (0, import_internal28.element)("div");
      div0 = (0, import_internal28.element)("div");
      (0, import_internal28.attr_dev)(div0, "class", "message-content");
      (0, import_internal28.add_location)(div0, file23, 8, 3, 223);
      (0, import_internal28.attr_dev)(div1, "class", "message");
      (0, import_internal28.add_location)(div1, file23, 7, 2, 198);
    },
    m: function mount(target, anchor) {
      (0, import_internal28.mount_component)(icon, target, anchor);
      (0, import_internal28.insert_dev)(target, t, anchor);
      (0, import_internal28.insert_dev)(target, div1, anchor);
      (0, import_internal28.append_dev)(div1, div0);
      div0.innerHTML = raw_value;
      current = true;
    },
    p: function update(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*$config*/
      4)
        icon_changes.name = /*$config*/
        ctx2[2].icon || /*$config*/
        ctx2[2].type;
      icon.$set(icon_changes);
      if ((!current || dirty & /*$config*/
      4) && raw_value !== (raw_value = /*$config*/
      ctx2[2].message + ""))
        div0.innerHTML = raw_value;
      ;
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal28.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal28.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal28.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal28.detach_dev)(t);
      if (detaching)
        (0, import_internal28.detach_dev)(div1);
    }
  };
  (0, import_internal28.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: '(1:0) <Dialog  title=\\"{$config.title}\\"  class=\\"message-box message-{$config.type}\\"  bind:element=\\"{element}\\"  bind:this=\\"{dialog}\\"  on:close=\\"{onclose}\\">',
    ctx
  });
  return block;
}
function create_if_block12(ctx) {
  let each_1_anchor;
  let each_value = (
    /*$config*/
    ctx[2].buttons
  );
  (0, import_internal28.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = (0, import_internal28.empty)();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      (0, import_internal28.insert_dev)(target, each_1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$config, onclick*/
      12) {
        each_value = /*$config*/
        ctx2[2].buttons;
        (0, import_internal28.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      (0, import_internal28.destroy_each)(each_blocks, detaching);
      if (detaching)
        (0, import_internal28.detach_dev)(each_1_anchor);
    }
  };
  (0, import_internal28.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block12.name,
    type: "if",
    source: "(12:3) {#if $config.buttons}",
    ctx
  });
  return block;
}
function create_each_block5(ctx) {
  let button;
  let t_value = (
    /*button*/
    ctx[9].label + ""
  );
  let t;
  let button_class_value;
  let mounted;
  let dispose;
  function click_handler(...args) {
    return (
      /*click_handler*/
      ctx[5](
        /*button*/
        ctx[9],
        ...args
      )
    );
  }
  const block = {
    c: function create() {
      button = (0, import_internal28.element)("button");
      t = (0, import_internal28.text)(t_value);
      (0, import_internal28.attr_dev)(button, "class", button_class_value = "button button-normal button-has-text " + /*button*/
      (ctx[9].type || ""));
      (0, import_internal28.add_location)(button, file23, 13, 5, 381);
    },
    m: function mount(target, anchor) {
      (0, import_internal28.insert_dev)(target, button, anchor);
      (0, import_internal28.append_dev)(button, t);
      if (!mounted) {
        dispose = (0, import_internal28.listen_dev)(button, "click", click_handler, false, false, false, false);
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$config*/
      4 && t_value !== (t_value = /*button*/
      ctx[9].label + ""))
        (0, import_internal28.set_data_dev)(t, t_value);
      if (dirty & /*$config*/
      4 && button_class_value !== (button_class_value = "button button-normal button-has-text " + /*button*/
      (ctx[9].type || ""))) {
        (0, import_internal28.attr_dev)(button, "class", button_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal28.detach_dev)(button);
      mounted = false;
      dispose();
    }
  };
  (0, import_internal28.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block5.name,
    type: "each",
    source: "(13:4) {#each $config.buttons as button}",
    ctx
  });
  return block;
}
function create_footer_slot(ctx) {
  let div;
  let if_block = (
    /*$config*/
    ctx[2].buttons && create_if_block12(ctx)
  );
  const block = {
    c: function create() {
      div = (0, import_internal28.element)("div");
      if (if_block)
        if_block.c();
      (0, import_internal28.attr_dev)(div, "slot", "footer");
      (0, import_internal28.add_location)(div, file23, 10, 2, 293);
    },
    m: function mount(target, anchor) {
      (0, import_internal28.insert_dev)(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
    },
    p: function update(ctx2, dirty) {
      if (
        /*$config*/
        ctx2[2].buttons
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block12(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal28.detach_dev)(div);
      if (if_block)
        if_block.d();
    }
  };
  (0, import_internal28.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_footer_slot.name,
    type: "slot",
    source: "(11:2) ",
    ctx
  });
  return block;
}
function create_fragment28(ctx) {
  let dialog_1;
  let updating_element;
  let current;
  function dialog_1_element_binding(value2) {
    ctx[6](value2);
  }
  let dialog_1_props = {
    title: (
      /*$config*/
      ctx[2].title
    ),
    class: "message-box message-" + /*$config*/
    ctx[2].type,
    $$slots: {
      footer: [create_footer_slot],
      default: [create_default_slot]
    },
    $$scope: { ctx }
  };
  if (
    /*element*/
    ctx[0] !== void 0
  ) {
    dialog_1_props.element = /*element*/
    ctx[0];
  }
  dialog_1 = new Dialog_default({ props: dialog_1_props, $$inline: true });
  import_internal28.binding_callbacks.push(() => (0, import_internal28.bind)(dialog_1, "element", dialog_1_element_binding));
  ctx[7](dialog_1);
  dialog_1.$on(
    "close",
    /*onclose*/
    ctx[4]
  );
  const block = {
    c: function create() {
      (0, import_internal28.create_component)(dialog_1.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal28.mount_component)(dialog_1, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const dialog_1_changes = {};
      if (dirty & /*$config*/
      4)
        dialog_1_changes.title = /*$config*/
        ctx2[2].title;
      if (dirty & /*$config*/
      4)
        dialog_1_changes.class = "message-box message-" + /*$config*/
        ctx2[2].type;
      if (dirty & /*$$scope, $config*/
      4100) {
        dialog_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_element && dirty & /*element*/
      1) {
        updating_element = true;
        dialog_1_changes.element = /*element*/
        ctx2[0];
        (0, import_internal28.add_flush_callback)(() => updating_element = false);
      }
      dialog_1.$set(dialog_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal28.transition_in)(dialog_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal28.transition_out)(dialog_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[7](null);
      (0, import_internal28.destroy_component)(dialog_1, detaching);
    }
  };
  (0, import_internal28.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment28.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance28($$self2, $$props2, $$invalidate2) {
  let $config;
  (0, import_internal28.validate_store)(config, "config");
  (0, import_internal28.component_subscribe)($$self2, config, ($$value) => $$invalidate2(2, $config = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal28.validate_slots)("MessageBox", slots2, []);
  let { element: element41 = void 0 } = $$props2;
  let dialog, sub;
  (0, import_svelte14.onMount)(() => {
    sub = config.subscribe((cfg) => {
      if (!dialog)
        return;
      if (cfg && cfg.message)
        dialog.open();
      else
        dialog.close();
    });
  });
  (0, import_svelte14.onDestroy)(() => {
    sub();
    config.set({});
  });
  function onclick(e, button) {
    e.preventDefault();
    (0, import_internal28.set_store_value)(config, $config.result = button.value || button.label, $config);
    dialog.close();
  }
  function onclose2() {
    if (typeof $config.cb === "function")
      $config.cb($config.result);
    const target = $config.target || document.body;
    requestAnimationFrame(() => target.focus());
  }
  const writable_props = ["element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<MessageBox> was created with unknown prop '${key}'`);
  });
  const click_handler = (button, e) => onclick(e, button);
  function dialog_1_element_binding(value2) {
    element41 = value2;
    $$invalidate2(0, element41);
  }
  function dialog_1_binding($$value) {
    import_internal28.binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialog = $$value;
      $$invalidate2(1, dialog);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    onDestroy: import_svelte14.onDestroy,
    onMount: import_svelte14.onMount,
    config,
    Dialog: Dialog_default,
    Icon: Icon_default,
    element: element41,
    dialog,
    sub,
    onclick,
    onclose: onclose2,
    $config
  });
  $$self2.$inject_state = ($$props3) => {
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("dialog" in $$props3)
      $$invalidate2(1, dialog = $$props3.dialog);
    if ("sub" in $$props3)
      sub = $$props3.sub;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    element41,
    dialog,
    $config,
    onclick,
    onclose2,
    click_handler,
    dialog_1_element_binding,
    dialog_1_binding
  ];
}
var MessageBox = class extends import_internal28.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal28.init)(this, options, instance28, create_fragment28, import_internal28.safe_not_equal, { element: 0 });
    (0, import_internal28.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "MessageBox",
      options,
      id: create_fragment28.name
    });
  }
  get element() {
    throw new Error("<MessageBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<MessageBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MessageBox_default = MessageBox;

// src/panel/Panel.svelte
var import_internal29 = __toESM(require_internal());
var import_svelte15 = __toESM(require_svelte());
var file24 = "src/panel/Panel.svelte";
function create_if_block13(ctx) {
  let div;
  let raw_value = icons.chevronRight + "";
  const block = {
    c: function create() {
      div = (0, import_internal29.element)("div");
      (0, import_internal29.attr_dev)(div, "class", "chevron");
      (0, import_internal29.add_location)(div, file24, 13, 4, 319);
    },
    m: function mount(target, anchor) {
      (0, import_internal29.insert_dev)(target, div, anchor);
      div.innerHTML = raw_value;
    },
    p: import_internal29.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal29.detach_dev)(div);
    }
  };
  (0, import_internal29.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block13.name,
    type: "if",
    source: "(13:3) {#if collapsible}",
    ctx
  });
  return block;
}
function create_fragment29(ctx) {
  let div1;
  let details;
  let summary;
  let t0;
  let t1;
  let summary_inert_value;
  let t2;
  let div0;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*collapsible*/
    ctx[5] && create_if_block13(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[11].default
  );
  const default_slot = (0, import_internal29.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[10],
    null
  );
  const block = {
    c: function create() {
      div1 = (0, import_internal29.element)("div");
      details = (0, import_internal29.element)("details");
      summary = (0, import_internal29.element)("summary");
      t0 = (0, import_internal29.text)(
        /*title*/
        ctx[3]
      );
      t1 = (0, import_internal29.space)();
      if (if_block)
        if_block.c();
      t2 = (0, import_internal29.space)();
      div0 = (0, import_internal29.element)("div");
      if (default_slot)
        default_slot.c();
      (0, import_internal29.attr_dev)(summary, "class", "panel-header");
      summary.inert = summary_inert_value = !/*collapsible*/
      ctx[5];
      (0, import_internal29.add_location)(summary, file24, 10, 2, 206);
      (0, import_internal29.attr_dev)(div0, "class", "panel-content");
      (0, import_internal29.add_location)(div0, file24, 16, 2, 397);
      details.open = /*open*/
      ctx[0];
      (0, import_internal29.add_location)(details, file24, 9, 1, 142);
      (0, import_internal29.attr_dev)(div1, "class", div1_class_value = "panel " + /*className*/
      ctx[2]);
      div1.inert = /*disabled*/
      ctx[6];
      (0, import_internal29.toggle_class)(
        div1,
        "collapsible",
        /*collapsible*/
        ctx[5]
      );
      (0, import_internal29.toggle_class)(
        div1,
        "expanded",
        /*expanded*/
        ctx[9]
      );
      (0, import_internal29.toggle_class)(
        div1,
        "round",
        /*round*/
        ctx[4]
      );
      (0, import_internal29.toggle_class)(
        div1,
        "disabled",
        /*disabled*/
        ctx[6]
      );
      (0, import_internal29.add_location)(div1, file24, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal29.insert_dev)(target, div1, anchor);
      (0, import_internal29.append_dev)(div1, details);
      (0, import_internal29.append_dev)(details, summary);
      (0, import_internal29.append_dev)(summary, t0);
      (0, import_internal29.append_dev)(summary, t1);
      if (if_block)
        if_block.m(summary, null);
      ctx[12](summary);
      (0, import_internal29.append_dev)(details, t2);
      (0, import_internal29.append_dev)(details, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      ctx[13](div1);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal29.listen_dev)(
            details,
            "keydown",
            /*toggle*/
            ctx[7],
            false,
            false,
            false,
            false
          ),
          (0, import_internal29.listen_dev)(
            details,
            "click",
            /*toggle*/
            ctx[7],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (!current || dirty & /*title*/
      8)
        (0, import_internal29.set_data_dev)(
          t0,
          /*title*/
          ctx2[3]
        );
      if (
        /*collapsible*/
        ctx2[5]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block13(ctx2);
          if_block.c();
          if_block.m(summary, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (!current || dirty & /*collapsible*/
      32 && summary_inert_value !== (summary_inert_value = !/*collapsible*/
      ctx2[5])) {
        (0, import_internal29.prop_dev)(summary, "inert", summary_inert_value);
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1024)) {
          (0, import_internal29.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[10],
            !current ? (0, import_internal29.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[10]
            ) : (0, import_internal29.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[10],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*open*/
      1) {
        (0, import_internal29.prop_dev)(
          details,
          "open",
          /*open*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*className*/
      4 && div1_class_value !== (div1_class_value = "panel " + /*className*/
      ctx2[2])) {
        (0, import_internal29.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*disabled*/
      64) {
        (0, import_internal29.prop_dev)(
          div1,
          "inert",
          /*disabled*/
          ctx2[6]
        );
      }
      if (!current || dirty & /*className, collapsible*/
      36) {
        (0, import_internal29.toggle_class)(
          div1,
          "collapsible",
          /*collapsible*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*className, expanded*/
      516) {
        (0, import_internal29.toggle_class)(
          div1,
          "expanded",
          /*expanded*/
          ctx2[9]
        );
      }
      if (!current || dirty & /*className, round*/
      20) {
        (0, import_internal29.toggle_class)(
          div1,
          "round",
          /*round*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*className, disabled*/
      68) {
        (0, import_internal29.toggle_class)(
          div1,
          "disabled",
          /*disabled*/
          ctx2[6]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal29.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal29.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal29.detach_dev)(div1);
      if (if_block)
        if_block.d();
      ctx[12](null);
      if (default_slot)
        default_slot.d(detaching);
      ctx[13](null);
      mounted = false;
      (0, import_internal29.run_all)(dispose);
    }
  };
  (0, import_internal29.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment29.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance29($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal29.validate_slots)("Panel", slots2, ["default"]);
  const dispatch2 = (0, import_svelte15.createEventDispatcher)();
  let { class: className2 = "" } = $$props2;
  let { title = "" } = $$props2;
  let { open = false } = $$props2;
  let { round = false } = $$props2;
  let { collapsible = false } = $$props2;
  let { disabled: disabled2 = false } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let headerEl, expanded = open;
  const expandedProps = { height: 0 };
  const collapsedProps = { height: 0 };
  (0, import_svelte15.onMount)(calcHeights);
  function calcHeights() {
    const wasOpen = open;
    $$invalidate2(0, open = true);
    requestAnimationFrame(() => {
      if (!element41)
        return;
      const wrapCss = getComputedStyle(element41);
      const borderTop = parseInt(wrapCss.borderTopWidth || 0, 10);
      const borderBottom = parseInt(wrapCss.borderTopWidth || 0, 10);
      expandedProps.height = element41.getBoundingClientRect().height + "px";
      collapsedProps.height = headerEl.offsetHeight + borderTop + borderBottom + "px";
      $$invalidate2(0, open = wasOpen);
    });
  }
  function toggle(e) {
    if (!collapsible) {
      if (e.type === "click" || e.key === "Enter" || e.key === " ")
        e.preventDefault();
      return;
    }
    e ||= {
      target: null,
      type: "click",
      preventDefault: () => {
      }
    };
    const skipToggleOn = ["BUTTON", "INPUT", "A", "SELECT", "TEXTAREA"];
    if (e.target && skipToggleOn.includes(e.target.tagName))
      return;
    if (e.target && e.target.closest(".panel-content"))
      return;
    if (e.type === "keydown" && e.key !== " ")
      return;
    e.preventDefault();
    if (expanded) {
      $$invalidate2(9, expanded = false);
      animate(element41, expandedProps, collapsedProps).then(() => {
        $$invalidate2(0, open = expanded);
        dispatch2("close");
      });
    } else {
      $$invalidate2(9, expanded = true);
      $$invalidate2(0, open = true);
      animate(element41, collapsedProps, expandedProps).then(() => {
        dispatch2("open");
      });
    }
  }
  const writable_props = ["class", "title", "open", "round", "collapsible", "disabled", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Panel> was created with unknown prop '${key}'`);
  });
  function summary_binding($$value) {
    import_internal29.binding_callbacks[$$value ? "unshift" : "push"](() => {
      headerEl = $$value;
      $$invalidate2(8, headerEl);
    });
  }
  function div1_binding($$value) {
    import_internal29.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(2, className2 = $$props3.class);
    if ("title" in $$props3)
      $$invalidate2(3, title = $$props3.title);
    if ("open" in $$props3)
      $$invalidate2(0, open = $$props3.open);
    if ("round" in $$props3)
      $$invalidate2(4, round = $$props3.round);
    if ("collapsible" in $$props3)
      $$invalidate2(5, collapsible = $$props3.collapsible);
    if ("disabled" in $$props3)
      $$invalidate2(6, disabled2 = $$props3.disabled);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("$$scope" in $$props3)
      $$invalidate2(10, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte15.createEventDispatcher,
    onMount: import_svelte15.onMount,
    icons,
    animate,
    dispatch: dispatch2,
    className: className2,
    title,
    open,
    round,
    collapsible,
    disabled: disabled2,
    element: element41,
    headerEl,
    expanded,
    expandedProps,
    collapsedProps,
    calcHeights,
    toggle
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(2, className2 = $$props3.className);
    if ("title" in $$props3)
      $$invalidate2(3, title = $$props3.title);
    if ("open" in $$props3)
      $$invalidate2(0, open = $$props3.open);
    if ("round" in $$props3)
      $$invalidate2(4, round = $$props3.round);
    if ("collapsible" in $$props3)
      $$invalidate2(5, collapsible = $$props3.collapsible);
    if ("disabled" in $$props3)
      $$invalidate2(6, disabled2 = $$props3.disabled);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("headerEl" in $$props3)
      $$invalidate2(8, headerEl = $$props3.headerEl);
    if ("expanded" in $$props3)
      $$invalidate2(9, expanded = $$props3.expanded);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    open,
    element41,
    className2,
    title,
    round,
    collapsible,
    disabled2,
    toggle,
    headerEl,
    expanded,
    $$scope2,
    slots2,
    summary_binding,
    div1_binding
  ];
}
var Panel = class extends import_internal29.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal29.init)(this, options, instance29, create_fragment29, import_internal29.safe_not_equal, {
      class: 2,
      title: 3,
      open: 0,
      round: 4,
      collapsible: 5,
      disabled: 6,
      element: 1,
      toggle: 7
    });
    (0, import_internal29.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Panel",
      options,
      id: create_fragment29.name
    });
  }
  get class() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get open() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set open(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get collapsible() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set collapsible(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get toggle() {
    return this.$$.ctx[7];
  }
  set toggle(value2) {
    throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Panel_default = Panel;

// src/push-button/PushButton.svelte
var import_internal30 = __toESM(require_internal());
var import_svelte16 = __toESM(require_svelte());
function create_else_block2(ctx) {
  let button;
  let updating_element;
  let current;
  const button_spread_levels = [
    {
      class: "push-button " + /*className*/
      ctx[2]
    },
    { "aria-pressed": (
      /*pressed*/
      ctx[0]
    ) },
    /*props*/
    ctx[10],
    { outline: (
      /*outline*/
      ctx[7]
    ) },
    { info: (
      /*info*/
      ctx[3]
    ) },
    { success: (
      /*success*/
      ctx[4]
    ) },
    { warning: (
      /*warning*/
      ctx[5]
    ) },
    { danger: (
      /*danger*/
      ctx[6]
    ) },
    { round: (
      /*round*/
      ctx[9]
    ) },
    { icon: (
      /*icon*/
      ctx[8]
    ) }
  ];
  function button_element_binding_1(value2) {
    ctx[16](value2);
  }
  let button_props = {};
  for (let i = 0; i < button_spread_levels.length; i += 1) {
    button_props = (0, import_internal30.assign)(button_props, button_spread_levels[i]);
  }
  if (
    /*element*/
    ctx[1] !== void 0
  ) {
    button_props.element = /*element*/
    ctx[1];
  }
  button = new Button_default({ props: button_props, $$inline: true });
  import_internal30.binding_callbacks.push(() => (0, import_internal30.bind)(button, "element", button_element_binding_1));
  button.$on(
    "keydown",
    /*onKeydown*/
    ctx[11]
  );
  button.$on(
    "mousedown",
    /*onMouseDown*/
    ctx[12]
  );
  const block = {
    c: function create() {
      (0, import_internal30.create_component)(button.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal30.mount_component)(button, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = dirty & /*className, pressed, props, outline, info, success, warning, danger, round, icon*/
      2045 ? (0, import_internal30.get_spread_update)(button_spread_levels, [
        dirty & /*className*/
        4 && {
          class: "push-button " + /*className*/
          ctx2[2]
        },
        dirty & /*pressed*/
        1 && { "aria-pressed": (
          /*pressed*/
          ctx2[0]
        ) },
        dirty & /*props*/
        1024 && (0, import_internal30.get_spread_object)(
          /*props*/
          ctx2[10]
        ),
        dirty & /*outline*/
        128 && { outline: (
          /*outline*/
          ctx2[7]
        ) },
        dirty & /*info*/
        8 && { info: (
          /*info*/
          ctx2[3]
        ) },
        dirty & /*success*/
        16 && { success: (
          /*success*/
          ctx2[4]
        ) },
        dirty & /*warning*/
        32 && { warning: (
          /*warning*/
          ctx2[5]
        ) },
        dirty & /*danger*/
        64 && { danger: (
          /*danger*/
          ctx2[6]
        ) },
        dirty & /*round*/
        512 && { round: (
          /*round*/
          ctx2[9]
        ) },
        dirty & /*icon*/
        256 && { icon: (
          /*icon*/
          ctx2[8]
        ) }
      ]) : {};
      if (!updating_element && dirty & /*element*/
      2) {
        updating_element = true;
        button_changes.element = /*element*/
        ctx2[1];
        (0, import_internal30.add_flush_callback)(() => updating_element = false);
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal30.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal30.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal30.destroy_component)(button, detaching);
    }
  };
  (0, import_internal30.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_else_block2.name,
    type: "else",
    source: "(18:0) {:else}",
    ctx
  });
  return block;
}
function create_if_block14(ctx) {
  let button;
  let updating_element;
  let current;
  const button_spread_levels = [
    {
      class: "push-button " + /*className*/
      ctx[2]
    },
    { "aria-pressed": (
      /*pressed*/
      ctx[0]
    ) },
    /*props*/
    ctx[10],
    { outline: (
      /*outline*/
      ctx[7]
    ) },
    { info: (
      /*info*/
      ctx[3]
    ) },
    { success: (
      /*success*/
      ctx[4]
    ) },
    { warning: (
      /*warning*/
      ctx[5]
    ) },
    { danger: (
      /*danger*/
      ctx[6]
    ) },
    { round: (
      /*round*/
      ctx[9]
    ) },
    { icon: (
      /*icon*/
      ctx[8]
    ) }
  ];
  function button_element_binding(value2) {
    ctx[15](value2);
  }
  let button_props = {
    $$slots: { default: [create_default_slot2] },
    $$scope: { ctx }
  };
  for (let i = 0; i < button_spread_levels.length; i += 1) {
    button_props = (0, import_internal30.assign)(button_props, button_spread_levels[i]);
  }
  if (
    /*element*/
    ctx[1] !== void 0
  ) {
    button_props.element = /*element*/
    ctx[1];
  }
  button = new Button_default({ props: button_props, $$inline: true });
  import_internal30.binding_callbacks.push(() => (0, import_internal30.bind)(button, "element", button_element_binding));
  button.$on(
    "keydown",
    /*onKeydown*/
    ctx[11]
  );
  button.$on(
    "mousedown",
    /*onMouseDown*/
    ctx[12]
  );
  const block = {
    c: function create() {
      (0, import_internal30.create_component)(button.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal30.mount_component)(button, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = dirty & /*className, pressed, props, outline, info, success, warning, danger, round, icon*/
      2045 ? (0, import_internal30.get_spread_update)(button_spread_levels, [
        dirty & /*className*/
        4 && {
          class: "push-button " + /*className*/
          ctx2[2]
        },
        dirty & /*pressed*/
        1 && { "aria-pressed": (
          /*pressed*/
          ctx2[0]
        ) },
        dirty & /*props*/
        1024 && (0, import_internal30.get_spread_object)(
          /*props*/
          ctx2[10]
        ),
        dirty & /*outline*/
        128 && { outline: (
          /*outline*/
          ctx2[7]
        ) },
        dirty & /*info*/
        8 && { info: (
          /*info*/
          ctx2[3]
        ) },
        dirty & /*success*/
        16 && { success: (
          /*success*/
          ctx2[4]
        ) },
        dirty & /*warning*/
        32 && { warning: (
          /*warning*/
          ctx2[5]
        ) },
        dirty & /*danger*/
        64 && { danger: (
          /*danger*/
          ctx2[6]
        ) },
        dirty & /*round*/
        512 && { round: (
          /*round*/
          ctx2[9]
        ) },
        dirty & /*icon*/
        256 && { icon: (
          /*icon*/
          ctx2[8]
        ) }
      ]) : {};
      if (dirty & /*$$scope*/
      131072) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_element && dirty & /*element*/
      2) {
        updating_element = true;
        button_changes.element = /*element*/
        ctx2[1];
        (0, import_internal30.add_flush_callback)(() => updating_element = false);
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal30.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal30.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal30.destroy_component)(button, detaching);
    }
  };
  (0, import_internal30.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block14.name,
    type: "if",
    source: "(1:0) {#if $$slots.default}",
    ctx
  });
  return block;
}
function create_default_slot2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = (0, import_internal30.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[17],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        131072)) {
          (0, import_internal30.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[17],
            !current ? (0, import_internal30.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[17]
            ) : (0, import_internal30.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[17],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal30.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal30.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  (0, import_internal30.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot2.name,
    type: "slot",
    source: '(2:1) <Button   class=\\"push-button {className}\\"   aria-pressed=\\"{pressed}\\"   {...props}   {outline}   {info}   {success}   {warning}   {danger}   {round}   {icon}   bind:element=\\"{element}\\"   on:keydown=\\"{onKeydown}\\"   on:mousedown=\\"{onMouseDown}\\">',
    ctx
  });
  return block;
}
function create_fragment30(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block14, create_else_block2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$$slots*/
      ctx2[13].default
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = (0, import_internal30.empty)();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      (0, import_internal30.insert_dev)(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        (0, import_internal30.group_outros)();
        (0, import_internal30.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0, import_internal30.check_outros)();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        (0, import_internal30.transition_in)(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal30.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal30.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        (0, import_internal30.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal30.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment30.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance30($$self2, $$props2, $$invalidate2) {
  let props2;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal30.validate_slots)("PushButton", slots2, ["default"]);
  const $$slots = (0, import_internal30.compute_slots)(slots2);
  let { class: className2 = "" } = $$props2;
  let { pressed = false } = $$props2;
  let { info: info2 = false } = $$props2;
  let { success = false } = $$props2;
  let { warning = false } = $$props2;
  let { danger = false } = $$props2;
  let { outline = false } = $$props2;
  let { icon = void 0 } = $$props2;
  let { round = void 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte16.createEventDispatcher)();
  function onKeydown2(e) {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      $$invalidate2(0, pressed = !pressed);
      dispatch2("change", { ...e, pressed });
    }
  }
  function onMouseDown(e) {
    $$invalidate2(0, pressed = !pressed);
    dispatch2("change", { ...e, pressed });
  }
  function button_element_binding(value2) {
    element41 = value2;
    $$invalidate2(1, element41);
  }
  function button_element_binding_1(value2) {
    element41 = value2;
    $$invalidate2(1, element41);
  }
  $$self2.$$set = ($$new_props) => {
    $$invalidate2(19, $$props2 = (0, import_internal30.assign)((0, import_internal30.assign)({}, $$props2), (0, import_internal30.exclude_internal_props)($$new_props)));
    if ("class" in $$new_props)
      $$invalidate2(2, className2 = $$new_props.class);
    if ("pressed" in $$new_props)
      $$invalidate2(0, pressed = $$new_props.pressed);
    if ("info" in $$new_props)
      $$invalidate2(3, info2 = $$new_props.info);
    if ("success" in $$new_props)
      $$invalidate2(4, success = $$new_props.success);
    if ("warning" in $$new_props)
      $$invalidate2(5, warning = $$new_props.warning);
    if ("danger" in $$new_props)
      $$invalidate2(6, danger = $$new_props.danger);
    if ("outline" in $$new_props)
      $$invalidate2(7, outline = $$new_props.outline);
    if ("icon" in $$new_props)
      $$invalidate2(8, icon = $$new_props.icon);
    if ("round" in $$new_props)
      $$invalidate2(9, round = $$new_props.round);
    if ("element" in $$new_props)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("$$scope" in $$new_props)
      $$invalidate2(17, $$scope2 = $$new_props.$$scope);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte16.createEventDispatcher,
    Button: Button_default,
    pluck,
    className: className2,
    pressed,
    info: info2,
    success,
    warning,
    danger,
    outline,
    icon,
    round,
    element: element41,
    dispatch: dispatch2,
    onKeydown: onKeydown2,
    onMouseDown,
    props: props2
  });
  $$self2.$inject_state = ($$new_props) => {
    $$invalidate2(19, $$props2 = (0, import_internal30.assign)((0, import_internal30.assign)({}, $$props2), $$new_props));
    if ("className" in $$props2)
      $$invalidate2(2, className2 = $$new_props.className);
    if ("pressed" in $$props2)
      $$invalidate2(0, pressed = $$new_props.pressed);
    if ("info" in $$props2)
      $$invalidate2(3, info2 = $$new_props.info);
    if ("success" in $$props2)
      $$invalidate2(4, success = $$new_props.success);
    if ("warning" in $$props2)
      $$invalidate2(5, warning = $$new_props.warning);
    if ("danger" in $$props2)
      $$invalidate2(6, danger = $$new_props.danger);
    if ("outline" in $$props2)
      $$invalidate2(7, outline = $$new_props.outline);
    if ("icon" in $$props2)
      $$invalidate2(8, icon = $$new_props.icon);
    if ("round" in $$props2)
      $$invalidate2(9, round = $$new_props.round);
    if ("element" in $$props2)
      $$invalidate2(1, element41 = $$new_props.element);
    if ("props" in $$props2)
      $$invalidate2(10, props2 = $$new_props.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    $:
      $$invalidate2(10, props2 = pluck($$props2, ["id", "title", "disabled"]));
  };
  $$props2 = (0, import_internal30.exclude_internal_props)($$props2);
  return [
    pressed,
    element41,
    className2,
    info2,
    success,
    warning,
    danger,
    outline,
    icon,
    round,
    props2,
    onKeydown2,
    onMouseDown,
    $$slots,
    slots2,
    button_element_binding,
    button_element_binding_1,
    $$scope2
  ];
}
var PushButton = class extends import_internal30.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal30.init)(this, options, instance30, create_fragment30, import_internal30.safe_not_equal, {
      class: 2,
      pressed: 0,
      info: 3,
      success: 4,
      warning: 5,
      danger: 6,
      outline: 7,
      icon: 8,
      round: 9,
      element: 1
    });
    (0, import_internal30.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "PushButton",
      options,
      id: create_fragment30.name
    });
  }
  get class() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get pressed() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set pressed(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get success() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set success(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get warning() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set warning(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get danger() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set danger(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get outline() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set outline(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get icon() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set icon(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<PushButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<PushButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var PushButton_default = PushButton;

// src/splitter/Splitter.svelte
var import_internal31 = __toESM(require_internal());
var import_svelte17 = __toESM(require_svelte());
var file25 = "src/splitter/Splitter.svelte";
function create_fragment31(ctx) {
  let div;
  let div_class_value;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = (0, import_internal31.element)("div");
      (0, import_internal31.attr_dev)(div, "class", div_class_value = "splitter " + /*className*/
      ctx[1]);
      (0, import_internal31.toggle_class)(
        div,
        "vertical",
        /*isVertical*/
        ctx[2]
      );
      (0, import_internal31.toggle_class)(
        div,
        "is-dragging",
        /*isDragging*/
        ctx[3]
      );
      (0, import_internal31.add_location)(div, file25, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal31.insert_dev)(target, div, anchor);
      ctx[9](div);
      if (!mounted) {
        dispose = (0, import_internal31.listen_dev)(
          div,
          "mousedown",
          /*mousedown*/
          ctx[4],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*className*/
      2 && div_class_value !== (div_class_value = "splitter " + /*className*/
      ctx2[1])) {
        (0, import_internal31.attr_dev)(div, "class", div_class_value);
      }
      if (dirty & /*className, isVertical*/
      6) {
        (0, import_internal31.toggle_class)(
          div,
          "vertical",
          /*isVertical*/
          ctx2[2]
        );
      }
      if (dirty & /*className, isDragging*/
      10) {
        (0, import_internal31.toggle_class)(
          div,
          "is-dragging",
          /*isDragging*/
          ctx2[3]
        );
      }
    },
    i: import_internal31.noop,
    o: import_internal31.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal31.detach_dev)(div);
      ctx[9](null);
      mounted = false;
      dispose();
    }
  };
  (0, import_internal31.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment31.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance31($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal31.validate_slots)("Splitter", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  const dispatch2 = (0, import_svelte17.createEventDispatcher)();
  const size = 8, halfsize = size / 2;
  const Box = {};
  let isVertical = false;
  let parentEl, targetEl;
  let initialTargetBox, startX2, startY2;
  let mousedownTargetBox;
  let isDragging = false, bodyCursor;
  (0, import_svelte17.onMount)(() => {
    requestAnimationFrame(init75);
  });
  function toggle() {
    setSize(Box.collapsed ? "max" : "min", true);
  }
  function collapse() {
    setSize("min", true);
  }
  function expand() {
    setSize("max", true);
  }
  function setSize(to, withAnimation = false) {
    const prop = isVertical ? "height" : "width";
    const Prop = isVertical ? "Height" : "Width";
    const box = {};
    if (!to || to === "default")
      box[prop] = initialTargetBox[prop];
    if (to === "min")
      box[prop] = initialTargetBox["min" + Prop];
    else if (to === "max")
      box[prop] = initialTargetBox["max" + Prop];
    else if (typeof to === "number")
      box[prop] = to;
    updateSize(box, withAnimation);
  }
  function init75() {
    targetEl = element41.previousElementSibling;
    parentEl = element41.parentElement;
    $$invalidate2(2, isVertical = getFlexFlow(parentEl) === "column");
    initialTargetBox = targetEl.getBoundingClientRect();
    if (isVertical) {
      initialTargetBox.minHeight = minHeight(targetEl);
      initialTargetBox.maxHeight = Math.min(innerHeight(element41.parentElement), maxHeight(targetEl));
    } else {
      initialTargetBox.minWidth = minWidth(targetEl);
      initialTargetBox.maxWidth = Math.min(innerWidth(element41.parentElement), maxWidth(targetEl));
    }
    updateSize(initialTargetBox);
    targetEl.style.flex = "unset";
    targetEl.style.overflow = "auto";
    if (isVertical)
      $$invalidate2(0, element41.style.height = size + "px", element41);
    else
      $$invalidate2(0, element41.style.width = size + "px", element41);
    if (element41 && element41.nextElementSibling)
      $$invalidate2(0, element41.nextElementSibling.style.overflow = "auto", element41);
  }
  function updateSize(box, withAnimation = false) {
    let originalTargetTransition, originalElTransition;
    if (withAnimation) {
      originalTargetTransition = targetEl.style.transition;
      originalElTransition = element41.style.transition;
      const anim = ANIMATION_SPEED + "ms ease-out";
      targetEl.style.transition = `width ${anim}, height ${anim}`;
      $$invalidate2(0, element41.style.transition = `left ${anim}, top ${anim}`, element41);
    }
    if (isVertical) {
      targetEl.style.height = box.height + "px";
      $$invalidate2(0, element41.style.top = box.height - halfsize + "px", element41);
      const collapsed = initialTargetBox.minHeight === box.height;
      Box.height = box.height;
      Box.collapsed = collapsed;
      dispatch2("change", Box);
    } else {
      targetEl.style.width = box.width + "px";
      $$invalidate2(0, element41.style.left = box.width - halfsize + "px", element41);
      const collapsed = initialTargetBox.minWidth === box.width;
      Box.width = box.width;
      Box.collapsed = collapsed;
      dispatch2("change", Box);
    }
    if (withAnimation) {
      setTimeout(
        () => {
          targetEl.style.transition = originalTargetTransition;
          $$invalidate2(0, element41.style.transition = originalElTransition, element41);
          dispatch2("changed", Box);
        },
        ANIMATION_SPEED
      );
    }
  }
  function mousedown(e) {
    if (isDragging)
      return;
    $$invalidate2(3, isDragging = true);
    e.preventDefault();
    document.addEventListener("mouseup", mouseup);
    document.addEventListener("mousemove", mousemove);
    bodyCursor = document.body.style.cursor;
    document.body.style.cursor = (isVertical ? "ns" : "ew") + "-resize";
    if (isVertical)
      startY2 = getMouseY(e);
    else
      startX2 = getMouseX(e);
    mousedownTargetBox = targetEl.getBoundingClientRect();
    updateSize(mousedownTargetBox);
  }
  function mousemove(e) {
    e.preventDefault();
    e.stopPropagation();
    if (isVertical) {
      let height = mousedownTargetBox.height + getMouseY(e) - startY2;
      if (height < initialTargetBox.minHeight)
        height = initialTargetBox.minHeight;
      if (height > initialTargetBox.maxHeight)
        height = initialTargetBox.maxHeight;
      updateSize({ height });
    } else {
      let width = mousedownTargetBox.width + getMouseX(e) - startX2;
      if (width < initialTargetBox.minWidth)
        width = initialTargetBox.minWidth;
      if (width > initialTargetBox.maxWidth)
        width = initialTargetBox.maxWidth;
      updateSize({ width });
    }
  }
  function mouseup() {
    if (!isDragging)
      return;
    $$invalidate2(3, isDragging = false);
    document.removeEventListener("mouseup", mouseup);
    document.removeEventListener("mousemove", mousemove);
    document.body.style.cursor = bodyCursor;
    dispatch2("changed", Box);
  }
  const writable_props = ["class", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Splitter> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    import_internal31.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    onMount: import_svelte17.onMount,
    createEventDispatcher: import_svelte17.createEventDispatcher,
    getMouseX,
    getMouseY,
    innerWidth,
    innerHeight,
    ANIMATION_SPEED,
    minHeight,
    minWidth,
    getFlexFlow,
    maxHeight,
    maxWidth,
    className: className2,
    element: element41,
    dispatch: dispatch2,
    size,
    halfsize,
    Box,
    isVertical,
    parentEl,
    targetEl,
    initialTargetBox,
    startX: startX2,
    startY: startY2,
    mousedownTargetBox,
    isDragging,
    bodyCursor,
    toggle,
    collapse,
    expand,
    setSize,
    init: init75,
    updateSize,
    mousedown,
    mousemove,
    mouseup
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("isVertical" in $$props3)
      $$invalidate2(2, isVertical = $$props3.isVertical);
    if ("parentEl" in $$props3)
      parentEl = $$props3.parentEl;
    if ("targetEl" in $$props3)
      targetEl = $$props3.targetEl;
    if ("initialTargetBox" in $$props3)
      initialTargetBox = $$props3.initialTargetBox;
    if ("startX" in $$props3)
      startX2 = $$props3.startX;
    if ("startY" in $$props3)
      startY2 = $$props3.startY;
    if ("mousedownTargetBox" in $$props3)
      mousedownTargetBox = $$props3.mousedownTargetBox;
    if ("isDragging" in $$props3)
      $$invalidate2(3, isDragging = $$props3.isDragging);
    if ("bodyCursor" in $$props3)
      bodyCursor = $$props3.bodyCursor;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    element41,
    className2,
    isVertical,
    isDragging,
    mousedown,
    toggle,
    collapse,
    expand,
    setSize,
    div_binding
  ];
}
var Splitter = class extends import_internal31.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal31.init)(this, options, instance31, create_fragment31, import_internal31.safe_not_equal, {
      class: 1,
      element: 0,
      toggle: 5,
      collapse: 6,
      expand: 7,
      setSize: 8
    });
    (0, import_internal31.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Splitter",
      options,
      id: create_fragment31.name
    });
  }
  get class() {
    throw new Error("<Splitter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Splitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Splitter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Splitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get toggle() {
    return this.$$.ctx[5];
  }
  set toggle(value2) {
    throw new Error("<Splitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get collapse() {
    return this.$$.ctx[6];
  }
  set collapse(value2) {
    throw new Error("<Splitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get expand() {
    return this.$$.ctx[7];
  }
  set expand(value2) {
    throw new Error("<Splitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setSize() {
    return this.$$.ctx[8];
  }
  set setSize(value2) {
    throw new Error("<Splitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Splitter_default = Splitter;

// src/table/Table.svelte
var import_internal32 = __toESM(require_internal());
var import_svelte18 = __toESM(require_svelte());
var { Object: Object_12 } = import_internal32.globals;
var file26 = "src/table/Table.svelte";
function create_fragment32(ctx) {
  let div;
  let table;
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[14].default
  );
  const default_slot = (0, import_internal32.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    null
  );
  const block = {
    c: function create() {
      div = (0, import_internal32.element)("div");
      table = (0, import_internal32.element)("table");
      if (default_slot)
        default_slot.c();
      (0, import_internal32.add_location)(table, file26, 10, 1, 211);
      (0, import_internal32.attr_dev)(div, "class", div_class_value = "table " + /*className*/
      ctx[1]);
      (0, import_internal32.toggle_class)(
        div,
        "round",
        /*round*/
        ctx[2]
      );
      (0, import_internal32.toggle_class)(
        div,
        "selectable",
        /*_selectable*/
        ctx[3]
      );
      (0, import_internal32.add_location)(div, file26, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal32.insert_dev)(target, div, anchor);
      (0, import_internal32.append_dev)(div, table);
      if (default_slot) {
        default_slot.m(table, null);
      }
      ctx[15](div);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal32.listen_dev)(
            div,
            "click",
            /*onClick*/
            ctx[5],
            false,
            false,
            false,
            false
          ),
          (0, import_internal32.listen_dev)(
            div,
            "focus",
            /*onFocus*/
            ctx[4],
            true,
            false,
            false,
            false
          ),
          (0, import_internal32.listen_dev)(
            div,
            "keydown",
            /*onKeyDown*/
            ctx[7],
            false,
            false,
            false,
            false
          ),
          (0, import_internal32.listen_dev)(
            div,
            "dblclick",
            /*onDblClick*/
            ctx[6],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          (0, import_internal32.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? (0, import_internal32.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[13]
            ) : (0, import_internal32.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = "table " + /*className*/
      ctx2[1])) {
        (0, import_internal32.attr_dev)(div, "class", div_class_value);
      }
      if (!current || dirty & /*className, round*/
      6) {
        (0, import_internal32.toggle_class)(
          div,
          "round",
          /*round*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*className, _selectable*/
      10) {
        (0, import_internal32.toggle_class)(
          div,
          "selectable",
          /*_selectable*/
          ctx2[3]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal32.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal32.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal32.detach_dev)(div);
      if (default_slot)
        default_slot.d(detaching);
      ctx[15](null);
      mounted = false;
      (0, import_internal32.run_all)(dispose);
    }
  };
  (0, import_internal32.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment32.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function shouldSkipNav(e) {
  if (!e || !e.target || e.target === document)
    return false;
  const skipEventFor = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
  if (skipEventFor.includes(e.target.tagName))
    return true;
  if (e.target.closest(".dialog,.drawer"))
    return true;
  return false;
}
function instance32($$self2, $$props2, $$invalidate2) {
  let _selectable;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal32.validate_slots)("Table", slots2, ["default"]);
  const dispatch2 = (0, import_svelte18.createEventDispatcher)();
  let { class: className2 = "" } = $$props2;
  let { selectable = true } = $$props2;
  let { round = false } = $$props2;
  let { scrollContainer = void 0 } = $$props2;
  let { scrollCorrectionOffset = 0 } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let { rowSelector = "tbody tr" } = $$props2;
  let { data = {} } = $$props2;
  let selectedIdx = -1;
  let headerHeight = 0;
  let clickTimer;
  let previousKey;
  (0, import_svelte18.onMount)(() => {
    Object.assign(element41.dataset, data);
    if (_selectable) {
      makeRowsSelectable();
      requestAnimationFrame(() => {
        const head = element41 && element41.querySelector("thead");
        if (head)
          headerHeight = head.offsetHeight;
      });
    }
  });
  (0, import_svelte18.onDestroy)(() => {
    if (_selectable)
      makeRowsNotSelectable();
  });
  function getSelectableItems(getFromAllTables = true) {
    const rootEl = getFromAllTables ? element41.parentNode : element41;
    const rows = rootEl.querySelectorAll(`.table ${rowSelector}`);
    if (rows && rows.length)
      return Array.from(rows);
    return [];
  }
  function makeRowsSelectable() {
    getSelectableItems(false).forEach((item) => item.setAttribute("tabindex", 0));
  }
  function makeRowsNotSelectable() {
    getSelectableItems(false).forEach((item) => item.removeAttribute("tabindex"));
  }
  function selectPrev(skipEvent = false) {
    const rows = getSelectableItems();
    if (selectedIdx <= 0)
      return;
    selectedIdx -= 1;
    const rowEl = rows[selectedIdx];
    rowEl.focus();
    if (!skipEvent)
      dispatch2("select", { selectedItem: rowEl });
  }
  function selectNext(skipEvent = false) {
    const rows = getSelectableItems();
    if (selectedIdx >= rows.length - 1)
      return;
    selectedIdx += 1;
    const rowEl = rows[selectedIdx];
    rowEl.focus();
    if (!skipEvent)
      dispatch2("select", { selectedItem: rowEl });
  }
  function getScrollContainer() {
    let scrlCont;
    if (scrollContainer) {
      if (typeof scrollContainer === "string")
        scrlCont = element41.closest(scrollContainer);
      else
        scrlCont = scrollContainer;
    }
    return scrlCont || element41;
  }
  function selectClicked(skipEvent = false) {
    const rows = getSelectableItems();
    const rowEl = rows[selectedIdx];
    if (!rowEl)
      return;
    if (rowEl != document.activeElement)
      rowEl.focus();
    const scrlCont = getScrollContainer();
    if (!scrlCont || !scrlCont.scrollTo)
      return;
    const topMargin = scrlCont === element41 ? 0 : element41.offsetTop;
    let top = rowEl.offsetTop - headerHeight + topMargin + parseFloat(scrollCorrectionOffset);
    if (scrlCont.scrollTop > top)
      scrlCont.scrollTo({ top: Math.round(top) });
    else {
      const paddingBottom = 4;
      top = rowEl.offsetTop + rowEl.offsetHeight - scrlCont.offsetHeight + headerHeight + topMargin + parseFloat(scrollCorrectionOffset) + paddingBottom;
      if (scrlCont.scrollTop < top)
        scrlCont.scrollTo({ top: Math.round(top) });
    }
    if (!skipEvent)
      dispatch2("select", { selectedItem: rowEl });
  }
  function selectFocusedRow(rowEl) {
    if (!rowEl)
      return;
    const rows = getSelectableItems();
    selectedIdx = rows.findIndex((item) => item === rowEl);
    selectClicked(true);
  }
  function onFocus2(e) {
    if (!_selectable)
      return;
    if (!element41.contains(e.target))
      return;
    if (!e || !e.target || shouldSkipNav(e))
      return;
    if (e.target === document)
      return;
    if (!e.target.matches(rowSelector))
      return;
    const rowEl = e.target.closest(rowSelector);
    if (rowEl) {
      selectFocusedRow(rowEl);
      dispatch2("click", { event: e, selectedItem: rowEl });
    }
  }
  function onClick(e) {
    if (!element41.contains(e.target))
      return;
    if (shouldSkipNav(e))
      return;
    if (clickTimer)
      clearTimeout(clickTimer);
    clickTimer = setTimeout(() => dispatch2("select", { event: e, selectedItem: rowEl }), 300);
    const rowEl = e.target.closest(rowSelector);
    if (rowEl) {
      selectFocusedRow(rowEl);
      dispatch2("click", { event: e, selectedItem: rowEl });
    }
  }
  function onDblClick(e) {
    if (!_selectable)
      return;
    if (!element41.contains(e.target))
      return;
    if (shouldSkipNav(e))
      return;
    if (clickTimer)
      clearTimeout(clickTimer);
    onClick(e);
    requestAnimationFrame(() => {
      const selectedItem = getSelectableItems()[selectedIdx];
      dispatch2("dblclick", { event: e, selectedItem });
    });
  }
  function onKeyDown(e) {
    if (!_selectable)
      return;
    if (!element41.contains(e.target))
      return;
    if (shouldSkipNav(e))
      return;
    if (e.key === "ArrowUp" || e.key === "k") {
      e.preventDefault();
      selectPrev();
    }
    if (e.key === "ArrowDown" || e.key === "j") {
      e.preventDefault();
      selectNext();
    }
    if (e.key === "ArrowLeft" || e.key === "g" && previousKey === "g") {
      e.preventDefault();
      selectedIdx = -1;
      selectNext();
    }
    if (e.key === "ArrowRight" || e.key === "G") {
      e.preventDefault();
      const rows = getSelectableItems();
      selectedIdx = rows && rows.length - 2;
      selectNext();
    }
    previousKey = e.key;
    const selectedItem = getSelectableItems()[selectedIdx];
    dispatch2("keydown", { event: e, key: e.key, selectedItem });
  }
  const writable_props = [
    "class",
    "selectable",
    "round",
    "scrollContainer",
    "scrollCorrectionOffset",
    "element",
    "rowSelector",
    "data"
  ];
  Object_12.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Table> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    import_internal32.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("selectable" in $$props3)
      $$invalidate2(8, selectable = $$props3.selectable);
    if ("round" in $$props3)
      $$invalidate2(2, round = $$props3.round);
    if ("scrollContainer" in $$props3)
      $$invalidate2(9, scrollContainer = $$props3.scrollContainer);
    if ("scrollCorrectionOffset" in $$props3)
      $$invalidate2(10, scrollCorrectionOffset = $$props3.scrollCorrectionOffset);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("rowSelector" in $$props3)
      $$invalidate2(11, rowSelector = $$props3.rowSelector);
    if ("data" in $$props3)
      $$invalidate2(12, data = $$props3.data);
    if ("$$scope" in $$props3)
      $$invalidate2(13, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({
    onDestroy: import_svelte18.onDestroy,
    onMount: import_svelte18.onMount,
    createEventDispatcher: import_svelte18.createEventDispatcher,
    dispatch: dispatch2,
    className: className2,
    selectable,
    round,
    scrollContainer,
    scrollCorrectionOffset,
    element: element41,
    rowSelector,
    data,
    selectedIdx,
    headerHeight,
    clickTimer,
    previousKey,
    getSelectableItems,
    makeRowsSelectable,
    makeRowsNotSelectable,
    selectPrev,
    selectNext,
    getScrollContainer,
    selectClicked,
    selectFocusedRow,
    onFocus: onFocus2,
    onClick,
    onDblClick,
    onKeyDown,
    shouldSkipNav,
    _selectable
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("selectable" in $$props3)
      $$invalidate2(8, selectable = $$props3.selectable);
    if ("round" in $$props3)
      $$invalidate2(2, round = $$props3.round);
    if ("scrollContainer" in $$props3)
      $$invalidate2(9, scrollContainer = $$props3.scrollContainer);
    if ("scrollCorrectionOffset" in $$props3)
      $$invalidate2(10, scrollCorrectionOffset = $$props3.scrollCorrectionOffset);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("rowSelector" in $$props3)
      $$invalidate2(11, rowSelector = $$props3.rowSelector);
    if ("data" in $$props3)
      $$invalidate2(12, data = $$props3.data);
    if ("selectedIdx" in $$props3)
      selectedIdx = $$props3.selectedIdx;
    if ("headerHeight" in $$props3)
      headerHeight = $$props3.headerHeight;
    if ("clickTimer" in $$props3)
      clickTimer = $$props3.clickTimer;
    if ("previousKey" in $$props3)
      previousKey = $$props3.previousKey;
    if ("_selectable" in $$props3)
      $$invalidate2(3, _selectable = $$props3._selectable);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*selectable*/
    256) {
      $:
        $$invalidate2(3, _selectable = selectable === true || selectable === "true");
    }
  };
  return [
    element41,
    className2,
    round,
    _selectable,
    onFocus2,
    onClick,
    onDblClick,
    onKeyDown,
    selectable,
    scrollContainer,
    scrollCorrectionOffset,
    rowSelector,
    data,
    $$scope2,
    slots2,
    div_binding
  ];
}
var Table = class extends import_internal32.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal32.init)(this, options, instance32, create_fragment32, import_internal32.safe_not_equal, {
      class: 1,
      selectable: 8,
      round: 2,
      scrollContainer: 9,
      scrollCorrectionOffset: 10,
      element: 0,
      rowSelector: 11,
      data: 12
    });
    (0, import_internal32.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Table",
      options,
      id: create_fragment32.name
    });
  }
  get class() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selectable() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selectable(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scrollContainer() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scrollContainer(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scrollCorrectionOffset() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scrollCorrectionOffset(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rowSelector() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rowSelector(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get data() {
    throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value2) {
    throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Table_default = Table;

// src/notification-center/NotificationCenter/NotificationCenter.svelte
var import_internal34 = __toESM(require_internal());
var import_svelte20 = __toESM(require_svelte());
var import_store5 = __toESM(require_store());

// src/notification-center/store.js
var import_store3 = __toESM(require_store());
var import_transition2 = __toESM(require_transition());
var import_animate = __toESM(require_animate());
var Notifications = (0, import_store3.writable)({});
var ArchivedNotifications = (0, import_store3.writable)({});
var Progress = (0, import_store3.writable)({});
var timers = {};
var duration = (0, import_store3.get)(ANIMATION_SPEED);
var fly2 = (node, params) => (0, import_transition2.fly)(node, { duration, x: 500, opacity: 1, ...params });
var slideUp = (node, params) => (0, import_transition2.fly)(node, { duration, y: -50, ...params });
var slideDown = (node, params) => (0, import_transition2.fly)(node, { duration, y: 50, ...params });
var flip = (node, animations, params) => (0, import_animate.flip)(node, animations, { duration, ...params });
var [send, receive] = (0, import_transition2.crossfade)({
  duration: (d) => d,
  fallback(node, params) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    return {
      duration: params.duration || duration,
      css: (t) => `transform: ${transform} scale(${t}); opacity: ${t}`
    };
  }
});
function createTimer(notification, targetEl) {
  if (!notification.showProgress)
    return;
  if (targetEl && targetEl === document.activeElement)
    return;
  const id2 = notification.id;
  let progress = getProgress(id2);
  timers[id2] = setInterval(() => {
    progress += 1;
    setProgress(id2, progress);
    applyProgress(id2, progress);
    if (progress >= 110) {
      clearInterval(timers[id2]);
      hideNotification(id2);
    }
  }, Math.round(notification.timeout / 100));
}
function setProgress(id2, val) {
  Progress.update((list) => {
    list[id2] = val;
    return list;
  });
}
function getProgress(id2) {
  const progress = (0, import_store3.get)(Progress) || {};
  return progress[id2] || 0;
}
function applyProgress(id2, progress) {
  const el = document.querySelector(`[data-id="${id2}"] .notification-progress`);
  if (el)
    el.style.width = `${progress}%`;
}
function clearTimer2(notification) {
  clearInterval(timers[notification.id]);
}
function showNotification(msg, type = "info", timeout = 5e3, btn, cb = () => {
}) {
  const id2 = guid();
  const showProgress = typeof timeout === "number";
  const timestamp = (/* @__PURE__ */ new Date()).getTime();
  Notifications.update((list) => {
    list[id2] = { type, msg, id: id2, timeout, cb, showProgress, btn, timestamp };
    return list;
  });
  return id2;
}
function hideNotification(id2) {
  Notifications.update((list) => {
    addToArchive(list[id2]);
    delete list[id2];
    return list;
  });
}
function addToArchive(notification) {
  if (!notification)
    return;
  notification = pluck(notification, ["type", "msg", "id", "timestamp"]);
  ArchivedNotifications.update((list) => {
    list[notification.id] = notification;
    return list;
  });
}
function removeFromArchive(id2) {
  ArchivedNotifications.update((list) => {
    delete list[id2];
    return list;
  });
}

// src/notification-center/NotificationArchive/NotificationArchive.svelte
var import_internal33 = __toESM(require_internal());
var import_svelte19 = __toESM(require_svelte());
var { Object: Object_13 } = import_internal33.globals;
var file27 = "src/notification-center/NotificationArchive/NotificationArchive.svelte";
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i];
  return child_ctx;
}
function create_else_block3(ctx) {
  let h2;
  let t1;
  let div;
  let button;
  let current;
  button = new Button_default({
    props: {
      text: true,
      class: "btn-close",
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[11]
  );
  const block = {
    c: function create() {
      h2 = (0, import_internal33.element)("h2");
      h2.textContent = "No recent notifications";
      t1 = (0, import_internal33.space)();
      div = (0, import_internal33.element)("div");
      (0, import_internal33.create_component)(button.$$.fragment);
      (0, import_internal33.add_location)(h2, file27, 9, 3, 468);
      (0, import_internal33.attr_dev)(div, "class", "notification-archive-buttons");
      (0, import_internal33.add_location)(div, file27, 10, 3, 504);
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, h2, anchor);
      (0, import_internal33.insert_dev)(target, t1, anchor);
      (0, import_internal33.insert_dev)(target, div, anchor);
      (0, import_internal33.mount_component)(button, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*$$scope*/
      2097152) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal33.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal33.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(h2);
      if (detaching)
        (0, import_internal33.detach_dev)(t1);
      if (detaching)
        (0, import_internal33.detach_dev)(div);
      (0, import_internal33.destroy_component)(button);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_else_block3.name,
    type: "else",
    source: "(9:2) {:else}",
    ctx
  });
  return block;
}
function create_if_block_13(ctx) {
  let h2;
  let button0;
  let t0;
  let div;
  let button1;
  let t1;
  let button2;
  let current;
  button0 = new Button_default({
    props: {
      icon: "chevronRight",
      text: true,
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button0.$on(
    "click",
    /*toggle*/
    ctx[5]
  );
  button1 = new Button_default({
    props: {
      text: true,
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1.$on(
    "click",
    /*clearAll*/
    ctx[6]
  );
  button2 = new Button_default({
    props: {
      text: true,
      class: "btn-close",
      $$slots: { default: [create_default_slot3] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2.$on(
    "click",
    /*click_handler*/
    ctx[10]
  );
  const block = {
    c: function create() {
      h2 = (0, import_internal33.element)("h2");
      (0, import_internal33.create_component)(button0.$$.fragment);
      t0 = (0, import_internal33.space)();
      div = (0, import_internal33.element)("div");
      (0, import_internal33.create_component)(button1.$$.fragment);
      t1 = (0, import_internal33.space)();
      (0, import_internal33.create_component)(button2.$$.fragment);
      (0, import_internal33.add_location)(h2, file27, 3, 3, 142);
      (0, import_internal33.attr_dev)(div, "class", "notification-archive-buttons");
      (0, import_internal33.add_location)(div, file27, 4, 3, 258);
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, h2, anchor);
      (0, import_internal33.mount_component)(button0, h2, null);
      (0, import_internal33.insert_dev)(target, t0, anchor);
      (0, import_internal33.insert_dev)(target, div, anchor);
      (0, import_internal33.mount_component)(button1, div, null);
      (0, import_internal33.append_dev)(div, t1);
      (0, import_internal33.mount_component)(button2, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope, archived*/
      2097160) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      2097152) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      2097152) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal33.transition_in)(button0.$$.fragment, local);
      (0, import_internal33.transition_in)(button1.$$.fragment, local);
      (0, import_internal33.transition_in)(button2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal33.transition_out)(button0.$$.fragment, local);
      (0, import_internal33.transition_out)(button1.$$.fragment, local);
      (0, import_internal33.transition_out)(button2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(h2);
      (0, import_internal33.destroy_component)(button0);
      if (detaching)
        (0, import_internal33.detach_dev)(t0);
      if (detaching)
        (0, import_internal33.detach_dev)(div);
      (0, import_internal33.destroy_component)(button1);
      (0, import_internal33.destroy_component)(button2);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_13.name,
    type: "if",
    source: "(3:2) {#if archived.length}",
    ctx
  });
  return block;
}
function create_default_slot_3(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal33.text)("\xD7");
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(t);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_3.name,
    type: "slot",
    source: '(12:4) <Button text class=\\"btn-close\\" on:click=\\"{() => (show = false)}\\">',
    ctx
  });
  return block;
}
function create_default_slot_2(ctx) {
  let t0;
  let t1_value = (
    /*archived*/
    ctx[3].length + ""
  );
  let t1;
  let t2;
  const block = {
    c: function create() {
      t0 = (0, import_internal33.text)("Recent notifications (");
      t1 = (0, import_internal33.text)(t1_value);
      t2 = (0, import_internal33.text)(")");
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, t0, anchor);
      (0, import_internal33.insert_dev)(target, t1, anchor);
      (0, import_internal33.insert_dev)(target, t2, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*archived*/
      8 && t1_value !== (t1_value = /*archived*/
      ctx2[3].length + ""))
        (0, import_internal33.set_data_dev)(t1, t1_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(t0);
      if (detaching)
        (0, import_internal33.detach_dev)(t1);
      if (detaching)
        (0, import_internal33.detach_dev)(t2);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: '(4:7) <Button icon=\\"chevronRight\\" text on:click=\\"{toggle}\\">',
    ctx
  });
  return block;
}
function create_default_slot_1(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal33.text)("Clear all");
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(t);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: '(6:4) <Button text on:click=\\"{clearAll}\\">',
    ctx
  });
  return block;
}
function create_default_slot3(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal33.text)("\xD7");
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(t);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot3.name,
    type: "slot",
    source: '(7:4) <Button text class=\\"btn-close\\" on:click=\\"{() => (show = false)}\\">',
    ctx
  });
  return block;
}
function create_if_block15(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = (
    /*archived*/
    ctx[3]
  );
  (0, import_internal33.validate_each_argument)(each_value);
  const get_key = (ctx2) => (
    /*notification*/
    ctx2[18].id
  );
  (0, import_internal33.validate_each_keys)(ctx, each_value, get_each_context6, get_key);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context6(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block6(key, child_ctx));
  }
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = (0, import_internal33.empty)();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      (0, import_internal33.insert_dev)(target, each_1_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*archived, onKeydown, removeFromArchive, timeAgo, now*/
      152) {
        each_value = /*archived*/
        ctx2[3];
        (0, import_internal33.validate_each_argument)(each_value);
        (0, import_internal33.group_outros)();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        (0, import_internal33.validate_each_keys)(ctx2, each_value, get_each_context6, get_key);
        each_blocks = (0, import_internal33.update_keyed_each)(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, import_internal33.fix_and_outro_and_destroy_block, create_each_block6, each_1_anchor, get_each_context6);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        (0, import_internal33.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal33.transition_in)(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal33.transition_out)(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
      if (detaching)
        (0, import_internal33.detach_dev)(each_1_anchor);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block15.name,
    type: "if",
    source: "(16:1) {#if archived.length && expanded}",
    ctx
  });
  return block;
}
function create_each_block6(key_1, ctx) {
  let div2;
  let div0;
  let raw_value = (
    /*notification*/
    ctx[18].msg + ""
  );
  let div0_role_value;
  let t0;
  let div1;
  let t1_value = timeAgo(
    /*notification*/
    ctx[18].timestamp,
    /*now*/
    ctx[4]
  ) + "";
  let t1;
  let t2;
  let button;
  let t4;
  let div2_class_value;
  let div2_intro;
  let div2_outro;
  let rect;
  let stop_animation = import_internal33.noop;
  let current;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[12](
        /*notification*/
        ctx[18]
      )
    );
  }
  function keydown_handler(...args) {
    return (
      /*keydown_handler*/
      ctx[13](
        /*notification*/
        ctx[18],
        ...args
      )
    );
  }
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      div2 = (0, import_internal33.element)("div");
      div0 = (0, import_internal33.element)("div");
      t0 = (0, import_internal33.space)();
      div1 = (0, import_internal33.element)("div");
      t1 = (0, import_internal33.text)(t1_value);
      t2 = (0, import_internal33.space)();
      button = (0, import_internal33.element)("button");
      button.textContent = "\xD7";
      t4 = (0, import_internal33.space)();
      (0, import_internal33.attr_dev)(div0, "class", "notification-msg");
      (0, import_internal33.attr_dev)(div0, "role", div0_role_value = /*notification*/
      ctx[18].type === "info" ? "status" : "alert");
      (0, import_internal33.add_location)(div0, file27, 26, 4, 1028);
      (0, import_internal33.attr_dev)(div1, "class", "notification-timestamp");
      (0, import_internal33.add_location)(div1, file27, 27, 4, 1152);
      (0, import_internal33.attr_dev)(button, "class", "notification-close");
      (0, import_internal33.add_location)(button, file27, 28, 4, 1237);
      (0, import_internal33.attr_dev)(div2, "tabindex", "0");
      (0, import_internal33.attr_dev)(div2, "class", div2_class_value = "notification notification-" + /*notification*/
      ctx[18].type + " archived");
      (0, import_internal33.add_location)(div2, file27, 18, 3, 812);
      this.first = div2;
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, div2, anchor);
      (0, import_internal33.append_dev)(div2, div0);
      div0.innerHTML = raw_value;
      (0, import_internal33.append_dev)(div2, t0);
      (0, import_internal33.append_dev)(div2, div1);
      (0, import_internal33.append_dev)(div1, t1);
      (0, import_internal33.append_dev)(div2, t2);
      (0, import_internal33.append_dev)(div2, button);
      (0, import_internal33.append_dev)(div2, t4);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal33.listen_dev)(button, "click", (0, import_internal33.stop_propagation)(click_handler_2), false, false, true, false),
          (0, import_internal33.listen_dev)(div2, "keydown", keydown_handler, false, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*archived*/
      8) && raw_value !== (raw_value = /*notification*/
      ctx[18].msg + ""))
        div0.innerHTML = raw_value;
      ;
      if (!current || dirty & /*archived*/
      8 && div0_role_value !== (div0_role_value = /*notification*/
      ctx[18].type === "info" ? "status" : "alert")) {
        (0, import_internal33.attr_dev)(div0, "role", div0_role_value);
      }
      if ((!current || dirty & /*archived, now*/
      24) && t1_value !== (t1_value = timeAgo(
        /*notification*/
        ctx[18].timestamp,
        /*now*/
        ctx[4]
      ) + ""))
        (0, import_internal33.set_data_dev)(t1, t1_value);
      if (!current || dirty & /*archived*/
      8 && div2_class_value !== (div2_class_value = "notification notification-" + /*notification*/
      ctx[18].type + " archived")) {
        (0, import_internal33.attr_dev)(div2, "class", div2_class_value);
      }
    },
    r: function measure() {
      rect = div2.getBoundingClientRect();
    },
    f: function fix() {
      (0, import_internal33.fix_position)(div2);
      stop_animation();
      (0, import_internal33.add_transform)(div2, rect);
    },
    a: function animate2() {
      stop_animation();
      stop_animation = (0, import_internal33.create_animation)(div2, rect, flip, {});
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal33.add_render_callback)(() => {
        if (!current)
          return;
        if (div2_outro)
          div2_outro.end(1);
        div2_intro = (0, import_internal33.create_in_transition)(
          div2,
          /*_in*/
          ctx[8],
          { key: (
            /*notification*/
            ctx[18].id
          ) }
        );
        div2_intro.start();
      });
      current = true;
    },
    o: function outro(local) {
      if (div2_intro)
        div2_intro.invalidate();
      div2_outro = (0, import_internal33.create_out_transition)(
        div2,
        /*_out*/
        ctx[9],
        {}
      );
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(div2);
      if (detaching && div2_outro)
        div2_outro.end();
      mounted = false;
      (0, import_internal33.run_all)(dispose);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block6.name,
    type: "each",
    source: "(17:2) {#each archived as notification (notification.id)}",
    ctx
  });
  return block;
}
function create_fragment33(ctx) {
  let div;
  let header;
  let current_block_type_index;
  let if_block0;
  let t;
  let div_inert_value;
  let current;
  const if_block_creators = [create_if_block_13, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*archived*/
      ctx2[3].length
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = (
    /*archived*/
    ctx[3].length && /*expanded*/
    ctx[1] && create_if_block15(ctx)
  );
  const block = {
    c: function create() {
      div = (0, import_internal33.element)("div");
      header = (0, import_internal33.element)("header");
      if_block0.c();
      t = (0, import_internal33.space)();
      if (if_block1)
        if_block1.c();
      (0, import_internal33.add_location)(header, file27, 1, 1, 106);
      (0, import_internal33.attr_dev)(div, "class", "notification-archive");
      div.inert = div_inert_value = !/*show*/
      ctx[0];
      (0, import_internal33.toggle_class)(
        div,
        "expanded",
        /*expanded*/
        ctx[1]
      );
      (0, import_internal33.toggle_class)(div, "inert", !/*show*/
      ctx[0]);
      (0, import_internal33.add_location)(div, file27, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal33.insert_dev)(target, div, anchor);
      (0, import_internal33.append_dev)(div, header);
      if_blocks[current_block_type_index].m(header, null);
      (0, import_internal33.append_dev)(div, t);
      if (if_block1)
        if_block1.m(div, null);
      ctx[14](div);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        (0, import_internal33.group_outros)();
        (0, import_internal33.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0, import_internal33.check_outros)();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        (0, import_internal33.transition_in)(if_block0, 1);
        if_block0.m(header, null);
      }
      if (
        /*archived*/
        ctx2[3].length && /*expanded*/
        ctx2[1]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*archived, expanded*/
          10) {
            (0, import_internal33.transition_in)(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block15(ctx2);
          if_block1.c();
          (0, import_internal33.transition_in)(if_block1, 1);
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        (0, import_internal33.group_outros)();
        (0, import_internal33.transition_out)(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        (0, import_internal33.check_outros)();
      }
      if (!current || dirty & /*show*/
      1 && div_inert_value !== (div_inert_value = !/*show*/
      ctx2[0])) {
        (0, import_internal33.prop_dev)(div, "inert", div_inert_value);
      }
      if (!current || dirty & /*expanded*/
      2) {
        (0, import_internal33.toggle_class)(
          div,
          "expanded",
          /*expanded*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*show*/
      1) {
        (0, import_internal33.toggle_class)(div, "inert", !/*show*/
        ctx2[0]);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal33.transition_in)(if_block0);
      (0, import_internal33.transition_in)(if_block1);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal33.transition_out)(if_block0);
      (0, import_internal33.transition_out)(if_block1);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal33.detach_dev)(div);
      if_blocks[current_block_type_index].d();
      if (if_block1)
        if_block1.d();
      ctx[14](null);
    }
  };
  (0, import_internal33.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment33.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance33($$self2, $$props2, $$invalidate2) {
  let $ANIMATION_SPEED;
  (0, import_internal33.validate_store)(ANIMATION_SPEED, "ANIMATION_SPEED");
  (0, import_internal33.component_subscribe)($$self2, ANIMATION_SPEED, ($$value) => $$invalidate2(16, $ANIMATION_SPEED = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal33.validate_slots)("NotificationArchive", slots2, []);
  let { show = false } = $$props2;
  let { expanded = false } = $$props2;
  const duration2 = 1e5;
  let el;
  let archived = [];
  let timer2;
  let now = (/* @__PURE__ */ new Date()).getTime();
  (0, import_svelte19.onMount)(() => {
    timer2 = setInterval(() => $$invalidate2(4, now = (/* @__PURE__ */ new Date()).getTime()), 1e4);
    ArchivedNotifications.subscribe((val) => {
      $$invalidate2(3, archived = Object.values(val).reverse());
    });
  });
  (0, import_svelte19.onDestroy)(() => {
    clearInterval(timer2);
  });
  function toggle() {
    $$invalidate2(1, expanded = !expanded);
  }
  function clearAll(e) {
    e.stopPropagation();
    ArchivedNotifications.set({});
  }
  function onKeydown2(e, notification) {
    if (e.key === "Escape")
      removeFromArchive(notification.id);
  }
  function _in(node, params) {
    if (!show)
      return fly2(node, { duration: 0 });
    if (show && expanded)
      return slideUp(node, params);
    return receive(node, { ...params, delay: 100, duration: duration2 });
  }
  function _out(node, params) {
    if (show && expanded)
      return fly2(node);
    if (show && !expanded)
      return slideUp(node, params);
    return slideUp(node, { duration: 0 });
  }
  const writable_props = ["show", "expanded"];
  Object_13.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<NotificationArchive> was created with unknown prop '${key}'`);
  });
  const click_handler = () => $$invalidate2(0, show = false);
  const click_handler_1 = () => $$invalidate2(0, show = false);
  const click_handler_2 = (notification) => removeFromArchive(notification.id);
  const keydown_handler = (notification, e) => onKeydown2(e, notification);
  function div_binding($$value) {
    import_internal33.binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate2(2, el);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("show" in $$props3)
      $$invalidate2(0, show = $$props3.show);
    if ("expanded" in $$props3)
      $$invalidate2(1, expanded = $$props3.expanded);
  };
  $$self2.$capture_state = () => ({
    onDestroy: import_svelte19.onDestroy,
    onMount: import_svelte19.onMount,
    Button: Button_default,
    ArchivedNotifications,
    removeFromArchive,
    receive,
    fly: fly2,
    slideUp,
    flip,
    ANIMATION_SPEED,
    timeAgo,
    show,
    expanded,
    duration: duration2,
    el,
    archived,
    timer: timer2,
    now,
    toggle,
    clearAll,
    onKeydown: onKeydown2,
    _in,
    _out,
    $ANIMATION_SPEED
  });
  $$self2.$inject_state = ($$props3) => {
    if ("show" in $$props3)
      $$invalidate2(0, show = $$props3.show);
    if ("expanded" in $$props3)
      $$invalidate2(1, expanded = $$props3.expanded);
    if ("el" in $$props3)
      $$invalidate2(2, el = $$props3.el);
    if ("archived" in $$props3)
      $$invalidate2(3, archived = $$props3.archived);
    if ("timer" in $$props3)
      timer2 = $$props3.timer;
    if ("now" in $$props3)
      $$invalidate2(4, now = $$props3.now);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*show, el*/
    5) {
      $: {
        if (!show && el)
          el.addEventListener("transitionend", () => $$invalidate2(1, expanded = false), { once: true });
      }
    }
  };
  return [
    show,
    expanded,
    el,
    archived,
    now,
    toggle,
    clearAll,
    onKeydown2,
    _in,
    _out,
    click_handler,
    click_handler_1,
    click_handler_2,
    keydown_handler,
    div_binding
  ];
}
var NotificationArchive = class extends import_internal33.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal33.init)(this, options, instance33, create_fragment33, import_internal33.safe_not_equal, { show: 0, expanded: 1 });
    (0, import_internal33.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "NotificationArchive",
      options,
      id: create_fragment33.name
    });
  }
  get show() {
    throw new Error("<NotificationArchive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set show(value2) {
    throw new Error("<NotificationArchive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get expanded() {
    throw new Error("<NotificationArchive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set expanded(value2) {
    throw new Error("<NotificationArchive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var NotificationArchive_default = NotificationArchive;

// src/notification-center/NotificationCenter/NotificationCenter.svelte
var { Object: Object_14 } = import_internal34.globals;
var file28 = "src/notification-center/NotificationCenter/NotificationCenter.svelte";
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[33] = list[i];
  return child_ctx;
}
function create_if_block_32(ctx) {
  let pushbutton;
  let updating_pressed;
  let current;
  function pushbutton_pressed_binding(value2) {
    ctx[16](value2);
  }
  let pushbutton_props = {
    icon: "bell",
    outline: (
      /*outline*/
      ctx[2]
    ),
    round: (
      /*round*/
      ctx[1]
    ),
    class: "notification-center-button " + /*hasNotifications*/
    ctx[10] + " " + /*hasArchivedNotifications*/
    ctx[5]
  };
  if (
    /*$showArchive*/
    ctx[11] !== void 0
  ) {
    pushbutton_props.pressed = /*$showArchive*/
    ctx[11];
  }
  pushbutton = new PushButton_default({ props: pushbutton_props, $$inline: true });
  import_internal34.binding_callbacks.push(() => (0, import_internal34.bind)(pushbutton, "pressed", pushbutton_pressed_binding));
  const block = {
    c: function create() {
      (0, import_internal34.create_component)(pushbutton.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal34.mount_component)(pushbutton, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const pushbutton_changes = {};
      if (dirty[0] & /*outline*/
      4)
        pushbutton_changes.outline = /*outline*/
        ctx2[2];
      if (dirty[0] & /*round*/
      2)
        pushbutton_changes.round = /*round*/
        ctx2[1];
      if (dirty[0] & /*hasNotifications, hasArchivedNotifications*/
      1056)
        pushbutton_changes.class = "notification-center-button " + /*hasNotifications*/
        ctx2[10] + " " + /*hasArchivedNotifications*/
        ctx2[5];
      if (!updating_pressed && dirty[0] & /*$showArchive*/
      2048) {
        updating_pressed = true;
        pushbutton_changes.pressed = /*$showArchive*/
        ctx2[11];
        (0, import_internal34.add_flush_callback)(() => updating_pressed = false);
      }
      pushbutton.$set(pushbutton_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal34.transition_in)(pushbutton.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal34.transition_out)(pushbutton.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal34.destroy_component)(pushbutton, detaching);
    }
  };
  (0, import_internal34.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_32.name,
    type: "if",
    source: "(1:0) {#if !hideButton}",
    ctx
  });
  return block;
}
function create_if_block_22(ctx) {
  let button;
  let t_value = (
    /*notification*/
    ctx[33].btn + ""
  );
  let t;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[17](
        /*notification*/
        ctx[33]
      )
    );
  }
  const block = {
    c: function create() {
      button = (0, import_internal34.element)("button");
      t = (0, import_internal34.text)(t_value);
      (0, import_internal34.add_location)(button, file28, 35, 5, 1227);
    },
    m: function mount(target, anchor) {
      (0, import_internal34.insert_dev)(target, button, anchor);
      (0, import_internal34.append_dev)(button, t);
      if (!mounted) {
        dispose = (0, import_internal34.listen_dev)(button, "click", (0, import_internal34.prevent_default)(click_handler), false, true, false, false);
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*notifications*/
      16 && t_value !== (t_value = /*notification*/
      ctx[33].btn + ""))
        (0, import_internal34.set_data_dev)(t, t_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal34.detach_dev)(button);
      mounted = false;
      dispose();
    }
  };
  (0, import_internal34.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_22.name,
    type: "if",
    source: "(35:4) {#if notification.btn}",
    ctx
  });
  return block;
}
function create_if_block_14(ctx) {
  let div1;
  let div0;
  const block = {
    c: function create() {
      div1 = (0, import_internal34.element)("div");
      div0 = (0, import_internal34.element)("div");
      (0, import_internal34.attr_dev)(div0, "role", "progressbar");
      (0, import_internal34.attr_dev)(div0, "class", "notification-progress");
      (0, import_internal34.add_location)(div0, file28, 43, 5, 1560);
      (0, import_internal34.attr_dev)(div1, "class", "notification-progressbar");
      (0, import_internal34.add_location)(div1, file28, 42, 4, 1516);
    },
    m: function mount(target, anchor) {
      (0, import_internal34.insert_dev)(target, div1, anchor);
      (0, import_internal34.append_dev)(div1, div0);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal34.detach_dev)(div1);
    }
  };
  (0, import_internal34.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block_14.name,
    type: "if",
    source: "(42:3) {#if notification.showProgress}",
    ctx
  });
  return block;
}
function create_each_block7(key_1, ctx) {
  let div3;
  let div0;
  let icon;
  let t0;
  let div1;
  let raw_value = (
    /*notification*/
    ctx[33].msg + ""
  );
  let div1_role_value;
  let t1;
  let div2;
  let t2;
  let button;
  let t4;
  let div3_class_value;
  let div3_data_id_value;
  let div3_intro;
  let div3_outro;
  let rect;
  let stop_animation = import_internal34.noop;
  let current;
  let mounted;
  let dispose;
  icon = new Icon_default({
    props: { name: (
      /*notification*/
      ctx[33].type
    ) },
    $$inline: true
  });
  let if_block0 = (
    /*notification*/
    ctx[33].btn && create_if_block_22(ctx)
  );
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[18](
        /*notification*/
        ctx[33]
      )
    );
  }
  let if_block1 = (
    /*notification*/
    ctx[33].showProgress && create_if_block_14(ctx)
  );
  function mouseover_handler() {
    return (
      /*mouseover_handler*/
      ctx[19](
        /*notification*/
        ctx[33]
      )
    );
  }
  function focus_handler2() {
    return (
      /*focus_handler*/
      ctx[20](
        /*notification*/
        ctx[33]
      )
    );
  }
  function mouseleave_handler(...args) {
    return (
      /*mouseleave_handler*/
      ctx[21](
        /*notification*/
        ctx[33],
        ...args
      )
    );
  }
  function blur_handler2(...args) {
    return (
      /*blur_handler*/
      ctx[22](
        /*notification*/
        ctx[33],
        ...args
      )
    );
  }
  function keydown_handler(...args) {
    return (
      /*keydown_handler*/
      ctx[23](
        /*notification*/
        ctx[33],
        ...args
      )
    );
  }
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      div3 = (0, import_internal34.element)("div");
      div0 = (0, import_internal34.element)("div");
      (0, import_internal34.create_component)(icon.$$.fragment);
      t0 = (0, import_internal34.space)();
      div1 = (0, import_internal34.element)("div");
      t1 = (0, import_internal34.space)();
      div2 = (0, import_internal34.element)("div");
      if (if_block0)
        if_block0.c();
      t2 = (0, import_internal34.space)();
      button = (0, import_internal34.element)("button");
      button.textContent = "\xD7";
      t4 = (0, import_internal34.space)();
      if (if_block1)
        if_block1.c();
      (0, import_internal34.attr_dev)(div0, "class", "notification-icon");
      (0, import_internal34.add_location)(div0, file28, 30, 3, 961);
      (0, import_internal34.attr_dev)(div1, "class", "notification-msg");
      (0, import_internal34.attr_dev)(div1, "role", div1_role_value = /*notification*/
      ctx[33].type === "info" ? "status" : "alert");
      (0, import_internal34.add_location)(div1, file28, 31, 3, 1036);
      (0, import_internal34.attr_dev)(button, "class", "notification-close");
      (0, import_internal34.add_location)(button, file28, 38, 4, 1345);
      (0, import_internal34.attr_dev)(div2, "class", "notification-buttons");
      (0, import_internal34.add_location)(div2, file28, 33, 3, 1160);
      (0, import_internal34.attr_dev)(div3, "class", div3_class_value = "notification notification-" + /*notification*/
      ctx[33].type);
      (0, import_internal34.attr_dev)(div3, "data-id", div3_data_id_value = /*notification*/
      ctx[33].id);
      (0, import_internal34.attr_dev)(div3, "tabindex", "0");
      (0, import_internal34.add_location)(div3, file28, 17, 2, 513);
      this.first = div3;
    },
    m: function mount(target, anchor) {
      (0, import_internal34.insert_dev)(target, div3, anchor);
      (0, import_internal34.append_dev)(div3, div0);
      (0, import_internal34.mount_component)(icon, div0, null);
      (0, import_internal34.append_dev)(div3, t0);
      (0, import_internal34.append_dev)(div3, div1);
      div1.innerHTML = raw_value;
      (0, import_internal34.append_dev)(div3, t1);
      (0, import_internal34.append_dev)(div3, div2);
      if (if_block0)
        if_block0.m(div2, null);
      (0, import_internal34.append_dev)(div2, t2);
      (0, import_internal34.append_dev)(div2, button);
      (0, import_internal34.append_dev)(div3, t4);
      if (if_block1)
        if_block1.m(div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal34.listen_dev)(button, "click", (0, import_internal34.stop_propagation)(click_handler_1), false, false, true, false),
          (0, import_internal34.listen_dev)(div3, "mouseover", mouseover_handler, false, false, false, false),
          (0, import_internal34.listen_dev)(div3, "focus", focus_handler2, false, false, false, false),
          (0, import_internal34.listen_dev)(div3, "mouseleave", mouseleave_handler, false, false, false, false),
          (0, import_internal34.listen_dev)(div3, "blur", blur_handler2, false, false, false, false),
          (0, import_internal34.listen_dev)(div3, "keydown", keydown_handler, false, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const icon_changes = {};
      if (dirty[0] & /*notifications*/
      16)
        icon_changes.name = /*notification*/
        ctx[33].type;
      icon.$set(icon_changes);
      if ((!current || dirty[0] & /*notifications*/
      16) && raw_value !== (raw_value = /*notification*/
      ctx[33].msg + ""))
        div1.innerHTML = raw_value;
      ;
      if (!current || dirty[0] & /*notifications*/
      16 && div1_role_value !== (div1_role_value = /*notification*/
      ctx[33].type === "info" ? "status" : "alert")) {
        (0, import_internal34.attr_dev)(div1, "role", div1_role_value);
      }
      if (
        /*notification*/
        ctx[33].btn
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_22(ctx);
          if_block0.c();
          if_block0.m(div2, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*notification*/
        ctx[33].showProgress
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_14(ctx);
          if_block1.c();
          if_block1.m(div3, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty[0] & /*notifications*/
      16 && div3_class_value !== (div3_class_value = "notification notification-" + /*notification*/
      ctx[33].type)) {
        (0, import_internal34.attr_dev)(div3, "class", div3_class_value);
      }
      if (!current || dirty[0] & /*notifications*/
      16 && div3_data_id_value !== (div3_data_id_value = /*notification*/
      ctx[33].id)) {
        (0, import_internal34.attr_dev)(div3, "data-id", div3_data_id_value);
      }
    },
    r: function measure() {
      rect = div3.getBoundingClientRect();
    },
    f: function fix() {
      (0, import_internal34.fix_position)(div3);
      stop_animation();
      (0, import_internal34.add_transform)(div3, rect);
    },
    a: function animate2() {
      stop_animation();
      stop_animation = (0, import_internal34.create_animation)(div3, rect, flip, {});
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal34.transition_in)(icon.$$.fragment, local);
      (0, import_internal34.add_render_callback)(() => {
        if (!current)
          return;
        if (div3_outro)
          div3_outro.end(1);
        div3_intro = (0, import_internal34.create_in_transition)(div3, fly2, {});
        div3_intro.start();
      });
      current = true;
    },
    o: function outro(local) {
      (0, import_internal34.transition_out)(icon.$$.fragment, local);
      if (div3_intro)
        div3_intro.invalidate();
      div3_outro = (0, import_internal34.create_out_transition)(
        div3,
        /*_send*/
        ctx[13],
        { key: (
          /*notification*/
          ctx[33].id
        ) }
      );
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal34.detach_dev)(div3);
      (0, import_internal34.destroy_component)(icon);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (detaching && div3_outro)
        div3_outro.end();
      mounted = false;
      (0, import_internal34.run_all)(dispose);
    }
  };
  (0, import_internal34.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block7.name,
    type: "each",
    source: "(16:1) {#each notifications as notification (notification.id)}",
    ctx
  });
  return block;
}
function create_if_block16(ctx) {
  let notificationarchive;
  let updating_show;
  let updating_expanded;
  let current;
  function notificationarchive_show_binding(value2) {
    ctx[24](value2);
  }
  function notificationarchive_expanded_binding(value2) {
    ctx[25](value2);
  }
  let notificationarchive_props = {};
  if (
    /*$showArchive*/
    ctx[11] !== void 0
  ) {
    notificationarchive_props.show = /*$showArchive*/
    ctx[11];
  }
  if (
    /*archiveIsExpanded*/
    ctx[7] !== void 0
  ) {
    notificationarchive_props.expanded = /*archiveIsExpanded*/
    ctx[7];
  }
  notificationarchive = new NotificationArchive_default({
    props: notificationarchive_props,
    $$inline: true
  });
  import_internal34.binding_callbacks.push(() => (0, import_internal34.bind)(notificationarchive, "show", notificationarchive_show_binding));
  import_internal34.binding_callbacks.push(() => (0, import_internal34.bind)(notificationarchive, "expanded", notificationarchive_expanded_binding));
  const block = {
    c: function create() {
      (0, import_internal34.create_component)(notificationarchive.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal34.mount_component)(notificationarchive, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const notificationarchive_changes = {};
      if (!updating_show && dirty[0] & /*$showArchive*/
      2048) {
        updating_show = true;
        notificationarchive_changes.show = /*$showArchive*/
        ctx2[11];
        (0, import_internal34.add_flush_callback)(() => updating_show = false);
      }
      if (!updating_expanded && dirty[0] & /*archiveIsExpanded*/
      128) {
        updating_expanded = true;
        notificationarchive_changes.expanded = /*archiveIsExpanded*/
        ctx2[7];
        (0, import_internal34.add_flush_callback)(() => updating_expanded = false);
      }
      notificationarchive.$set(notificationarchive_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal34.transition_in)(notificationarchive.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal34.transition_out)(notificationarchive.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal34.destroy_component)(notificationarchive, detaching);
    }
  };
  (0, import_internal34.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block16.name,
    type: "if",
    source: "(50:1) {#if !hideButton}",
    ctx
  });
  return block;
}
function create_fragment34(ctx) {
  let t0;
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t1;
  let div_class_value;
  let current;
  let if_block0 = !/*hideButton*/
  ctx[3] && create_if_block_32(ctx);
  let each_value = (
    /*notifications*/
    ctx[4]
  );
  (0, import_internal34.validate_each_argument)(each_value);
  const get_key = (ctx2) => (
    /*notification*/
    ctx2[33].id
  );
  (0, import_internal34.validate_each_keys)(ctx, each_value, get_each_context7, get_key);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context7(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block7(key, child_ctx));
  }
  let if_block1 = !/*hideButton*/
  ctx[3] && create_if_block16(ctx);
  const block = {
    c: function create() {
      if (if_block0)
        if_block0.c();
      t0 = (0, import_internal34.space)();
      div = (0, import_internal34.element)("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = (0, import_internal34.space)();
      if (if_block1)
        if_block1.c();
      (0, import_internal34.attr_dev)(div, "class", div_class_value = "notification-center " + /*className*/
      ctx[0]);
      (0, import_internal34.toggle_class)(
        div,
        "show-archive",
        /*$showArchive*/
        ctx[11]
      );
      (0, import_internal34.toggle_class)(
        div,
        "archive-is-visible",
        /*archiveIsVisible*/
        ctx[6]
      );
      (0, import_internal34.toggle_class)(
        div,
        "has-active-notifications",
        /*hasActiveNotifications*/
        ctx[9]
      );
      (0, import_internal34.add_location)(div, file28, 8, 0, 187);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      (0, import_internal34.insert_dev)(target, t0, anchor);
      (0, import_internal34.insert_dev)(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      (0, import_internal34.append_dev)(div, t1);
      if (if_block1)
        if_block1.m(div, null);
      ctx[26](div);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (!/*hideButton*/
      ctx2[3]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*hideButton*/
          8) {
            (0, import_internal34.transition_in)(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_32(ctx2);
          if_block0.c();
          (0, import_internal34.transition_in)(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        (0, import_internal34.group_outros)();
        (0, import_internal34.transition_out)(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        (0, import_internal34.check_outros)();
      }
      if (dirty[0] & /*notifications, onKeydown*/
      16400) {
        each_value = /*notifications*/
        ctx2[4];
        (0, import_internal34.validate_each_argument)(each_value);
        (0, import_internal34.group_outros)();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        (0, import_internal34.validate_each_keys)(ctx2, each_value, get_each_context7, get_key);
        each_blocks = (0, import_internal34.update_keyed_each)(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, import_internal34.fix_and_outro_and_destroy_block, create_each_block7, t1, get_each_context7);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        (0, import_internal34.check_outros)();
      }
      if (!/*hideButton*/
      ctx2[3]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*hideButton*/
          8) {
            (0, import_internal34.transition_in)(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block16(ctx2);
          if_block1.c();
          (0, import_internal34.transition_in)(if_block1, 1);
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        (0, import_internal34.group_outros)();
        (0, import_internal34.transition_out)(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        (0, import_internal34.check_outros)();
      }
      if (!current || dirty[0] & /*className*/
      1 && div_class_value !== (div_class_value = "notification-center " + /*className*/
      ctx2[0])) {
        (0, import_internal34.attr_dev)(div, "class", div_class_value);
      }
      if (!current || dirty[0] & /*className, $showArchive*/
      2049) {
        (0, import_internal34.toggle_class)(
          div,
          "show-archive",
          /*$showArchive*/
          ctx2[11]
        );
      }
      if (!current || dirty[0] & /*className, archiveIsVisible*/
      65) {
        (0, import_internal34.toggle_class)(
          div,
          "archive-is-visible",
          /*archiveIsVisible*/
          ctx2[6]
        );
      }
      if (!current || dirty[0] & /*className, hasActiveNotifications*/
      513) {
        (0, import_internal34.toggle_class)(
          div,
          "has-active-notifications",
          /*hasActiveNotifications*/
          ctx2[9]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal34.transition_in)(if_block0);
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal34.transition_in)(each_blocks[i]);
      }
      (0, import_internal34.transition_in)(if_block1);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal34.transition_out)(if_block0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal34.transition_out)(each_blocks[i]);
      }
      (0, import_internal34.transition_out)(if_block1);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        (0, import_internal34.detach_dev)(t0);
      if (detaching)
        (0, import_internal34.detach_dev)(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      if (if_block1)
        if_block1.d();
      ctx[26](null);
    }
  };
  (0, import_internal34.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment34.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance34($$self2, $$props2, $$invalidate2) {
  let hasArchivedNotifications;
  let hasNotifications;
  let $showArchive;
  let $ANIMATION_SPEED;
  let $ArchivedNotifications;
  (0, import_internal34.validate_store)(ANIMATION_SPEED, "ANIMATION_SPEED");
  (0, import_internal34.component_subscribe)($$self2, ANIMATION_SPEED, ($$value) => $$invalidate2(28, $ANIMATION_SPEED = $$value));
  (0, import_internal34.validate_store)(ArchivedNotifications, "ArchivedNotifications");
  (0, import_internal34.component_subscribe)($$self2, ArchivedNotifications, ($$value) => $$invalidate2(15, $ArchivedNotifications = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal34.validate_slots)("NotificationCenter", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { round = false } = $$props2;
  let { outline = false } = $$props2;
  let { hideButton = false } = $$props2;
  const showArchive = (0, import_store5.writable)(false);
  (0, import_internal34.validate_store)(showArchive, "showArchive");
  (0, import_internal34.component_subscribe)($$self2, showArchive, (value2) => $$invalidate2(11, $showArchive = value2));
  const duration2 = $ANIMATION_SPEED;
  let archiveIsVisible = false;
  let archiveIsExpanded = false;
  let el;
  let notifications = [];
  let initial = true;
  let hasActiveNotifications = false;
  (0, import_svelte20.onMount)(() => {
    document.body.appendChild(el);
    Notifications.subscribe((val) => {
      $$invalidate2(4, notifications = Object.values(val).reverse());
      notifications.forEach((t) => {
        if (!timers[t.id])
          createTimer(t);
      });
      if (notifications.length > 0)
        $$invalidate2(9, hasActiveNotifications = true);
      else
        setTimeout(() => $$invalidate2(9, hasActiveNotifications = false), $ANIMATION_SPEED);
    });
    showArchive.subscribe((val) => {
      if (initial)
        return;
      if (val)
        addEvents();
      else
        removeEvents();
    });
    if (initial)
      requestAnimationFrame(() => initial = false);
  });
  function addEvents() {
    $$invalidate2(6, archiveIsVisible = true);
    document.addEventListener("click", onDocClick);
    document.addEventListener("keydown", onDocClick);
  }
  function removeEvents() {
    document.removeEventListener("click", onDocClick);
    document.removeEventListener("keydown", onDocClick);
    el.querySelector(".notification-archive").addEventListener("transitionend", () => $$invalidate2(6, archiveIsVisible = false), { once: true });
  }
  function onDocClick(e) {
    if (e.target.closest(".notification-center-button,.notification-archive,.notification-center"))
      return;
    if (e.type === "keydown" && e.key !== "Escape")
      return;
    showArchive.set(false);
  }
  function _send(node, params) {
    if (!$showArchive)
      return fly2(node);
    if (!archiveIsExpanded)
      return slideDown(node, params);
    return send(node, { ...params, duration: duration2 });
  }
  function onKeydown2(e, notification) {
    if (e.key === "Escape")
      hideNotification(notification.id);
  }
  const writable_props = ["class", "round", "outline", "hideButton"];
  Object_14.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<NotificationCenter> was created with unknown prop '${key}'`);
  });
  function pushbutton_pressed_binding(value2) {
    $showArchive = value2;
    showArchive.set($showArchive);
  }
  const click_handler = (notification) => notification.cb(notification.id);
  const click_handler_1 = (notification) => hideNotification(notification.id);
  const mouseover_handler = (notification) => clearTimer2(notification);
  const focus_handler2 = (notification) => clearTimer2(notification);
  const mouseleave_handler = (notification, e) => createTimer(notification, e.target);
  const blur_handler2 = (notification, e) => createTimer(notification, e.target);
  const keydown_handler = (notification, e) => onKeydown2(e, notification);
  function notificationarchive_show_binding(value2) {
    $showArchive = value2;
    showArchive.set($showArchive);
  }
  function notificationarchive_expanded_binding(value2) {
    archiveIsExpanded = value2;
    $$invalidate2(7, archiveIsExpanded);
  }
  function div_binding($$value) {
    import_internal34.binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate2(8, el);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(0, className2 = $$props3.class);
    if ("round" in $$props3)
      $$invalidate2(1, round = $$props3.round);
    if ("outline" in $$props3)
      $$invalidate2(2, outline = $$props3.outline);
    if ("hideButton" in $$props3)
      $$invalidate2(3, hideButton = $$props3.hideButton);
  };
  $$self2.$capture_state = () => ({
    onMount: import_svelte20.onMount,
    writable: import_store5.writable,
    Icon: Icon_default,
    PushButton: PushButton_default,
    Notifications,
    ArchivedNotifications,
    createTimer,
    timers,
    hideNotification,
    clearTimer: clearTimer2,
    send,
    flip,
    fly: fly2,
    slideDown,
    NotificationArchive: NotificationArchive_default,
    ANIMATION_SPEED,
    className: className2,
    round,
    outline,
    hideButton,
    showArchive,
    duration: duration2,
    archiveIsVisible,
    archiveIsExpanded,
    el,
    notifications,
    initial,
    hasActiveNotifications,
    addEvents,
    removeEvents,
    onDocClick,
    _send,
    onKeydown: onKeydown2,
    hasArchivedNotifications,
    hasNotifications,
    $showArchive,
    $ANIMATION_SPEED,
    $ArchivedNotifications
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(0, className2 = $$props3.className);
    if ("round" in $$props3)
      $$invalidate2(1, round = $$props3.round);
    if ("outline" in $$props3)
      $$invalidate2(2, outline = $$props3.outline);
    if ("hideButton" in $$props3)
      $$invalidate2(3, hideButton = $$props3.hideButton);
    if ("archiveIsVisible" in $$props3)
      $$invalidate2(6, archiveIsVisible = $$props3.archiveIsVisible);
    if ("archiveIsExpanded" in $$props3)
      $$invalidate2(7, archiveIsExpanded = $$props3.archiveIsExpanded);
    if ("el" in $$props3)
      $$invalidate2(8, el = $$props3.el);
    if ("notifications" in $$props3)
      $$invalidate2(4, notifications = $$props3.notifications);
    if ("initial" in $$props3)
      initial = $$props3.initial;
    if ("hasActiveNotifications" in $$props3)
      $$invalidate2(9, hasActiveNotifications = $$props3.hasActiveNotifications);
    if ("hasArchivedNotifications" in $$props3)
      $$invalidate2(5, hasArchivedNotifications = $$props3.hasArchivedNotifications);
    if ("hasNotifications" in $$props3)
      $$invalidate2(10, hasNotifications = $$props3.hasNotifications);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty[0] & /*$ArchivedNotifications*/
    32768) {
      $:
        $$invalidate2(5, hasArchivedNotifications = Object.keys($ArchivedNotifications).length ? "has-archived-notifications" : "");
    }
    if ($$self2.$$.dirty[0] & /*notifications, hasArchivedNotifications*/
    48) {
      $:
        $$invalidate2(10, hasNotifications = notifications.length || hasArchivedNotifications ? "has-notifications" : "");
    }
  };
  return [
    className2,
    round,
    outline,
    hideButton,
    notifications,
    hasArchivedNotifications,
    archiveIsVisible,
    archiveIsExpanded,
    el,
    hasActiveNotifications,
    hasNotifications,
    $showArchive,
    showArchive,
    _send,
    onKeydown2,
    $ArchivedNotifications,
    pushbutton_pressed_binding,
    click_handler,
    click_handler_1,
    mouseover_handler,
    focus_handler2,
    mouseleave_handler,
    blur_handler2,
    keydown_handler,
    notificationarchive_show_binding,
    notificationarchive_expanded_binding,
    div_binding
  ];
}
var NotificationCenter = class extends import_internal34.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal34.init)(
      this,
      options,
      instance34,
      create_fragment34,
      import_internal34.safe_not_equal,
      {
        class: 0,
        round: 1,
        outline: 2,
        hideButton: 3
      },
      null,
      [-1, -1]
    );
    (0, import_internal34.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "NotificationCenter",
      options,
      id: create_fragment34.name
    });
  }
  get class() {
    throw new Error("<NotificationCenter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<NotificationCenter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get round() {
    throw new Error("<NotificationCenter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set round(value2) {
    throw new Error("<NotificationCenter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get outline() {
    throw new Error("<NotificationCenter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set outline(value2) {
    throw new Error("<NotificationCenter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hideButton() {
    throw new Error("<NotificationCenter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hideButton(value2) {
    throw new Error("<NotificationCenter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var NotificationCenter_default = NotificationCenter;

// src/tooltip/Tooltip.svelte
var import_internal35 = __toESM(require_internal());
var import_svelte21 = __toESM(require_svelte());
var file29 = "src/tooltip/Tooltip.svelte";
function create_if_block17(ctx) {
  let div2;
  let div1;
  let div0;
  let div1_class_value;
  let div2_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = (0, import_internal35.create_slot)(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  const block = {
    c: function create() {
      div2 = (0, import_internal35.element)("div");
      div1 = (0, import_internal35.element)("div");
      div0 = (0, import_internal35.element)("div");
      if (default_slot)
        default_slot.c();
      (0, import_internal35.attr_dev)(div0, "class", "tooltip-content");
      (0, import_internal35.add_location)(div0, file29, 11, 3, 220);
      (0, import_internal35.attr_dev)(div1, "class", div1_class_value = "tooltip " + /*className*/
      ctx[1]);
      (0, import_internal35.attr_dev)(div1, "role", "tooltip");
      (0, import_internal35.add_location)(div1, file29, 10, 2, 168);
      (0, import_internal35.attr_dev)(div2, "class", div2_class_value = "tooltip-plate tooltip-" + /*_position*/
      ctx[6]);
      (0, import_internal35.toggle_class)(
        div2,
        "visible",
        /*visible*/
        ctx[7]
      );
      (0, import_internal35.toggle_class)(
        div2,
        "info",
        /*info*/
        ctx[2]
      );
      (0, import_internal35.toggle_class)(
        div2,
        "success",
        /*success*/
        ctx[3]
      );
      (0, import_internal35.toggle_class)(
        div2,
        "warning",
        /*warning*/
        ctx[4]
      );
      (0, import_internal35.toggle_class)(
        div2,
        "danger",
        /*danger*/
        ctx[5]
      );
      (0, import_internal35.add_location)(div2, file29, 1, 1, 15);
    },
    m: function mount(target, anchor) {
      (0, import_internal35.insert_dev)(target, div2, anchor);
      (0, import_internal35.append_dev)(div2, div1);
      (0, import_internal35.append_dev)(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      ctx[16](div2);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        16384)) {
          (0, import_internal35.update_slot_base)(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[14],
            !current ? (0, import_internal35.get_all_dirty_from_scope)(
              /*$$scope*/
              ctx2[14]
            ) : (0, import_internal35.get_slot_changes)(
              default_slot_template,
              /*$$scope*/
              ctx2[14],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty[0] & /*className*/
      2 && div1_class_value !== (div1_class_value = "tooltip " + /*className*/
      ctx2[1])) {
        (0, import_internal35.attr_dev)(div1, "class", div1_class_value);
      }
      if (!current || dirty[0] & /*_position*/
      64 && div2_class_value !== (div2_class_value = "tooltip-plate tooltip-" + /*_position*/
      ctx2[6])) {
        (0, import_internal35.attr_dev)(div2, "class", div2_class_value);
      }
      if (!current || dirty[0] & /*_position, visible*/
      192) {
        (0, import_internal35.toggle_class)(
          div2,
          "visible",
          /*visible*/
          ctx2[7]
        );
      }
      if (!current || dirty[0] & /*_position, info*/
      68) {
        (0, import_internal35.toggle_class)(
          div2,
          "info",
          /*info*/
          ctx2[2]
        );
      }
      if (!current || dirty[0] & /*_position, success*/
      72) {
        (0, import_internal35.toggle_class)(
          div2,
          "success",
          /*success*/
          ctx2[3]
        );
      }
      if (!current || dirty[0] & /*_position, warning*/
      80) {
        (0, import_internal35.toggle_class)(
          div2,
          "warning",
          /*warning*/
          ctx2[4]
        );
      }
      if (!current || dirty[0] & /*_position, danger*/
      96) {
        (0, import_internal35.toggle_class)(
          div2,
          "danger",
          /*danger*/
          ctx2[5]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal35.transition_in)(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal35.transition_out)(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal35.detach_dev)(div2);
      if (default_slot)
        default_slot.d(detaching);
      ctx[16](null);
    }
  };
  (0, import_internal35.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block17.name,
    type: "if",
    source: "(1:0) {#if visible}",
    ctx
  });
  return block;
}
function create_fragment35(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*visible*/
    ctx[7] && create_if_block17(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = (0, import_internal35.empty)();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal35.insert_dev)(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (
        /*visible*/
        ctx2[7]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*visible*/
          128) {
            (0, import_internal35.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block17(ctx2);
          if_block.c();
          (0, import_internal35.transition_in)(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        (0, import_internal35.group_outros)();
        (0, import_internal35.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal35.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal35.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal35.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal35.detach_dev)(if_block_anchor);
    }
  };
  (0, import_internal35.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment35.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance35($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal35.validate_slots)("Tooltip", slots2, ["default"]);
  let { target = "" } = $$props2;
  let { delay = 0 } = $$props2;
  let { position = "auto" } = $$props2;
  let { offset = 2 } = $$props2;
  let { screenPadding = 5 } = $$props2;
  let { class: className2 = "" } = $$props2;
  let { events = "hover,focus" } = $$props2;
  let { info: info2 = false } = $$props2;
  let { success = false } = $$props2;
  let { warning = false } = $$props2;
  let { danger = false } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  let _position = "top";
  let visible = false;
  let showTimer, hideTimer, shownEvent, noHide = false;
  let targetEl, tooltipContainer;
  (0, import_svelte21.onMount)(() => {
    initContainer();
    targetEl = target ? document.querySelector("#" + target) : document.body;
    addTargetEvents();
  });
  (0, import_svelte21.onDestroy)(removeTargetEvents);
  (0, import_svelte21.afterUpdate)(align);
  function show(e) {
    if (hideTimer) {
      clearTimeout(hideTimer);
      hideTimer = null;
    }
    if (visible || showTimer)
      return;
    showTimer = setTimeout(() => _show(e), parseFloat(delay) || 0);
  }
  function _show(e) {
    $$invalidate2(7, visible = true);
    noHide = false;
    showTimer = null;
    shownEvent = e.type;
    requestAnimationFrame(() => {
      tooltipContainer.appendChild(element41);
      align();
    });
    requestAnimationFrame(addTooltipEvents);
  }
  function preventHiding() {
    noHide = true;
  }
  function _hide() {
    $$invalidate2(7, visible = false);
    removeTooltipEvents();
  }
  function hide(e) {
    const targetIsSelf = targetEl instanceof Node && e.target instanceof Node && targetEl.contains(e.target);
    const targetIsTooltip = element41 && targetEl instanceof Node && element41.contains(e.target);
    if ((e.type === "mousedown" || e.type === "click") && targetIsSelf)
      return;
    if (showTimer && shownEvent !== "click") {
      clearTimeout(showTimer);
      showTimer = null;
    }
    if (!visible)
      return;
    if (e.type === "scroll" || e.type === "resize")
      return _hide();
    if (e.type === "click" || e.type === "mousedown") {
      if (targetIsSelf || targetIsTooltip)
        return;
      _hide();
    }
    if (shownEvent === "mouseover" && e.type === "mouseout")
      return hideTimer = setTimeout(_hide, 50);
    if (shownEvent === "focus" && e.type === "blur" && !noHide)
      return _hide();
    if (shownEvent === "mousedown" && e.type === "mousedown")
      return _hide();
    if (e.type === "keydown")
      return _hide();
  }
  function align() {
    if (!visible)
      return;
    const targetBox = targetEl.getBoundingClientRect();
    const tooltipBox = element41.getBoundingClientRect();
    $$invalidate2(6, _position = "top");
    let top = targetBox.top - tooltipBox.height - (parseFloat(offset) || 2);
    const left = targetBox.left + targetBox.width / 2 - tooltipBox.width / 2;
    if (top < screenPadding || position === "bottom") {
      top = targetBox.top + targetBox.height + (parseFloat(offset) || 2);
      $$invalidate2(6, _position = "bottom");
    }
    $$invalidate2(0, element41.style.top = top + "px", element41);
    $$invalidate2(0, element41.style.left = left + "px", element41);
  }
  function initContainer() {
    tooltipContainer = document.querySelector(".tooltip-container");
    if (!tooltipContainer) {
      tooltipContainer = document.createElement("DIV");
      tooltipContainer.className = "tooltip-container";
      document.body.appendChild(tooltipContainer);
    }
  }
  function onKey2(e) {
    if (e.key === "Escape")
      hide(e);
  }
  function addTooltipEvents() {
    if (!element41)
      return;
    element41.addEventListener("mousedown", preventHiding);
    if (events.includes("focus")) {
      element41.addEventListener("focus", show);
      element41.addEventListener("blur", hide);
    }
    if (events.includes("hover")) {
      element41.addEventListener("mouseover", show);
      element41.addEventListener("mouseout", hide);
    }
    window.addEventListener("resize", hide);
    document.addEventListener("scroll", hide, true);
    document.addEventListener("keydown", onKey2);
  }
  function removeTooltipEvents() {
    if (!element41)
      return;
    element41.removeEventListener("mousedown", preventHiding);
    if (events.includes("focus")) {
      element41.removeEventListener("focus", show);
      element41.removeEventListener("blur", hide);
    }
    if (events.includes("hover")) {
      element41.removeEventListener("mouseover", show);
      element41.removeEventListener("mouseout", hide);
    }
    window.removeEventListener("resize", hide);
    document.removeEventListener("scroll", hide, true);
    document.removeEventListener("keydown", onKey2);
  }
  function addTargetEvents() {
    if (!targetEl)
      return;
    if (events.includes("click")) {
      targetEl.addEventListener("mousedown", show);
      document.addEventListener("mousedown", hide);
      document.addEventListener("click", hide);
    }
    if (events.includes("focus")) {
      targetEl.addEventListener("focus", show);
      targetEl.addEventListener("blur", hide);
    }
    if (events.includes("hover")) {
      targetEl.addEventListener("mouseover", show);
      targetEl.addEventListener("mouseout", hide);
    }
  }
  function removeTargetEvents() {
    if (!targetEl)
      return;
    if (events.includes("click")) {
      targetEl.removeEventListener("mousedown", show);
      document.removeEventListener("mousedown", hide);
      document.removeEventListener("click", hide);
    }
    if (events.includes("focus")) {
      targetEl.removeEventListener("focus", show);
      targetEl.removeEventListener("blur", hide);
    }
    if (events.includes("hover")) {
      targetEl.removeEventListener("mouseover", show);
      targetEl.removeEventListener("mouseout", hide);
    }
  }
  const writable_props = [
    "target",
    "delay",
    "position",
    "offset",
    "screenPadding",
    "class",
    "events",
    "info",
    "success",
    "warning",
    "danger",
    "element"
  ];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Tooltip> was created with unknown prop '${key}'`);
  });
  function div2_binding2($$value) {
    import_internal35.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("target" in $$props3)
      $$invalidate2(8, target = $$props3.target);
    if ("delay" in $$props3)
      $$invalidate2(9, delay = $$props3.delay);
    if ("position" in $$props3)
      $$invalidate2(10, position = $$props3.position);
    if ("offset" in $$props3)
      $$invalidate2(11, offset = $$props3.offset);
    if ("screenPadding" in $$props3)
      $$invalidate2(12, screenPadding = $$props3.screenPadding);
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("events" in $$props3)
      $$invalidate2(13, events = $$props3.events);
    if ("info" in $$props3)
      $$invalidate2(2, info2 = $$props3.info);
    if ("success" in $$props3)
      $$invalidate2(3, success = $$props3.success);
    if ("warning" in $$props3)
      $$invalidate2(4, warning = $$props3.warning);
    if ("danger" in $$props3)
      $$invalidate2(5, danger = $$props3.danger);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("$$scope" in $$props3)
      $$invalidate2(14, $$scope2 = $$props3.$$scope);
  };
  $$self2.$capture_state = () => ({
    afterUpdate: import_svelte21.afterUpdate,
    onDestroy: import_svelte21.onDestroy,
    onMount: import_svelte21.onMount,
    target,
    delay,
    position,
    offset,
    screenPadding,
    className: className2,
    events,
    info: info2,
    success,
    warning,
    danger,
    element: element41,
    _position,
    visible,
    showTimer,
    hideTimer,
    shownEvent,
    noHide,
    targetEl,
    tooltipContainer,
    show,
    _show,
    preventHiding,
    _hide,
    hide,
    align,
    initContainer,
    onKey: onKey2,
    addTooltipEvents,
    removeTooltipEvents,
    addTargetEvents,
    removeTargetEvents
  });
  $$self2.$inject_state = ($$props3) => {
    if ("target" in $$props3)
      $$invalidate2(8, target = $$props3.target);
    if ("delay" in $$props3)
      $$invalidate2(9, delay = $$props3.delay);
    if ("position" in $$props3)
      $$invalidate2(10, position = $$props3.position);
    if ("offset" in $$props3)
      $$invalidate2(11, offset = $$props3.offset);
    if ("screenPadding" in $$props3)
      $$invalidate2(12, screenPadding = $$props3.screenPadding);
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("events" in $$props3)
      $$invalidate2(13, events = $$props3.events);
    if ("info" in $$props3)
      $$invalidate2(2, info2 = $$props3.info);
    if ("success" in $$props3)
      $$invalidate2(3, success = $$props3.success);
    if ("warning" in $$props3)
      $$invalidate2(4, warning = $$props3.warning);
    if ("danger" in $$props3)
      $$invalidate2(5, danger = $$props3.danger);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("_position" in $$props3)
      $$invalidate2(6, _position = $$props3._position);
    if ("visible" in $$props3)
      $$invalidate2(7, visible = $$props3.visible);
    if ("showTimer" in $$props3)
      showTimer = $$props3.showTimer;
    if ("hideTimer" in $$props3)
      hideTimer = $$props3.hideTimer;
    if ("shownEvent" in $$props3)
      shownEvent = $$props3.shownEvent;
    if ("noHide" in $$props3)
      noHide = $$props3.noHide;
    if ("targetEl" in $$props3)
      targetEl = $$props3.targetEl;
    if ("tooltipContainer" in $$props3)
      tooltipContainer = $$props3.tooltipContainer;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    element41,
    className2,
    info2,
    success,
    warning,
    danger,
    _position,
    visible,
    target,
    delay,
    position,
    offset,
    screenPadding,
    events,
    $$scope2,
    slots2,
    div2_binding2
  ];
}
var Tooltip = class extends import_internal35.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal35.init)(
      this,
      options,
      instance35,
      create_fragment35,
      import_internal35.safe_not_equal,
      {
        target: 8,
        delay: 9,
        position: 10,
        offset: 11,
        screenPadding: 12,
        class: 1,
        events: 13,
        info: 2,
        success: 3,
        warning: 4,
        danger: 5,
        element: 0
      },
      null,
      [-1, -1]
    );
    (0, import_internal35.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Tooltip",
      options,
      id: create_fragment35.name
    });
  }
  get target() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set target(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get delay() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set delay(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get position() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set position(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get offset() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set offset(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get screenPadding() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set screenPadding(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get events() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set events(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get info() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set info(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get success() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set success(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get warning() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set warning(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get danger() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set danger(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Tooltip_default = Tooltip;

// src/tree/Tree.svelte
var import_internal37 = __toESM(require_internal());
var import_svelte22 = __toESM(require_svelte());

// src/tree/TreeNode.svelte
var import_internal36 = __toESM(require_internal());
var file30 = "src/tree/TreeNode.svelte";
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_each_block_13(ctx) {
  let div;
  let div_class_value;
  const block = {
    c: function create() {
      div = (0, import_internal36.element)("div");
      (0, import_internal36.attr_dev)(div, "class", div_class_value = "tree-indent indent-" + /*indent*/
      ctx[12]);
      (0, import_internal36.add_location)(div, file30, 16, 3, 454);
    },
    m: function mount(target, anchor) {
      (0, import_internal36.insert_dev)(target, div, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*indents*/
      16 && div_class_value !== (div_class_value = "tree-indent indent-" + /*indent*/
      ctx2[12])) {
        (0, import_internal36.attr_dev)(div, "class", div_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal36.detach_dev)(div);
    }
  };
  (0, import_internal36.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block_13.name,
    type: "each",
    source: "(16:2) {#each indents as indent}",
    ctx
  });
  return block;
}
function create_if_block18(ctx) {
  let ul;
  let current;
  let each_value = (
    /*item*/
    ctx[2].items
  );
  (0, import_internal36.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
  }
  const out = (i) => (0, import_internal36.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      ul = (0, import_internal36.element)("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal36.add_location)(ul, file30, 23, 2, 650);
    },
    m: function mount(target, anchor) {
      (0, import_internal36.insert_dev)(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*level, item*/
      12) {
        each_value = /*item*/
        ctx2[2].items;
        (0, import_internal36.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0, import_internal36.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block8(child_ctx);
            each_blocks[i].c();
            (0, import_internal36.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(ul, null);
          }
        }
        (0, import_internal36.group_outros)();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        (0, import_internal36.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal36.transition_in)(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal36.transition_out)(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal36.detach_dev)(ul);
      (0, import_internal36.destroy_each)(each_blocks, detaching);
    }
  };
  (0, import_internal36.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block18.name,
    type: "if",
    source: "(23:1) {#if item.items && expanded}",
    ctx
  });
  return block;
}
function create_each_block8(ctx) {
  let treenode;
  let current;
  treenode = new TreeNode({
    props: {
      level: (
        /*level*/
        ctx[3] + 1
      ),
      item: (
        /*subitem*/
        ctx[9]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal36.create_component)(treenode.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal36.mount_component)(treenode, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const treenode_changes = {};
      if (dirty & /*level*/
      8)
        treenode_changes.level = /*level*/
        ctx2[3] + 1;
      if (dirty & /*item*/
      4)
        treenode_changes.item = /*subitem*/
        ctx2[9];
      treenode.$set(treenode_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal36.transition_in)(treenode.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal36.transition_out)(treenode.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal36.destroy_component)(treenode, detaching);
    }
  };
  (0, import_internal36.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block8.name,
    type: "each",
    source: "(25:3) {#each item.items as subitem}",
    ctx
  });
  return block;
}
function create_fragment36(ctx) {
  let li;
  let div2;
  let t0;
  let div0;
  let div0_class_value;
  let t1;
  let div1;
  let t2_value = (
    /*item*/
    ctx[2].name + ""
  );
  let t2;
  let div2_role_value;
  let div2_aria_label_value;
  let div2_aria_expanded_value;
  let div2_data_expanded_value;
  let div2_data_id_value;
  let t3;
  let current;
  let mounted;
  let dispose;
  let each_value_1 = (
    /*indents*/
    ctx[4]
  );
  (0, import_internal36.validate_each_argument)(each_value_1);
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  let if_block = (
    /*item*/
    ctx[2].items && /*expanded*/
    ctx[0] && create_if_block18(ctx)
  );
  const block = {
    c: function create() {
      li = (0, import_internal36.element)("li");
      div2 = (0, import_internal36.element)("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = (0, import_internal36.space)();
      div0 = (0, import_internal36.element)("div");
      t1 = (0, import_internal36.space)();
      div1 = (0, import_internal36.element)("div");
      t2 = (0, import_internal36.text)(t2_value);
      t3 = (0, import_internal36.space)();
      if (if_block)
        if_block.c();
      (0, import_internal36.attr_dev)(div0, "class", div0_class_value = "tree-icon tree-" + /*nodeType*/
      ctx[5] + "-icon");
      (0, import_internal36.add_location)(div0, file30, 18, 2, 514);
      (0, import_internal36.attr_dev)(div1, "class", "tree-label");
      (0, import_internal36.add_location)(div1, file30, 19, 2, 567);
      (0, import_internal36.attr_dev)(div2, "class", "tree-node");
      (0, import_internal36.attr_dev)(div2, "role", div2_role_value = /*item*/
      ctx[2].items ? "group" : "treeitem");
      (0, import_internal36.attr_dev)(div2, "aria-selected", "false");
      (0, import_internal36.attr_dev)(div2, "aria-label", div2_aria_label_value = /*item*/
      ctx[2].name);
      (0, import_internal36.attr_dev)(div2, "aria-expanded", div2_aria_expanded_value = /*item*/
      ctx[2].items ? (
        /*expanded*/
        ctx[0]
      ) : void 0);
      (0, import_internal36.attr_dev)(
        div2,
        "data-type",
        /*nodeType*/
        ctx[5]
      );
      (0, import_internal36.attr_dev)(
        div2,
        "data-level",
        /*level*/
        ctx[3]
      );
      (0, import_internal36.attr_dev)(div2, "data-expanded", div2_data_expanded_value = /*item*/
      ctx[2].items ? (
        /*expanded*/
        ctx[0]
      ) : void 0);
      (0, import_internal36.attr_dev)(div2, "data-id", div2_data_id_value = /*item*/
      ctx[2].id || void 0);
      (0, import_internal36.toggle_class)(
        div2,
        "expanded",
        /*expanded*/
        ctx[0]
      );
      (0, import_internal36.add_location)(div2, file30, 1, 1, 28);
      (0, import_internal36.add_location)(li, file30, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal36.insert_dev)(target, li, anchor);
      (0, import_internal36.append_dev)(li, div2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div2, null);
        }
      }
      (0, import_internal36.append_dev)(div2, t0);
      (0, import_internal36.append_dev)(div2, div0);
      (0, import_internal36.append_dev)(div2, t1);
      (0, import_internal36.append_dev)(div2, div1);
      (0, import_internal36.append_dev)(div1, t2);
      (0, import_internal36.append_dev)(li, t3);
      if (if_block)
        if_block.m(li, null);
      ctx[8](li);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal36.listen_dev)(
            div2,
            "click",
            function() {
              if ((0, import_internal36.is_function)(
                /*item*/
                ctx[2].items ? (
                  /*toggle*/
                  ctx[6]
                ) : void 0
              ))
                /*item*/
                (ctx[2].items ? (
                  /*toggle*/
                  ctx[6]
                ) : void 0).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          (0, import_internal36.listen_dev)(
            div2,
            "key",
            /*onkey*/
            ctx[7],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*indents*/
      16) {
        each_value_1 = /*indents*/
        ctx[4];
        (0, import_internal36.validate_each_argument)(each_value_1);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_13(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div2, t0);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
      if (!current || dirty & /*nodeType*/
      32 && div0_class_value !== (div0_class_value = "tree-icon tree-" + /*nodeType*/
      ctx[5] + "-icon")) {
        (0, import_internal36.attr_dev)(div0, "class", div0_class_value);
      }
      if ((!current || dirty & /*item*/
      4) && t2_value !== (t2_value = /*item*/
      ctx[2].name + ""))
        (0, import_internal36.set_data_dev)(t2, t2_value);
      if (!current || dirty & /*item*/
      4 && div2_role_value !== (div2_role_value = /*item*/
      ctx[2].items ? "group" : "treeitem")) {
        (0, import_internal36.attr_dev)(div2, "role", div2_role_value);
      }
      if (!current || dirty & /*item*/
      4 && div2_aria_label_value !== (div2_aria_label_value = /*item*/
      ctx[2].name)) {
        (0, import_internal36.attr_dev)(div2, "aria-label", div2_aria_label_value);
      }
      if (!current || dirty & /*item, expanded*/
      5 && div2_aria_expanded_value !== (div2_aria_expanded_value = /*item*/
      ctx[2].items ? (
        /*expanded*/
        ctx[0]
      ) : void 0)) {
        (0, import_internal36.attr_dev)(div2, "aria-expanded", div2_aria_expanded_value);
      }
      if (!current || dirty & /*nodeType*/
      32) {
        (0, import_internal36.attr_dev)(
          div2,
          "data-type",
          /*nodeType*/
          ctx[5]
        );
      }
      if (!current || dirty & /*level*/
      8) {
        (0, import_internal36.attr_dev)(
          div2,
          "data-level",
          /*level*/
          ctx[3]
        );
      }
      if (!current || dirty & /*item, expanded*/
      5 && div2_data_expanded_value !== (div2_data_expanded_value = /*item*/
      ctx[2].items ? (
        /*expanded*/
        ctx[0]
      ) : void 0)) {
        (0, import_internal36.attr_dev)(div2, "data-expanded", div2_data_expanded_value);
      }
      if (!current || dirty & /*item*/
      4 && div2_data_id_value !== (div2_data_id_value = /*item*/
      ctx[2].id || void 0)) {
        (0, import_internal36.attr_dev)(div2, "data-id", div2_data_id_value);
      }
      if (!current || dirty & /*expanded*/
      1) {
        (0, import_internal36.toggle_class)(
          div2,
          "expanded",
          /*expanded*/
          ctx[0]
        );
      }
      if (
        /*item*/
        ctx[2].items && /*expanded*/
        ctx[0]
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
          if (dirty & /*item, expanded*/
          5) {
            (0, import_internal36.transition_in)(if_block, 1);
          }
        } else {
          if_block = create_if_block18(ctx);
          if_block.c();
          (0, import_internal36.transition_in)(if_block, 1);
          if_block.m(li, null);
        }
      } else if (if_block) {
        (0, import_internal36.group_outros)();
        (0, import_internal36.transition_out)(if_block, 1, 1, () => {
          if_block = null;
        });
        (0, import_internal36.check_outros)();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal36.transition_in)(if_block);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal36.transition_out)(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal36.detach_dev)(li);
      (0, import_internal36.destroy_each)(each_blocks, detaching);
      if (if_block)
        if_block.d();
      ctx[8](null);
      mounted = false;
      (0, import_internal36.run_all)(dispose);
    }
  };
  (0, import_internal36.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment36.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance36($$self2, $$props2, $$invalidate2) {
  let nodeType;
  let indents;
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal36.validate_slots)("TreeNode", slots2, []);
  let { item = {} } = $$props2;
  let { level = 0 } = $$props2;
  let { expanded = false } = $$props2;
  let { element: element41 = void 0 } = $$props2;
  function toggle() {
    $$invalidate2(0, expanded = !expanded);
  }
  function onkey2(e) {
    const key = e && e.detail && e.detail.key;
    if (key === "right")
      $$invalidate2(0, expanded = true);
    else if (key === "left")
      $$invalidate2(0, expanded = false);
  }
  const writable_props = ["item", "level", "expanded", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<TreeNode> was created with unknown prop '${key}'`);
  });
  function li_binding($$value) {
    import_internal36.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(1, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("item" in $$props3)
      $$invalidate2(2, item = $$props3.item);
    if ("level" in $$props3)
      $$invalidate2(3, level = $$props3.level);
    if ("expanded" in $$props3)
      $$invalidate2(0, expanded = $$props3.expanded);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    item,
    level,
    expanded,
    element: element41,
    toggle,
    onkey: onkey2,
    indents,
    nodeType
  });
  $$self2.$inject_state = ($$props3) => {
    if ("item" in $$props3)
      $$invalidate2(2, item = $$props3.item);
    if ("level" in $$props3)
      $$invalidate2(3, level = $$props3.level);
    if ("expanded" in $$props3)
      $$invalidate2(0, expanded = $$props3.expanded);
    if ("element" in $$props3)
      $$invalidate2(1, element41 = $$props3.element);
    if ("indents" in $$props3)
      $$invalidate2(4, indents = $$props3.indents);
    if ("nodeType" in $$props3)
      $$invalidate2(5, nodeType = $$props3.nodeType);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  $$self2.$$.update = () => {
    if ($$self2.$$.dirty & /*item*/
    4) {
      $:
        $$invalidate2(5, nodeType = item.items ? "folder" : "file");
    }
    if ($$self2.$$.dirty & /*level*/
    8) {
      $:
        $$invalidate2(4, indents = new Array(level).fill(0));
    }
  };
  return [expanded, element41, item, level, indents, nodeType, toggle, onkey2, li_binding];
}
var TreeNode = class extends import_internal36.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal36.init)(this, options, instance36, create_fragment36, import_internal36.safe_not_equal, {
      item: 2,
      level: 3,
      expanded: 0,
      element: 1
    });
    (0, import_internal36.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "TreeNode",
      options,
      id: create_fragment36.name
    });
  }
  get item() {
    throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set item(value2) {
    throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get level() {
    throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set level(value2) {
    throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get expanded() {
    throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set expanded(value2) {
    throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var TreeNode_default = TreeNode;

// src/tree/Tree.svelte
var file31 = "src/tree/Tree.svelte";
function get_each_context9(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i];
  return child_ctx;
}
function create_each_block9(ctx) {
  let treenode;
  let current;
  treenode = new TreeNode_default({
    props: { item: (
      /*item*/
      ctx[23]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal37.create_component)(treenode.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal37.mount_component)(treenode, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const treenode_changes = {};
      if (dirty & /*items*/
      4)
        treenode_changes.item = /*item*/
        ctx2[23];
      treenode.$set(treenode_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal37.transition_in)(treenode.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal37.transition_out)(treenode.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal37.destroy_component)(treenode, detaching);
    }
  };
  (0, import_internal37.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block9.name,
    type: "each",
    source: "(12:1) {#each items as item}",
    ctx
  });
  return block;
}
function create_fragment37(ctx) {
  let ul;
  let ul_class_value;
  let current;
  let mounted;
  let dispose;
  let each_value = (
    /*items*/
    ctx[2]
  );
  (0, import_internal37.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
  }
  const out = (i) => (0, import_internal37.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      ul = (0, import_internal37.element)("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal37.attr_dev)(ul, "class", ul_class_value = "tree " + /*className*/
      ctx[1]);
      (0, import_internal37.attr_dev)(ul, "role", "tree");
      (0, import_internal37.attr_dev)(
        ul,
        "aria-label",
        /*title*/
        ctx[3]
      );
      (0, import_internal37.attr_dev)(
        ul,
        "title",
        /*title*/
        ctx[3]
      );
      (0, import_internal37.attr_dev)(ul, "tabindex", "0");
      (0, import_internal37.add_location)(ul, file31, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal37.insert_dev)(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
      ctx[7](ul);
      current = true;
      if (!mounted) {
        dispose = [
          (0, import_internal37.listen_dev)(
            ul,
            "focus",
            /*selectFirst*/
            ctx[5],
            false,
            false,
            false,
            false
          ),
          (0, import_internal37.listen_dev)(
            ul,
            "click",
            /*selectClicked*/
            ctx[4],
            false,
            false,
            false,
            false
          ),
          (0, import_internal37.listen_dev)(
            ul,
            "keydown",
            /*onkeydown*/
            ctx[6],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*items*/
      4) {
        each_value = /*items*/
        ctx2[2];
        (0, import_internal37.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context9(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0, import_internal37.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block9(child_ctx);
            each_blocks[i].c();
            (0, import_internal37.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(ul, null);
          }
        }
        (0, import_internal37.group_outros)();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        (0, import_internal37.check_outros)();
      }
      if (!current || dirty & /*className*/
      2 && ul_class_value !== (ul_class_value = "tree " + /*className*/
      ctx2[1])) {
        (0, import_internal37.attr_dev)(ul, "class", ul_class_value);
      }
      if (!current || dirty & /*title*/
      8) {
        (0, import_internal37.attr_dev)(
          ul,
          "aria-label",
          /*title*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*title*/
      8) {
        (0, import_internal37.attr_dev)(
          ul,
          "title",
          /*title*/
          ctx2[3]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal37.transition_in)(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal37.transition_out)(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal37.detach_dev)(ul);
      (0, import_internal37.destroy_each)(each_blocks, detaching);
      ctx[7](null);
      mounted = false;
      (0, import_internal37.run_all)(dispose);
    }
  };
  (0, import_internal37.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment37.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance37($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal37.validate_slots)("Tree", slots2, []);
  let { class: className2 = "" } = $$props2;
  let { items = [] } = $$props2;
  let { title = void 0 } = $$props2;
  let { element: element41 } = $$props2;
  const dispatch2 = (0, import_svelte22.createEventDispatcher)();
  let selectedItem;
  function getVisibleNodes() {
    return Array.from(element41.querySelectorAll(".tree .tree-node"));
  }
  function unselectAll() {
    element41.querySelectorAll(".tree .selected").forEach((_el) => _el.classList.remove("selected"));
  }
  function select(node) {
    if (!node || selectedItem === node)
      return;
    unselectAll();
    selectedItem = node;
    selectedItem.classList.add("selected");
    if (selectedItem.scrollIntoView) {
      selectedItem.scrollIntoView({ block: "nearest", inline: "nearest" });
    }
    const item = tryToGetSelectedItem();
    dispatch2("select", { selectedItem, item });
  }
  function selectClicked(e) {
    select(e.target.closest(".tree-node"));
  }
  function selectFirst() {
    select(getVisibleNodes()[0]);
  }
  function selectFirstChild() {
    const children = selectedItem.nextElementSibling;
    if (!children)
      return;
    const firstChild = children.querySelector(".tree-node");
    if (firstChild)
      select(firstChild);
  }
  function selectPrev() {
    const nodes = getVisibleNodes();
    const idx = nodes.indexOf(selectedItem);
    if (idx > 0)
      select(nodes[idx - 1]);
  }
  function selectNext() {
    const nodes = getVisibleNodes();
    const idx = nodes.indexOf(selectedItem);
    if (idx < nodes.length - 1)
      select(nodes[idx + 1]);
  }
  function selectParent() {
    const level = +selectedItem.dataset.level;
    if (level === 0)
      return selectFirst();
    select(selectedItem.parentElement.parentElement.previousElementSibling);
  }
  function sendKeyToNode(key) {
    const event2 = new CustomEvent("key", { detail: { key } });
    selectedItem.dispatchEvent(event2);
  }
  function goLeft() {
    const isFolder = selectedItem.dataset.type === "folder";
    if (isFolder) {
      const isExpanded = selectedItem.dataset.expanded === "true";
      if (isExpanded)
        sendKeyToNode("left");
      else
        selectParent();
    } else
      selectParent();
  }
  function goRight() {
    const isFolder = selectedItem.dataset.type === "folder";
    if (isFolder) {
      const isExpanded = selectedItem.dataset.expanded === "true";
      if (isExpanded)
        selectFirstChild();
      else
        sendKeyToNode("right");
    }
  }
  function toggle() {
    const isFolder = selectedItem.dataset.type === "folder";
    if (isFolder)
      selectedItem.click();
  }
  function onkeydown2(e) {
    const keyMap = {
      ArrowUp: selectPrev,
      ArrowDown: selectNext,
      ArrowLeft: goLeft,
      ArrowRight: goRight,
      Enter: toggle
    };
    if (typeof keyMap[e.key] === "function") {
      e.preventDefault();
      keyMap[e.key](e);
    }
    const item = tryToGetSelectedItem();
    dispatch2("keydown", { event: e, selectedItem, item });
  }
  function tryToGetSelectedItem() {
    const id2 = selectedItem.dataset.id;
    if (id2)
      return findItem(id2);
  }
  function findItem(id2, nodes) {
    if (!nodes)
      nodes = items;
    for (let found, node, i = 0; node = nodes[i]; i++) {
      if (node.id == id2)
        return node;
      if (node.items)
        found = findItem(id2, node.items);
      if (found)
        return found;
    }
  }
  $$self2.$$.on_mount.push(function() {
    if (element41 === void 0 && !("element" in $$props2 || $$self2.$$.bound[$$self2.$$.props["element"]])) {
      console.warn("<Tree> was created without expected prop 'element'");
    }
  });
  const writable_props = ["class", "items", "title", "element"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Tree> was created with unknown prop '${key}'`);
  });
  function ul_binding($$value) {
    import_internal37.binding_callbacks[$$value ? "unshift" : "push"](() => {
      element41 = $$value;
      $$invalidate2(0, element41);
    });
  }
  $$self2.$$set = ($$props3) => {
    if ("class" in $$props3)
      $$invalidate2(1, className2 = $$props3.class);
    if ("items" in $$props3)
      $$invalidate2(2, items = $$props3.items);
    if ("title" in $$props3)
      $$invalidate2(3, title = $$props3.title);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
  };
  $$self2.$capture_state = () => ({
    createEventDispatcher: import_svelte22.createEventDispatcher,
    TreeNode: TreeNode_default,
    className: className2,
    items,
    title,
    element: element41,
    dispatch: dispatch2,
    selectedItem,
    getVisibleNodes,
    unselectAll,
    select,
    selectClicked,
    selectFirst,
    selectFirstChild,
    selectPrev,
    selectNext,
    selectParent,
    sendKeyToNode,
    goLeft,
    goRight,
    toggle,
    onkeydown: onkeydown2,
    tryToGetSelectedItem,
    findItem
  });
  $$self2.$inject_state = ($$props3) => {
    if ("className" in $$props3)
      $$invalidate2(1, className2 = $$props3.className);
    if ("items" in $$props3)
      $$invalidate2(2, items = $$props3.items);
    if ("title" in $$props3)
      $$invalidate2(3, title = $$props3.title);
    if ("element" in $$props3)
      $$invalidate2(0, element41 = $$props3.element);
    if ("selectedItem" in $$props3)
      selectedItem = $$props3.selectedItem;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    element41,
    className2,
    items,
    title,
    selectClicked,
    selectFirst,
    onkeydown2,
    ul_binding
  ];
}
var Tree = class extends import_internal37.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal37.init)(this, options, instance37, create_fragment37, import_internal37.safe_not_equal, { class: 1, items: 2, title: 3, element: 0 });
    (0, import_internal37.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Tree",
      options,
      id: create_fragment37.name
    });
  }
  get class() {
    throw new Error("<Tree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value2) {
    throw new Error("<Tree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get items() {
    throw new Error("<Tree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set items(value2) {
    throw new Error("<Tree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Tree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<Tree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get element() {
    throw new Error("<Tree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set element(value2) {
    throw new Error("<Tree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Tree_default = Tree;

// docs-src/nav/NavItem.svelte
var import_internal38 = __toESM(require_internal());
var file32 = "docs-src/nav/NavItem.svelte";
function create_fragment38(ctx) {
  let a;
  let t;
  let a_href_value;
  const block = {
    c: function create() {
      a = (0, import_internal38.element)("a");
      t = (0, import_internal38.text)(
        /*name*/
        ctx[1]
      );
      (0, import_internal38.attr_dev)(a, "href", a_href_value = "#" + /*hash*/
      ctx[2]);
      (0, import_internal38.toggle_class)(
        a,
        "active",
        /*active*/
        ctx[0] === /*hash*/
        ctx[2]
      );
      (0, import_internal38.add_location)(a, file32, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal38.insert_dev)(target, a, anchor);
      (0, import_internal38.append_dev)(a, t);
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*name*/
      2)
        (0, import_internal38.set_data_dev)(
          t,
          /*name*/
          ctx2[1]
        );
      if (dirty & /*hash*/
      4 && a_href_value !== (a_href_value = "#" + /*hash*/
      ctx2[2])) {
        (0, import_internal38.attr_dev)(a, "href", a_href_value);
      }
      if (dirty & /*active, hash*/
      5) {
        (0, import_internal38.toggle_class)(
          a,
          "active",
          /*active*/
          ctx2[0] === /*hash*/
          ctx2[2]
        );
      }
    },
    i: import_internal38.noop,
    o: import_internal38.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal38.detach_dev)(a);
    }
  };
  (0, import_internal38.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment38.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance38($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal38.validate_slots)("NavItem", slots2, []);
  let { active = location.hash.substr(1) } = $$props2;
  let { name: name2 = "" } = $$props2;
  let { hash = name2.replace(/\s/g, "") } = $$props2;
  const writable_props = ["active", "name", "hash"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<NavItem> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("active" in $$props3)
      $$invalidate2(0, active = $$props3.active);
    if ("name" in $$props3)
      $$invalidate2(1, name2 = $$props3.name);
    if ("hash" in $$props3)
      $$invalidate2(2, hash = $$props3.hash);
  };
  $$self2.$capture_state = () => ({ active, name: name2, hash });
  $$self2.$inject_state = ($$props3) => {
    if ("active" in $$props3)
      $$invalidate2(0, active = $$props3.active);
    if ("name" in $$props3)
      $$invalidate2(1, name2 = $$props3.name);
    if ("hash" in $$props3)
      $$invalidate2(2, hash = $$props3.hash);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [active, name2, hash];
}
var NavItem = class extends import_internal38.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal38.init)(this, options, instance38, create_fragment38, import_internal38.safe_not_equal, { active: 0, name: 1, hash: 2 });
    (0, import_internal38.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "NavItem",
      options,
      id: create_fragment38.name
    });
  }
  get active() {
    throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set active(value2) {
    throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get name() {
    throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value2) {
    throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hash() {
    throw new Error("<NavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hash(value2) {
    throw new Error("<NavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var NavItem_default = NavItem;

// docs-src/pages/start.svelte
var import_internal39 = __toESM(require_internal());
var file33 = "docs-src/pages/start.svelte";
function create_fragment39(ctx) {
  let header;
  let img;
  let img_src_value;
  let t0;
  let h1;
  let t1;
  let em0;
  let sub;
  let t5;
  let p0;
  let t7;
  let ul;
  let li0;
  let a0;
  let t9;
  let li1;
  let a1;
  let t11;
  let li2;
  let a2;
  let t13;
  let h20;
  let t15;
  let h30;
  let t17;
  let pre0;
  let code0;
  let t19;
  let h31;
  let t21;
  let p1;
  let t22;
  let i0;
  let t24;
  let br0;
  let t25;
  let br1;
  let t26;
  let i1;
  let t28;
  let i2;
  let t30;
  let i3;
  let t32;
  let t33;
  let pre1;
  let code1;
  let t35;
  let p2;
  let t36;
  let i4;
  let t38;
  let t39;
  let i5;
  let t41;
  let em1;
  let t43;
  let i6;
  let t45;
  let h32;
  let t47;
  let i7;
  let t49;
  let pre2;
  let code2;
  let t51;
  let p3;
  let em2;
  let t53;
  let a3;
  let t55;
  let a4;
  let t57;
  let br2;
  let t58;
  let t59;
  let pre3;
  let code3;
  let t61;
  let p4;
  let t62;
  let i8;
  let t64;
  let t65;
  let pre4;
  let code4;
  let t67;
  let h21;
  let t69;
  let em3;
  let t71;
  let h33;
  let t73;
  let em4;
  let t75;
  let pre5;
  let code5;
  let t77;
  let h34;
  let t79;
  let em5;
  let t81;
  let em6;
  let t83;
  let em7;
  let t85;
  let em8;
  let t87;
  let em9;
  let t89;
  let pre6;
  let code6;
  let t91;
  let h22;
  let t93;
  let pre7;
  let code7;
  let t95;
  const block = {
    c: function create() {
      header = (0, import_internal39.element)("header");
      img = (0, import_internal39.element)("img");
      t0 = (0, import_internal39.space)();
      h1 = (0, import_internal39.element)("h1");
      t1 = (0, import_internal39.text)("PerfectThings ");
      em0 = (0, import_internal39.element)("em");
      em0.textContent = "UI";
      sub = (0, import_internal39.element)("sub");
      sub.textContent = `v${window.UI_VERSION || ""}`;
      t5 = (0, import_internal39.space)();
      p0 = (0, import_internal39.element)("p");
      p0.textContent = "A set of simple, but perfect, UI components, written in Svelte (the only front-end framework worth learning).";
      t7 = (0, import_internal39.space)();
      ul = (0, import_internal39.element)("ul");
      li0 = (0, import_internal39.element)("li");
      a0 = (0, import_internal39.element)("a");
      a0.textContent = "Homepage and docs";
      t9 = (0, import_internal39.space)();
      li1 = (0, import_internal39.element)("li");
      a1 = (0, import_internal39.element)("a");
      a1.textContent = "Github Repo";
      t11 = (0, import_internal39.space)();
      li2 = (0, import_internal39.element)("li");
      a2 = (0, import_internal39.element)("a");
      a2.textContent = "NPM Page";
      t13 = (0, import_internal39.space)();
      h20 = (0, import_internal39.element)("h2");
      h20.textContent = "Get started";
      t15 = (0, import_internal39.space)();
      h30 = (0, import_internal39.element)("h3");
      h30.textContent = "1. Firstly, install the module as a dev dependency:";
      t17 = (0, import_internal39.space)();
      pre0 = (0, import_internal39.element)("pre");
      code0 = (0, import_internal39.element)("code");
      code0.textContent = "\n	npm i -D @perfectthings/ui\n";
      t19 = (0, import_internal39.space)();
      h31 = (0, import_internal39.element)("h3");
      h31.textContent = "2. Import the CSS";
      t21 = (0, import_internal39.space)();
      p1 = (0, import_internal39.element)("p");
      t22 = (0, import_internal39.text)("You need to import the ");
      i0 = (0, import_internal39.element)("i");
      i0.textContent = "docs/ui.css";
      t24 = (0, import_internal39.text)(" into your bundle.");
      br0 = (0, import_internal39.element)("br");
      t25 = (0, import_internal39.text)("\nThere are many ways to do that. I specifically didn't use any css-to-js imports as these restrict the tools & the setup you may want to have.");
      br1 = (0, import_internal39.element)("br");
      t26 = (0, import_internal39.text)("\nThe easiest way is probably to add a ");
      i1 = (0, import_internal39.element)("i");
      i1.textContent = "postinstall";
      t28 = (0, import_internal39.text)(" script into your ");
      i2 = (0, import_internal39.element)("i");
      i2.textContent = "package.json";
      t30 = (0, import_internal39.text)(" that will just copy the file into your ");
      i3 = (0, import_internal39.element)("i");
      i3.textContent = "dist";
      t32 = (0, import_internal39.text)(" folder:");
      t33 = (0, import_internal39.space)();
      pre1 = (0, import_internal39.element)("pre");
      code1 = (0, import_internal39.element)("code");
      code1.textContent = '\n"scripts": {\n    "postinstall": "cp node_modules/@perfectthings/ui/docs/ui.css ./dist/ui.css"\n}\n';
      t35 = (0, import_internal39.space)();
      p2 = (0, import_internal39.element)("p");
      t36 = (0, import_internal39.text)("From there - you can just add it directly to the ");
      i4 = (0, import_internal39.element)("i");
      i4.textContent = "index.html";
      t38 = (0, import_internal39.text)(".");
      t39 = (0, import_internal39.space)();
      i5 = (0, import_internal39.element)("i");
      i5.textContent = "Note:";
      t41 = (0, import_internal39.text)(" you need to run ");
      em1 = (0, import_internal39.element)("em");
      em1.textContent = "npm install";
      t43 = (0, import_internal39.text)(" after adding this line to your ");
      i6 = (0, import_internal39.element)("i");
      i6.textContent = "package.json";
      t45 = (0, import_internal39.space)();
      h32 = (0, import_internal39.element)("h3");
      h32.textContent = "3. Svelte components";
      t47 = (0, import_internal39.text)("\nJust ");
      i7 = (0, import_internal39.element)("i");
      i7.textContent = "import";
      t49 = (0, import_internal39.text)(" them from the module, as normal:\n\n");
      pre2 = (0, import_internal39.element)("pre");
      code2 = (0, import_internal39.element)("code");
      code2.textContent = "\n	import { Button } from '@perfectthings/ui';\n";
      t51 = (0, import_internal39.space)();
      p3 = (0, import_internal39.element)("p");
      em2 = (0, import_internal39.element)("em");
      em2.textContent = "*";
      t53 = (0, import_internal39.space)();
      a3 = (0, import_internal39.element)("a");
      a3.textContent = "Password";
      t55 = (0, import_internal39.text)(" is a special case component, where it works fine on its own,\n	but it also has the ability to show the password strength. For that it requires an external library\n	");
      a4 = (0, import_internal39.element)("a");
      a4.textContent = "zxcvbn";
      t57 = (0, import_internal39.text)(".");
      br2 = (0, import_internal39.element)("br");
      t58 = (0, import_internal39.text)("\n	You need to load it in your html file, e.g.:");
      t59 = (0, import_internal39.space)();
      pre3 = (0, import_internal39.element)("pre");
      code3 = (0, import_internal39.element)("code");
      code3.textContent = '\n	<script src="zxcvbn.js"><\/script>\n';
      t61 = (0, import_internal39.space)();
      p4 = (0, import_internal39.element)("p");
      t62 = (0, import_internal39.text)("This script file is available in this npm package, and can be copied over to your ");
      i8 = (0, import_internal39.element)("i");
      i8.textContent = "dist";
      t64 = (0, import_internal39.text)(" folder, similarly to the css in the previous example, e.g.:");
      t65 = (0, import_internal39.space)();
      pre4 = (0, import_internal39.element)("pre");
      code4 = (0, import_internal39.element)("code");
      code4.textContent = '\n"scripts": {\n    "postinstall": "cp node_modules/@perfectthings/ui/docs/ui.css dist/ui.css && cp node_modules/@perfectthings/ui/docs/zxcvbn.js dist/zxcvbn.js"\n}\n';
      t67 = (0, import_internal39.space)();
      h21 = (0, import_internal39.element)("h2");
      h21.textContent = "Usage with SvelteKit";
      t69 = (0, import_internal39.text)("\nAvailable from ");
      em3 = (0, import_internal39.element)("em");
      em3.textContent = "v6.4.0";
      t71 = (0, import_internal39.text)(".\n\n");
      h33 = (0, import_internal39.element)("h3");
      h33.textContent = "1. Configs";
      t73 = (0, import_internal39.text)("\nBecause this is a purely front-end framework and requires browser to work, it will not work with SSR so you need to disable it.\nCreate a file: ");
      em4 = (0, import_internal39.element)("em");
      em4.textContent = "src/routes/+layout.js";
      t75 = (0, import_internal39.text)(" and add this:\n");
      pre5 = (0, import_internal39.element)("pre");
      code5 = (0, import_internal39.element)("code");
      code5.textContent = "\nexport const ssr = false;\n";
      t77 = (0, import_internal39.space)();
      h34 = (0, import_internal39.element)("h3");
      h34.textContent = "2. CSS";
      t79 = (0, import_internal39.text)("\nIf you're using SvelteKit, you need to add the ");
      em5 = (0, import_internal39.element)("em");
      em5.textContent = "ui.css";
      t81 = (0, import_internal39.text)(" file to the ");
      em6 = (0, import_internal39.element)("em");
      em6.textContent = "static";
      t83 = (0, import_internal39.text)(" folder,\nand then either import it into your ");
      em7 = (0, import_internal39.element)("em");
      em7.textContent = "global.css";
      t85 = (0, import_internal39.text)(" file or add it to the ");
      em8 = (0, import_internal39.element)("em");
      em8.textContent = "head";
      t87 = (0, import_internal39.text)(" section of your ");
      em9 = (0, import_internal39.element)("em");
      em9.textContent = "app.html";
      t89 = (0, import_internal39.text)(" file:\n");
      pre6 = (0, import_internal39.element)("pre");
      code6 = (0, import_internal39.element)("code");
      code6.textContent = '\n	<head>\n	...\n	<link rel="stylesheet" href="%sveltekit.assets%/ui.css" />\n	</head>\n';
      t91 = (0, import_internal39.text)("\n\nOnce that's done, you can import the components as normal.\n\n\n\n\n\n");
      h22 = (0, import_internal39.element)("h2");
      h22.textContent = "Development";
      t93 = (0, import_internal39.text)("\n\nYou need node & npm (obviously). Then, run these:\n\n");
      pre7 = (0, import_internal39.element)("pre");
      code7 = (0, import_internal39.element)("code");
      code7.textContent = "\ngit clone git@github.com:perfect-things/ui.git perfectthings-ui\ncd perfectthings-ui\nnpm i && npm start\n";
      t95 = (0, import_internal39.text)("\n\nA browser window should open with the demo of the components.");
      (0, import_internal39.attr_dev)(img, "class", "logo");
      if (!(0, import_internal39.src_url_equal)(img.src, img_src_value = "logo2.png"))
        (0, import_internal39.attr_dev)(img, "src", img_src_value);
      (0, import_internal39.attr_dev)(img, "alt", "Logo");
      (0, import_internal39.add_location)(img, file33, 1, 1, 30);
      (0, import_internal39.add_location)(em0, file33, 2, 36, 113);
      (0, import_internal39.add_location)(sub, file33, 2, 47, 124);
      (0, import_internal39.attr_dev)(h1, "class", "logotype");
      (0, import_internal39.add_location)(h1, file33, 2, 1, 78);
      (0, import_internal39.attr_dev)(header, "class", "main-header");
      (0, import_internal39.add_location)(header, file33, 0, 0, 0);
      (0, import_internal39.add_location)(p0, file33, 6, 0, 179);
      (0, import_internal39.attr_dev)(a0, "href", "https://ui.perfectthings.dev");
      (0, import_internal39.add_location)(a0, file33, 8, 5, 306);
      (0, import_internal39.add_location)(li0, file33, 8, 1, 302);
      (0, import_internal39.attr_dev)(a1, "href", "https://github.com/perfect-things/ui/");
      (0, import_internal39.add_location)(a1, file33, 9, 5, 372);
      (0, import_internal39.add_location)(li1, file33, 9, 1, 368);
      (0, import_internal39.attr_dev)(a2, "href", "https://www.npmjs.com/package/@perfectthings/ui");
      (0, import_internal39.add_location)(a2, file33, 10, 5, 441);
      (0, import_internal39.add_location)(li2, file33, 10, 1, 437);
      (0, import_internal39.add_location)(ul, file33, 7, 0, 296);
      (0, import_internal39.add_location)(h20, file33, 14, 0, 520);
      (0, import_internal39.add_location)(h30, file33, 16, 0, 542);
      (0, import_internal39.attr_dev)(code0, "class", "language-bash");
      (0, import_internal39.add_location)(code0, file33, 18, 5, 609);
      (0, import_internal39.add_location)(pre0, file33, 18, 0, 604);
      (0, import_internal39.add_location)(h31, file33, 23, 0, 682);
      (0, import_internal39.add_location)(i0, file33, 24, 26, 735);
      (0, import_internal39.add_location)(br0, file33, 24, 62, 771);
      (0, import_internal39.add_location)(br1, file33, 25, 141, 917);
      (0, import_internal39.add_location)(i1, file33, 26, 37, 959);
      (0, import_internal39.add_location)(i2, file33, 26, 73, 995);
      (0, import_internal39.add_location)(i3, file33, 26, 132, 1054);
      (0, import_internal39.add_location)(p1, file33, 24, 0, 709);
      (0, import_internal39.attr_dev)(code1, "class", "language-json");
      (0, import_internal39.add_location)(code1, file33, 29, 5, 1085);
      (0, import_internal39.add_location)(pre1, file33, 29, 0, 1080);
      (0, import_internal39.add_location)(i4, file33, 35, 52, 1291);
      (0, import_internal39.add_location)(p2, file33, 35, 0, 1239);
      (0, import_internal39.add_location)(i5, file33, 37, 0, 1315);
      (0, import_internal39.add_location)(em1, file33, 37, 29, 1344);
      (0, import_internal39.add_location)(i6, file33, 37, 81, 1396);
      (0, import_internal39.add_location)(h32, file33, 40, 0, 1418);
      (0, import_internal39.add_location)(i7, file33, 41, 5, 1453);
      (0, import_internal39.attr_dev)(code2, "class", "language-js");
      (0, import_internal39.add_location)(code2, file33, 43, 5, 1506);
      (0, import_internal39.add_location)(pre2, file33, 43, 0, 1501);
      (0, import_internal39.add_location)(em2, file33, 48, 1, 1612);
      (0, import_internal39.attr_dev)(a3, "href", "#InputPassword");
      (0, import_internal39.add_location)(a3, file33, 48, 12, 1623);
      (0, import_internal39.attr_dev)(a4, "href", "https://github.com/dropbox/zxcvbn");
      (0, import_internal39.add_location)(a4, file33, 50, 1, 1824);
      (0, import_internal39.add_location)(br2, file33, 50, 56, 1879);
      (0, import_internal39.add_location)(p3, file33, 47, 0, 1607);
      (0, import_internal39.attr_dev)(code3, "class", "language-html");
      (0, import_internal39.add_location)(code3, file33, 54, 5, 1941);
      (0, import_internal39.add_location)(pre3, file33, 54, 0, 1936);
      (0, import_internal39.add_location)(i8, file33, 58, 85, 2117);
      (0, import_internal39.add_location)(p4, file33, 58, 0, 2032);
      (0, import_internal39.attr_dev)(code4, "class", "language-json");
      (0, import_internal39.add_location)(code4, file33, 59, 5, 2198);
      (0, import_internal39.add_location)(pre4, file33, 59, 0, 2193);
      (0, import_internal39.add_location)(h21, file33, 68, 0, 2420);
      (0, import_internal39.add_location)(em3, file33, 69, 15, 2465);
      (0, import_internal39.add_location)(h33, file33, 71, 0, 2483);
      (0, import_internal39.add_location)(em4, file33, 73, 15, 2646);
      (0, import_internal39.attr_dev)(code5, "class", "language-js");
      (0, import_internal39.add_location)(code5, file33, 74, 5, 2696);
      (0, import_internal39.add_location)(pre5, file33, 74, 0, 2691);
      (0, import_internal39.add_location)(h34, file33, 79, 0, 2765);
      (0, import_internal39.add_location)(em5, file33, 80, 47, 2828);
      (0, import_internal39.add_location)(em6, file33, 80, 75, 2856);
      (0, import_internal39.add_location)(em7, file33, 81, 36, 2916);
      (0, import_internal39.add_location)(em8, file33, 81, 78, 2958);
      (0, import_internal39.add_location)(em9, file33, 81, 108, 2988);
      (0, import_internal39.attr_dev)(code6, "class", "language-html");
      (0, import_internal39.add_location)(code6, file33, 82, 5, 3017);
      (0, import_internal39.add_location)(pre6, file33, 82, 0, 3012);
      (0, import_internal39.add_location)(h22, file33, 95, 0, 3225);
      (0, import_internal39.attr_dev)(code7, "class", "language-bash");
      (0, import_internal39.add_location)(code7, file33, 99, 5, 3303);
      (0, import_internal39.add_location)(pre7, file33, 99, 0, 3298);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal39.insert_dev)(target, header, anchor);
      (0, import_internal39.append_dev)(header, img);
      (0, import_internal39.append_dev)(header, t0);
      (0, import_internal39.append_dev)(header, h1);
      (0, import_internal39.append_dev)(h1, t1);
      (0, import_internal39.append_dev)(h1, em0);
      (0, import_internal39.append_dev)(h1, sub);
      (0, import_internal39.insert_dev)(target, t5, anchor);
      (0, import_internal39.insert_dev)(target, p0, anchor);
      (0, import_internal39.insert_dev)(target, t7, anchor);
      (0, import_internal39.insert_dev)(target, ul, anchor);
      (0, import_internal39.append_dev)(ul, li0);
      (0, import_internal39.append_dev)(li0, a0);
      (0, import_internal39.append_dev)(li0, t9);
      (0, import_internal39.append_dev)(ul, li1);
      (0, import_internal39.append_dev)(li1, a1);
      (0, import_internal39.append_dev)(li1, t11);
      (0, import_internal39.append_dev)(ul, li2);
      (0, import_internal39.append_dev)(li2, a2);
      (0, import_internal39.insert_dev)(target, t13, anchor);
      (0, import_internal39.insert_dev)(target, h20, anchor);
      (0, import_internal39.insert_dev)(target, t15, anchor);
      (0, import_internal39.insert_dev)(target, h30, anchor);
      (0, import_internal39.insert_dev)(target, t17, anchor);
      (0, import_internal39.insert_dev)(target, pre0, anchor);
      (0, import_internal39.append_dev)(pre0, code0);
      (0, import_internal39.insert_dev)(target, t19, anchor);
      (0, import_internal39.insert_dev)(target, h31, anchor);
      (0, import_internal39.insert_dev)(target, t21, anchor);
      (0, import_internal39.insert_dev)(target, p1, anchor);
      (0, import_internal39.append_dev)(p1, t22);
      (0, import_internal39.append_dev)(p1, i0);
      (0, import_internal39.append_dev)(p1, t24);
      (0, import_internal39.append_dev)(p1, br0);
      (0, import_internal39.append_dev)(p1, t25);
      (0, import_internal39.append_dev)(p1, br1);
      (0, import_internal39.append_dev)(p1, t26);
      (0, import_internal39.append_dev)(p1, i1);
      (0, import_internal39.append_dev)(p1, t28);
      (0, import_internal39.append_dev)(p1, i2);
      (0, import_internal39.append_dev)(p1, t30);
      (0, import_internal39.append_dev)(p1, i3);
      (0, import_internal39.append_dev)(p1, t32);
      (0, import_internal39.insert_dev)(target, t33, anchor);
      (0, import_internal39.insert_dev)(target, pre1, anchor);
      (0, import_internal39.append_dev)(pre1, code1);
      (0, import_internal39.insert_dev)(target, t35, anchor);
      (0, import_internal39.insert_dev)(target, p2, anchor);
      (0, import_internal39.append_dev)(p2, t36);
      (0, import_internal39.append_dev)(p2, i4);
      (0, import_internal39.append_dev)(p2, t38);
      (0, import_internal39.insert_dev)(target, t39, anchor);
      (0, import_internal39.insert_dev)(target, i5, anchor);
      (0, import_internal39.insert_dev)(target, t41, anchor);
      (0, import_internal39.insert_dev)(target, em1, anchor);
      (0, import_internal39.insert_dev)(target, t43, anchor);
      (0, import_internal39.insert_dev)(target, i6, anchor);
      (0, import_internal39.insert_dev)(target, t45, anchor);
      (0, import_internal39.insert_dev)(target, h32, anchor);
      (0, import_internal39.insert_dev)(target, t47, anchor);
      (0, import_internal39.insert_dev)(target, i7, anchor);
      (0, import_internal39.insert_dev)(target, t49, anchor);
      (0, import_internal39.insert_dev)(target, pre2, anchor);
      (0, import_internal39.append_dev)(pre2, code2);
      (0, import_internal39.insert_dev)(target, t51, anchor);
      (0, import_internal39.insert_dev)(target, p3, anchor);
      (0, import_internal39.append_dev)(p3, em2);
      (0, import_internal39.append_dev)(p3, t53);
      (0, import_internal39.append_dev)(p3, a3);
      (0, import_internal39.append_dev)(p3, t55);
      (0, import_internal39.append_dev)(p3, a4);
      (0, import_internal39.append_dev)(p3, t57);
      (0, import_internal39.append_dev)(p3, br2);
      (0, import_internal39.append_dev)(p3, t58);
      (0, import_internal39.insert_dev)(target, t59, anchor);
      (0, import_internal39.insert_dev)(target, pre3, anchor);
      (0, import_internal39.append_dev)(pre3, code3);
      (0, import_internal39.insert_dev)(target, t61, anchor);
      (0, import_internal39.insert_dev)(target, p4, anchor);
      (0, import_internal39.append_dev)(p4, t62);
      (0, import_internal39.append_dev)(p4, i8);
      (0, import_internal39.append_dev)(p4, t64);
      (0, import_internal39.insert_dev)(target, t65, anchor);
      (0, import_internal39.insert_dev)(target, pre4, anchor);
      (0, import_internal39.append_dev)(pre4, code4);
      (0, import_internal39.insert_dev)(target, t67, anchor);
      (0, import_internal39.insert_dev)(target, h21, anchor);
      (0, import_internal39.insert_dev)(target, t69, anchor);
      (0, import_internal39.insert_dev)(target, em3, anchor);
      (0, import_internal39.insert_dev)(target, t71, anchor);
      (0, import_internal39.insert_dev)(target, h33, anchor);
      (0, import_internal39.insert_dev)(target, t73, anchor);
      (0, import_internal39.insert_dev)(target, em4, anchor);
      (0, import_internal39.insert_dev)(target, t75, anchor);
      (0, import_internal39.insert_dev)(target, pre5, anchor);
      (0, import_internal39.append_dev)(pre5, code5);
      (0, import_internal39.insert_dev)(target, t77, anchor);
      (0, import_internal39.insert_dev)(target, h34, anchor);
      (0, import_internal39.insert_dev)(target, t79, anchor);
      (0, import_internal39.insert_dev)(target, em5, anchor);
      (0, import_internal39.insert_dev)(target, t81, anchor);
      (0, import_internal39.insert_dev)(target, em6, anchor);
      (0, import_internal39.insert_dev)(target, t83, anchor);
      (0, import_internal39.insert_dev)(target, em7, anchor);
      (0, import_internal39.insert_dev)(target, t85, anchor);
      (0, import_internal39.insert_dev)(target, em8, anchor);
      (0, import_internal39.insert_dev)(target, t87, anchor);
      (0, import_internal39.insert_dev)(target, em9, anchor);
      (0, import_internal39.insert_dev)(target, t89, anchor);
      (0, import_internal39.insert_dev)(target, pre6, anchor);
      (0, import_internal39.append_dev)(pre6, code6);
      (0, import_internal39.insert_dev)(target, t91, anchor);
      (0, import_internal39.insert_dev)(target, h22, anchor);
      (0, import_internal39.insert_dev)(target, t93, anchor);
      (0, import_internal39.insert_dev)(target, pre7, anchor);
      (0, import_internal39.append_dev)(pre7, code7);
      (0, import_internal39.insert_dev)(target, t95, anchor);
    },
    p: import_internal39.noop,
    i: import_internal39.noop,
    o: import_internal39.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal39.detach_dev)(header);
      if (detaching)
        (0, import_internal39.detach_dev)(t5);
      if (detaching)
        (0, import_internal39.detach_dev)(p0);
      if (detaching)
        (0, import_internal39.detach_dev)(t7);
      if (detaching)
        (0, import_internal39.detach_dev)(ul);
      if (detaching)
        (0, import_internal39.detach_dev)(t13);
      if (detaching)
        (0, import_internal39.detach_dev)(h20);
      if (detaching)
        (0, import_internal39.detach_dev)(t15);
      if (detaching)
        (0, import_internal39.detach_dev)(h30);
      if (detaching)
        (0, import_internal39.detach_dev)(t17);
      if (detaching)
        (0, import_internal39.detach_dev)(pre0);
      if (detaching)
        (0, import_internal39.detach_dev)(t19);
      if (detaching)
        (0, import_internal39.detach_dev)(h31);
      if (detaching)
        (0, import_internal39.detach_dev)(t21);
      if (detaching)
        (0, import_internal39.detach_dev)(p1);
      if (detaching)
        (0, import_internal39.detach_dev)(t33);
      if (detaching)
        (0, import_internal39.detach_dev)(pre1);
      if (detaching)
        (0, import_internal39.detach_dev)(t35);
      if (detaching)
        (0, import_internal39.detach_dev)(p2);
      if (detaching)
        (0, import_internal39.detach_dev)(t39);
      if (detaching)
        (0, import_internal39.detach_dev)(i5);
      if (detaching)
        (0, import_internal39.detach_dev)(t41);
      if (detaching)
        (0, import_internal39.detach_dev)(em1);
      if (detaching)
        (0, import_internal39.detach_dev)(t43);
      if (detaching)
        (0, import_internal39.detach_dev)(i6);
      if (detaching)
        (0, import_internal39.detach_dev)(t45);
      if (detaching)
        (0, import_internal39.detach_dev)(h32);
      if (detaching)
        (0, import_internal39.detach_dev)(t47);
      if (detaching)
        (0, import_internal39.detach_dev)(i7);
      if (detaching)
        (0, import_internal39.detach_dev)(t49);
      if (detaching)
        (0, import_internal39.detach_dev)(pre2);
      if (detaching)
        (0, import_internal39.detach_dev)(t51);
      if (detaching)
        (0, import_internal39.detach_dev)(p3);
      if (detaching)
        (0, import_internal39.detach_dev)(t59);
      if (detaching)
        (0, import_internal39.detach_dev)(pre3);
      if (detaching)
        (0, import_internal39.detach_dev)(t61);
      if (detaching)
        (0, import_internal39.detach_dev)(p4);
      if (detaching)
        (0, import_internal39.detach_dev)(t65);
      if (detaching)
        (0, import_internal39.detach_dev)(pre4);
      if (detaching)
        (0, import_internal39.detach_dev)(t67);
      if (detaching)
        (0, import_internal39.detach_dev)(h21);
      if (detaching)
        (0, import_internal39.detach_dev)(t69);
      if (detaching)
        (0, import_internal39.detach_dev)(em3);
      if (detaching)
        (0, import_internal39.detach_dev)(t71);
      if (detaching)
        (0, import_internal39.detach_dev)(h33);
      if (detaching)
        (0, import_internal39.detach_dev)(t73);
      if (detaching)
        (0, import_internal39.detach_dev)(em4);
      if (detaching)
        (0, import_internal39.detach_dev)(t75);
      if (detaching)
        (0, import_internal39.detach_dev)(pre5);
      if (detaching)
        (0, import_internal39.detach_dev)(t77);
      if (detaching)
        (0, import_internal39.detach_dev)(h34);
      if (detaching)
        (0, import_internal39.detach_dev)(t79);
      if (detaching)
        (0, import_internal39.detach_dev)(em5);
      if (detaching)
        (0, import_internal39.detach_dev)(t81);
      if (detaching)
        (0, import_internal39.detach_dev)(em6);
      if (detaching)
        (0, import_internal39.detach_dev)(t83);
      if (detaching)
        (0, import_internal39.detach_dev)(em7);
      if (detaching)
        (0, import_internal39.detach_dev)(t85);
      if (detaching)
        (0, import_internal39.detach_dev)(em8);
      if (detaching)
        (0, import_internal39.detach_dev)(t87);
      if (detaching)
        (0, import_internal39.detach_dev)(em9);
      if (detaching)
        (0, import_internal39.detach_dev)(t89);
      if (detaching)
        (0, import_internal39.detach_dev)(pre6);
      if (detaching)
        (0, import_internal39.detach_dev)(t91);
      if (detaching)
        (0, import_internal39.detach_dev)(h22);
      if (detaching)
        (0, import_internal39.detach_dev)(t93);
      if (detaching)
        (0, import_internal39.detach_dev)(pre7);
      if (detaching)
        (0, import_internal39.detach_dev)(t95);
    }
  };
  (0, import_internal39.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment39.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance39($$self2, $$props2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal39.validate_slots)("Start", slots2, []);
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Start> was created with unknown prop '${key}'`);
  });
  return [];
}
var Start = class extends import_internal39.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal39.init)(this, options, instance39, create_fragment39, import_internal39.safe_not_equal, {});
    (0, import_internal39.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Start",
      options,
      id: create_fragment39.name
    });
  }
};
var start_default = Start;

// docs-src/pages/changelog.svelte
var import_internal40 = __toESM(require_internal());
var file34 = "docs-src/pages/changelog.svelte";
function create_fragment40(ctx) {
  let h1;
  let t1;
  let h20;
  let t2;
  let em0;
  let t4;
  let ul0;
  let li0;
  let strong0;
  let t6;
  let code0;
  let t8;
  let t9;
  let li1;
  let strong1;
  let t11;
  let code1;
  let t13;
  let code2;
  let t15;
  let t16;
  let li2;
  let strong2;
  let t18;
  let code3;
  let t20;
  let code4;
  let t22;
  let code5;
  let t24;
  let code6;
  let t26;
  let code7;
  let t28;
  let code8;
  let t30;
  let code9;
  let t32;
  let code10;
  let t34;
  let t35;
  let li3;
  let strong3;
  let t37;
  let code11;
  let t39;
  let code12;
  let t41;
  let code13;
  let t43;
  let code14;
  let t45;
  let t46;
  let li4;
  let t47;
  let code15;
  let t49;
  let code16;
  let t51;
  let t52;
  let li5;
  let t53;
  let code17;
  let t55;
  let code18;
  let t57;
  let t58;
  let li6;
  let t59;
  let code19;
  let t61;
  let code20;
  let t63;
  let t64;
  let li7;
  let t65;
  let code21;
  let t67;
  let code22;
  let t69;
  let t70;
  let h30;
  let t72;
  let ul1;
  let li8;
  let t74;
  let li9;
  let t75;
  let code23;
  let t77;
  let code24;
  let t79;
  let t80;
  let li10;
  let code25;
  let t82;
  let code26;
  let t84;
  let t85;
  let li11;
  let code27;
  let t87;
  let code28;
  let t89;
  let t90;
  let li12;
  let code29;
  let t92;
  let code30;
  let t94;
  let code31;
  let t96;
  let li13;
  let code32;
  let t98;
  let code33;
  let t100;
  let code34;
  let t102;
  let li14;
  let code35;
  let t104;
  let code36;
  let t106;
  let code37;
  let t108;
  let li15;
  let code38;
  let t110;
  let code39;
  let t112;
  let code40;
  let t114;
  let li16;
  let t115;
  let code41;
  let t117;
  let code42;
  let t119;
  let code43;
  let t121;
  let code44;
  let t123;
  let code45;
  let t125;
  let code46;
  let t127;
  let code47;
  let t129;
  let h31;
  let t131;
  let ul2;
  let li17;
  let code48;
  let t133;
  let code49;
  let t135;
  let li18;
  let code50;
  let t137;
  let code51;
  let t139;
  let li19;
  let code52;
  let t141;
  let code53;
  let t143;
  let li20;
  let code54;
  let t145;
  let code55;
  let t147;
  let li21;
  let code56;
  let t149;
  let code57;
  let t151;
  let li22;
  let code58;
  let t153;
  let code59;
  let t155;
  let li23;
  let code60;
  let t157;
  let code61;
  let t159;
  let p;
  let t160;
  let code62;
  let t162;
  let code63;
  let t164;
  let t165;
  let hr0;
  let t166;
  let h21;
  let t167;
  let em1;
  let t169;
  let ul3;
  let li24;
  let t170;
  let code64;
  let t172;
  let t173;
  let h22;
  let t174;
  let em2;
  let t176;
  let ul4;
  let li25;
  let t177;
  let code65;
  let t179;
  let t180;
  let h23;
  let t181;
  let em3;
  let t183;
  let ul5;
  let li26;
  let t184;
  let code66;
  let t186;
  let code67;
  let t188;
  let code68;
  let t190;
  let t191;
  let h24;
  let t192;
  let em4;
  let t194;
  let ul6;
  let li27;
  let t195;
  let code69;
  let t197;
  let code70;
  let t199;
  let t200;
  let li28;
  let t202;
  let h25;
  let t203;
  let em5;
  let t205;
  let ul7;
  let li29;
  let code71;
  let t207;
  let code72;
  let t209;
  let code73;
  let t211;
  let code74;
  let t213;
  let t214;
  let li30;
  let t216;
  let h26;
  let t217;
  let em6;
  let t219;
  let ul8;
  let li31;
  let strong4;
  let t221;
  let a0;
  let t223;
  let t224;
  let li32;
  let strong5;
  let t226;
  let a1;
  let t228;
  let a2;
  let t230;
  let a3;
  let t232;
  let t233;
  let li33;
  let strong6;
  let t235;
  let code75;
  let t237;
  let code76;
  let t239;
  let code77;
  let t241;
  let code78;
  let t243;
  let code79;
  let t245;
  let code80;
  let t247;
  let code81;
  let t249;
  let code82;
  let t251;
  let code83;
  let t253;
  let t254;
  let li34;
  let strong7;
  let t256;
  let code84;
  let t258;
  let code85;
  let t260;
  let t261;
  let h32;
  let t263;
  let h40;
  let t265;
  let ul9;
  let li35;
  let t266;
  let code86;
  let t268;
  let code87;
  let t270;
  let li36;
  let code88;
  let t272;
  let code89;
  let t274;
  let code90;
  let t276;
  let h41;
  let t278;
  let ul10;
  let li37;
  let t279;
  let code91;
  let t281;
  let code92;
  let t283;
  let h42;
  let t285;
  let ul11;
  let li38;
  let t286;
  let code93;
  let t288;
  let code94;
  let t290;
  let h43;
  let t292;
  let ul12;
  let li39;
  let t293;
  let code95;
  let t295;
  let code96;
  let t297;
  let h44;
  let t299;
  let ul13;
  let li40;
  let code97;
  let t301;
  let code98;
  let t303;
  let hr1;
  let t304;
  let h27;
  let t305;
  let em7;
  let t307;
  let ul14;
  let li41;
  let t308;
  let code99;
  let t310;
  let t311;
  let li42;
  let t312;
  let code100;
  let t314;
  let t315;
  let h28;
  let t316;
  let em8;
  let t318;
  let ul15;
  let li43;
  let strong8;
  let t320;
  let code101;
  let t322;
  let code102;
  let t324;
  let code103;
  let t326;
  let t327;
  let h29;
  let t328;
  let em9;
  let t330;
  let ul16;
  let li44;
  let t331;
  let code104;
  let t333;
  let t334;
  let h210;
  let t335;
  let em10;
  let t337;
  let ul18;
  let li45;
  let strong9;
  let t339;
  let code105;
  let t341;
  let code106;
  let t343;
  let t344;
  let li46;
  let code107;
  let t346;
  let strong10;
  let t348;
  let t349;
  let li51;
  let code108;
  let t351;
  let ul17;
  let li47;
  let t352;
  let code109;
  let t354;
  let code110;
  let t356;
  let t357;
  let li48;
  let t358;
  let code111;
  let t360;
  let t361;
  let li49;
  let t362;
  let code112;
  let t364;
  let code113;
  let t366;
  let code114;
  let t368;
  let t369;
  let li50;
  let t370;
  let code115;
  let t372;
  let code116;
  let t374;
  let t375;
  let h211;
  let t376;
  let em11;
  let t378;
  let ul20;
  let li55;
  let code117;
  let t380;
  let ul19;
  let li52;
  let code118;
  let t382;
  let code119;
  let t384;
  let t385;
  let li53;
  let t387;
  let li54;
  let t388;
  let code120;
  let t390;
  let code121;
  let t392;
  let code122;
  let t394;
  let code123;
  let t396;
  let t397;
  let h212;
  let t398;
  let em12;
  let t400;
  let ul22;
  let li59;
  let code124;
  let t402;
  let ul21;
  let li56;
  let t404;
  let li57;
  let t405;
  let code125;
  let t407;
  let t408;
  let li58;
  let t410;
  let h213;
  let t411;
  let em13;
  let t413;
  let ul23;
  let li60;
  let t414;
  let code126;
  let t416;
  let t417;
  let h214;
  let t418;
  let em14;
  let t420;
  let ul24;
  let li61;
  let t421;
  let code127;
  let t423;
  let t424;
  let li62;
  let code128;
  let t426;
  let t427;
  let h215;
  let t428;
  let em15;
  let t430;
  let ul25;
  let li63;
  let code129;
  let t432;
  let t433;
  let li64;
  let code130;
  let t435;
  let t436;
  let li65;
  let code131;
  let t438;
  let code132;
  let t440;
  let t441;
  let h216;
  let t442;
  let em16;
  let t444;
  let ul26;
  let li66;
  let t446;
  let li67;
  let t448;
  let li68;
  let t450;
  let li69;
  let t451;
  let code133;
  let t453;
  let code134;
  let t455;
  let t456;
  let h217;
  let t457;
  let em17;
  let t459;
  let ul27;
  let li70;
  let t461;
  let h218;
  let t462;
  let em18;
  let t464;
  let ul28;
  let li71;
  let code135;
  let t466;
  let code136;
  let t468;
  let code137;
  let t470;
  let t471;
  let h219;
  let t472;
  let em19;
  let t474;
  let ul29;
  let li72;
  let t476;
  let li73;
  let t477;
  let code138;
  let t479;
  let code139;
  let t481;
  let code140;
  let t483;
  let t484;
  let li74;
  let t486;
  let h220;
  let t487;
  let em20;
  let t489;
  let ul30;
  let li75;
  let t490;
  let code141;
  let t492;
  let t493;
  let li76;
  let code142;
  let t495;
  let t496;
  let h221;
  let t497;
  let em21;
  let t499;
  let ul31;
  let li77;
  let t501;
  let li78;
  let t502;
  let code143;
  let t504;
  let t505;
  let li79;
  let t506;
  let code144;
  let t508;
  let t509;
  let h222;
  let t510;
  let em22;
  let t512;
  let ul32;
  let li80;
  let t514;
  let h223;
  let t515;
  let em23;
  let t517;
  let ul33;
  let li81;
  let t518;
  let code145;
  let t520;
  let code146;
  let t522;
  let t523;
  let li82;
  let t524;
  let code147;
  let t526;
  let t527;
  let h224;
  let t528;
  let em24;
  let t530;
  let ul34;
  let li83;
  let code148;
  let t532;
  let t533;
  let li84;
  let t534;
  let code149;
  let t536;
  let t537;
  let h225;
  let t538;
  let em25;
  let t540;
  let ul35;
  let li85;
  let t542;
  let h226;
  let t543;
  let em26;
  let t545;
  let ul36;
  let li86;
  let code150;
  let t547;
  let t548;
  let li87;
  let code151;
  let t550;
  let code152;
  let t552;
  let t553;
  let h227;
  let t554;
  let em27;
  let t556;
  let ul37;
  let li88;
  let t558;
  let li89;
  let t560;
  let li90;
  let t562;
  let li91;
  let t563;
  let code153;
  let t565;
  let code154;
  let t567;
  let code155;
  let t569;
  let t570;
  let li92;
  let t571;
  let code156;
  let t573;
  let code157;
  let t575;
  let t576;
  let h228;
  let t577;
  let em28;
  let t579;
  let ul38;
  let li93;
  let code158;
  let t581;
  let code159;
  let t583;
  let t584;
  let li94;
  let code160;
  let t586;
  let code161;
  let t588;
  let code162;
  let t590;
  let code163;
  let t592;
  let t593;
  let h229;
  let t594;
  let em29;
  let t596;
  let ul39;
  let li95;
  let code164;
  let t598;
  let t599;
  let li96;
  let code165;
  let t601;
  let t602;
  let h230;
  let t603;
  let em30;
  let t605;
  let ul40;
  let li97;
  let code166;
  let t607;
  let t608;
  let h231;
  let t609;
  let em31;
  let t611;
  let ul41;
  let li98;
  let t612;
  let code167;
  let t614;
  let t615;
  let h232;
  let t616;
  let em32;
  let t618;
  let ul42;
  let li99;
  let t619;
  let code168;
  let t621;
  let t622;
  let h233;
  let t623;
  let em33;
  let t625;
  let ul43;
  let li100;
  let t626;
  let code169;
  let t628;
  let t629;
  let h234;
  let t630;
  let em34;
  let t632;
  let ul44;
  let li101;
  let t634;
  let h235;
  let t635;
  let em35;
  let t637;
  let ul45;
  let li102;
  let t638;
  let code170;
  let t640;
  let t641;
  let h236;
  let t642;
  let em36;
  let t644;
  let ul46;
  let li103;
  let t645;
  let code171;
  let t647;
  let code172;
  let t649;
  let t650;
  let h237;
  let t651;
  let em37;
  let t653;
  let ul47;
  let li104;
  let t654;
  let a4;
  let t656;
  let h238;
  let t657;
  let em38;
  let t659;
  let ul48;
  let li105;
  let t660;
  let code173;
  let t662;
  let t663;
  let li106;
  let t664;
  let code174;
  let t666;
  let code175;
  let t668;
  let code176;
  let t670;
  let t671;
  let h239;
  let t672;
  let em39;
  let t674;
  let ul49;
  let li107;
  let t676;
  let h240;
  let t677;
  let em40;
  let t679;
  let ul50;
  let li108;
  let t681;
  let h241;
  let t682;
  let em41;
  let t684;
  let ul51;
  let li109;
  let t685;
  let code177;
  let t687;
  let t688;
  let li110;
  let t690;
  let li111;
  let t692;
  let li112;
  let t694;
  let h242;
  let t695;
  let em42;
  let t697;
  let ul52;
  let li113;
  let t698;
  let code178;
  let t700;
  let t701;
  let h243;
  let t702;
  let em43;
  let t704;
  let ul53;
  let li114;
  let code179;
  let t706;
  let t707;
  let h244;
  let t708;
  let em44;
  let t710;
  let ul54;
  let li115;
  let t711;
  let code180;
  let t713;
  let code181;
  let t715;
  let hr2;
  let t716;
  let h245;
  let t717;
  let em45;
  let t719;
  let ul55;
  let li116;
  let t721;
  let li117;
  let t723;
  let li118;
  let t725;
  let h246;
  let t726;
  let em46;
  let t728;
  let ul56;
  let li119;
  let t730;
  let h247;
  let t731;
  let em47;
  let t733;
  let ul57;
  let li120;
  let t735;
  let h248;
  let t736;
  let em48;
  let t738;
  let ul58;
  let li121;
  let t739;
  let code182;
  let t741;
  let t742;
  let h249;
  let t743;
  let em49;
  let t745;
  let ul59;
  let li122;
  let t746;
  let code183;
  let t748;
  let t749;
  let h250;
  let t750;
  let em50;
  let t752;
  let ul60;
  let li123;
  let t754;
  let li124;
  let t756;
  let h251;
  let t757;
  let em51;
  let t759;
  let ul61;
  let li125;
  let t761;
  let h252;
  let t762;
  let em52;
  let t764;
  let ul62;
  let li126;
  let t766;
  let li127;
  let t768;
  let h253;
  let t769;
  let em53;
  let t771;
  let ul63;
  let li128;
  let t772;
  let code184;
  let t774;
  let t775;
  let h254;
  let t776;
  let em54;
  let t778;
  let ul64;
  let li129;
  let t779;
  let code185;
  let t781;
  let code186;
  let t783;
  let code187;
  let t785;
  let t786;
  let li130;
  let t787;
  let code188;
  let t789;
  let t790;
  let li131;
  let t792;
  let li132;
  let t794;
  let li133;
  let t795;
  let code189;
  let t797;
  let code190;
  let t799;
  let t800;
  let hr3;
  let t801;
  let h255;
  let t802;
  let em55;
  let t804;
  let ul65;
  let li134;
  let t805;
  let code191;
  let t807;
  let code192;
  let t809;
  let code193;
  let t811;
  let code194;
  let t813;
  let li135;
  let t815;
  let hr4;
  let t816;
  let h256;
  let t817;
  let em56;
  let t819;
  let ul66;
  let li136;
  let t820;
  let code195;
  let t822;
  let code196;
  let t824;
  let t825;
  let h257;
  let t826;
  let em57;
  let t828;
  let ul67;
  let li137;
  let t829;
  let code197;
  let t831;
  let t832;
  let li138;
  let t833;
  let code198;
  let t835;
  let t836;
  let h258;
  let t837;
  let em58;
  let t839;
  let ul68;
  let li139;
  let t840;
  let code199;
  let t842;
  let code200;
  let t844;
  let t845;
  let li140;
  let t847;
  let li141;
  let t849;
  let h259;
  let t851;
  let ul69;
  let li142;
  let t853;
  let h260;
  let t855;
  let ul70;
  let li143;
  let t856;
  let code201;
  let t858;
  let code202;
  let t860;
  let t861;
  let li144;
  let t862;
  let code203;
  let t864;
  let t865;
  let hr5;
  let t866;
  let h261;
  let t868;
  let ul71;
  let li145;
  let t869;
  let code204;
  let t871;
  let code205;
  let t873;
  let t874;
  let hr6;
  let t875;
  let h262;
  const block = {
    c: function create() {
      h1 = (0, import_internal40.element)("h1");
      h1.textContent = "Changelog";
      t1 = (0, import_internal40.space)();
      h20 = (0, import_internal40.element)("h2");
      t2 = (0, import_internal40.text)("v8.0.0 ");
      em0 = (0, import_internal40.element)("em");
      em0.textContent = "(2023-07-?)";
      t4 = (0, import_internal40.space)();
      ul0 = (0, import_internal40.element)("ul");
      li0 = (0, import_internal40.element)("li");
      strong0 = (0, import_internal40.element)("strong");
      strong0.textContent = "New:";
      t6 = (0, import_internal40.space)();
      code0 = (0, import_internal40.element)("code");
      code0.textContent = "Label";
      t8 = (0, import_internal40.text)(" component.");
      t9 = (0, import_internal40.space)();
      li1 = (0, import_internal40.element)("li");
      strong1 = (0, import_internal40.element)("strong");
      strong1.textContent = "New icons:";
      t11 = (0, import_internal40.space)();
      code1 = (0, import_internal40.element)("code");
      code1.textContent = "sun";
      t13 = (0, import_internal40.text)(" and ");
      code2 = (0, import_internal40.element)("code");
      code2.textContent = "moon";
      t15 = (0, import_internal40.text)(" for the dark-theme switchers.");
      t16 = (0, import_internal40.space)();
      li2 = (0, import_internal40.element)("li");
      strong2 = (0, import_internal40.element)("strong");
      strong2.textContent = "Improvement:";
      t18 = (0, import_internal40.space)();
      code3 = (0, import_internal40.element)("code");
      code3.textContent = "info";
      t20 = (0, import_internal40.text)(", ");
      code4 = (0, import_internal40.element)("code");
      code4.textContent = "error";
      t22 = (0, import_internal40.text)(" and ");
      code5 = (0, import_internal40.element)("code");
      code5.textContent = "label";
      t24 = (0, import_internal40.text)(" attributes are now supported on other inputs (");
      code6 = (0, import_internal40.element)("code");
      code6.textContent = "Autocomplete";
      t26 = (0, import_internal40.text)(", ");
      code7 = (0, import_internal40.element)("code");
      code7.textContent = "InputDate";
      t28 = (0, import_internal40.text)(", ");
      code8 = (0, import_internal40.element)("code");
      code8.textContent = "Select";
      t30 = (0, import_internal40.text)(", ");
      code9 = (0, import_internal40.element)("code");
      code9.textContent = "ButtonToggle";
      t32 = (0, import_internal40.text)(", and ");
      code10 = (0, import_internal40.element)("code");
      code10.textContent = "Toggle";
      t34 = (0, import_internal40.text)(").");
      t35 = (0, import_internal40.space)();
      li3 = (0, import_internal40.element)("li");
      strong3 = (0, import_internal40.element)("strong");
      strong3.textContent = "Improvement:";
      t37 = (0, import_internal40.text)(" all components now expose ");
      code11 = (0, import_internal40.element)("code");
      code11.textContent = "element";
      t39 = (0, import_internal40.text)(" and ");
      code12 = (0, import_internal40.element)("code");
      code12.textContent = "inputElement";
      t41 = (0, import_internal40.text)(" (if there is one (and only one)). The exceptions are ");
      code13 = (0, import_internal40.element)("code");
      code13.textContent = "NotificationCenter";
      t43 = (0, import_internal40.text)(" and ");
      code14 = (0, import_internal40.element)("code");
      code14.textContent = "MessageBox";
      t45 = (0, import_internal40.text)(", due to their implementation.");
      t46 = (0, import_internal40.space)();
      li4 = (0, import_internal40.element)("li");
      t47 = (0, import_internal40.text)("Added ");
      code15 = (0, import_internal40.element)("code");
      code15.textContent = "title";
      t49 = (0, import_internal40.text)(" attribute to ");
      code16 = (0, import_internal40.element)("code");
      code16.textContent = "ButtonToggle";
      t51 = (0, import_internal40.text)(".");
      t52 = (0, import_internal40.space)();
      li5 = (0, import_internal40.element)("li");
      t53 = (0, import_internal40.text)("Added ");
      code17 = (0, import_internal40.element)("code");
      code17.textContent = "success";
      t55 = (0, import_internal40.text)(" type for ");
      code18 = (0, import_internal40.element)("code");
      code18.textContent = "MessageBox";
      t57 = (0, import_internal40.text)(".");
      t58 = (0, import_internal40.space)();
      li6 = (0, import_internal40.element)("li");
      t59 = (0, import_internal40.text)("Fixed ");
      code19 = (0, import_internal40.element)("code");
      code19.textContent = "selectable=false";
      t61 = (0, import_internal40.text)(" not working on ");
      code20 = (0, import_internal40.element)("code");
      code20.textContent = "Table";
      t63 = (0, import_internal40.text)(".");
      t64 = (0, import_internal40.space)();
      li7 = (0, import_internal40.element)("li");
      t65 = (0, import_internal40.text)("Improved styling for ");
      code21 = (0, import_internal40.element)("code");
      code21.textContent = "Dialog";
      t67 = (0, import_internal40.text)(" and ");
      code22 = (0, import_internal40.element)("code");
      code22.textContent = "MessageBox";
      t69 = (0, import_internal40.text)(".");
      t70 = (0, import_internal40.space)();
      h30 = (0, import_internal40.element)("h3");
      h30.textContent = "Breaking changes";
      t72 = (0, import_internal40.space)();
      ul1 = (0, import_internal40.element)("ul");
      li8 = (0, import_internal40.element)("li");
      li8.textContent = "Color palette has been completely revamped for better accessibility (more contrast), consistency and simplicity (fewer colors and css variables).";
      t74 = (0, import_internal40.space)();
      li9 = (0, import_internal40.element)("li");
      t75 = (0, import_internal40.text)("Removed ");
      code23 = (0, import_internal40.element)("code");
      code23.textContent = "drawBorders";
      t77 = (0, import_internal40.text)(" attribute from ");
      code24 = (0, import_internal40.element)("code");
      code24.textContent = "Dialog";
      t79 = (0, import_internal40.text)(", while improving the header and footer styling for all dialogs.");
      t80 = (0, import_internal40.space)();
      li10 = (0, import_internal40.element)("li");
      code25 = (0, import_internal40.element)("code");
      code25.textContent = "Toaster";
      t82 = (0, import_internal40.text)(" component was removed. Use ");
      code26 = (0, import_internal40.element)("code");
      code26.textContent = "NotificationCenter";
      t84 = (0, import_internal40.text)(" instead.");
      t85 = (0, import_internal40.space)();
      li11 = (0, import_internal40.element)("li");
      code27 = (0, import_internal40.element)("code");
      code27.textContent = "Datepicker";
      t87 = (0, import_internal40.text)(" was renamed to ");
      code28 = (0, import_internal40.element)("code");
      code28.textContent = "InputDate";
      t89 = (0, import_internal40.text)(".");
      t90 = (0, import_internal40.space)();
      li12 = (0, import_internal40.element)("li");
      code29 = (0, import_internal40.element)("code");
      code29.textContent = "Autocomplete";
      t92 = (0, import_internal40.text)(" - HTML structure changed: ");
      code30 = (0, import_internal40.element)("code");
      code30.textContent = ".autocomplete input";
      t94 = (0, import_internal40.text)(" --> ");
      code31 = (0, import_internal40.element)("code");
      code31.textContent = ".autocomplete .input-inner .input-row input";
      t96 = (0, import_internal40.space)();
      li13 = (0, import_internal40.element)("li");
      code32 = (0, import_internal40.element)("code");
      code32.textContent = "Select";
      t98 = (0, import_internal40.text)(" - HTML structure changed: ");
      code33 = (0, import_internal40.element)("code");
      code33.textContent = ".select-wrap select";
      t100 = (0, import_internal40.text)(" --> ");
      code34 = (0, import_internal40.element)("code");
      code34.textContent = ".select .input-inner .input-row select";
      t102 = (0, import_internal40.space)();
      li14 = (0, import_internal40.element)("li");
      code35 = (0, import_internal40.element)("code");
      code35.textContent = "Table";
      t104 = (0, import_internal40.text)(" - CSS classes changed from ");
      code36 = (0, import_internal40.element)("code");
      code36.textContent = ".table-wrapper table.table";
      t106 = (0, import_internal40.text)(" --> ");
      code37 = (0, import_internal40.element)("code");
      code37.textContent = ".table table";
      t108 = (0, import_internal40.space)();
      li15 = (0, import_internal40.element)("li");
      code38 = (0, import_internal40.element)("code");
      code38.textContent = "Toggle";
      t110 = (0, import_internal40.text)(" - HTML structure changed from ");
      code39 = (0, import_internal40.element)("code");
      code39.textContent = ".toggle .toggle-inner .toggle-scroller input";
      t112 = (0, import_internal40.text)(" --> ");
      code40 = (0, import_internal40.element)("code");
      code40.textContent = ".toggle .toggle-inner .toggle-label .toggle-scroller input";
      t114 = (0, import_internal40.space)();
      li16 = (0, import_internal40.element)("li");
      t115 = (0, import_internal40.text)("These components previously exposed ");
      code41 = (0, import_internal40.element)("code");
      code41.textContent = "_this";
      t117 = (0, import_internal40.text)(", which is now renamed to ");
      code42 = (0, import_internal40.element)("code");
      code42.textContent = "element";
      t119 = (0, import_internal40.text)(": ");
      code43 = (0, import_internal40.element)("code");
      code43.textContent = "Button";
      t121 = (0, import_internal40.text)(", ");
      code44 = (0, import_internal40.element)("code");
      code44.textContent = "Checkbox";
      t123 = (0, import_internal40.text)(", ");
      code45 = (0, import_internal40.element)("code");
      code45.textContent = "InputMath";
      t125 = (0, import_internal40.text)(", ");
      code46 = (0, import_internal40.element)("code");
      code46.textContent = "PushButton";
      t127 = (0, import_internal40.text)(", ");
      code47 = (0, import_internal40.element)("code");
      code47.textContent = "Table";
      t129 = (0, import_internal40.space)();
      h31 = (0, import_internal40.element)("h3");
      h31.textContent = "Color palette - mapping from v7 to v8 colors:";
      t131 = (0, import_internal40.space)();
      ul2 = (0, import_internal40.element)("ul");
      li17 = (0, import_internal40.element)("li");
      code48 = (0, import_internal40.element)("code");
      code48.textContent = "--ui-color-text-dark-1";
      t133 = (0, import_internal40.text)(" --> ");
      code49 = (0, import_internal40.element)("code");
      code49.textContent = "--ui-color-text-1";
      t135 = (0, import_internal40.space)();
      li18 = (0, import_internal40.element)("li");
      code50 = (0, import_internal40.element)("code");
      code50.textContent = "--ui-color-text-dark-2";
      t137 = (0, import_internal40.text)(" --> ");
      code51 = (0, import_internal40.element)("code");
      code51.textContent = "--ui-color-text-2";
      t139 = (0, import_internal40.space)();
      li19 = (0, import_internal40.element)("li");
      code52 = (0, import_internal40.element)("code");
      code52.textContent = "--ui-color-border-dark-1";
      t141 = (0, import_internal40.text)(" --> ");
      code53 = (0, import_internal40.element)("code");
      code53.textContent = "--ui-color-border-1";
      t143 = (0, import_internal40.space)();
      li20 = (0, import_internal40.element)("li");
      code54 = (0, import_internal40.element)("code");
      code54.textContent = "--ui-color-border-dark-2";
      t145 = (0, import_internal40.text)(" --> ");
      code55 = (0, import_internal40.element)("code");
      code55.textContent = "--ui-color-border-2";
      t147 = (0, import_internal40.space)();
      li21 = (0, import_internal40.element)("li");
      code56 = (0, import_internal40.element)("code");
      code56.textContent = "--ui-color-background-light-2";
      t149 = (0, import_internal40.text)(" --> ");
      code57 = (0, import_internal40.element)("code");
      code57.textContent = "--ui-color-background-1";
      t151 = (0, import_internal40.space)();
      li22 = (0, import_internal40.element)("li");
      code58 = (0, import_internal40.element)("code");
      code58.textContent = "--ui-color-background-dark-2";
      t153 = (0, import_internal40.text)(" --> ");
      code59 = (0, import_internal40.element)("code");
      code59.textContent = "--ui-color-background-2";
      t155 = (0, import_internal40.space)();
      li23 = (0, import_internal40.element)("li");
      code60 = (0, import_internal40.element)("code");
      code60.textContent = "--ui-color-highlight-dark-2";
      t157 = (0, import_internal40.text)(" --> ");
      code61 = (0, import_internal40.element)("code");
      code61.textContent = "--ui-color-highlight-1";
      t159 = (0, import_internal40.space)();
      p = (0, import_internal40.element)("p");
      t160 = (0, import_internal40.text)("Other (not mentioned above) color variations, (i.e. ");
      code62 = (0, import_internal40.element)("code");
      code62.textContent = "-light-";
      t162 = (0, import_internal40.text)(" and ");
      code63 = (0, import_internal40.element)("code");
      code63.textContent = "-dark-";
      t164 = (0, import_internal40.text)(") have been removed.");
      t165 = (0, import_internal40.space)();
      hr0 = (0, import_internal40.element)("hr");
      t166 = (0, import_internal40.space)();
      h21 = (0, import_internal40.element)("h2");
      t167 = (0, import_internal40.text)("v7.1.2 ");
      em1 = (0, import_internal40.element)("em");
      em1.textContent = "(2023-07-05)";
      t169 = (0, import_internal40.space)();
      ul3 = (0, import_internal40.element)("ul");
      li24 = (0, import_internal40.element)("li");
      t170 = (0, import_internal40.text)("Fix ");
      code64 = (0, import_internal40.element)("code");
      code64.textContent = "Checkbox";
      t172 = (0, import_internal40.text)(" label (don't render empty label if no label attribute was passed).");
      t173 = (0, import_internal40.space)();
      h22 = (0, import_internal40.element)("h2");
      t174 = (0, import_internal40.text)("v7.1.1 ");
      em2 = (0, import_internal40.element)("em");
      em2.textContent = "(2023-07-01)";
      t176 = (0, import_internal40.space)();
      ul4 = (0, import_internal40.element)("ul");
      li25 = (0, import_internal40.element)("li");
      t177 = (0, import_internal40.text)("Fixed some ");
      code65 = (0, import_internal40.element)("code");
      code65.textContent = "NotificationCenter";
      t179 = (0, import_internal40.text)(" bugs.");
      t180 = (0, import_internal40.space)();
      h23 = (0, import_internal40.element)("h2");
      t181 = (0, import_internal40.text)("v7.1.0 ");
      em3 = (0, import_internal40.element)("em");
      em3.textContent = "(2023-06-30)";
      t183 = (0, import_internal40.space)();
      ul5 = (0, import_internal40.element)("ul");
      li26 = (0, import_internal40.element)("li");
      t184 = (0, import_internal40.text)("Improve ");
      code66 = (0, import_internal40.element)("code");
      code66.textContent = "Panel";
      t186 = (0, import_internal40.text)(" component with new properties: ");
      code67 = (0, import_internal40.element)("code");
      code67.textContent = "collapsible";
      t188 = (0, import_internal40.text)(" (it's not collapsible by default), and ");
      code68 = (0, import_internal40.element)("code");
      code68.textContent = "disabled";
      t190 = (0, import_internal40.text)(".");
      t191 = (0, import_internal40.space)();
      h24 = (0, import_internal40.element)("h2");
      t192 = (0, import_internal40.text)("v7.0.2 ");
      em4 = (0, import_internal40.element)("em");
      em4.textContent = "(2023-06-29)";
      t194 = (0, import_internal40.space)();
      ul6 = (0, import_internal40.element)("ul");
      li27 = (0, import_internal40.element)("li");
      t195 = (0, import_internal40.text)("Add ");
      code69 = (0, import_internal40.element)("code");
      code69.textContent = "success";
      t197 = (0, import_internal40.text)(" to the ");
      code70 = (0, import_internal40.element)("code");
      code70.textContent = "InfoBar";
      t199 = (0, import_internal40.text)(" component.");
      t200 = (0, import_internal40.space)();
      li28 = (0, import_internal40.element)("li");
      li28.textContent = "Behind the scenes refactoring and improvements.";
      t202 = (0, import_internal40.space)();
      h25 = (0, import_internal40.element)("h2");
      t203 = (0, import_internal40.text)("v7.0.1 ");
      em5 = (0, import_internal40.element)("em");
      em5.textContent = "(2023-06-28)";
      t205 = (0, import_internal40.space)();
      ul7 = (0, import_internal40.element)("ul");
      li29 = (0, import_internal40.element)("li");
      code71 = (0, import_internal40.element)("code");
      code71.textContent = "Textarea";
      t207 = (0, import_internal40.text)(" component now follows all basic inputs and support ");
      code72 = (0, import_internal40.element)("code");
      code72.textContent = "error";
      t209 = (0, import_internal40.text)(", ");
      code73 = (0, import_internal40.element)("code");
      code73.textContent = "info";
      t211 = (0, import_internal40.text)(", and ");
      code74 = (0, import_internal40.element)("code");
      code74.textContent = "label";
      t213 = (0, import_internal40.text)(" properties.");
      t214 = (0, import_internal40.space)();
      li30 = (0, import_internal40.element)("li");
      li30.textContent = "Notifications are now centered on mobile screen sizes.";
      t216 = (0, import_internal40.space)();
      h26 = (0, import_internal40.element)("h2");
      t217 = (0, import_internal40.text)("v7.0.0 ");
      em6 = (0, import_internal40.element)("em");
      em6.textContent = "(2023-06-28)";
      t219 = (0, import_internal40.space)();
      ul8 = (0, import_internal40.element)("ul");
      li31 = (0, import_internal40.element)("li");
      strong4 = (0, import_internal40.element)("strong");
      strong4.textContent = "New:";
      t221 = (0, import_internal40.space)();
      a0 = (0, import_internal40.element)("a");
      a0.textContent = "InfoBar";
      t223 = (0, import_internal40.text)(" component.");
      t224 = (0, import_internal40.space)();
      li32 = (0, import_internal40.element)("li");
      strong5 = (0, import_internal40.element)("strong");
      strong5.textContent = "New:";
      t226 = (0, import_internal40.space)();
      a1 = (0, import_internal40.element)("a");
      a1.textContent = "InputText";
      t228 = (0, import_internal40.text)(", ");
      a2 = (0, import_internal40.element)("a");
      a2.textContent = "InputNumber";
      t230 = (0, import_internal40.text)(", and ");
      a3 = (0, import_internal40.element)("a");
      a3.textContent = "Radio";
      t232 = (0, import_internal40.text)(" components.");
      t233 = (0, import_internal40.space)();
      li33 = (0, import_internal40.element)("li");
      strong6 = (0, import_internal40.element)("strong");
      strong6.textContent = "New:";
      t235 = (0, import_internal40.space)();
      code75 = (0, import_internal40.element)("code");
      code75.textContent = "info";
      t237 = (0, import_internal40.text)(", ");
      code76 = (0, import_internal40.element)("code");
      code76.textContent = "error";
      t239 = (0, import_internal40.text)(" and ");
      code77 = (0, import_internal40.element)("code");
      code77.textContent = "label";
      t241 = (0, import_internal40.text)(" attributes are now supported on all basic inputs (");
      code78 = (0, import_internal40.element)("code");
      code78.textContent = "InputText";
      t243 = (0, import_internal40.text)(", ");
      code79 = (0, import_internal40.element)("code");
      code79.textContent = "InputNumber";
      t245 = (0, import_internal40.text)(", ");
      code80 = (0, import_internal40.element)("code");
      code80.textContent = "InputMath";
      t247 = (0, import_internal40.text)(", ");
      code81 = (0, import_internal40.element)("code");
      code81.textContent = "InputPassword";
      t249 = (0, import_internal40.text)(", ");
      code82 = (0, import_internal40.element)("code");
      code82.textContent = "Radio";
      t251 = (0, import_internal40.text)(", and ");
      code83 = (0, import_internal40.element)("code");
      code83.textContent = "Checkbox";
      t253 = (0, import_internal40.text)(").");
      t254 = (0, import_internal40.space)();
      li34 = (0, import_internal40.element)("li");
      strong7 = (0, import_internal40.element)("strong");
      strong7.textContent = "Improved:";
      t256 = (0, import_internal40.space)();
      code84 = (0, import_internal40.element)("code");
      code84.textContent = "InputMath";
      t258 = (0, import_internal40.text)(" component: support for ");
      code85 = (0, import_internal40.element)("code");
      code85.textContent = "()";
      t260 = (0, import_internal40.text)(" characters, to allow for more complex expressions.");
      t261 = (0, import_internal40.space)();
      h32 = (0, import_internal40.element)("h3");
      h32.textContent = "Breaking changes";
      t263 = (0, import_internal40.space)();
      h40 = (0, import_internal40.element)("h4");
      h40.textContent = "Checkbox";
      t265 = (0, import_internal40.space)();
      ul9 = (0, import_internal40.element)("ul");
      li35 = (0, import_internal40.element)("li");
      t266 = (0, import_internal40.text)("HTML structure changed ");
      code86 = (0, import_internal40.element)("code");
      code86.textContent = "input";
      t268 = (0, import_internal40.text)(" --> ");
      code87 = (0, import_internal40.element)("code");
      code87.textContent = ".checkbox .checkbox-row input";
      t270 = (0, import_internal40.space)();
      li36 = (0, import_internal40.element)("li");
      code88 = (0, import_internal40.element)("code");
      code88.textContent = "on:change";
      t272 = (0, import_internal40.text)(" is called with a svelte event instead of the native one, so: ");
      code89 = (0, import_internal40.element)("code");
      code89.textContent = "e.target.checked";
      t274 = (0, import_internal40.text)(" is now ");
      code90 = (0, import_internal40.element)("code");
      code90.textContent = "e.detail.checked";
      t276 = (0, import_internal40.space)();
      h41 = (0, import_internal40.element)("h4");
      h41.textContent = "InputMath";
      t278 = (0, import_internal40.space)();
      ul10 = (0, import_internal40.element)("ul");
      li37 = (0, import_internal40.element)("li");
      t279 = (0, import_internal40.text)("HTML structure changed ");
      code91 = (0, import_internal40.element)("code");
      code91.textContent = ".input-math-wrapper input";
      t281 = (0, import_internal40.text)(" --> ");
      code92 = (0, import_internal40.element)("code");
      code92.textContent = ".input-math .input-inner .input-math-row input";
      t283 = (0, import_internal40.space)();
      h42 = (0, import_internal40.element)("h4");
      h42.textContent = "InputNumber:";
      t285 = (0, import_internal40.space)();
      ul11 = (0, import_internal40.element)("ul");
      li38 = (0, import_internal40.element)("li");
      t286 = (0, import_internal40.text)("HTML structure changed: ");
      code93 = (0, import_internal40.element)("code");
      code93.textContent = "input";
      t288 = (0, import_internal40.text)(" --> ");
      code94 = (0, import_internal40.element)("code");
      code94.textContent = ".input-number .input-inner input";
      t290 = (0, import_internal40.space)();
      h43 = (0, import_internal40.element)("h4");
      h43.textContent = "InputPassword";
      t292 = (0, import_internal40.space)();
      ul12 = (0, import_internal40.element)("ul");
      li39 = (0, import_internal40.element)("li");
      t293 = (0, import_internal40.text)("HTML structure changed: ");
      code95 = (0, import_internal40.element)("code");
      code95.textContent = ".input-password-wrapper .input-password-row input";
      t295 = (0, import_internal40.text)(" --> ");
      code96 = (0, import_internal40.element)("code");
      code96.textContent = ".input-password .input-inner .input-password-row input";
      t297 = (0, import_internal40.space)();
      h44 = (0, import_internal40.element)("h4");
      h44.textContent = "CSS variables changed:";
      t299 = (0, import_internal40.space)();
      ul13 = (0, import_internal40.element)("ul");
      li40 = (0, import_internal40.element)("li");
      code97 = (0, import_internal40.element)("code");
      code97.textContent = "--ui-shadow-invalid";
      t301 = (0, import_internal40.text)(" --> ");
      code98 = (0, import_internal40.element)("code");
      code98.textContent = "--ui-shadow-danger";
      t303 = (0, import_internal40.space)();
      hr1 = (0, import_internal40.element)("hr");
      t304 = (0, import_internal40.space)();
      h27 = (0, import_internal40.element)("h2");
      t305 = (0, import_internal40.text)("v6.8.1, v6.8.2 ");
      em7 = (0, import_internal40.element)("em");
      em7.textContent = "(2023-06-21)";
      t307 = (0, import_internal40.space)();
      ul14 = (0, import_internal40.element)("ul");
      li41 = (0, import_internal40.element)("li");
      t308 = (0, import_internal40.text)("Allow HTML in ");
      code99 = (0, import_internal40.element)("code");
      code99.textContent = "MessageBox";
      t310 = (0, import_internal40.text)(".");
      t311 = (0, import_internal40.space)();
      li42 = (0, import_internal40.element)("li");
      t312 = (0, import_internal40.text)("Improve styling for multi-line messages in ");
      code100 = (0, import_internal40.element)("code");
      code100.textContent = "MessageBox";
      t314 = (0, import_internal40.text)(".");
      t315 = (0, import_internal40.space)();
      h28 = (0, import_internal40.element)("h2");
      t316 = (0, import_internal40.text)("v6.8.0 ");
      em8 = (0, import_internal40.element)("em");
      em8.textContent = "(2023-06-17)";
      t318 = (0, import_internal40.space)();
      ul15 = (0, import_internal40.element)("ul");
      li43 = (0, import_internal40.element)("li");
      strong8 = (0, import_internal40.element)("strong");
      strong8.textContent = "New:";
      t320 = (0, import_internal40.space)();
      code101 = (0, import_internal40.element)("code");
      code101.textContent = "MessageBox";
      t322 = (0, import_internal40.text)(" component for displaying quick info/warning/error messages or confirmation dialogs (replacement for browser's native ");
      code102 = (0, import_internal40.element)("code");
      code102.textContent = "alert";
      t324 = (0, import_internal40.text)(" and ");
      code103 = (0, import_internal40.element)("code");
      code103.textContent = "confirm";
      t326 = (0, import_internal40.text)(").");
      t327 = (0, import_internal40.space)();
      h29 = (0, import_internal40.element)("h2");
      t328 = (0, import_internal40.text)("v6.7.1 ");
      em9 = (0, import_internal40.element)("em");
      em9.textContent = "(2023-06-13)";
      t330 = (0, import_internal40.space)();
      ul16 = (0, import_internal40.element)("ul");
      li44 = (0, import_internal40.element)("li");
      t331 = (0, import_internal40.text)("Fix ");
      code104 = (0, import_internal40.element)("code");
      code104.textContent = "Menu";
      t333 = (0, import_internal40.text)(" show and hide events and clearing the highlight on mouse out.");
      t334 = (0, import_internal40.space)();
      h210 = (0, import_internal40.element)("h2");
      t335 = (0, import_internal40.text)("v6.7.0 ");
      em10 = (0, import_internal40.element)("em");
      em10.textContent = "(2023-06-13)";
      t337 = (0, import_internal40.space)();
      ul18 = (0, import_internal40.element)("ul");
      li45 = (0, import_internal40.element)("li");
      strong9 = (0, import_internal40.element)("strong");
      strong9.textContent = "New:";
      t339 = (0, import_internal40.space)();
      code105 = (0, import_internal40.element)("code");
      code105.textContent = "NotificationCenter";
      t341 = (0, import_internal40.text)(" component. This will eventually replace ");
      code106 = (0, import_internal40.element)("code");
      code106.textContent = "Toaster";
      t343 = (0, import_internal40.text)(", as it's more accessible and powerful.");
      t344 = (0, import_internal40.space)();
      li46 = (0, import_internal40.element)("li");
      code107 = (0, import_internal40.element)("code");
      code107.textContent = "Toaster";
      t346 = (0, import_internal40.text)(" component is now ");
      strong10 = (0, import_internal40.element)("strong");
      strong10.textContent = "deprecated";
      t348 = (0, import_internal40.text)(" and will be removed in the next major version.");
      t349 = (0, import_internal40.space)();
      li51 = (0, import_internal40.element)("li");
      code108 = (0, import_internal40.element)("code");
      code108.textContent = "PushButton";
      t351 = (0, import_internal40.text)(" changes:");
      ul17 = (0, import_internal40.element)("ul");
      li47 = (0, import_internal40.element)("li");
      t352 = (0, import_internal40.text)("remove ");
      code109 = (0, import_internal40.element)("code");
      code109.textContent = "link";
      t354 = (0, import_internal40.text)(" and ");
      code110 = (0, import_internal40.element)("code");
      code110.textContent = "text";
      t356 = (0, import_internal40.text)(" types, as they don't make sense (pushed state would not be visible).");
      t357 = (0, import_internal40.space)();
      li48 = (0, import_internal40.element)("li");
      t358 = (0, import_internal40.text)("fix ");
      code111 = (0, import_internal40.element)("code");
      code111.textContent = "outline";
      t360 = (0, import_internal40.text)(" type styling.");
      t361 = (0, import_internal40.space)();
      li49 = (0, import_internal40.element)("li");
      t362 = (0, import_internal40.text)("update the event passed to the ");
      code112 = (0, import_internal40.element)("code");
      code112.textContent = "on:change";
      t364 = (0, import_internal40.text)(" callback (rename property from ");
      code113 = (0, import_internal40.element)("code");
      code113.textContent = "event.detail.value";
      t366 = (0, import_internal40.text)(" to ");
      code114 = (0, import_internal40.element)("code");
      code114.textContent = "event.detail.pressed";
      t368 = (0, import_internal40.text)(").");
      t369 = (0, import_internal40.space)();
      li50 = (0, import_internal40.element)("li");
      t370 = (0, import_internal40.text)("fix ");
      code115 = (0, import_internal40.element)("code");
      code115.textContent = "PushButton";
      t372 = (0, import_internal40.text)(" keyboard events (pressing Space or Enter would not trigger the ");
      code116 = (0, import_internal40.element)("code");
      code116.textContent = "on:change";
      t374 = (0, import_internal40.text)(" event).");
      t375 = (0, import_internal40.space)();
      h211 = (0, import_internal40.element)("h2");
      t376 = (0, import_internal40.text)("v6.6.8 ");
      em11 = (0, import_internal40.element)("em");
      em11.textContent = "(2023-06-07)";
      t378 = (0, import_internal40.space)();
      ul20 = (0, import_internal40.element)("ul");
      li55 = (0, import_internal40.element)("li");
      code117 = (0, import_internal40.element)("code");
      code117.textContent = "Menu";
      t380 = (0, import_internal40.text)(" improvements:");
      ul19 = (0, import_internal40.element)("ul");
      li52 = (0, import_internal40.element)("li");
      code118 = (0, import_internal40.element)("code");
      code118.textContent = "aria-expanded";
      t382 = (0, import_internal40.text)(" attribute was incorrectly being added to the ");
      code119 = (0, import_internal40.element)("code");
      code119.textContent = "body";
      t384 = (0, import_internal40.text)(" on menu open (apart from the target button).");
      t385 = (0, import_internal40.space)();
      li53 = (0, import_internal40.element)("li");
      li53.textContent = "Tabbing does not move focus out of the menu anymore (it will cycle through the menu items).";
      t387 = (0, import_internal40.space)();
      li54 = (0, import_internal40.element)("li");
      t388 = (0, import_internal40.text)("simplify html structure (");
      code120 = (0, import_internal40.element)("code");
      code120.textContent = "ul";
      t390 = (0, import_internal40.text)(" -> ");
      code121 = (0, import_internal40.element)("code");
      code121.textContent = "menu";
      t392 = (0, import_internal40.text)(", ");
      code122 = (0, import_internal40.element)("code");
      code122.textContent = "li/button";
      t394 = (0, import_internal40.text)(" -> ");
      code123 = (0, import_internal40.element)("code");
      code123.textContent = "button";
      t396 = (0, import_internal40.text)(")");
      t397 = (0, import_internal40.space)();
      h212 = (0, import_internal40.element)("h2");
      t398 = (0, import_internal40.text)("v6.6.7 ");
      em12 = (0, import_internal40.element)("em");
      em12.textContent = "(2023-06-01)";
      t400 = (0, import_internal40.space)();
      ul22 = (0, import_internal40.element)("ul");
      li59 = (0, import_internal40.element)("li");
      code124 = (0, import_internal40.element)("code");
      code124.textContent = "Toaster";
      t402 = (0, import_internal40.text)(" enhancements:");
      ul21 = (0, import_internal40.element)("ul");
      li56 = (0, import_internal40.element)("li");
      li56.textContent = "Improve contrast (reduce the transparency).";
      t404 = (0, import_internal40.space)();
      li57 = (0, import_internal40.element)("li");
      t405 = (0, import_internal40.text)("Make toasts focusable (so that they can be closed with ");
      code125 = (0, import_internal40.element)("code");
      code125.textContent = "Escape";
      t407 = (0, import_internal40.text)(").");
      t408 = (0, import_internal40.space)();
      li58 = (0, import_internal40.element)("li");
      li58.textContent = "When toasts are focused or mouse is over them, the auto-close progress will pause.";
      t410 = (0, import_internal40.space)();
      h213 = (0, import_internal40.element)("h2");
      t411 = (0, import_internal40.text)("v6.6.6 ");
      em13 = (0, import_internal40.element)("em");
      em13.textContent = "(2023-05-31)";
      t413 = (0, import_internal40.space)();
      ul23 = (0, import_internal40.element)("ul");
      li60 = (0, import_internal40.element)("li");
      t414 = (0, import_internal40.text)("Fix ");
      code126 = (0, import_internal40.element)("code");
      code126.textContent = "button-toggle";
      t416 = (0, import_internal40.text)(" not working on mobile.");
      t417 = (0, import_internal40.space)();
      h214 = (0, import_internal40.element)("h2");
      t418 = (0, import_internal40.text)("v6.6.4, v6.6.5 ");
      em14 = (0, import_internal40.element)("em");
      em14.textContent = "(2023-05-12)";
      t420 = (0, import_internal40.space)();
      ul24 = (0, import_internal40.element)("ul");
      li61 = (0, import_internal40.element)("li");
      t421 = (0, import_internal40.text)("Bring back ");
      code127 = (0, import_internal40.element)("code");
      code127.textContent = "--ui-shadow-small";
      t423 = (0, import_internal40.text)(" property.");
      t424 = (0, import_internal40.space)();
      li62 = (0, import_internal40.element)("li");
      code128 = (0, import_internal40.element)("code");
      code128.textContent = "Menu";
      t426 = (0, import_internal40.text)(" performance improvements: menu will not be rendered until it's opened.");
      t427 = (0, import_internal40.space)();
      h215 = (0, import_internal40.element)("h2");
      t428 = (0, import_internal40.text)("v6.6.0, v6.6.1, v6.6.2, v6.6.3 ");
      em15 = (0, import_internal40.element)("em");
      em15.textContent = "(2023-05-11)";
      t430 = (0, import_internal40.space)();
      ul25 = (0, import_internal40.element)("ul");
      li63 = (0, import_internal40.element)("li");
      code129 = (0, import_internal40.element)("code");
      code129.textContent = "Select";
      t432 = (0, import_internal40.text)(" now also accepts an array of strings for items.");
      t433 = (0, import_internal40.space)();
      li64 = (0, import_internal40.element)("li");
      code130 = (0, import_internal40.element)("code");
      code130.textContent = "ButtonToggle";
      t435 = (0, import_internal40.text)(" now also accepts an array of strings for items.");
      t436 = (0, import_internal40.space)();
      li65 = (0, import_internal40.element)("li");
      code131 = (0, import_internal40.element)("code");
      code131.textContent = "em";
      t438 = (0, import_internal40.text)(" to ");
      code132 = (0, import_internal40.element)("code");
      code132.textContent = "rem";
      t440 = (0, import_internal40.text)(", as it's more consistent and predictable.");
      t441 = (0, import_internal40.space)();
      h216 = (0, import_internal40.element)("h2");
      t442 = (0, import_internal40.text)("v6.5.3, v6.5.4, v6.5.5 ");
      em16 = (0, import_internal40.element)("em");
      em16.textContent = "(2023-05-09)";
      t444 = (0, import_internal40.space)();
      ul26 = (0, import_internal40.element)("ul");
      li66 = (0, import_internal40.element)("li");
      li66.textContent = "Standardise button height to match all the other controls.";
      t446 = (0, import_internal40.space)();
      li67 = (0, import_internal40.element)("li");
      li67.textContent = "Standardise placeholder and input-icon colours.";
      t448 = (0, import_internal40.space)();
      li68 = (0, import_internal40.element)("li");
      li68.textContent = "Enhance Autocomplete's and DatePicker's input-icon click experience.";
      t450 = (0, import_internal40.space)();
      li69 = (0, import_internal40.element)("li");
      t451 = (0, import_internal40.text)("Size the icons in ");
      code133 = (0, import_internal40.element)("code");
      code133.textContent = "em";
      t453 = (0, import_internal40.text)(" not ");
      code134 = (0, import_internal40.element)("code");
      code134.textContent = "px";
      t455 = (0, import_internal40.text)(".");
      t456 = (0, import_internal40.space)();
      h217 = (0, import_internal40.element)("h2");
      t457 = (0, import_internal40.text)("v6.5.2 ");
      em17 = (0, import_internal40.element)("em");
      em17.textContent = "(2023-05-08)";
      t459 = (0, import_internal40.space)();
      ul27 = (0, import_internal40.element)("ul");
      li70 = (0, import_internal40.element)("li");
      li70.textContent = "Maintenance update: upgrade dependencies, remove yet another useless a11y warning from svelte zealots.";
      t461 = (0, import_internal40.space)();
      h218 = (0, import_internal40.element)("h2");
      t462 = (0, import_internal40.text)("v6.5.1 ");
      em18 = (0, import_internal40.element)("em");
      em18.textContent = "(2023-05-07)";
      t464 = (0, import_internal40.space)();
      ul28 = (0, import_internal40.element)("ul");
      li71 = (0, import_internal40.element)("li");
      code135 = (0, import_internal40.element)("code");
      code135.textContent = "Menu";
      t466 = (0, import_internal40.text)(" highlighting upgrade: ");
      code136 = (0, import_internal40.element)("code");
      code136.textContent = "ArrowDown";
      t468 = (0, import_internal40.text)(" on the last item will highlight the first item, ");
      code137 = (0, import_internal40.element)("code");
      code137.textContent = "ArrowUp";
      t470 = (0, import_internal40.text)(" on the first item will highlight the last item.");
      t471 = (0, import_internal40.space)();
      h219 = (0, import_internal40.element)("h2");
      t472 = (0, import_internal40.text)("v6.5.0 ");
      em19 = (0, import_internal40.element)("em");
      em19.textContent = "(2023-04-28)";
      t474 = (0, import_internal40.space)();
      ul29 = (0, import_internal40.element)("ul");
      li72 = (0, import_internal40.element)("li");
      li72.textContent = "Change the default color for a secondary button.";
      t476 = (0, import_internal40.space)();
      li73 = (0, import_internal40.element)("li");
      t477 = (0, import_internal40.text)("Add ");
      code138 = (0, import_internal40.element)("code");
      code138.textContent = "info";
      t479 = (0, import_internal40.text)(" type to ");
      code139 = (0, import_internal40.element)("code");
      code139.textContent = "Button";
      t481 = (0, import_internal40.text)(" component (that takes the colour of the previous ");
      code140 = (0, import_internal40.element)("code");
      code140.textContent = "default";
      t483 = (0, import_internal40.text)(").");
      t484 = (0, import_internal40.space)();
      li74 = (0, import_internal40.element)("li");
      li74.textContent = "Fix round button (with text) aspect-ratio lock.";
      t486 = (0, import_internal40.space)();
      h220 = (0, import_internal40.element)("h2");
      t487 = (0, import_internal40.text)("v6.4.3 ");
      em20 = (0, import_internal40.element)("em");
      em20.textContent = "(2023-04-27)";
      t489 = (0, import_internal40.space)();
      ul30 = (0, import_internal40.element)("ul");
      li75 = (0, import_internal40.element)("li");
      t490 = (0, import_internal40.text)("Improve ");
      code141 = (0, import_internal40.element)("code");
      code141.textContent = "<InputPassword/>";
      t492 = (0, import_internal40.text)(" component: don't rerender when eye button is clicked, minor alignment style tweak.");
      t493 = (0, import_internal40.space)();
      li76 = (0, import_internal40.element)("li");
      code142 = (0, import_internal40.element)("code");
      code142.textContent = "Autocomplete";
      t495 = (0, import_internal40.text)(" keyboard scrolling alignment fix (highlighted item was partially cropped).");
      t496 = (0, import_internal40.space)();
      h221 = (0, import_internal40.element)("h2");
      t497 = (0, import_internal40.text)("v6.4.1, v6.4.2 ");
      em21 = (0, import_internal40.element)("em");
      em21.textContent = "(2023-04-22)";
      t499 = (0, import_internal40.space)();
      ul31 = (0, import_internal40.element)("ul");
      li77 = (0, import_internal40.element)("li");
      li77.textContent = "Remove the need to inline svg icons in the consumer's build.";
      t501 = (0, import_internal40.space)();
      li78 = (0, import_internal40.element)("li");
      t502 = (0, import_internal40.text)("Add ");
      code143 = (0, import_internal40.element)("code");
      code143.textContent = "addIcon";
      t504 = (0, import_internal40.text)(" function to allow adding custom icons.");
      t505 = (0, import_internal40.space)();
      li79 = (0, import_internal40.element)("li");
      t506 = (0, import_internal40.text)("Fix ");
      code144 = (0, import_internal40.element)("code");
      code144.textContent = "menu.open";
      t508 = (0, import_internal40.text)(" issue when event was not passed.");
      t509 = (0, import_internal40.space)();
      h222 = (0, import_internal40.element)("h2");
      t510 = (0, import_internal40.text)("v6.4.0 ");
      em22 = (0, import_internal40.element)("em");
      em22.textContent = "(2023-04-20)";
      t512 = (0, import_internal40.space)();
      ul32 = (0, import_internal40.element)("ul");
      li80 = (0, import_internal40.element)("li");
      li80.textContent = "Tweaks to allow it to be used with SvelteKit.";
      t514 = (0, import_internal40.space)();
      h223 = (0, import_internal40.element)("h2");
      t515 = (0, import_internal40.text)("v6.3.15, v6.3.16 ");
      em23 = (0, import_internal40.element)("em");
      em23.textContent = "(2023-04-15)";
      t517 = (0, import_internal40.space)();
      ul33 = (0, import_internal40.element)("ul");
      li81 = (0, import_internal40.element)("li");
      t518 = (0, import_internal40.text)("New icons: ");
      code145 = (0, import_internal40.element)("code");
      code145.textContent = "undo";
      t520 = (0, import_internal40.text)(" and ");
      code146 = (0, import_internal40.element)("code");
      code146.textContent = "redo";
      t522 = (0, import_internal40.text)(".");
      t523 = (0, import_internal40.space)();
      li82 = (0, import_internal40.element)("li");
      t524 = (0, import_internal40.text)("Fix ");
      code147 = (0, import_internal40.element)("code");
      code147.textContent = "ButtonGroup";
      t526 = (0, import_internal40.text)(" styling for other button types.");
      t527 = (0, import_internal40.space)();
      h224 = (0, import_internal40.element)("h2");
      t528 = (0, import_internal40.text)("v6.3.13, v6.3.14 ");
      em24 = (0, import_internal40.element)("em");
      em24.textContent = "(2023-04-12)";
      t530 = (0, import_internal40.space)();
      ul34 = (0, import_internal40.element)("ul");
      li83 = (0, import_internal40.element)("li");
      code148 = (0, import_internal40.element)("code");
      code148.textContent = "Tooltip";
      t532 = (0, import_internal40.text)(" style tweaks, so it's finally perfect.");
      t533 = (0, import_internal40.space)();
      li84 = (0, import_internal40.element)("li");
      t534 = (0, import_internal40.text)("Minor fix in ");
      code149 = (0, import_internal40.element)("code");
      code149.textContent = "Tooltip";
      t536 = (0, import_internal40.text)(".");
      t537 = (0, import_internal40.space)();
      h225 = (0, import_internal40.element)("h2");
      t538 = (0, import_internal40.text)("v6.3.12 ");
      em25 = (0, import_internal40.element)("em");
      em25.textContent = "(2023-04-09)";
      t540 = (0, import_internal40.space)();
      ul35 = (0, import_internal40.element)("ul");
      li85 = (0, import_internal40.element)("li");
      li85.textContent = "Cleanup.";
      t542 = (0, import_internal40.space)();
      h226 = (0, import_internal40.element)("h2");
      t543 = (0, import_internal40.text)("v6.3.9, v6.3.10, v6.3.11, v6.3.12 ");
      em26 = (0, import_internal40.element)("em");
      em26.textContent = "(2023-04-07)";
      t545 = (0, import_internal40.space)();
      ul36 = (0, import_internal40.element)("ul");
      li86 = (0, import_internal40.element)("li");
      code150 = (0, import_internal40.element)("code");
      code150.textContent = "Menu";
      t547 = (0, import_internal40.text)(" on-close should resolve instantly, when the menu is already closed.");
      t548 = (0, import_internal40.space)();
      li87 = (0, import_internal40.element)("li");
      code151 = (0, import_internal40.element)("code");
      code151.textContent = "Menu";
      t550 = (0, import_internal40.text)(" new attribute ");
      code152 = (0, import_internal40.element)("code");
      code152.textContent = "align";
      t552 = (0, import_internal40.text)(" allows to align the menu to the right with the target.");
      t553 = (0, import_internal40.space)();
      h227 = (0, import_internal40.element)("h2");
      t554 = (0, import_internal40.text)("v6.3.4, v6.3.5, v6.3.6, v6.3.7, v6.3.8 ");
      em27 = (0, import_internal40.element)("em");
      em27.textContent = "(2023-04-06)";
      t556 = (0, import_internal40.space)();
      ul37 = (0, import_internal40.element)("ul");
      li88 = (0, import_internal40.element)("li");
      li88.textContent = "Handle svelte's newest a11y warnings.";
      t558 = (0, import_internal40.space)();
      li89 = (0, import_internal40.element)("li");
      li89.textContent = "Tweak media query notation.";
      t560 = (0, import_internal40.space)();
      li90 = (0, import_internal40.element)("li");
      li90.textContent = "Remove menu of type='input'.";
      t562 = (0, import_internal40.space)();
      li91 = (0, import_internal40.element)("li");
      t563 = (0, import_internal40.text)("Allow ");
      code153 = (0, import_internal40.element)("code");
      code153.textContent = "data-";
      t565 = (0, import_internal40.text)(" attributes on ");
      code154 = (0, import_internal40.element)("code");
      code154.textContent = "Button";
      t567 = (0, import_internal40.text)(" and ");
      code155 = (0, import_internal40.element)("code");
      code155.textContent = "MenuItem";
      t569 = (0, import_internal40.text)(".");
      t570 = (0, import_internal40.space)();
      li92 = (0, import_internal40.element)("li");
      t571 = (0, import_internal40.text)("Fix Menu target button's ");
      code156 = (0, import_internal40.element)("code");
      code156.textContent = "aria-expanded";
      t573 = (0, import_internal40.text)(" attribute (wasn't set to ");
      code157 = (0, import_internal40.element)("code");
      code157.textContent = "false";
      t575 = (0, import_internal40.text)(" on menu close).");
      t576 = (0, import_internal40.space)();
      h228 = (0, import_internal40.element)("h2");
      t577 = (0, import_internal40.text)("v6.3.3 ");
      em28 = (0, import_internal40.element)("em");
      em28.textContent = "(2023-04-05)";
      t579 = (0, import_internal40.space)();
      ul38 = (0, import_internal40.element)("ul");
      li93 = (0, import_internal40.element)("li");
      code158 = (0, import_internal40.element)("code");
      code158.textContent = "Tooltip";
      t581 = (0, import_internal40.text)(" tip was upgraded to take advantage of the new ");
      code159 = (0, import_internal40.element)("code");
      code159.textContent = "clip-path";
      t583 = (0, import_internal40.text)(" property.");
      t584 = (0, import_internal40.space)();
      li94 = (0, import_internal40.element)("li");
      code160 = (0, import_internal40.element)("code");
      code160.textContent = "Tooltip";
      t586 = (0, import_internal40.text)(" tip was enhanced with color variations: ");
      code161 = (0, import_internal40.element)("code");
      code161.textContent = "success";
      t588 = (0, import_internal40.text)(", ");
      code162 = (0, import_internal40.element)("code");
      code162.textContent = "warning";
      t590 = (0, import_internal40.text)(" and ");
      code163 = (0, import_internal40.element)("code");
      code163.textContent = "danger";
      t592 = (0, import_internal40.text)(".");
      t593 = (0, import_internal40.space)();
      h229 = (0, import_internal40.element)("h2");
      t594 = (0, import_internal40.text)("v6.3.2 ");
      em29 = (0, import_internal40.element)("em");
      em29.textContent = "(2023-03-30)";
      t596 = (0, import_internal40.space)();
      ul39 = (0, import_internal40.element)("ul");
      li95 = (0, import_internal40.element)("li");
      code164 = (0, import_internal40.element)("code");
      code164.textContent = "Table";
      t598 = (0, import_internal40.text)(" will not listen to events when it's not the target.");
      t599 = (0, import_internal40.space)();
      li96 = (0, import_internal40.element)("li");
      code165 = (0, import_internal40.element)("code");
      code165.textContent = "Dialog";
      t601 = (0, import_internal40.text)(" buttons can now be navigated with left & right arrow keys for convenience.");
      t602 = (0, import_internal40.space)();
      h230 = (0, import_internal40.element)("h2");
      t603 = (0, import_internal40.text)("v6.3.1 ");
      em30 = (0, import_internal40.element)("em");
      em30.textContent = "(2023-03-26)";
      t605 = (0, import_internal40.space)();
      ul40 = (0, import_internal40.element)("ul");
      li97 = (0, import_internal40.element)("li");
      code166 = (0, import_internal40.element)("code");
      code166.textContent = "ButtonGroup";
      t607 = (0, import_internal40.text)(" styling tweaks (edge buttons padding alignment)");
      t608 = (0, import_internal40.space)();
      h231 = (0, import_internal40.element)("h2");
      t609 = (0, import_internal40.text)("v6.3.0 ");
      em31 = (0, import_internal40.element)("em");
      em31.textContent = "(2023-03-26)";
      t611 = (0, import_internal40.space)();
      ul41 = (0, import_internal40.element)("ul");
      li98 = (0, import_internal40.element)("li");
      t612 = (0, import_internal40.text)("enhance ");
      code167 = (0, import_internal40.element)("code");
      code167.textContent = "MenuItem";
      t614 = (0, import_internal40.text)(" component (add props: class, disabled, icon, success, warning, danger)");
      t615 = (0, import_internal40.space)();
      h232 = (0, import_internal40.element)("h2");
      t616 = (0, import_internal40.text)("v6.2.10 ");
      em32 = (0, import_internal40.element)("em");
      em32.textContent = "(2023-03-25)";
      t618 = (0, import_internal40.space)();
      ul42 = (0, import_internal40.element)("ul");
      li99 = (0, import_internal40.element)("li");
      t619 = (0, import_internal40.text)("Also pass event target in menu ");
      code168 = (0, import_internal40.element)("code");
      code168.textContent = "on:close";
      t621 = (0, import_internal40.text)(" event.");
      t622 = (0, import_internal40.space)();
      h233 = (0, import_internal40.element)("h2");
      t623 = (0, import_internal40.text)("v6.2.9 ");
      em33 = (0, import_internal40.element)("em");
      em33.textContent = "(2023-03-25)";
      t625 = (0, import_internal40.space)();
      ul43 = (0, import_internal40.element)("ul");
      li100 = (0, import_internal40.element)("li");
      t626 = (0, import_internal40.text)("Fix: menu ");
      code169 = (0, import_internal40.element)("code");
      code169.textContent = "on:open";
      t628 = (0, import_internal40.text)(" event was missing.");
      t629 = (0, import_internal40.space)();
      h234 = (0, import_internal40.element)("h2");
      t630 = (0, import_internal40.text)("v6.2.8 ");
      em34 = (0, import_internal40.element)("em");
      em34.textContent = "(2023-03-24)";
      t632 = (0, import_internal40.space)();
      ul44 = (0, import_internal40.element)("ul");
      li101 = (0, import_internal40.element)("li");
      li101.textContent = "move tooltip custom class attribute to the tooltip itself, not the content (so that it can easily overwrite the background color).";
      t634 = (0, import_internal40.space)();
      h235 = (0, import_internal40.element)("h2");
      t635 = (0, import_internal40.text)("v6.2.7 ");
      em35 = (0, import_internal40.element)("em");
      em35.textContent = "(2023-03-24)";
      t637 = (0, import_internal40.space)();
      ul45 = (0, import_internal40.element)("ul");
      li102 = (0, import_internal40.element)("li");
      t638 = (0, import_internal40.text)("revert some tooltip changes (");
      code170 = (0, import_internal40.element)("code");
      code170.textContent = "events";
      t640 = (0, import_internal40.text)(" prop is actually useful)");
      t641 = (0, import_internal40.space)();
      h236 = (0, import_internal40.element)("h2");
      t642 = (0, import_internal40.text)("v6.2.6 ");
      em36 = (0, import_internal40.element)("em");
      em36.textContent = "(2023-03-24)";
      t644 = (0, import_internal40.space)();
      ul46 = (0, import_internal40.element)("ul");
      li103 = (0, import_internal40.element)("li");
      t645 = (0, import_internal40.text)("simplify tooltip (change bg color to ");
      code171 = (0, import_internal40.element)("code");
      code171.textContent = "accent";
      t647 = (0, import_internal40.text)(", drop ");
      code172 = (0, import_internal40.element)("code");
      code172.textContent = "events";
      t649 = (0, import_internal40.text)(" prop and default to focus + hover)");
      t650 = (0, import_internal40.space)();
      h237 = (0, import_internal40.element)("h2");
      t651 = (0, import_internal40.text)("v6.2.5 ");
      em37 = (0, import_internal40.element)("em");
      em37.textContent = "(2023-03-24)";
      t653 = (0, import_internal40.space)();
      ul47 = (0, import_internal40.element)("ul");
      li104 = (0, import_internal40.element)("li");
      t654 = (0, import_internal40.text)("disable svelte false-positive a11y warnings. See ");
      a4 = (0, import_internal40.element)("a");
      a4.textContent = "svelte#8402";
      t656 = (0, import_internal40.space)();
      h238 = (0, import_internal40.element)("h2");
      t657 = (0, import_internal40.text)("v6.2.4 ");
      em38 = (0, import_internal40.element)("em");
      em38.textContent = "(2023-03-24)";
      t659 = (0, import_internal40.space)();
      ul48 = (0, import_internal40.element)("ul");
      li105 = (0, import_internal40.element)("li");
      t660 = (0, import_internal40.text)("update table docs (missing ");
      code173 = (0, import_internal40.element)("code");
      code173.textContent = "data";
      t662 = (0, import_internal40.text)(" prop)");
      t663 = (0, import_internal40.space)();
      li106 = (0, import_internal40.element)("li");
      t664 = (0, import_internal40.text)("change button's ");
      code174 = (0, import_internal40.element)("code");
      code174.textContent = "active";
      t666 = (0, import_internal40.text)(" class to ");
      code175 = (0, import_internal40.element)("code");
      code175.textContent = "touching";
      t668 = (0, import_internal40.text)(" for touch events (to not conflict with popular ");
      code176 = (0, import_internal40.element)("code");
      code176.textContent = "active";
      t670 = (0, import_internal40.text)(" class name that may be used by consumers)");
      t671 = (0, import_internal40.space)();
      h239 = (0, import_internal40.element)("h2");
      t672 = (0, import_internal40.text)("v6.2.2, v6.2.3 ");
      em39 = (0, import_internal40.element)("em");
      em39.textContent = "(2023-03-24)";
      t674 = (0, import_internal40.space)();
      ul49 = (0, import_internal40.element)("ul");
      li107 = (0, import_internal40.element)("li");
      li107.textContent = "Fix issue where a selectable table would become non-selectable if another table on the same page was destroyed.";
      t676 = (0, import_internal40.space)();
      h240 = (0, import_internal40.element)("h2");
      t677 = (0, import_internal40.text)("v6.2.1 ");
      em40 = (0, import_internal40.element)("em");
      em40.textContent = "(2023-03-23)";
      t679 = (0, import_internal40.space)();
      ul50 = (0, import_internal40.element)("ul");
      li108 = (0, import_internal40.element)("li");
      li108.textContent = "Datepicker should stopPropagation on Escape, when the calendar is open.";
      t681 = (0, import_internal40.space)();
      h241 = (0, import_internal40.element)("h2");
      t682 = (0, import_internal40.text)("v6.2.0 ");
      em41 = (0, import_internal40.element)("em");
      em41.textContent = "(2023-03-20)";
      t684 = (0, import_internal40.space)();
      ul51 = (0, import_internal40.element)("ul");
      li109 = (0, import_internal40.element)("li");
      t685 = (0, import_internal40.text)("Review accessibility of all components (added ");
      code177 = (0, import_internal40.element)("code");
      code177.textContent = "aria-";
      t687 = (0, import_internal40.text)(" roles and attributes where necessary).");
      t688 = (0, import_internal40.space)();
      li110 = (0, import_internal40.element)("li");
      li110.textContent = "Tweaked some components (e.g. close Tooltip on Escape)";
      t690 = (0, import_internal40.space)();
      li111 = (0, import_internal40.element)("li");
      li111.textContent = "Added unit tests for all components.";
      t692 = (0, import_internal40.space)();
      li112 = (0, import_internal40.element)("li");
      li112.textContent = "Docs pages style tweaks (e.g. color palette)";
      t694 = (0, import_internal40.space)();
      h242 = (0, import_internal40.element)("h2");
      t695 = (0, import_internal40.text)("v6.1.1 ");
      em42 = (0, import_internal40.element)("em");
      em42.textContent = "(2023-03-15)";
      t697 = (0, import_internal40.space)();
      ul52 = (0, import_internal40.element)("ul");
      li113 = (0, import_internal40.element)("li");
      t698 = (0, import_internal40.text)("Remove ");
      code178 = (0, import_internal40.element)("code");
      code178.textContent = "coverage";
      t700 = (0, import_internal40.text)(" folder from the npm package.");
      t701 = (0, import_internal40.space)();
      h243 = (0, import_internal40.element)("h2");
      t702 = (0, import_internal40.text)("v6.1.0 ");
      em43 = (0, import_internal40.element)("em");
      em43.textContent = "(2023-03-15)";
      t704 = (0, import_internal40.space)();
      ul53 = (0, import_internal40.element)("ul");
      li114 = (0, import_internal40.element)("li");
      code179 = (0, import_internal40.element)("code");
      code179.textContent = "Toggle";
      t706 = (0, import_internal40.text)(" component has been completely rewritten to make it more flexible and perfect.");
      t707 = (0, import_internal40.space)();
      h244 = (0, import_internal40.element)("h2");
      t708 = (0, import_internal40.text)("v6.0.0, v6.0.1, v6.0.2 ");
      em44 = (0, import_internal40.element)("em");
      em44.textContent = "(2023-03-13)";
      t710 = (0, import_internal40.space)();
      ul54 = (0, import_internal40.element)("ul");
      li115 = (0, import_internal40.element)("li");
      t711 = (0, import_internal40.text)("rebrand ");
      code180 = (0, import_internal40.element)("code");
      code180.textContent = "simple-ui-components-in-svelte";
      t713 = (0, import_internal40.text)(" to ");
      code181 = (0, import_internal40.element)("code");
      code181.textContent = "@perfectthings/ui";
      t715 = (0, import_internal40.space)();
      hr2 = (0, import_internal40.element)("hr");
      t716 = (0, import_internal40.space)();
      h245 = (0, import_internal40.element)("h2");
      t717 = (0, import_internal40.text)("v5.1.0 ");
      em45 = (0, import_internal40.element)("em");
      em45.textContent = "(2023-03-12)";
      t719 = (0, import_internal40.space)();
      ul55 = (0, import_internal40.element)("ul");
      li116 = (0, import_internal40.element)("li");
      li116.textContent = "Better Menu highlighting (doesn't hl first item on open, mouseout removes the highlighting), inline with how native menus work on MacOS";
      t721 = (0, import_internal40.space)();
      li117 = (0, import_internal40.element)("li");
      li117.textContent = "Mobile friendlier buttons (touchstart invokes :active styling)";
      t723 = (0, import_internal40.space)();
      li118 = (0, import_internal40.element)("li");
      li118.textContent = "unit tests for some components";
      t725 = (0, import_internal40.space)();
      h246 = (0, import_internal40.element)("h2");
      t726 = (0, import_internal40.text)("v5.0.8 ");
      em46 = (0, import_internal40.element)("em");
      em46.textContent = "(2023-03-03)";
      t728 = (0, import_internal40.space)();
      ul56 = (0, import_internal40.element)("ul");
      li119 = (0, import_internal40.element)("li");
      li119.textContent = "Tooltip offset parameter";
      t730 = (0, import_internal40.space)();
      h247 = (0, import_internal40.element)("h2");
      t731 = (0, import_internal40.text)("v5.0.7 ");
      em47 = (0, import_internal40.element)("em");
      em47.textContent = "(2023-03-03)";
      t733 = (0, import_internal40.space)();
      ul57 = (0, import_internal40.element)("ul");
      li120 = (0, import_internal40.element)("li");
      li120.textContent = "PushButton fix (pushed class was not applied)";
      t735 = (0, import_internal40.space)();
      h248 = (0, import_internal40.element)("h2");
      t736 = (0, import_internal40.text)("v5.0.6 ");
      em48 = (0, import_internal40.element)("em");
      em48.textContent = "(2023-03-02)";
      t738 = (0, import_internal40.space)();
      ul58 = (0, import_internal40.element)("ul");
      li121 = (0, import_internal40.element)("li");
      t739 = (0, import_internal40.text)("Add back ");
      code182 = (0, import_internal40.element)("code");
      code182.textContent = "form";
      t741 = (0, import_internal40.text)(" property to a button");
      t742 = (0, import_internal40.space)();
      h249 = (0, import_internal40.element)("h2");
      t743 = (0, import_internal40.text)("v5.0.5 ");
      em49 = (0, import_internal40.element)("em");
      em49.textContent = "(2023-03-02)";
      t745 = (0, import_internal40.space)();
      ul59 = (0, import_internal40.element)("ul");
      li122 = (0, import_internal40.element)("li");
      t746 = (0, import_internal40.text)("Reduce memory footprint (removed some of the ");
      code183 = (0, import_internal40.element)("code");
      code183.textContent = "transform";
      t748 = (0, import_internal40.text)(" props that were no longer necessary)");
      t749 = (0, import_internal40.space)();
      h250 = (0, import_internal40.element)("h2");
      t750 = (0, import_internal40.text)("v5.0.4 ");
      em50 = (0, import_internal40.element)("em");
      em50.textContent = "(2023-03-02)";
      t752 = (0, import_internal40.space)();
      ul60 = (0, import_internal40.element)("ul");
      li123 = (0, import_internal40.element)("li");
      li123.textContent = "esbuild replaced rollup for speed and simplicity";
      t754 = (0, import_internal40.space)();
      li124 = (0, import_internal40.element)("li");
      li124.textContent = "cleanup & refactoring";
      t756 = (0, import_internal40.space)();
      h251 = (0, import_internal40.element)("h2");
      t757 = (0, import_internal40.text)("v5.0.3 ");
      em51 = (0, import_internal40.element)("em");
      em51.textContent = "(2023-03-01)";
      t759 = (0, import_internal40.space)();
      ul61 = (0, import_internal40.element)("ul");
      li125 = (0, import_internal40.element)("li");
      li125.textContent = "Tooltip hiding fix (wasn't hiding when hovering target)";
      t761 = (0, import_internal40.space)();
      h252 = (0, import_internal40.element)("h2");
      t762 = (0, import_internal40.text)("v5.0.2 ");
      em52 = (0, import_internal40.element)("em");
      em52.textContent = "(2023-03-01)";
      t764 = (0, import_internal40.space)();
      ul62 = (0, import_internal40.element)("ul");
      li126 = (0, import_internal40.element)("li");
      li126.textContent = "Toaster import fix";
      t766 = (0, import_internal40.space)();
      li127 = (0, import_internal40.element)("li");
      li127.textContent = "Tooltip fix (some console errors were popping up)";
      t768 = (0, import_internal40.space)();
      h253 = (0, import_internal40.element)("h2");
      t769 = (0, import_internal40.text)("v5.0.1 ");
      em53 = (0, import_internal40.element)("em");
      em53.textContent = "(2023-02-28)";
      t771 = (0, import_internal40.space)();
      ul63 = (0, import_internal40.element)("ul");
      li128 = (0, import_internal40.element)("li");
      t772 = (0, import_internal40.text)("Bring back ");
      code184 = (0, import_internal40.element)("code");
      code184.textContent = "button-outline.css";
      t774 = (0, import_internal40.text)(" (it was accidentally deleted in v5.0.0)");
      t775 = (0, import_internal40.space)();
      h254 = (0, import_internal40.element)("h2");
      t776 = (0, import_internal40.text)("v5.0.0 ");
      em54 = (0, import_internal40.element)("em");
      em54.textContent = "(2023-02-28)";
      t778 = (0, import_internal40.space)();
      ul64 = (0, import_internal40.element)("ul");
      li129 = (0, import_internal40.element)("li");
      t779 = (0, import_internal40.text)("Breaking change: renamed props for all components: ");
      code185 = (0, import_internal40.element)("code");
      code185.textContent = "className";
      t781 = (0, import_internal40.text)(" -> ");
      code186 = (0, import_internal40.element)("code");
      code186.textContent = "class";
      t783 = (0, import_internal40.text)(" (as it turns out it is possible to use ");
      code187 = (0, import_internal40.element)("code");
      code187.textContent = "class";
      t785 = (0, import_internal40.text)(" as a prop name in svelte)");
      t786 = (0, import_internal40.space)();
      li130 = (0, import_internal40.element)("li");
      t787 = (0, import_internal40.text)("Almost all components now have a ");
      code188 = (0, import_internal40.element)("code");
      code188.textContent = "class";
      t789 = (0, import_internal40.text)(" prop, which can be used to add custom classes to the component");
      t790 = (0, import_internal40.space)();
      li131 = (0, import_internal40.element)("li");
      li131.textContent = "Updated docs to reflect the above changes";
      t792 = (0, import_internal40.space)();
      li132 = (0, import_internal40.element)("li");
      li132.textContent = "Docs API table is now alphabetically sorted";
      t794 = (0, import_internal40.space)();
      li133 = (0, import_internal40.element)("li");
      t795 = (0, import_internal40.text)("Components don't use ");
      code189 = (0, import_internal40.element)("code");
      code189.textContent = "$$props";
      t797 = (0, import_internal40.text)(" anymore, as it was causing issues with the ");
      code190 = (0, import_internal40.element)("code");
      code190.textContent = "class";
      t799 = (0, import_internal40.text)(" prop. Instead, the props are now explicitly passed down to the component. This is a good thing to do, as it makes the components more explicit and easier to understand.");
      t800 = (0, import_internal40.space)();
      hr3 = (0, import_internal40.element)("hr");
      t801 = (0, import_internal40.space)();
      h255 = (0, import_internal40.element)("h2");
      t802 = (0, import_internal40.text)("v4.0.0 ");
      em55 = (0, import_internal40.element)("em");
      em55.textContent = "(2023-02-28)";
      t804 = (0, import_internal40.space)();
      ul65 = (0, import_internal40.element)("ul");
      li134 = (0, import_internal40.element)("li");
      t805 = (0, import_internal40.text)("Breaking change: renamed components: ");
      code191 = (0, import_internal40.element)("code");
      code191.textContent = "Item";
      t807 = (0, import_internal40.text)(" -> ");
      code192 = (0, import_internal40.element)("code");
      code192.textContent = "MenuItem";
      t809 = (0, import_internal40.text)(", ");
      code193 = (0, import_internal40.element)("code");
      code193.textContent = "Separator";
      t811 = (0, import_internal40.text)(" -> ");
      code194 = (0, import_internal40.element)("code");
      code194.textContent = "MenuSeparator";
      t813 = (0, import_internal40.space)();
      li135 = (0, import_internal40.element)("li");
      li135.textContent = "Refactored the folder structure";
      t815 = (0, import_internal40.space)();
      hr4 = (0, import_internal40.element)("hr");
      t816 = (0, import_internal40.space)();
      h256 = (0, import_internal40.element)("h2");
      t817 = (0, import_internal40.text)("v3.1.2 ");
      em56 = (0, import_internal40.element)("em");
      em56.textContent = "(2023-01-04)";
      t819 = (0, import_internal40.space)();
      ul66 = (0, import_internal40.element)("ul");
      li136 = (0, import_internal40.element)("li");
      t820 = (0, import_internal40.text)("Toggle's ");
      code195 = (0, import_internal40.element)("code");
      code195.textContent = "innerWidth";
      t822 = (0, import_internal40.text)(" function was somehow overwriting ");
      code196 = (0, import_internal40.element)("code");
      code196.textContent = "window.innerWidth";
      t824 = (0, import_internal40.text)(" property (maybe a compiler issue?)");
      t825 = (0, import_internal40.space)();
      h257 = (0, import_internal40.element)("h2");
      t826 = (0, import_internal40.text)("v3.1.1 ");
      em57 = (0, import_internal40.element)("em");
      em57.textContent = "(2023-01-04)";
      t828 = (0, import_internal40.space)();
      ul67 = (0, import_internal40.element)("ul");
      li137 = (0, import_internal40.element)("li");
      t829 = (0, import_internal40.text)("Fix ");
      code197 = (0, import_internal40.element)("code");
      code197.textContent = "input-number";
      t831 = (0, import_internal40.text)(" (could not enter decimals)");
      t832 = (0, import_internal40.space)();
      li138 = (0, import_internal40.element)("li");
      t833 = (0, import_internal40.text)("Fix ");
      code198 = (0, import_internal40.element)("code");
      code198.textContent = "input-math";
      t835 = (0, import_internal40.text)(" (math didn't work)");
      t836 = (0, import_internal40.space)();
      h258 = (0, import_internal40.element)("h2");
      t837 = (0, import_internal40.text)("v3.1.0 ");
      em58 = (0, import_internal40.element)("em");
      em58.textContent = "(2023-01-03)";
      t839 = (0, import_internal40.space)();
      ul68 = (0, import_internal40.element)("ul");
      li139 = (0, import_internal40.element)("li");
      t840 = (0, import_internal40.text)("UX change: autocomplete will not close on scroll or resize events from now on (it can be changed using new properties ");
      code199 = (0, import_internal40.element)("code");
      code199.textContent = "hideOnScroll";
      t842 = (0, import_internal40.text)(" and ");
      code200 = (0, import_internal40.element)("code");
      code200.textContent = "hideOnResize";
      t844 = (0, import_internal40.text)(").");
      t845 = (0, import_internal40.space)();
      li140 = (0, import_internal40.element)("li");
      li140.textContent = "fixed: autocomplete issue, where clicking on a filtered list would not select.";
      t847 = (0, import_internal40.space)();
      li141 = (0, import_internal40.element)("li");
      li141.textContent = 'tweak: autocomplete will now show "create new item" always (when enabled), not only when the query did not match anything. Except when the query matches an item exactly.';
      t849 = (0, import_internal40.space)();
      h259 = (0, import_internal40.element)("h2");
      h259.textContent = "v3.0.1 (2022-12-30)";
      t851 = (0, import_internal40.space)();
      ul69 = (0, import_internal40.element)("ul");
      li142 = (0, import_internal40.element)("li");
      li142.textContent = "autocomplete should revert when entered value is not on the list";
      t853 = (0, import_internal40.space)();
      h260 = (0, import_internal40.element)("h2");
      h260.textContent = "v3.0.0 (2022-12-28)";
      t855 = (0, import_internal40.space)();
      ul70 = (0, import_internal40.element)("ul");
      li143 = (0, import_internal40.element)("li");
      t856 = (0, import_internal40.text)("breaking change: ");
      code201 = (0, import_internal40.element)("code");
      code201.textContent = "cssClass";
      t858 = (0, import_internal40.text)(" property available on some components has been renamed to ");
      code202 = (0, import_internal40.element)("code");
      code202.textContent = "className";
      t860 = (0, import_internal40.text)(" (to be more aligned with the standard workaround in other libs/frameworks).");
      t861 = (0, import_internal40.space)();
      li144 = (0, import_internal40.element)("li");
      t862 = (0, import_internal40.text)("some components (where possible) are now using ");
      code203 = (0, import_internal40.element)("code");
      code203.textContent = "$$props";
      t864 = (0, import_internal40.text)(" to pass-through the properties of the instance down to the component.");
      t865 = (0, import_internal40.space)();
      hr5 = (0, import_internal40.element)("hr");
      t866 = (0, import_internal40.space)();
      h261 = (0, import_internal40.element)("h2");
      h261.textContent = "v2.1.1 (2022-12-24)";
      t868 = (0, import_internal40.space)();
      ul71 = (0, import_internal40.element)("ul");
      li145 = (0, import_internal40.element)("li");
      t869 = (0, import_internal40.text)("breaking change: ");
      code204 = (0, import_internal40.element)("code");
      code204.textContent = "dist";
      t871 = (0, import_internal40.text)(" folder has been renamed to ");
      code205 = (0, import_internal40.element)("code");
      code205.textContent = "docs";
      t873 = (0, import_internal40.text)(", as this is the only allowed name for a GH pages folder so that the GH pages is published automatically (without writing a GH action specifically for this).");
      t874 = (0, import_internal40.space)();
      hr6 = (0, import_internal40.element)("hr");
      t875 = (0, import_internal40.space)();
      h262 = (0, import_internal40.element)("h2");
      h262.textContent = "v1.7.12";
      (0, import_internal40.add_location)(h1, file34, 0, 0, 0);
      (0, import_internal40.add_location)(em0, file34, 1, 11, 30);
      (0, import_internal40.add_location)(h20, file34, 1, 0, 19);
      (0, import_internal40.add_location)(strong0, file34, 3, 4, 65);
      (0, import_internal40.add_location)(code0, file34, 3, 26, 87);
      (0, import_internal40.add_location)(li0, file34, 3, 0, 61);
      (0, import_internal40.add_location)(strong1, file34, 4, 4, 126);
      (0, import_internal40.add_location)(code1, file34, 4, 32, 154);
      (0, import_internal40.add_location)(code2, file34, 4, 53, 175);
      (0, import_internal40.add_location)(li1, file34, 4, 0, 122);
      (0, import_internal40.add_location)(strong2, file34, 5, 4, 232);
      (0, import_internal40.add_location)(code3, file34, 5, 34, 262);
      (0, import_internal40.add_location)(code4, file34, 5, 53, 281);
      (0, import_internal40.add_location)(code5, file34, 5, 76, 304);
      (0, import_internal40.add_location)(code6, file34, 5, 141, 369);
      (0, import_internal40.add_location)(code7, file34, 5, 168, 396);
      (0, import_internal40.add_location)(code8, file34, 5, 192, 420);
      (0, import_internal40.add_location)(code9, file34, 5, 213, 441);
      (0, import_internal40.add_location)(code10, file34, 5, 244, 472);
      (0, import_internal40.add_location)(li2, file34, 5, 0, 228);
      (0, import_internal40.add_location)(strong3, file34, 6, 4, 503);
      (0, import_internal40.add_location)(code11, file34, 6, 60, 559);
      (0, import_internal40.add_location)(code12, file34, 6, 85, 584);
      (0, import_internal40.add_location)(code13, file34, 6, 164, 663);
      (0, import_internal40.add_location)(code14, file34, 6, 200, 699);
      (0, import_internal40.add_location)(li3, file34, 6, 0, 499);
      (0, import_internal40.add_location)(code15, file34, 7, 10, 768);
      (0, import_internal40.add_location)(code16, file34, 7, 42, 800);
      (0, import_internal40.add_location)(li4, file34, 7, 0, 758);
      (0, import_internal40.add_location)(code17, file34, 8, 10, 842);
      (0, import_internal40.add_location)(code18, file34, 8, 40, 872);
      (0, import_internal40.add_location)(li5, file34, 8, 0, 832);
      (0, import_internal40.add_location)(code19, file34, 9, 10, 912);
      (0, import_internal40.add_location)(code20, file34, 9, 55, 957);
      (0, import_internal40.add_location)(li6, file34, 9, 0, 902);
      (0, import_internal40.add_location)(code21, file34, 10, 25, 1007);
      (0, import_internal40.add_location)(code22, file34, 10, 49, 1031);
      (0, import_internal40.add_location)(li7, file34, 10, 0, 982);
      (0, import_internal40.add_location)(ul0, file34, 2, 0, 56);
      (0, import_internal40.add_location)(h30, file34, 12, 0, 1067);
      (0, import_internal40.add_location)(li8, file34, 14, 0, 1098);
      (0, import_internal40.add_location)(code23, file34, 15, 12, 1265);
      (0, import_internal40.add_location)(code24, file34, 15, 52, 1305);
      (0, import_internal40.add_location)(li9, file34, 15, 0, 1253);
      (0, import_internal40.add_location)(code25, file34, 16, 4, 1398);
      (0, import_internal40.add_location)(code26, file34, 16, 52, 1446);
      (0, import_internal40.add_location)(li10, file34, 16, 0, 1394);
      (0, import_internal40.add_location)(code27, file34, 17, 4, 1496);
      (0, import_internal40.add_location)(code28, file34, 17, 43, 1535);
      (0, import_internal40.add_location)(li11, file34, 17, 0, 1492);
      (0, import_internal40.add_location)(code29, file34, 18, 4, 1568);
      (0, import_internal40.add_location)(code30, file34, 18, 56, 1620);
      (0, import_internal40.add_location)(code31, file34, 18, 96, 1660);
      (0, import_internal40.add_location)(li12, file34, 18, 0, 1564);
      (0, import_internal40.add_location)(code32, file34, 19, 4, 1726);
      (0, import_internal40.add_location)(code33, file34, 19, 50, 1772);
      (0, import_internal40.add_location)(code34, file34, 19, 90, 1812);
      (0, import_internal40.add_location)(li13, file34, 19, 0, 1722);
      (0, import_internal40.add_location)(code35, file34, 20, 4, 1873);
      (0, import_internal40.add_location)(code36, file34, 20, 50, 1919);
      (0, import_internal40.add_location)(code37, file34, 20, 97, 1966);
      (0, import_internal40.add_location)(li14, file34, 20, 0, 1869);
      (0, import_internal40.add_location)(code38, file34, 21, 4, 2001);
      (0, import_internal40.add_location)(code39, file34, 21, 54, 2051);
      (0, import_internal40.add_location)(code40, file34, 21, 119, 2116);
      (0, import_internal40.add_location)(li15, file34, 21, 0, 1997);
      (0, import_internal40.add_location)(code41, file34, 22, 40, 2233);
      (0, import_internal40.add_location)(code42, file34, 22, 84, 2277);
      (0, import_internal40.add_location)(code43, file34, 22, 106, 2299);
      (0, import_internal40.add_location)(code44, file34, 22, 127, 2320);
      (0, import_internal40.add_location)(code45, file34, 22, 150, 2343);
      (0, import_internal40.add_location)(code46, file34, 22, 174, 2367);
      (0, import_internal40.add_location)(code47, file34, 22, 199, 2392);
      (0, import_internal40.add_location)(li16, file34, 22, 0, 2193);
      (0, import_internal40.add_location)(ul1, file34, 13, 0, 1093);
      (0, import_internal40.add_location)(h31, file34, 24, 0, 2422);
      (0, import_internal40.add_location)(code48, file34, 26, 4, 2486);
      (0, import_internal40.add_location)(code49, file34, 26, 47, 2529);
      (0, import_internal40.add_location)(li17, file34, 26, 0, 2482);
      (0, import_internal40.add_location)(code50, file34, 27, 4, 2569);
      (0, import_internal40.add_location)(code51, file34, 27, 47, 2612);
      (0, import_internal40.add_location)(li18, file34, 27, 0, 2565);
      (0, import_internal40.add_location)(code52, file34, 28, 4, 2652);
      (0, import_internal40.add_location)(code53, file34, 28, 49, 2697);
      (0, import_internal40.add_location)(li19, file34, 28, 0, 2648);
      (0, import_internal40.add_location)(code54, file34, 29, 4, 2739);
      (0, import_internal40.add_location)(code55, file34, 29, 49, 2784);
      (0, import_internal40.add_location)(li20, file34, 29, 0, 2735);
      (0, import_internal40.add_location)(code56, file34, 30, 4, 2826);
      (0, import_internal40.add_location)(code57, file34, 30, 54, 2876);
      (0, import_internal40.add_location)(li21, file34, 30, 0, 2822);
      (0, import_internal40.add_location)(code58, file34, 31, 4, 2922);
      (0, import_internal40.add_location)(code59, file34, 31, 53, 2971);
      (0, import_internal40.add_location)(li22, file34, 31, 0, 2918);
      (0, import_internal40.add_location)(code60, file34, 32, 4, 3017);
      (0, import_internal40.add_location)(code61, file34, 32, 52, 3065);
      (0, import_internal40.add_location)(li23, file34, 32, 0, 3013);
      (0, import_internal40.add_location)(ul2, file34, 25, 0, 2477);
      (0, import_internal40.add_location)(code62, file34, 34, 55, 3167);
      (0, import_internal40.add_location)(code63, file34, 34, 80, 3192);
      (0, import_internal40.add_location)(p, file34, 34, 0, 3112);
      (0, import_internal40.add_location)(hr0, file34, 35, 0, 3236);
      (0, import_internal40.add_location)(em1, file34, 36, 11, 3252);
      (0, import_internal40.add_location)(h21, file34, 36, 0, 3241);
      (0, import_internal40.add_location)(code64, file34, 38, 8, 3292);
      (0, import_internal40.add_location)(li24, file34, 38, 0, 3284);
      (0, import_internal40.add_location)(ul3, file34, 37, 0, 3279);
      (0, import_internal40.add_location)(em2, file34, 40, 11, 3407);
      (0, import_internal40.add_location)(h22, file34, 40, 0, 3396);
      (0, import_internal40.add_location)(code65, file34, 42, 15, 3454);
      (0, import_internal40.add_location)(li25, file34, 42, 0, 3439);
      (0, import_internal40.add_location)(ul4, file34, 41, 0, 3434);
      (0, import_internal40.add_location)(em3, file34, 44, 11, 3514);
      (0, import_internal40.add_location)(h23, file34, 44, 0, 3503);
      (0, import_internal40.add_location)(code66, file34, 46, 12, 3558);
      (0, import_internal40.add_location)(code67, file34, 46, 62, 3608);
      (0, import_internal40.add_location)(code68, file34, 46, 130, 3676);
      (0, import_internal40.add_location)(li26, file34, 46, 0, 3546);
      (0, import_internal40.add_location)(ul5, file34, 45, 0, 3541);
      (0, import_internal40.add_location)(em4, file34, 48, 11, 3721);
      (0, import_internal40.add_location)(h24, file34, 48, 0, 3710);
      (0, import_internal40.add_location)(code69, file34, 50, 8, 3761);
      (0, import_internal40.add_location)(code70, file34, 50, 36, 3789);
      (0, import_internal40.add_location)(li27, file34, 50, 0, 3753);
      (0, import_internal40.add_location)(li28, file34, 51, 0, 3826);
      (0, import_internal40.add_location)(ul6, file34, 49, 0, 3748);
      (0, import_internal40.add_location)(em5, file34, 53, 11, 3900);
      (0, import_internal40.add_location)(h25, file34, 53, 0, 3889);
      (0, import_internal40.add_location)(code71, file34, 55, 4, 3936);
      (0, import_internal40.add_location)(code72, file34, 55, 77, 4009);
      (0, import_internal40.add_location)(code73, file34, 55, 97, 4029);
      (0, import_internal40.add_location)(code74, file34, 55, 120, 4052);
      (0, import_internal40.add_location)(li29, file34, 55, 0, 3932);
      (0, import_internal40.add_location)(li30, file34, 56, 0, 4088);
      (0, import_internal40.add_location)(ul7, file34, 54, 0, 3927);
      (0, import_internal40.add_location)(em6, file34, 58, 11, 4169);
      (0, import_internal40.add_location)(h26, file34, 58, 0, 4158);
      (0, import_internal40.add_location)(strong4, file34, 60, 4, 4205);
      (0, import_internal40.attr_dev)(a0, "href", "#InfoBar");
      (0, import_internal40.add_location)(a0, file34, 60, 26, 4227);
      (0, import_internal40.add_location)(li31, file34, 60, 0, 4201);
      (0, import_internal40.add_location)(strong5, file34, 61, 4, 4278);
      (0, import_internal40.attr_dev)(a1, "href", "#InputText");
      (0, import_internal40.add_location)(a1, file34, 61, 26, 4300);
      (0, import_internal40.attr_dev)(a2, "href", "#InputNumber");
      (0, import_internal40.add_location)(a2, file34, 61, 62, 4336);
      (0, import_internal40.attr_dev)(a3, "href", "#Radio");
      (0, import_internal40.add_location)(a3, file34, 61, 106, 4380);
      (0, import_internal40.add_location)(li32, file34, 61, 0, 4274);
      (0, import_internal40.add_location)(strong6, file34, 62, 4, 4428);
      (0, import_internal40.add_location)(code75, file34, 62, 26, 4450);
      (0, import_internal40.add_location)(code76, file34, 62, 45, 4469);
      (0, import_internal40.add_location)(code77, file34, 62, 68, 4492);
      (0, import_internal40.add_location)(code78, file34, 62, 137, 4561);
      (0, import_internal40.add_location)(code79, file34, 62, 161, 4585);
      (0, import_internal40.add_location)(code80, file34, 62, 187, 4611);
      (0, import_internal40.add_location)(code81, file34, 62, 211, 4635);
      (0, import_internal40.add_location)(code82, file34, 62, 239, 4663);
      (0, import_internal40.add_location)(code83, file34, 62, 263, 4687);
      (0, import_internal40.add_location)(li33, file34, 62, 0, 4424);
      (0, import_internal40.add_location)(strong7, file34, 63, 4, 4720);
      (0, import_internal40.add_location)(code84, file34, 63, 31, 4747);
      (0, import_internal40.add_location)(code85, file34, 63, 77, 4793);
      (0, import_internal40.add_location)(li34, file34, 63, 0, 4716);
      (0, import_internal40.add_location)(ul8, file34, 59, 0, 4196);
      (0, import_internal40.add_location)(h32, file34, 65, 0, 4871);
      (0, import_internal40.add_location)(h40, file34, 66, 0, 4897);
      (0, import_internal40.add_location)(code86, file34, 68, 27, 4947);
      (0, import_internal40.add_location)(code87, file34, 68, 53, 4973);
      (0, import_internal40.add_location)(li35, file34, 68, 0, 4920);
      (0, import_internal40.add_location)(code88, file34, 69, 4, 5025);
      (0, import_internal40.add_location)(code89, file34, 69, 88, 5109);
      (0, import_internal40.add_location)(code90, file34, 69, 125, 5146);
      (0, import_internal40.add_location)(li36, file34, 69, 0, 5021);
      (0, import_internal40.add_location)(ul9, file34, 67, 0, 4915);
      (0, import_internal40.add_location)(h41, file34, 71, 0, 5187);
      (0, import_internal40.add_location)(code91, file34, 73, 27, 5238);
      (0, import_internal40.add_location)(code92, file34, 73, 73, 5284);
      (0, import_internal40.add_location)(li37, file34, 73, 0, 5211);
      (0, import_internal40.add_location)(ul10, file34, 72, 0, 5206);
      (0, import_internal40.add_location)(h42, file34, 75, 0, 5355);
      (0, import_internal40.add_location)(code93, file34, 77, 28, 5410);
      (0, import_internal40.add_location)(code94, file34, 77, 54, 5436);
      (0, import_internal40.add_location)(li38, file34, 77, 0, 5382);
      (0, import_internal40.add_location)(ul11, file34, 76, 0, 5377);
      (0, import_internal40.add_location)(h43, file34, 79, 0, 5493);
      (0, import_internal40.add_location)(code95, file34, 81, 28, 5549);
      (0, import_internal40.add_location)(code96, file34, 81, 98, 5619);
      (0, import_internal40.add_location)(li39, file34, 81, 0, 5521);
      (0, import_internal40.add_location)(ul12, file34, 80, 0, 5516);
      (0, import_internal40.add_location)(h44, file34, 83, 0, 5698);
      (0, import_internal40.add_location)(code97, file34, 85, 4, 5739);
      (0, import_internal40.add_location)(code98, file34, 85, 44, 5779);
      (0, import_internal40.add_location)(li40, file34, 85, 0, 5735);
      (0, import_internal40.add_location)(ul13, file34, 84, 0, 5730);
      (0, import_internal40.add_location)(hr1, file34, 87, 0, 5822);
      (0, import_internal40.add_location)(em7, file34, 88, 19, 5846);
      (0, import_internal40.add_location)(h27, file34, 88, 0, 5827);
      (0, import_internal40.add_location)(code99, file34, 90, 18, 5896);
      (0, import_internal40.add_location)(li41, file34, 90, 0, 5878);
      (0, import_internal40.add_location)(code100, file34, 91, 47, 5973);
      (0, import_internal40.add_location)(li42, file34, 91, 0, 5926);
      (0, import_internal40.add_location)(ul14, file34, 89, 0, 5873);
      (0, import_internal40.add_location)(em8, file34, 93, 11, 6020);
      (0, import_internal40.add_location)(h28, file34, 93, 0, 6009);
      (0, import_internal40.add_location)(strong8, file34, 95, 4, 6056);
      (0, import_internal40.add_location)(code101, file34, 95, 26, 6078);
      (0, import_internal40.add_location)(code102, file34, 95, 171, 6223);
      (0, import_internal40.add_location)(code103, file34, 95, 194, 6246);
      (0, import_internal40.add_location)(li43, file34, 95, 0, 6052);
      (0, import_internal40.add_location)(ul15, file34, 94, 0, 6047);
      (0, import_internal40.add_location)(em9, file34, 97, 11, 6291);
      (0, import_internal40.add_location)(h29, file34, 97, 0, 6280);
      (0, import_internal40.add_location)(code104, file34, 99, 8, 6331);
      (0, import_internal40.add_location)(li44, file34, 99, 0, 6323);
      (0, import_internal40.add_location)(ul16, file34, 98, 0, 6318);
      (0, import_internal40.add_location)(em10, file34, 101, 11, 6433);
      (0, import_internal40.add_location)(h210, file34, 101, 0, 6422);
      (0, import_internal40.add_location)(strong9, file34, 103, 4, 6469);
      (0, import_internal40.add_location)(code105, file34, 103, 26, 6491);
      (0, import_internal40.add_location)(code106, file34, 103, 98, 6563);
      (0, import_internal40.add_location)(li45, file34, 103, 0, 6465);
      (0, import_internal40.add_location)(code107, file34, 104, 4, 6636);
      (0, import_internal40.add_location)(strong10, file34, 104, 42, 6674);
      (0, import_internal40.add_location)(li46, file34, 104, 0, 6632);
      (0, import_internal40.add_location)(code108, file34, 105, 4, 6758);
      (0, import_internal40.add_location)(code109, file34, 106, 11, 6806);
      (0, import_internal40.add_location)(code110, file34, 106, 33, 6828);
      (0, import_internal40.add_location)(li47, file34, 106, 0, 6795);
      (0, import_internal40.add_location)(code111, file34, 107, 8, 6932);
      (0, import_internal40.add_location)(li48, file34, 107, 0, 6924);
      (0, import_internal40.add_location)(code112, file34, 108, 35, 7007);
      (0, import_internal40.add_location)(code113, file34, 108, 89, 7061);
      (0, import_internal40.add_location)(code114, file34, 108, 124, 7096);
      (0, import_internal40.add_location)(li49, file34, 108, 0, 6972);
      (0, import_internal40.add_location)(code115, file34, 109, 8, 7145);
      (0, import_internal40.add_location)(code116, file34, 109, 95, 7232);
      (0, import_internal40.add_location)(li50, file34, 109, 0, 7137);
      (0, import_internal40.add_location)(ul17, file34, 105, 36, 6790);
      (0, import_internal40.add_location)(li51, file34, 105, 0, 6754);
      (0, import_internal40.add_location)(ul18, file34, 102, 0, 6460);
      (0, import_internal40.add_location)(em11, file34, 113, 11, 7297);
      (0, import_internal40.add_location)(h211, file34, 113, 0, 7286);
      (0, import_internal40.add_location)(code117, file34, 115, 4, 7333);
      (0, import_internal40.add_location)(code118, file34, 116, 4, 7373);
      (0, import_internal40.add_location)(code119, file34, 116, 76, 7445);
      (0, import_internal40.add_location)(li52, file34, 116, 0, 7369);
      (0, import_internal40.add_location)(li53, file34, 117, 0, 7513);
      (0, import_internal40.add_location)(code120, file34, 118, 29, 7643);
      (0, import_internal40.add_location)(code121, file34, 118, 51, 7665);
      (0, import_internal40.add_location)(code122, file34, 118, 70, 7684);
      (0, import_internal40.add_location)(code123, file34, 118, 99, 7713);
      (0, import_internal40.add_location)(li54, file34, 118, 0, 7614);
      (0, import_internal40.add_location)(ul19, file34, 115, 35, 7364);
      (0, import_internal40.add_location)(li55, file34, 115, 0, 7329);
      (0, import_internal40.add_location)(ul20, file34, 114, 0, 7324);
      (0, import_internal40.add_location)(em12, file34, 122, 11, 7768);
      (0, import_internal40.add_location)(h212, file34, 122, 0, 7757);
      (0, import_internal40.add_location)(code124, file34, 124, 4, 7804);
      (0, import_internal40.add_location)(li56, file34, 125, 0, 7843);
      (0, import_internal40.add_location)(code125, file34, 126, 59, 7955);
      (0, import_internal40.add_location)(li57, file34, 126, 0, 7896);
      (0, import_internal40.add_location)(li58, file34, 127, 0, 7982);
      (0, import_internal40.add_location)(ul21, file34, 124, 38, 7838);
      (0, import_internal40.add_location)(li59, file34, 124, 0, 7800);
      (0, import_internal40.add_location)(ul22, file34, 123, 0, 7795);
      (0, import_internal40.add_location)(em13, file34, 131, 11, 8103);
      (0, import_internal40.add_location)(h213, file34, 131, 0, 8092);
      (0, import_internal40.add_location)(code126, file34, 133, 8, 8143);
      (0, import_internal40.add_location)(li60, file34, 133, 0, 8135);
      (0, import_internal40.add_location)(ul23, file34, 132, 0, 8130);
      (0, import_internal40.add_location)(em14, file34, 135, 19, 8223);
      (0, import_internal40.add_location)(h214, file34, 135, 0, 8204);
      (0, import_internal40.add_location)(code127, file34, 137, 15, 8270);
      (0, import_internal40.add_location)(li61, file34, 137, 0, 8255);
      (0, import_internal40.add_location)(code128, file34, 138, 4, 8320);
      (0, import_internal40.add_location)(li62, file34, 138, 0, 8316);
      (0, import_internal40.add_location)(ul24, file34, 136, 0, 8250);
      (0, import_internal40.add_location)(em15, file34, 140, 35, 8459);
      (0, import_internal40.add_location)(h215, file34, 140, 0, 8424);
      (0, import_internal40.add_location)(code129, file34, 142, 4, 8495);
      (0, import_internal40.add_location)(li63, file34, 142, 0, 8491);
      (0, import_internal40.add_location)(code130, file34, 143, 4, 8572);
      (0, import_internal40.add_location)(li64, file34, 143, 0, 8568);
      (0, import_internal40.add_location)(code131, file34, 144, 4, 8655);
      (0, import_internal40.add_location)(code132, file34, 144, 23, 8674);
      (0, import_internal40.add_location)(li65, file34, 144, 0, 8651);
      (0, import_internal40.add_location)(ul25, file34, 141, 0, 8486);
      (0, import_internal40.add_location)(em16, file34, 146, 27, 8775);
      (0, import_internal40.add_location)(h216, file34, 146, 0, 8748);
      (0, import_internal40.add_location)(li66, file34, 148, 0, 8807);
      (0, import_internal40.add_location)(li67, file34, 149, 0, 8875);
      (0, import_internal40.add_location)(li68, file34, 150, 0, 8932);
      (0, import_internal40.add_location)(code133, file34, 151, 22, 9040);
      (0, import_internal40.add_location)(code134, file34, 151, 42, 9060);
      (0, import_internal40.add_location)(li69, file34, 151, 0, 9018);
      (0, import_internal40.add_location)(ul26, file34, 147, 0, 8802);
      (0, import_internal40.add_location)(em17, file34, 153, 11, 9099);
      (0, import_internal40.add_location)(h217, file34, 153, 0, 9088);
      (0, import_internal40.add_location)(li70, file34, 155, 0, 9131);
      (0, import_internal40.add_location)(ul27, file34, 154, 0, 9126);
      (0, import_internal40.add_location)(em18, file34, 157, 11, 9260);
      (0, import_internal40.add_location)(h218, file34, 157, 0, 9249);
      (0, import_internal40.add_location)(code135, file34, 159, 4, 9296);
      (0, import_internal40.add_location)(code136, file34, 159, 44, 9336);
      (0, import_internal40.add_location)(code137, file34, 159, 115, 9407);
      (0, import_internal40.add_location)(li71, file34, 159, 0, 9292);
      (0, import_internal40.add_location)(ul28, file34, 158, 0, 9287);
      (0, import_internal40.add_location)(em19, file34, 161, 11, 9498);
      (0, import_internal40.add_location)(h219, file34, 161, 0, 9487);
      (0, import_internal40.add_location)(li72, file34, 163, 0, 9530);
      (0, import_internal40.add_location)(code138, file34, 164, 8, 9596);
      (0, import_internal40.add_location)(code139, file34, 164, 34, 9622);
      (0, import_internal40.add_location)(code140, file34, 164, 103, 9691);
      (0, import_internal40.add_location)(li73, file34, 164, 0, 9588);
      (0, import_internal40.add_location)(li74, file34, 165, 0, 9719);
      (0, import_internal40.add_location)(ul29, file34, 162, 0, 9525);
      (0, import_internal40.add_location)(em20, file34, 167, 11, 9793);
      (0, import_internal40.add_location)(h220, file34, 167, 0, 9782);
      (0, import_internal40.add_location)(code141, file34, 169, 12, 9837);
      (0, import_internal40.add_location)(li75, file34, 169, 0, 9825);
      (0, import_internal40.add_location)(code142, file34, 170, 4, 9969);
      (0, import_internal40.add_location)(li76, file34, 170, 0, 9965);
      (0, import_internal40.add_location)(ul30, file34, 168, 0, 9820);
      (0, import_internal40.add_location)(em21, file34, 172, 19, 10100);
      (0, import_internal40.add_location)(h221, file34, 172, 0, 10081);
      (0, import_internal40.add_location)(li77, file34, 174, 0, 10132);
      (0, import_internal40.add_location)(code143, file34, 175, 8, 10214);
      (0, import_internal40.add_location)(li78, file34, 175, 0, 10206);
      (0, import_internal40.add_location)(code144, file34, 176, 8, 10287);
      (0, import_internal40.add_location)(li79, file34, 176, 0, 10279);
      (0, import_internal40.add_location)(ul31, file34, 173, 0, 10127);
      (0, import_internal40.add_location)(em22, file34, 178, 11, 10365);
      (0, import_internal40.add_location)(h222, file34, 178, 0, 10354);
      (0, import_internal40.add_location)(li80, file34, 180, 0, 10397);
      (0, import_internal40.add_location)(ul32, file34, 179, 0, 10392);
      (0, import_internal40.add_location)(em23, file34, 182, 21, 10479);
      (0, import_internal40.add_location)(h223, file34, 182, 0, 10458);
      (0, import_internal40.add_location)(code145, file34, 184, 15, 10526);
      (0, import_internal40.add_location)(code146, file34, 184, 37, 10548);
      (0, import_internal40.add_location)(li81, file34, 184, 0, 10511);
      (0, import_internal40.add_location)(code147, file34, 185, 8, 10580);
      (0, import_internal40.add_location)(li82, file34, 185, 0, 10572);
      (0, import_internal40.add_location)(ul33, file34, 183, 0, 10506);
      (0, import_internal40.add_location)(em24, file34, 187, 21, 10669);
      (0, import_internal40.add_location)(h224, file34, 187, 0, 10648);
      (0, import_internal40.add_location)(code148, file34, 189, 4, 10705);
      (0, import_internal40.add_location)(li83, file34, 189, 0, 10701);
      (0, import_internal40.add_location)(code149, file34, 190, 17, 10791);
      (0, import_internal40.add_location)(li84, file34, 190, 0, 10774);
      (0, import_internal40.add_location)(ul34, file34, 188, 0, 10696);
      (0, import_internal40.add_location)(em25, file34, 192, 12, 10836);
      (0, import_internal40.add_location)(h225, file34, 192, 0, 10824);
      (0, import_internal40.add_location)(li85, file34, 194, 0, 10868);
      (0, import_internal40.add_location)(ul35, file34, 193, 0, 10863);
      (0, import_internal40.add_location)(em26, file34, 196, 38, 10930);
      (0, import_internal40.add_location)(h226, file34, 196, 0, 10892);
      (0, import_internal40.add_location)(code150, file34, 198, 4, 10966);
      (0, import_internal40.add_location)(li86, file34, 198, 0, 10962);
      (0, import_internal40.add_location)(code151, file34, 199, 4, 11061);
      (0, import_internal40.add_location)(code152, file34, 199, 36, 11093);
      (0, import_internal40.add_location)(li87, file34, 199, 0, 11057);
      (0, import_internal40.add_location)(ul36, file34, 197, 0, 10957);
      (0, import_internal40.add_location)(em27, file34, 201, 43, 11221);
      (0, import_internal40.add_location)(h227, file34, 201, 0, 11178);
      (0, import_internal40.add_location)(li88, file34, 203, 0, 11253);
      (0, import_internal40.add_location)(li89, file34, 204, 0, 11304);
      (0, import_internal40.add_location)(li90, file34, 205, 0, 11341);
      (0, import_internal40.add_location)(code153, file34, 206, 10, 11397);
      (0, import_internal40.add_location)(code154, file34, 206, 43, 11430);
      (0, import_internal40.add_location)(code155, file34, 206, 67, 11454);
      (0, import_internal40.add_location)(li91, file34, 206, 0, 11387);
      (0, import_internal40.add_location)(code156, file34, 207, 33, 11515);
      (0, import_internal40.add_location)(code157, file34, 207, 89, 11571);
      (0, import_internal40.add_location)(li92, file34, 207, 0, 11482);
      (0, import_internal40.add_location)(ul37, file34, 202, 0, 11248);
      (0, import_internal40.add_location)(em28, file34, 209, 11, 11628);
      (0, import_internal40.add_location)(h228, file34, 209, 0, 11617);
      (0, import_internal40.add_location)(code158, file34, 211, 4, 11664);
      (0, import_internal40.add_location)(code159, file34, 211, 71, 11731);
      (0, import_internal40.add_location)(li93, file34, 211, 0, 11660);
      (0, import_internal40.add_location)(code160, file34, 212, 4, 11773);
      (0, import_internal40.add_location)(code161, file34, 212, 65, 11834);
      (0, import_internal40.add_location)(code162, file34, 212, 87, 11856);
      (0, import_internal40.add_location)(code163, file34, 212, 112, 11881);
      (0, import_internal40.add_location)(li94, file34, 212, 0, 11769);
      (0, import_internal40.add_location)(ul38, file34, 210, 0, 11655);
      (0, import_internal40.add_location)(em29, file34, 214, 11, 11924);
      (0, import_internal40.add_location)(h229, file34, 214, 0, 11913);
      (0, import_internal40.add_location)(code164, file34, 216, 4, 11960);
      (0, import_internal40.add_location)(li95, file34, 216, 0, 11956);
      (0, import_internal40.add_location)(code165, file34, 217, 4, 12044);
      (0, import_internal40.add_location)(li96, file34, 217, 0, 12040);
      (0, import_internal40.add_location)(ul39, file34, 215, 0, 11951);
      (0, import_internal40.add_location)(em30, file34, 219, 11, 12165);
      (0, import_internal40.add_location)(h230, file34, 219, 0, 12154);
      (0, import_internal40.add_location)(code166, file34, 221, 4, 12201);
      (0, import_internal40.add_location)(li97, file34, 221, 0, 12197);
      (0, import_internal40.add_location)(ul40, file34, 220, 0, 12192);
      (0, import_internal40.add_location)(em31, file34, 223, 11, 12296);
      (0, import_internal40.add_location)(h231, file34, 223, 0, 12285);
      (0, import_internal40.add_location)(code167, file34, 225, 12, 12340);
      (0, import_internal40.add_location)(li98, file34, 225, 0, 12328);
      (0, import_internal40.add_location)(ul41, file34, 224, 0, 12323);
      (0, import_internal40.add_location)(em32, file34, 227, 12, 12456);
      (0, import_internal40.add_location)(h232, file34, 227, 0, 12444);
      (0, import_internal40.add_location)(code168, file34, 229, 35, 12523);
      (0, import_internal40.add_location)(li99, file34, 229, 0, 12488);
      (0, import_internal40.add_location)(ul42, file34, 228, 0, 12483);
      (0, import_internal40.add_location)(em33, file34, 231, 11, 12574);
      (0, import_internal40.add_location)(h233, file34, 231, 0, 12563);
      (0, import_internal40.add_location)(code169, file34, 233, 14, 12620);
      (0, import_internal40.add_location)(li100, file34, 233, 0, 12606);
      (0, import_internal40.add_location)(ul43, file34, 232, 0, 12601);
      (0, import_internal40.add_location)(em34, file34, 235, 11, 12682);
      (0, import_internal40.add_location)(h234, file34, 235, 0, 12671);
      (0, import_internal40.add_location)(li101, file34, 237, 0, 12714);
      (0, import_internal40.add_location)(ul44, file34, 236, 0, 12709);
      (0, import_internal40.add_location)(em35, file34, 239, 11, 12871);
      (0, import_internal40.add_location)(h235, file34, 239, 0, 12860);
      (0, import_internal40.add_location)(code170, file34, 241, 33, 12936);
      (0, import_internal40.add_location)(li102, file34, 241, 0, 12903);
      (0, import_internal40.add_location)(ul45, file34, 240, 0, 12898);
      (0, import_internal40.add_location)(em36, file34, 243, 11, 13003);
      (0, import_internal40.add_location)(h236, file34, 243, 0, 12992);
      (0, import_internal40.add_location)(code171, file34, 245, 41, 13076);
      (0, import_internal40.add_location)(code172, file34, 245, 67, 13102);
      (0, import_internal40.add_location)(li103, file34, 245, 0, 13035);
      (0, import_internal40.add_location)(ul46, file34, 244, 0, 13030);
      (0, import_internal40.add_location)(em37, file34, 247, 11, 13179);
      (0, import_internal40.add_location)(h237, file34, 247, 0, 13168);
      (0, import_internal40.attr_dev)(a4, "href", "https://github.com/sveltejs/svelte/pull/8402");
      (0, import_internal40.add_location)(a4, file34, 249, 53, 13264);
      (0, import_internal40.add_location)(li104, file34, 249, 0, 13211);
      (0, import_internal40.add_location)(ul47, file34, 248, 0, 13206);
      (0, import_internal40.add_location)(em38, file34, 251, 11, 13357);
      (0, import_internal40.add_location)(h238, file34, 251, 0, 13346);
      (0, import_internal40.add_location)(code173, file34, 253, 31, 13420);
      (0, import_internal40.add_location)(li105, file34, 253, 0, 13389);
      (0, import_internal40.add_location)(code174, file34, 254, 24, 13473);
      (0, import_internal40.add_location)(code175, file34, 254, 53, 13502);
      (0, import_internal40.add_location)(code176, file34, 254, 122, 13571);
      (0, import_internal40.add_location)(li106, file34, 254, 0, 13449);
      (0, import_internal40.add_location)(ul48, file34, 252, 0, 13384);
      (0, import_internal40.add_location)(em39, file34, 256, 19, 13663);
      (0, import_internal40.add_location)(h239, file34, 256, 0, 13644);
      (0, import_internal40.add_location)(li107, file34, 258, 0, 13695);
      (0, import_internal40.add_location)(ul49, file34, 257, 0, 13690);
      (0, import_internal40.add_location)(em40, file34, 260, 11, 13833);
      (0, import_internal40.add_location)(h240, file34, 260, 0, 13822);
      (0, import_internal40.add_location)(li108, file34, 262, 0, 13865);
      (0, import_internal40.add_location)(ul50, file34, 261, 0, 13860);
      (0, import_internal40.add_location)(em41, file34, 264, 11, 13963);
      (0, import_internal40.add_location)(h241, file34, 264, 0, 13952);
      (0, import_internal40.add_location)(code177, file34, 266, 50, 14045);
      (0, import_internal40.add_location)(li109, file34, 266, 0, 13995);
      (0, import_internal40.add_location)(li110, file34, 267, 0, 14108);
      (0, import_internal40.add_location)(li111, file34, 268, 0, 14172);
      (0, import_internal40.add_location)(li112, file34, 269, 0, 14218);
      (0, import_internal40.add_location)(ul51, file34, 265, 0, 13990);
      (0, import_internal40.add_location)(em42, file34, 271, 11, 14289);
      (0, import_internal40.add_location)(h242, file34, 271, 0, 14278);
      (0, import_internal40.add_location)(code178, file34, 273, 11, 14332);
      (0, import_internal40.add_location)(li113, file34, 273, 0, 14321);
      (0, import_internal40.add_location)(ul52, file34, 272, 0, 14316);
      (0, import_internal40.add_location)(em43, file34, 275, 11, 14405);
      (0, import_internal40.add_location)(h243, file34, 275, 0, 14394);
      (0, import_internal40.add_location)(code179, file34, 277, 4, 14441);
      (0, import_internal40.add_location)(li114, file34, 277, 0, 14437);
      (0, import_internal40.add_location)(ul53, file34, 276, 0, 14432);
      (0, import_internal40.add_location)(em44, file34, 279, 27, 14577);
      (0, import_internal40.add_location)(h244, file34, 279, 0, 14550);
      (0, import_internal40.add_location)(code180, file34, 281, 12, 14621);
      (0, import_internal40.add_location)(code181, file34, 281, 59, 14668);
      (0, import_internal40.add_location)(li115, file34, 281, 0, 14609);
      (0, import_internal40.add_location)(ul54, file34, 280, 0, 14604);
      (0, import_internal40.add_location)(hr2, file34, 283, 0, 14710);
      (0, import_internal40.add_location)(em45, file34, 284, 11, 14726);
      (0, import_internal40.add_location)(h245, file34, 284, 0, 14715);
      (0, import_internal40.add_location)(li116, file34, 286, 0, 14758);
      (0, import_internal40.add_location)(li117, file34, 287, 0, 14907);
      (0, import_internal40.add_location)(li118, file34, 288, 0, 14979);
      (0, import_internal40.add_location)(ul55, file34, 285, 0, 14753);
      (0, import_internal40.add_location)(em46, file34, 290, 11, 15036);
      (0, import_internal40.add_location)(h246, file34, 290, 0, 15025);
      (0, import_internal40.add_location)(li119, file34, 292, 0, 15068);
      (0, import_internal40.add_location)(ul56, file34, 291, 0, 15063);
      (0, import_internal40.add_location)(em47, file34, 294, 11, 15119);
      (0, import_internal40.add_location)(h247, file34, 294, 0, 15108);
      (0, import_internal40.add_location)(li120, file34, 296, 0, 15151);
      (0, import_internal40.add_location)(ul57, file34, 295, 0, 15146);
      (0, import_internal40.add_location)(em48, file34, 298, 11, 15223);
      (0, import_internal40.add_location)(h248, file34, 298, 0, 15212);
      (0, import_internal40.add_location)(code182, file34, 300, 13, 15268);
      (0, import_internal40.add_location)(li121, file34, 300, 0, 15255);
      (0, import_internal40.add_location)(ul58, file34, 299, 0, 15250);
      (0, import_internal40.add_location)(em49, file34, 302, 11, 15329);
      (0, import_internal40.add_location)(h249, file34, 302, 0, 15318);
      (0, import_internal40.add_location)(code183, file34, 304, 49, 15410);
      (0, import_internal40.add_location)(li122, file34, 304, 0, 15361);
      (0, import_internal40.add_location)(ul59, file34, 303, 0, 15356);
      (0, import_internal40.add_location)(em50, file34, 306, 11, 15492);
      (0, import_internal40.add_location)(h250, file34, 306, 0, 15481);
      (0, import_internal40.add_location)(li123, file34, 308, 0, 15524);
      (0, import_internal40.add_location)(li124, file34, 309, 0, 15582);
      (0, import_internal40.add_location)(ul60, file34, 307, 0, 15519);
      (0, import_internal40.add_location)(em51, file34, 311, 11, 15634);
      (0, import_internal40.add_location)(h251, file34, 311, 0, 15623);
      (0, import_internal40.add_location)(li125, file34, 313, 0, 15666);
      (0, import_internal40.add_location)(ul61, file34, 312, 0, 15661);
      (0, import_internal40.add_location)(em52, file34, 315, 11, 15752);
      (0, import_internal40.add_location)(h252, file34, 315, 0, 15741);
      (0, import_internal40.add_location)(li126, file34, 317, 0, 15784);
      (0, import_internal40.add_location)(li127, file34, 318, 0, 15812);
      (0, import_internal40.add_location)(ul62, file34, 316, 0, 15779);
      (0, import_internal40.add_location)(em53, file34, 320, 11, 15888);
      (0, import_internal40.add_location)(h253, file34, 320, 0, 15877);
      (0, import_internal40.add_location)(code184, file34, 322, 15, 15935);
      (0, import_internal40.add_location)(li128, file34, 322, 0, 15920);
      (0, import_internal40.add_location)(ul63, file34, 321, 0, 15915);
      (0, import_internal40.add_location)(em54, file34, 324, 11, 16029);
      (0, import_internal40.add_location)(h254, file34, 324, 0, 16018);
      (0, import_internal40.add_location)(code185, file34, 326, 55, 16116);
      (0, import_internal40.add_location)(code186, file34, 326, 84, 16145);
      (0, import_internal40.add_location)(code187, file34, 326, 142, 16203);
      (0, import_internal40.add_location)(li129, file34, 326, 0, 16061);
      (0, import_internal40.add_location)(code188, file34, 327, 37, 16290);
      (0, import_internal40.add_location)(li130, file34, 327, 0, 16253);
      (0, import_internal40.add_location)(li131, file34, 328, 0, 16377);
      (0, import_internal40.add_location)(li132, file34, 329, 0, 16428);
      (0, import_internal40.add_location)(code189, file34, 330, 29, 16510);
      (0, import_internal40.add_location)(code190, file34, 330, 93, 16574);
      (0, import_internal40.add_location)(li133, file34, 330, 0, 16481);
      (0, import_internal40.add_location)(ul64, file34, 325, 0, 16056);
      (0, import_internal40.add_location)(hr3, file34, 332, 0, 16773);
      (0, import_internal40.add_location)(em55, file34, 333, 11, 16789);
      (0, import_internal40.add_location)(h255, file34, 333, 0, 16778);
      (0, import_internal40.add_location)(code191, file34, 335, 41, 16862);
      (0, import_internal40.add_location)(code192, file34, 335, 65, 16886);
      (0, import_internal40.add_location)(code193, file34, 335, 88, 16909);
      (0, import_internal40.add_location)(code194, file34, 335, 117, 16938);
      (0, import_internal40.add_location)(li134, file34, 335, 0, 16821);
      (0, import_internal40.add_location)(li135, file34, 336, 0, 16970);
      (0, import_internal40.add_location)(ul65, file34, 334, 0, 16816);
      (0, import_internal40.add_location)(hr4, file34, 338, 0, 17017);
      (0, import_internal40.add_location)(em56, file34, 339, 11, 17033);
      (0, import_internal40.add_location)(h256, file34, 339, 0, 17022);
      (0, import_internal40.add_location)(code195, file34, 341, 17, 17082);
      (0, import_internal40.add_location)(code196, file34, 341, 74, 17139);
      (0, import_internal40.add_location)(li136, file34, 341, 0, 17065);
      (0, import_internal40.add_location)(ul66, file34, 340, 0, 17060);
      (0, import_internal40.add_location)(em57, file34, 343, 11, 17227);
      (0, import_internal40.add_location)(h257, file34, 343, 0, 17216);
      (0, import_internal40.add_location)(code197, file34, 345, 8, 17267);
      (0, import_internal40.add_location)(li137, file34, 345, 0, 17259);
      (0, import_internal40.add_location)(code198, file34, 346, 8, 17333);
      (0, import_internal40.add_location)(li138, file34, 346, 0, 17325);
      (0, import_internal40.add_location)(ul67, file34, 344, 0, 17254);
      (0, import_internal40.add_location)(em58, file34, 348, 11, 17402);
      (0, import_internal40.add_location)(h258, file34, 348, 0, 17391);
      (0, import_internal40.add_location)(code199, file34, 350, 122, 17556);
      (0, import_internal40.add_location)(code200, file34, 350, 152, 17586);
      (0, import_internal40.add_location)(li139, file34, 350, 0, 17434);
      (0, import_internal40.add_location)(li140, file34, 351, 0, 17619);
      (0, import_internal40.add_location)(li141, file34, 352, 0, 17707);
      (0, import_internal40.add_location)(ul68, file34, 349, 0, 17429);
      (0, import_internal40.add_location)(h259, file34, 354, 0, 17902);
      (0, import_internal40.add_location)(li142, file34, 356, 0, 17936);
      (0, import_internal40.add_location)(ul69, file34, 355, 0, 17931);
      (0, import_internal40.add_location)(h260, file34, 358, 0, 18016);
      (0, import_internal40.add_location)(code201, file34, 360, 21, 18071);
      (0, import_internal40.add_location)(code202, file34, 360, 101, 18151);
      (0, import_internal40.add_location)(li143, file34, 360, 0, 18050);
      (0, import_internal40.add_location)(code203, file34, 361, 51, 18306);
      (0, import_internal40.add_location)(li144, file34, 361, 0, 18255);
      (0, import_internal40.add_location)(ul70, file34, 359, 0, 18045);
      (0, import_internal40.add_location)(hr5, file34, 363, 0, 18408);
      (0, import_internal40.add_location)(h261, file34, 364, 0, 18413);
      (0, import_internal40.add_location)(code204, file34, 366, 21, 18468);
      (0, import_internal40.add_location)(code205, file34, 366, 66, 18513);
      (0, import_internal40.add_location)(li145, file34, 366, 0, 18447);
      (0, import_internal40.add_location)(ul71, file34, 365, 0, 18442);
      (0, import_internal40.add_location)(hr6, file34, 368, 0, 18699);
      (0, import_internal40.add_location)(h262, file34, 369, 0, 18704);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal40.insert_dev)(target, h1, anchor);
      (0, import_internal40.insert_dev)(target, t1, anchor);
      (0, import_internal40.insert_dev)(target, h20, anchor);
      (0, import_internal40.append_dev)(h20, t2);
      (0, import_internal40.append_dev)(h20, em0);
      (0, import_internal40.insert_dev)(target, t4, anchor);
      (0, import_internal40.insert_dev)(target, ul0, anchor);
      (0, import_internal40.append_dev)(ul0, li0);
      (0, import_internal40.append_dev)(li0, strong0);
      (0, import_internal40.append_dev)(li0, t6);
      (0, import_internal40.append_dev)(li0, code0);
      (0, import_internal40.append_dev)(li0, t8);
      (0, import_internal40.append_dev)(ul0, t9);
      (0, import_internal40.append_dev)(ul0, li1);
      (0, import_internal40.append_dev)(li1, strong1);
      (0, import_internal40.append_dev)(li1, t11);
      (0, import_internal40.append_dev)(li1, code1);
      (0, import_internal40.append_dev)(li1, t13);
      (0, import_internal40.append_dev)(li1, code2);
      (0, import_internal40.append_dev)(li1, t15);
      (0, import_internal40.append_dev)(ul0, t16);
      (0, import_internal40.append_dev)(ul0, li2);
      (0, import_internal40.append_dev)(li2, strong2);
      (0, import_internal40.append_dev)(li2, t18);
      (0, import_internal40.append_dev)(li2, code3);
      (0, import_internal40.append_dev)(li2, t20);
      (0, import_internal40.append_dev)(li2, code4);
      (0, import_internal40.append_dev)(li2, t22);
      (0, import_internal40.append_dev)(li2, code5);
      (0, import_internal40.append_dev)(li2, t24);
      (0, import_internal40.append_dev)(li2, code6);
      (0, import_internal40.append_dev)(li2, t26);
      (0, import_internal40.append_dev)(li2, code7);
      (0, import_internal40.append_dev)(li2, t28);
      (0, import_internal40.append_dev)(li2, code8);
      (0, import_internal40.append_dev)(li2, t30);
      (0, import_internal40.append_dev)(li2, code9);
      (0, import_internal40.append_dev)(li2, t32);
      (0, import_internal40.append_dev)(li2, code10);
      (0, import_internal40.append_dev)(li2, t34);
      (0, import_internal40.append_dev)(ul0, t35);
      (0, import_internal40.append_dev)(ul0, li3);
      (0, import_internal40.append_dev)(li3, strong3);
      (0, import_internal40.append_dev)(li3, t37);
      (0, import_internal40.append_dev)(li3, code11);
      (0, import_internal40.append_dev)(li3, t39);
      (0, import_internal40.append_dev)(li3, code12);
      (0, import_internal40.append_dev)(li3, t41);
      (0, import_internal40.append_dev)(li3, code13);
      (0, import_internal40.append_dev)(li3, t43);
      (0, import_internal40.append_dev)(li3, code14);
      (0, import_internal40.append_dev)(li3, t45);
      (0, import_internal40.append_dev)(ul0, t46);
      (0, import_internal40.append_dev)(ul0, li4);
      (0, import_internal40.append_dev)(li4, t47);
      (0, import_internal40.append_dev)(li4, code15);
      (0, import_internal40.append_dev)(li4, t49);
      (0, import_internal40.append_dev)(li4, code16);
      (0, import_internal40.append_dev)(li4, t51);
      (0, import_internal40.append_dev)(ul0, t52);
      (0, import_internal40.append_dev)(ul0, li5);
      (0, import_internal40.append_dev)(li5, t53);
      (0, import_internal40.append_dev)(li5, code17);
      (0, import_internal40.append_dev)(li5, t55);
      (0, import_internal40.append_dev)(li5, code18);
      (0, import_internal40.append_dev)(li5, t57);
      (0, import_internal40.append_dev)(ul0, t58);
      (0, import_internal40.append_dev)(ul0, li6);
      (0, import_internal40.append_dev)(li6, t59);
      (0, import_internal40.append_dev)(li6, code19);
      (0, import_internal40.append_dev)(li6, t61);
      (0, import_internal40.append_dev)(li6, code20);
      (0, import_internal40.append_dev)(li6, t63);
      (0, import_internal40.append_dev)(ul0, t64);
      (0, import_internal40.append_dev)(ul0, li7);
      (0, import_internal40.append_dev)(li7, t65);
      (0, import_internal40.append_dev)(li7, code21);
      (0, import_internal40.append_dev)(li7, t67);
      (0, import_internal40.append_dev)(li7, code22);
      (0, import_internal40.append_dev)(li7, t69);
      (0, import_internal40.insert_dev)(target, t70, anchor);
      (0, import_internal40.insert_dev)(target, h30, anchor);
      (0, import_internal40.insert_dev)(target, t72, anchor);
      (0, import_internal40.insert_dev)(target, ul1, anchor);
      (0, import_internal40.append_dev)(ul1, li8);
      (0, import_internal40.append_dev)(ul1, t74);
      (0, import_internal40.append_dev)(ul1, li9);
      (0, import_internal40.append_dev)(li9, t75);
      (0, import_internal40.append_dev)(li9, code23);
      (0, import_internal40.append_dev)(li9, t77);
      (0, import_internal40.append_dev)(li9, code24);
      (0, import_internal40.append_dev)(li9, t79);
      (0, import_internal40.append_dev)(ul1, t80);
      (0, import_internal40.append_dev)(ul1, li10);
      (0, import_internal40.append_dev)(li10, code25);
      (0, import_internal40.append_dev)(li10, t82);
      (0, import_internal40.append_dev)(li10, code26);
      (0, import_internal40.append_dev)(li10, t84);
      (0, import_internal40.append_dev)(ul1, t85);
      (0, import_internal40.append_dev)(ul1, li11);
      (0, import_internal40.append_dev)(li11, code27);
      (0, import_internal40.append_dev)(li11, t87);
      (0, import_internal40.append_dev)(li11, code28);
      (0, import_internal40.append_dev)(li11, t89);
      (0, import_internal40.append_dev)(ul1, t90);
      (0, import_internal40.append_dev)(ul1, li12);
      (0, import_internal40.append_dev)(li12, code29);
      (0, import_internal40.append_dev)(li12, t92);
      (0, import_internal40.append_dev)(li12, code30);
      (0, import_internal40.append_dev)(li12, t94);
      (0, import_internal40.append_dev)(li12, code31);
      (0, import_internal40.append_dev)(ul1, t96);
      (0, import_internal40.append_dev)(ul1, li13);
      (0, import_internal40.append_dev)(li13, code32);
      (0, import_internal40.append_dev)(li13, t98);
      (0, import_internal40.append_dev)(li13, code33);
      (0, import_internal40.append_dev)(li13, t100);
      (0, import_internal40.append_dev)(li13, code34);
      (0, import_internal40.append_dev)(ul1, t102);
      (0, import_internal40.append_dev)(ul1, li14);
      (0, import_internal40.append_dev)(li14, code35);
      (0, import_internal40.append_dev)(li14, t104);
      (0, import_internal40.append_dev)(li14, code36);
      (0, import_internal40.append_dev)(li14, t106);
      (0, import_internal40.append_dev)(li14, code37);
      (0, import_internal40.append_dev)(ul1, t108);
      (0, import_internal40.append_dev)(ul1, li15);
      (0, import_internal40.append_dev)(li15, code38);
      (0, import_internal40.append_dev)(li15, t110);
      (0, import_internal40.append_dev)(li15, code39);
      (0, import_internal40.append_dev)(li15, t112);
      (0, import_internal40.append_dev)(li15, code40);
      (0, import_internal40.append_dev)(ul1, t114);
      (0, import_internal40.append_dev)(ul1, li16);
      (0, import_internal40.append_dev)(li16, t115);
      (0, import_internal40.append_dev)(li16, code41);
      (0, import_internal40.append_dev)(li16, t117);
      (0, import_internal40.append_dev)(li16, code42);
      (0, import_internal40.append_dev)(li16, t119);
      (0, import_internal40.append_dev)(li16, code43);
      (0, import_internal40.append_dev)(li16, t121);
      (0, import_internal40.append_dev)(li16, code44);
      (0, import_internal40.append_dev)(li16, t123);
      (0, import_internal40.append_dev)(li16, code45);
      (0, import_internal40.append_dev)(li16, t125);
      (0, import_internal40.append_dev)(li16, code46);
      (0, import_internal40.append_dev)(li16, t127);
      (0, import_internal40.append_dev)(li16, code47);
      (0, import_internal40.insert_dev)(target, t129, anchor);
      (0, import_internal40.insert_dev)(target, h31, anchor);
      (0, import_internal40.insert_dev)(target, t131, anchor);
      (0, import_internal40.insert_dev)(target, ul2, anchor);
      (0, import_internal40.append_dev)(ul2, li17);
      (0, import_internal40.append_dev)(li17, code48);
      (0, import_internal40.append_dev)(li17, t133);
      (0, import_internal40.append_dev)(li17, code49);
      (0, import_internal40.append_dev)(ul2, t135);
      (0, import_internal40.append_dev)(ul2, li18);
      (0, import_internal40.append_dev)(li18, code50);
      (0, import_internal40.append_dev)(li18, t137);
      (0, import_internal40.append_dev)(li18, code51);
      (0, import_internal40.append_dev)(ul2, t139);
      (0, import_internal40.append_dev)(ul2, li19);
      (0, import_internal40.append_dev)(li19, code52);
      (0, import_internal40.append_dev)(li19, t141);
      (0, import_internal40.append_dev)(li19, code53);
      (0, import_internal40.append_dev)(ul2, t143);
      (0, import_internal40.append_dev)(ul2, li20);
      (0, import_internal40.append_dev)(li20, code54);
      (0, import_internal40.append_dev)(li20, t145);
      (0, import_internal40.append_dev)(li20, code55);
      (0, import_internal40.append_dev)(ul2, t147);
      (0, import_internal40.append_dev)(ul2, li21);
      (0, import_internal40.append_dev)(li21, code56);
      (0, import_internal40.append_dev)(li21, t149);
      (0, import_internal40.append_dev)(li21, code57);
      (0, import_internal40.append_dev)(ul2, t151);
      (0, import_internal40.append_dev)(ul2, li22);
      (0, import_internal40.append_dev)(li22, code58);
      (0, import_internal40.append_dev)(li22, t153);
      (0, import_internal40.append_dev)(li22, code59);
      (0, import_internal40.append_dev)(ul2, t155);
      (0, import_internal40.append_dev)(ul2, li23);
      (0, import_internal40.append_dev)(li23, code60);
      (0, import_internal40.append_dev)(li23, t157);
      (0, import_internal40.append_dev)(li23, code61);
      (0, import_internal40.insert_dev)(target, t159, anchor);
      (0, import_internal40.insert_dev)(target, p, anchor);
      (0, import_internal40.append_dev)(p, t160);
      (0, import_internal40.append_dev)(p, code62);
      (0, import_internal40.append_dev)(p, t162);
      (0, import_internal40.append_dev)(p, code63);
      (0, import_internal40.append_dev)(p, t164);
      (0, import_internal40.insert_dev)(target, t165, anchor);
      (0, import_internal40.insert_dev)(target, hr0, anchor);
      (0, import_internal40.insert_dev)(target, t166, anchor);
      (0, import_internal40.insert_dev)(target, h21, anchor);
      (0, import_internal40.append_dev)(h21, t167);
      (0, import_internal40.append_dev)(h21, em1);
      (0, import_internal40.insert_dev)(target, t169, anchor);
      (0, import_internal40.insert_dev)(target, ul3, anchor);
      (0, import_internal40.append_dev)(ul3, li24);
      (0, import_internal40.append_dev)(li24, t170);
      (0, import_internal40.append_dev)(li24, code64);
      (0, import_internal40.append_dev)(li24, t172);
      (0, import_internal40.insert_dev)(target, t173, anchor);
      (0, import_internal40.insert_dev)(target, h22, anchor);
      (0, import_internal40.append_dev)(h22, t174);
      (0, import_internal40.append_dev)(h22, em2);
      (0, import_internal40.insert_dev)(target, t176, anchor);
      (0, import_internal40.insert_dev)(target, ul4, anchor);
      (0, import_internal40.append_dev)(ul4, li25);
      (0, import_internal40.append_dev)(li25, t177);
      (0, import_internal40.append_dev)(li25, code65);
      (0, import_internal40.append_dev)(li25, t179);
      (0, import_internal40.insert_dev)(target, t180, anchor);
      (0, import_internal40.insert_dev)(target, h23, anchor);
      (0, import_internal40.append_dev)(h23, t181);
      (0, import_internal40.append_dev)(h23, em3);
      (0, import_internal40.insert_dev)(target, t183, anchor);
      (0, import_internal40.insert_dev)(target, ul5, anchor);
      (0, import_internal40.append_dev)(ul5, li26);
      (0, import_internal40.append_dev)(li26, t184);
      (0, import_internal40.append_dev)(li26, code66);
      (0, import_internal40.append_dev)(li26, t186);
      (0, import_internal40.append_dev)(li26, code67);
      (0, import_internal40.append_dev)(li26, t188);
      (0, import_internal40.append_dev)(li26, code68);
      (0, import_internal40.append_dev)(li26, t190);
      (0, import_internal40.insert_dev)(target, t191, anchor);
      (0, import_internal40.insert_dev)(target, h24, anchor);
      (0, import_internal40.append_dev)(h24, t192);
      (0, import_internal40.append_dev)(h24, em4);
      (0, import_internal40.insert_dev)(target, t194, anchor);
      (0, import_internal40.insert_dev)(target, ul6, anchor);
      (0, import_internal40.append_dev)(ul6, li27);
      (0, import_internal40.append_dev)(li27, t195);
      (0, import_internal40.append_dev)(li27, code69);
      (0, import_internal40.append_dev)(li27, t197);
      (0, import_internal40.append_dev)(li27, code70);
      (0, import_internal40.append_dev)(li27, t199);
      (0, import_internal40.append_dev)(ul6, t200);
      (0, import_internal40.append_dev)(ul6, li28);
      (0, import_internal40.insert_dev)(target, t202, anchor);
      (0, import_internal40.insert_dev)(target, h25, anchor);
      (0, import_internal40.append_dev)(h25, t203);
      (0, import_internal40.append_dev)(h25, em5);
      (0, import_internal40.insert_dev)(target, t205, anchor);
      (0, import_internal40.insert_dev)(target, ul7, anchor);
      (0, import_internal40.append_dev)(ul7, li29);
      (0, import_internal40.append_dev)(li29, code71);
      (0, import_internal40.append_dev)(li29, t207);
      (0, import_internal40.append_dev)(li29, code72);
      (0, import_internal40.append_dev)(li29, t209);
      (0, import_internal40.append_dev)(li29, code73);
      (0, import_internal40.append_dev)(li29, t211);
      (0, import_internal40.append_dev)(li29, code74);
      (0, import_internal40.append_dev)(li29, t213);
      (0, import_internal40.append_dev)(ul7, t214);
      (0, import_internal40.append_dev)(ul7, li30);
      (0, import_internal40.insert_dev)(target, t216, anchor);
      (0, import_internal40.insert_dev)(target, h26, anchor);
      (0, import_internal40.append_dev)(h26, t217);
      (0, import_internal40.append_dev)(h26, em6);
      (0, import_internal40.insert_dev)(target, t219, anchor);
      (0, import_internal40.insert_dev)(target, ul8, anchor);
      (0, import_internal40.append_dev)(ul8, li31);
      (0, import_internal40.append_dev)(li31, strong4);
      (0, import_internal40.append_dev)(li31, t221);
      (0, import_internal40.append_dev)(li31, a0);
      (0, import_internal40.append_dev)(li31, t223);
      (0, import_internal40.append_dev)(ul8, t224);
      (0, import_internal40.append_dev)(ul8, li32);
      (0, import_internal40.append_dev)(li32, strong5);
      (0, import_internal40.append_dev)(li32, t226);
      (0, import_internal40.append_dev)(li32, a1);
      (0, import_internal40.append_dev)(li32, t228);
      (0, import_internal40.append_dev)(li32, a2);
      (0, import_internal40.append_dev)(li32, t230);
      (0, import_internal40.append_dev)(li32, a3);
      (0, import_internal40.append_dev)(li32, t232);
      (0, import_internal40.append_dev)(ul8, t233);
      (0, import_internal40.append_dev)(ul8, li33);
      (0, import_internal40.append_dev)(li33, strong6);
      (0, import_internal40.append_dev)(li33, t235);
      (0, import_internal40.append_dev)(li33, code75);
      (0, import_internal40.append_dev)(li33, t237);
      (0, import_internal40.append_dev)(li33, code76);
      (0, import_internal40.append_dev)(li33, t239);
      (0, import_internal40.append_dev)(li33, code77);
      (0, import_internal40.append_dev)(li33, t241);
      (0, import_internal40.append_dev)(li33, code78);
      (0, import_internal40.append_dev)(li33, t243);
      (0, import_internal40.append_dev)(li33, code79);
      (0, import_internal40.append_dev)(li33, t245);
      (0, import_internal40.append_dev)(li33, code80);
      (0, import_internal40.append_dev)(li33, t247);
      (0, import_internal40.append_dev)(li33, code81);
      (0, import_internal40.append_dev)(li33, t249);
      (0, import_internal40.append_dev)(li33, code82);
      (0, import_internal40.append_dev)(li33, t251);
      (0, import_internal40.append_dev)(li33, code83);
      (0, import_internal40.append_dev)(li33, t253);
      (0, import_internal40.append_dev)(ul8, t254);
      (0, import_internal40.append_dev)(ul8, li34);
      (0, import_internal40.append_dev)(li34, strong7);
      (0, import_internal40.append_dev)(li34, t256);
      (0, import_internal40.append_dev)(li34, code84);
      (0, import_internal40.append_dev)(li34, t258);
      (0, import_internal40.append_dev)(li34, code85);
      (0, import_internal40.append_dev)(li34, t260);
      (0, import_internal40.insert_dev)(target, t261, anchor);
      (0, import_internal40.insert_dev)(target, h32, anchor);
      (0, import_internal40.insert_dev)(target, t263, anchor);
      (0, import_internal40.insert_dev)(target, h40, anchor);
      (0, import_internal40.insert_dev)(target, t265, anchor);
      (0, import_internal40.insert_dev)(target, ul9, anchor);
      (0, import_internal40.append_dev)(ul9, li35);
      (0, import_internal40.append_dev)(li35, t266);
      (0, import_internal40.append_dev)(li35, code86);
      (0, import_internal40.append_dev)(li35, t268);
      (0, import_internal40.append_dev)(li35, code87);
      (0, import_internal40.append_dev)(ul9, t270);
      (0, import_internal40.append_dev)(ul9, li36);
      (0, import_internal40.append_dev)(li36, code88);
      (0, import_internal40.append_dev)(li36, t272);
      (0, import_internal40.append_dev)(li36, code89);
      (0, import_internal40.append_dev)(li36, t274);
      (0, import_internal40.append_dev)(li36, code90);
      (0, import_internal40.insert_dev)(target, t276, anchor);
      (0, import_internal40.insert_dev)(target, h41, anchor);
      (0, import_internal40.insert_dev)(target, t278, anchor);
      (0, import_internal40.insert_dev)(target, ul10, anchor);
      (0, import_internal40.append_dev)(ul10, li37);
      (0, import_internal40.append_dev)(li37, t279);
      (0, import_internal40.append_dev)(li37, code91);
      (0, import_internal40.append_dev)(li37, t281);
      (0, import_internal40.append_dev)(li37, code92);
      (0, import_internal40.insert_dev)(target, t283, anchor);
      (0, import_internal40.insert_dev)(target, h42, anchor);
      (0, import_internal40.insert_dev)(target, t285, anchor);
      (0, import_internal40.insert_dev)(target, ul11, anchor);
      (0, import_internal40.append_dev)(ul11, li38);
      (0, import_internal40.append_dev)(li38, t286);
      (0, import_internal40.append_dev)(li38, code93);
      (0, import_internal40.append_dev)(li38, t288);
      (0, import_internal40.append_dev)(li38, code94);
      (0, import_internal40.insert_dev)(target, t290, anchor);
      (0, import_internal40.insert_dev)(target, h43, anchor);
      (0, import_internal40.insert_dev)(target, t292, anchor);
      (0, import_internal40.insert_dev)(target, ul12, anchor);
      (0, import_internal40.append_dev)(ul12, li39);
      (0, import_internal40.append_dev)(li39, t293);
      (0, import_internal40.append_dev)(li39, code95);
      (0, import_internal40.append_dev)(li39, t295);
      (0, import_internal40.append_dev)(li39, code96);
      (0, import_internal40.insert_dev)(target, t297, anchor);
      (0, import_internal40.insert_dev)(target, h44, anchor);
      (0, import_internal40.insert_dev)(target, t299, anchor);
      (0, import_internal40.insert_dev)(target, ul13, anchor);
      (0, import_internal40.append_dev)(ul13, li40);
      (0, import_internal40.append_dev)(li40, code97);
      (0, import_internal40.append_dev)(li40, t301);
      (0, import_internal40.append_dev)(li40, code98);
      (0, import_internal40.insert_dev)(target, t303, anchor);
      (0, import_internal40.insert_dev)(target, hr1, anchor);
      (0, import_internal40.insert_dev)(target, t304, anchor);
      (0, import_internal40.insert_dev)(target, h27, anchor);
      (0, import_internal40.append_dev)(h27, t305);
      (0, import_internal40.append_dev)(h27, em7);
      (0, import_internal40.insert_dev)(target, t307, anchor);
      (0, import_internal40.insert_dev)(target, ul14, anchor);
      (0, import_internal40.append_dev)(ul14, li41);
      (0, import_internal40.append_dev)(li41, t308);
      (0, import_internal40.append_dev)(li41, code99);
      (0, import_internal40.append_dev)(li41, t310);
      (0, import_internal40.append_dev)(ul14, t311);
      (0, import_internal40.append_dev)(ul14, li42);
      (0, import_internal40.append_dev)(li42, t312);
      (0, import_internal40.append_dev)(li42, code100);
      (0, import_internal40.append_dev)(li42, t314);
      (0, import_internal40.insert_dev)(target, t315, anchor);
      (0, import_internal40.insert_dev)(target, h28, anchor);
      (0, import_internal40.append_dev)(h28, t316);
      (0, import_internal40.append_dev)(h28, em8);
      (0, import_internal40.insert_dev)(target, t318, anchor);
      (0, import_internal40.insert_dev)(target, ul15, anchor);
      (0, import_internal40.append_dev)(ul15, li43);
      (0, import_internal40.append_dev)(li43, strong8);
      (0, import_internal40.append_dev)(li43, t320);
      (0, import_internal40.append_dev)(li43, code101);
      (0, import_internal40.append_dev)(li43, t322);
      (0, import_internal40.append_dev)(li43, code102);
      (0, import_internal40.append_dev)(li43, t324);
      (0, import_internal40.append_dev)(li43, code103);
      (0, import_internal40.append_dev)(li43, t326);
      (0, import_internal40.insert_dev)(target, t327, anchor);
      (0, import_internal40.insert_dev)(target, h29, anchor);
      (0, import_internal40.append_dev)(h29, t328);
      (0, import_internal40.append_dev)(h29, em9);
      (0, import_internal40.insert_dev)(target, t330, anchor);
      (0, import_internal40.insert_dev)(target, ul16, anchor);
      (0, import_internal40.append_dev)(ul16, li44);
      (0, import_internal40.append_dev)(li44, t331);
      (0, import_internal40.append_dev)(li44, code104);
      (0, import_internal40.append_dev)(li44, t333);
      (0, import_internal40.insert_dev)(target, t334, anchor);
      (0, import_internal40.insert_dev)(target, h210, anchor);
      (0, import_internal40.append_dev)(h210, t335);
      (0, import_internal40.append_dev)(h210, em10);
      (0, import_internal40.insert_dev)(target, t337, anchor);
      (0, import_internal40.insert_dev)(target, ul18, anchor);
      (0, import_internal40.append_dev)(ul18, li45);
      (0, import_internal40.append_dev)(li45, strong9);
      (0, import_internal40.append_dev)(li45, t339);
      (0, import_internal40.append_dev)(li45, code105);
      (0, import_internal40.append_dev)(li45, t341);
      (0, import_internal40.append_dev)(li45, code106);
      (0, import_internal40.append_dev)(li45, t343);
      (0, import_internal40.append_dev)(ul18, t344);
      (0, import_internal40.append_dev)(ul18, li46);
      (0, import_internal40.append_dev)(li46, code107);
      (0, import_internal40.append_dev)(li46, t346);
      (0, import_internal40.append_dev)(li46, strong10);
      (0, import_internal40.append_dev)(li46, t348);
      (0, import_internal40.append_dev)(ul18, t349);
      (0, import_internal40.append_dev)(ul18, li51);
      (0, import_internal40.append_dev)(li51, code108);
      (0, import_internal40.append_dev)(li51, t351);
      (0, import_internal40.append_dev)(li51, ul17);
      (0, import_internal40.append_dev)(ul17, li47);
      (0, import_internal40.append_dev)(li47, t352);
      (0, import_internal40.append_dev)(li47, code109);
      (0, import_internal40.append_dev)(li47, t354);
      (0, import_internal40.append_dev)(li47, code110);
      (0, import_internal40.append_dev)(li47, t356);
      (0, import_internal40.append_dev)(ul17, t357);
      (0, import_internal40.append_dev)(ul17, li48);
      (0, import_internal40.append_dev)(li48, t358);
      (0, import_internal40.append_dev)(li48, code111);
      (0, import_internal40.append_dev)(li48, t360);
      (0, import_internal40.append_dev)(ul17, t361);
      (0, import_internal40.append_dev)(ul17, li49);
      (0, import_internal40.append_dev)(li49, t362);
      (0, import_internal40.append_dev)(li49, code112);
      (0, import_internal40.append_dev)(li49, t364);
      (0, import_internal40.append_dev)(li49, code113);
      (0, import_internal40.append_dev)(li49, t366);
      (0, import_internal40.append_dev)(li49, code114);
      (0, import_internal40.append_dev)(li49, t368);
      (0, import_internal40.append_dev)(ul17, t369);
      (0, import_internal40.append_dev)(ul17, li50);
      (0, import_internal40.append_dev)(li50, t370);
      (0, import_internal40.append_dev)(li50, code115);
      (0, import_internal40.append_dev)(li50, t372);
      (0, import_internal40.append_dev)(li50, code116);
      (0, import_internal40.append_dev)(li50, t374);
      (0, import_internal40.insert_dev)(target, t375, anchor);
      (0, import_internal40.insert_dev)(target, h211, anchor);
      (0, import_internal40.append_dev)(h211, t376);
      (0, import_internal40.append_dev)(h211, em11);
      (0, import_internal40.insert_dev)(target, t378, anchor);
      (0, import_internal40.insert_dev)(target, ul20, anchor);
      (0, import_internal40.append_dev)(ul20, li55);
      (0, import_internal40.append_dev)(li55, code117);
      (0, import_internal40.append_dev)(li55, t380);
      (0, import_internal40.append_dev)(li55, ul19);
      (0, import_internal40.append_dev)(ul19, li52);
      (0, import_internal40.append_dev)(li52, code118);
      (0, import_internal40.append_dev)(li52, t382);
      (0, import_internal40.append_dev)(li52, code119);
      (0, import_internal40.append_dev)(li52, t384);
      (0, import_internal40.append_dev)(ul19, t385);
      (0, import_internal40.append_dev)(ul19, li53);
      (0, import_internal40.append_dev)(ul19, t387);
      (0, import_internal40.append_dev)(ul19, li54);
      (0, import_internal40.append_dev)(li54, t388);
      (0, import_internal40.append_dev)(li54, code120);
      (0, import_internal40.append_dev)(li54, t390);
      (0, import_internal40.append_dev)(li54, code121);
      (0, import_internal40.append_dev)(li54, t392);
      (0, import_internal40.append_dev)(li54, code122);
      (0, import_internal40.append_dev)(li54, t394);
      (0, import_internal40.append_dev)(li54, code123);
      (0, import_internal40.append_dev)(li54, t396);
      (0, import_internal40.insert_dev)(target, t397, anchor);
      (0, import_internal40.insert_dev)(target, h212, anchor);
      (0, import_internal40.append_dev)(h212, t398);
      (0, import_internal40.append_dev)(h212, em12);
      (0, import_internal40.insert_dev)(target, t400, anchor);
      (0, import_internal40.insert_dev)(target, ul22, anchor);
      (0, import_internal40.append_dev)(ul22, li59);
      (0, import_internal40.append_dev)(li59, code124);
      (0, import_internal40.append_dev)(li59, t402);
      (0, import_internal40.append_dev)(li59, ul21);
      (0, import_internal40.append_dev)(ul21, li56);
      (0, import_internal40.append_dev)(ul21, t404);
      (0, import_internal40.append_dev)(ul21, li57);
      (0, import_internal40.append_dev)(li57, t405);
      (0, import_internal40.append_dev)(li57, code125);
      (0, import_internal40.append_dev)(li57, t407);
      (0, import_internal40.append_dev)(ul21, t408);
      (0, import_internal40.append_dev)(ul21, li58);
      (0, import_internal40.insert_dev)(target, t410, anchor);
      (0, import_internal40.insert_dev)(target, h213, anchor);
      (0, import_internal40.append_dev)(h213, t411);
      (0, import_internal40.append_dev)(h213, em13);
      (0, import_internal40.insert_dev)(target, t413, anchor);
      (0, import_internal40.insert_dev)(target, ul23, anchor);
      (0, import_internal40.append_dev)(ul23, li60);
      (0, import_internal40.append_dev)(li60, t414);
      (0, import_internal40.append_dev)(li60, code126);
      (0, import_internal40.append_dev)(li60, t416);
      (0, import_internal40.insert_dev)(target, t417, anchor);
      (0, import_internal40.insert_dev)(target, h214, anchor);
      (0, import_internal40.append_dev)(h214, t418);
      (0, import_internal40.append_dev)(h214, em14);
      (0, import_internal40.insert_dev)(target, t420, anchor);
      (0, import_internal40.insert_dev)(target, ul24, anchor);
      (0, import_internal40.append_dev)(ul24, li61);
      (0, import_internal40.append_dev)(li61, t421);
      (0, import_internal40.append_dev)(li61, code127);
      (0, import_internal40.append_dev)(li61, t423);
      (0, import_internal40.append_dev)(ul24, t424);
      (0, import_internal40.append_dev)(ul24, li62);
      (0, import_internal40.append_dev)(li62, code128);
      (0, import_internal40.append_dev)(li62, t426);
      (0, import_internal40.insert_dev)(target, t427, anchor);
      (0, import_internal40.insert_dev)(target, h215, anchor);
      (0, import_internal40.append_dev)(h215, t428);
      (0, import_internal40.append_dev)(h215, em15);
      (0, import_internal40.insert_dev)(target, t430, anchor);
      (0, import_internal40.insert_dev)(target, ul25, anchor);
      (0, import_internal40.append_dev)(ul25, li63);
      (0, import_internal40.append_dev)(li63, code129);
      (0, import_internal40.append_dev)(li63, t432);
      (0, import_internal40.append_dev)(ul25, t433);
      (0, import_internal40.append_dev)(ul25, li64);
      (0, import_internal40.append_dev)(li64, code130);
      (0, import_internal40.append_dev)(li64, t435);
      (0, import_internal40.append_dev)(ul25, t436);
      (0, import_internal40.append_dev)(ul25, li65);
      (0, import_internal40.append_dev)(li65, code131);
      (0, import_internal40.append_dev)(li65, t438);
      (0, import_internal40.append_dev)(li65, code132);
      (0, import_internal40.append_dev)(li65, t440);
      (0, import_internal40.insert_dev)(target, t441, anchor);
      (0, import_internal40.insert_dev)(target, h216, anchor);
      (0, import_internal40.append_dev)(h216, t442);
      (0, import_internal40.append_dev)(h216, em16);
      (0, import_internal40.insert_dev)(target, t444, anchor);
      (0, import_internal40.insert_dev)(target, ul26, anchor);
      (0, import_internal40.append_dev)(ul26, li66);
      (0, import_internal40.append_dev)(ul26, t446);
      (0, import_internal40.append_dev)(ul26, li67);
      (0, import_internal40.append_dev)(ul26, t448);
      (0, import_internal40.append_dev)(ul26, li68);
      (0, import_internal40.append_dev)(ul26, t450);
      (0, import_internal40.append_dev)(ul26, li69);
      (0, import_internal40.append_dev)(li69, t451);
      (0, import_internal40.append_dev)(li69, code133);
      (0, import_internal40.append_dev)(li69, t453);
      (0, import_internal40.append_dev)(li69, code134);
      (0, import_internal40.append_dev)(li69, t455);
      (0, import_internal40.insert_dev)(target, t456, anchor);
      (0, import_internal40.insert_dev)(target, h217, anchor);
      (0, import_internal40.append_dev)(h217, t457);
      (0, import_internal40.append_dev)(h217, em17);
      (0, import_internal40.insert_dev)(target, t459, anchor);
      (0, import_internal40.insert_dev)(target, ul27, anchor);
      (0, import_internal40.append_dev)(ul27, li70);
      (0, import_internal40.insert_dev)(target, t461, anchor);
      (0, import_internal40.insert_dev)(target, h218, anchor);
      (0, import_internal40.append_dev)(h218, t462);
      (0, import_internal40.append_dev)(h218, em18);
      (0, import_internal40.insert_dev)(target, t464, anchor);
      (0, import_internal40.insert_dev)(target, ul28, anchor);
      (0, import_internal40.append_dev)(ul28, li71);
      (0, import_internal40.append_dev)(li71, code135);
      (0, import_internal40.append_dev)(li71, t466);
      (0, import_internal40.append_dev)(li71, code136);
      (0, import_internal40.append_dev)(li71, t468);
      (0, import_internal40.append_dev)(li71, code137);
      (0, import_internal40.append_dev)(li71, t470);
      (0, import_internal40.insert_dev)(target, t471, anchor);
      (0, import_internal40.insert_dev)(target, h219, anchor);
      (0, import_internal40.append_dev)(h219, t472);
      (0, import_internal40.append_dev)(h219, em19);
      (0, import_internal40.insert_dev)(target, t474, anchor);
      (0, import_internal40.insert_dev)(target, ul29, anchor);
      (0, import_internal40.append_dev)(ul29, li72);
      (0, import_internal40.append_dev)(ul29, t476);
      (0, import_internal40.append_dev)(ul29, li73);
      (0, import_internal40.append_dev)(li73, t477);
      (0, import_internal40.append_dev)(li73, code138);
      (0, import_internal40.append_dev)(li73, t479);
      (0, import_internal40.append_dev)(li73, code139);
      (0, import_internal40.append_dev)(li73, t481);
      (0, import_internal40.append_dev)(li73, code140);
      (0, import_internal40.append_dev)(li73, t483);
      (0, import_internal40.append_dev)(ul29, t484);
      (0, import_internal40.append_dev)(ul29, li74);
      (0, import_internal40.insert_dev)(target, t486, anchor);
      (0, import_internal40.insert_dev)(target, h220, anchor);
      (0, import_internal40.append_dev)(h220, t487);
      (0, import_internal40.append_dev)(h220, em20);
      (0, import_internal40.insert_dev)(target, t489, anchor);
      (0, import_internal40.insert_dev)(target, ul30, anchor);
      (0, import_internal40.append_dev)(ul30, li75);
      (0, import_internal40.append_dev)(li75, t490);
      (0, import_internal40.append_dev)(li75, code141);
      (0, import_internal40.append_dev)(li75, t492);
      (0, import_internal40.append_dev)(ul30, t493);
      (0, import_internal40.append_dev)(ul30, li76);
      (0, import_internal40.append_dev)(li76, code142);
      (0, import_internal40.append_dev)(li76, t495);
      (0, import_internal40.insert_dev)(target, t496, anchor);
      (0, import_internal40.insert_dev)(target, h221, anchor);
      (0, import_internal40.append_dev)(h221, t497);
      (0, import_internal40.append_dev)(h221, em21);
      (0, import_internal40.insert_dev)(target, t499, anchor);
      (0, import_internal40.insert_dev)(target, ul31, anchor);
      (0, import_internal40.append_dev)(ul31, li77);
      (0, import_internal40.append_dev)(ul31, t501);
      (0, import_internal40.append_dev)(ul31, li78);
      (0, import_internal40.append_dev)(li78, t502);
      (0, import_internal40.append_dev)(li78, code143);
      (0, import_internal40.append_dev)(li78, t504);
      (0, import_internal40.append_dev)(ul31, t505);
      (0, import_internal40.append_dev)(ul31, li79);
      (0, import_internal40.append_dev)(li79, t506);
      (0, import_internal40.append_dev)(li79, code144);
      (0, import_internal40.append_dev)(li79, t508);
      (0, import_internal40.insert_dev)(target, t509, anchor);
      (0, import_internal40.insert_dev)(target, h222, anchor);
      (0, import_internal40.append_dev)(h222, t510);
      (0, import_internal40.append_dev)(h222, em22);
      (0, import_internal40.insert_dev)(target, t512, anchor);
      (0, import_internal40.insert_dev)(target, ul32, anchor);
      (0, import_internal40.append_dev)(ul32, li80);
      (0, import_internal40.insert_dev)(target, t514, anchor);
      (0, import_internal40.insert_dev)(target, h223, anchor);
      (0, import_internal40.append_dev)(h223, t515);
      (0, import_internal40.append_dev)(h223, em23);
      (0, import_internal40.insert_dev)(target, t517, anchor);
      (0, import_internal40.insert_dev)(target, ul33, anchor);
      (0, import_internal40.append_dev)(ul33, li81);
      (0, import_internal40.append_dev)(li81, t518);
      (0, import_internal40.append_dev)(li81, code145);
      (0, import_internal40.append_dev)(li81, t520);
      (0, import_internal40.append_dev)(li81, code146);
      (0, import_internal40.append_dev)(li81, t522);
      (0, import_internal40.append_dev)(ul33, t523);
      (0, import_internal40.append_dev)(ul33, li82);
      (0, import_internal40.append_dev)(li82, t524);
      (0, import_internal40.append_dev)(li82, code147);
      (0, import_internal40.append_dev)(li82, t526);
      (0, import_internal40.insert_dev)(target, t527, anchor);
      (0, import_internal40.insert_dev)(target, h224, anchor);
      (0, import_internal40.append_dev)(h224, t528);
      (0, import_internal40.append_dev)(h224, em24);
      (0, import_internal40.insert_dev)(target, t530, anchor);
      (0, import_internal40.insert_dev)(target, ul34, anchor);
      (0, import_internal40.append_dev)(ul34, li83);
      (0, import_internal40.append_dev)(li83, code148);
      (0, import_internal40.append_dev)(li83, t532);
      (0, import_internal40.append_dev)(ul34, t533);
      (0, import_internal40.append_dev)(ul34, li84);
      (0, import_internal40.append_dev)(li84, t534);
      (0, import_internal40.append_dev)(li84, code149);
      (0, import_internal40.append_dev)(li84, t536);
      (0, import_internal40.insert_dev)(target, t537, anchor);
      (0, import_internal40.insert_dev)(target, h225, anchor);
      (0, import_internal40.append_dev)(h225, t538);
      (0, import_internal40.append_dev)(h225, em25);
      (0, import_internal40.insert_dev)(target, t540, anchor);
      (0, import_internal40.insert_dev)(target, ul35, anchor);
      (0, import_internal40.append_dev)(ul35, li85);
      (0, import_internal40.insert_dev)(target, t542, anchor);
      (0, import_internal40.insert_dev)(target, h226, anchor);
      (0, import_internal40.append_dev)(h226, t543);
      (0, import_internal40.append_dev)(h226, em26);
      (0, import_internal40.insert_dev)(target, t545, anchor);
      (0, import_internal40.insert_dev)(target, ul36, anchor);
      (0, import_internal40.append_dev)(ul36, li86);
      (0, import_internal40.append_dev)(li86, code150);
      (0, import_internal40.append_dev)(li86, t547);
      (0, import_internal40.append_dev)(ul36, t548);
      (0, import_internal40.append_dev)(ul36, li87);
      (0, import_internal40.append_dev)(li87, code151);
      (0, import_internal40.append_dev)(li87, t550);
      (0, import_internal40.append_dev)(li87, code152);
      (0, import_internal40.append_dev)(li87, t552);
      (0, import_internal40.insert_dev)(target, t553, anchor);
      (0, import_internal40.insert_dev)(target, h227, anchor);
      (0, import_internal40.append_dev)(h227, t554);
      (0, import_internal40.append_dev)(h227, em27);
      (0, import_internal40.insert_dev)(target, t556, anchor);
      (0, import_internal40.insert_dev)(target, ul37, anchor);
      (0, import_internal40.append_dev)(ul37, li88);
      (0, import_internal40.append_dev)(ul37, t558);
      (0, import_internal40.append_dev)(ul37, li89);
      (0, import_internal40.append_dev)(ul37, t560);
      (0, import_internal40.append_dev)(ul37, li90);
      (0, import_internal40.append_dev)(ul37, t562);
      (0, import_internal40.append_dev)(ul37, li91);
      (0, import_internal40.append_dev)(li91, t563);
      (0, import_internal40.append_dev)(li91, code153);
      (0, import_internal40.append_dev)(li91, t565);
      (0, import_internal40.append_dev)(li91, code154);
      (0, import_internal40.append_dev)(li91, t567);
      (0, import_internal40.append_dev)(li91, code155);
      (0, import_internal40.append_dev)(li91, t569);
      (0, import_internal40.append_dev)(ul37, t570);
      (0, import_internal40.append_dev)(ul37, li92);
      (0, import_internal40.append_dev)(li92, t571);
      (0, import_internal40.append_dev)(li92, code156);
      (0, import_internal40.append_dev)(li92, t573);
      (0, import_internal40.append_dev)(li92, code157);
      (0, import_internal40.append_dev)(li92, t575);
      (0, import_internal40.insert_dev)(target, t576, anchor);
      (0, import_internal40.insert_dev)(target, h228, anchor);
      (0, import_internal40.append_dev)(h228, t577);
      (0, import_internal40.append_dev)(h228, em28);
      (0, import_internal40.insert_dev)(target, t579, anchor);
      (0, import_internal40.insert_dev)(target, ul38, anchor);
      (0, import_internal40.append_dev)(ul38, li93);
      (0, import_internal40.append_dev)(li93, code158);
      (0, import_internal40.append_dev)(li93, t581);
      (0, import_internal40.append_dev)(li93, code159);
      (0, import_internal40.append_dev)(li93, t583);
      (0, import_internal40.append_dev)(ul38, t584);
      (0, import_internal40.append_dev)(ul38, li94);
      (0, import_internal40.append_dev)(li94, code160);
      (0, import_internal40.append_dev)(li94, t586);
      (0, import_internal40.append_dev)(li94, code161);
      (0, import_internal40.append_dev)(li94, t588);
      (0, import_internal40.append_dev)(li94, code162);
      (0, import_internal40.append_dev)(li94, t590);
      (0, import_internal40.append_dev)(li94, code163);
      (0, import_internal40.append_dev)(li94, t592);
      (0, import_internal40.insert_dev)(target, t593, anchor);
      (0, import_internal40.insert_dev)(target, h229, anchor);
      (0, import_internal40.append_dev)(h229, t594);
      (0, import_internal40.append_dev)(h229, em29);
      (0, import_internal40.insert_dev)(target, t596, anchor);
      (0, import_internal40.insert_dev)(target, ul39, anchor);
      (0, import_internal40.append_dev)(ul39, li95);
      (0, import_internal40.append_dev)(li95, code164);
      (0, import_internal40.append_dev)(li95, t598);
      (0, import_internal40.append_dev)(ul39, t599);
      (0, import_internal40.append_dev)(ul39, li96);
      (0, import_internal40.append_dev)(li96, code165);
      (0, import_internal40.append_dev)(li96, t601);
      (0, import_internal40.insert_dev)(target, t602, anchor);
      (0, import_internal40.insert_dev)(target, h230, anchor);
      (0, import_internal40.append_dev)(h230, t603);
      (0, import_internal40.append_dev)(h230, em30);
      (0, import_internal40.insert_dev)(target, t605, anchor);
      (0, import_internal40.insert_dev)(target, ul40, anchor);
      (0, import_internal40.append_dev)(ul40, li97);
      (0, import_internal40.append_dev)(li97, code166);
      (0, import_internal40.append_dev)(li97, t607);
      (0, import_internal40.insert_dev)(target, t608, anchor);
      (0, import_internal40.insert_dev)(target, h231, anchor);
      (0, import_internal40.append_dev)(h231, t609);
      (0, import_internal40.append_dev)(h231, em31);
      (0, import_internal40.insert_dev)(target, t611, anchor);
      (0, import_internal40.insert_dev)(target, ul41, anchor);
      (0, import_internal40.append_dev)(ul41, li98);
      (0, import_internal40.append_dev)(li98, t612);
      (0, import_internal40.append_dev)(li98, code167);
      (0, import_internal40.append_dev)(li98, t614);
      (0, import_internal40.insert_dev)(target, t615, anchor);
      (0, import_internal40.insert_dev)(target, h232, anchor);
      (0, import_internal40.append_dev)(h232, t616);
      (0, import_internal40.append_dev)(h232, em32);
      (0, import_internal40.insert_dev)(target, t618, anchor);
      (0, import_internal40.insert_dev)(target, ul42, anchor);
      (0, import_internal40.append_dev)(ul42, li99);
      (0, import_internal40.append_dev)(li99, t619);
      (0, import_internal40.append_dev)(li99, code168);
      (0, import_internal40.append_dev)(li99, t621);
      (0, import_internal40.insert_dev)(target, t622, anchor);
      (0, import_internal40.insert_dev)(target, h233, anchor);
      (0, import_internal40.append_dev)(h233, t623);
      (0, import_internal40.append_dev)(h233, em33);
      (0, import_internal40.insert_dev)(target, t625, anchor);
      (0, import_internal40.insert_dev)(target, ul43, anchor);
      (0, import_internal40.append_dev)(ul43, li100);
      (0, import_internal40.append_dev)(li100, t626);
      (0, import_internal40.append_dev)(li100, code169);
      (0, import_internal40.append_dev)(li100, t628);
      (0, import_internal40.insert_dev)(target, t629, anchor);
      (0, import_internal40.insert_dev)(target, h234, anchor);
      (0, import_internal40.append_dev)(h234, t630);
      (0, import_internal40.append_dev)(h234, em34);
      (0, import_internal40.insert_dev)(target, t632, anchor);
      (0, import_internal40.insert_dev)(target, ul44, anchor);
      (0, import_internal40.append_dev)(ul44, li101);
      (0, import_internal40.insert_dev)(target, t634, anchor);
      (0, import_internal40.insert_dev)(target, h235, anchor);
      (0, import_internal40.append_dev)(h235, t635);
      (0, import_internal40.append_dev)(h235, em35);
      (0, import_internal40.insert_dev)(target, t637, anchor);
      (0, import_internal40.insert_dev)(target, ul45, anchor);
      (0, import_internal40.append_dev)(ul45, li102);
      (0, import_internal40.append_dev)(li102, t638);
      (0, import_internal40.append_dev)(li102, code170);
      (0, import_internal40.append_dev)(li102, t640);
      (0, import_internal40.insert_dev)(target, t641, anchor);
      (0, import_internal40.insert_dev)(target, h236, anchor);
      (0, import_internal40.append_dev)(h236, t642);
      (0, import_internal40.append_dev)(h236, em36);
      (0, import_internal40.insert_dev)(target, t644, anchor);
      (0, import_internal40.insert_dev)(target, ul46, anchor);
      (0, import_internal40.append_dev)(ul46, li103);
      (0, import_internal40.append_dev)(li103, t645);
      (0, import_internal40.append_dev)(li103, code171);
      (0, import_internal40.append_dev)(li103, t647);
      (0, import_internal40.append_dev)(li103, code172);
      (0, import_internal40.append_dev)(li103, t649);
      (0, import_internal40.insert_dev)(target, t650, anchor);
      (0, import_internal40.insert_dev)(target, h237, anchor);
      (0, import_internal40.append_dev)(h237, t651);
      (0, import_internal40.append_dev)(h237, em37);
      (0, import_internal40.insert_dev)(target, t653, anchor);
      (0, import_internal40.insert_dev)(target, ul47, anchor);
      (0, import_internal40.append_dev)(ul47, li104);
      (0, import_internal40.append_dev)(li104, t654);
      (0, import_internal40.append_dev)(li104, a4);
      (0, import_internal40.insert_dev)(target, t656, anchor);
      (0, import_internal40.insert_dev)(target, h238, anchor);
      (0, import_internal40.append_dev)(h238, t657);
      (0, import_internal40.append_dev)(h238, em38);
      (0, import_internal40.insert_dev)(target, t659, anchor);
      (0, import_internal40.insert_dev)(target, ul48, anchor);
      (0, import_internal40.append_dev)(ul48, li105);
      (0, import_internal40.append_dev)(li105, t660);
      (0, import_internal40.append_dev)(li105, code173);
      (0, import_internal40.append_dev)(li105, t662);
      (0, import_internal40.append_dev)(ul48, t663);
      (0, import_internal40.append_dev)(ul48, li106);
      (0, import_internal40.append_dev)(li106, t664);
      (0, import_internal40.append_dev)(li106, code174);
      (0, import_internal40.append_dev)(li106, t666);
      (0, import_internal40.append_dev)(li106, code175);
      (0, import_internal40.append_dev)(li106, t668);
      (0, import_internal40.append_dev)(li106, code176);
      (0, import_internal40.append_dev)(li106, t670);
      (0, import_internal40.insert_dev)(target, t671, anchor);
      (0, import_internal40.insert_dev)(target, h239, anchor);
      (0, import_internal40.append_dev)(h239, t672);
      (0, import_internal40.append_dev)(h239, em39);
      (0, import_internal40.insert_dev)(target, t674, anchor);
      (0, import_internal40.insert_dev)(target, ul49, anchor);
      (0, import_internal40.append_dev)(ul49, li107);
      (0, import_internal40.insert_dev)(target, t676, anchor);
      (0, import_internal40.insert_dev)(target, h240, anchor);
      (0, import_internal40.append_dev)(h240, t677);
      (0, import_internal40.append_dev)(h240, em40);
      (0, import_internal40.insert_dev)(target, t679, anchor);
      (0, import_internal40.insert_dev)(target, ul50, anchor);
      (0, import_internal40.append_dev)(ul50, li108);
      (0, import_internal40.insert_dev)(target, t681, anchor);
      (0, import_internal40.insert_dev)(target, h241, anchor);
      (0, import_internal40.append_dev)(h241, t682);
      (0, import_internal40.append_dev)(h241, em41);
      (0, import_internal40.insert_dev)(target, t684, anchor);
      (0, import_internal40.insert_dev)(target, ul51, anchor);
      (0, import_internal40.append_dev)(ul51, li109);
      (0, import_internal40.append_dev)(li109, t685);
      (0, import_internal40.append_dev)(li109, code177);
      (0, import_internal40.append_dev)(li109, t687);
      (0, import_internal40.append_dev)(ul51, t688);
      (0, import_internal40.append_dev)(ul51, li110);
      (0, import_internal40.append_dev)(ul51, t690);
      (0, import_internal40.append_dev)(ul51, li111);
      (0, import_internal40.append_dev)(ul51, t692);
      (0, import_internal40.append_dev)(ul51, li112);
      (0, import_internal40.insert_dev)(target, t694, anchor);
      (0, import_internal40.insert_dev)(target, h242, anchor);
      (0, import_internal40.append_dev)(h242, t695);
      (0, import_internal40.append_dev)(h242, em42);
      (0, import_internal40.insert_dev)(target, t697, anchor);
      (0, import_internal40.insert_dev)(target, ul52, anchor);
      (0, import_internal40.append_dev)(ul52, li113);
      (0, import_internal40.append_dev)(li113, t698);
      (0, import_internal40.append_dev)(li113, code178);
      (0, import_internal40.append_dev)(li113, t700);
      (0, import_internal40.insert_dev)(target, t701, anchor);
      (0, import_internal40.insert_dev)(target, h243, anchor);
      (0, import_internal40.append_dev)(h243, t702);
      (0, import_internal40.append_dev)(h243, em43);
      (0, import_internal40.insert_dev)(target, t704, anchor);
      (0, import_internal40.insert_dev)(target, ul53, anchor);
      (0, import_internal40.append_dev)(ul53, li114);
      (0, import_internal40.append_dev)(li114, code179);
      (0, import_internal40.append_dev)(li114, t706);
      (0, import_internal40.insert_dev)(target, t707, anchor);
      (0, import_internal40.insert_dev)(target, h244, anchor);
      (0, import_internal40.append_dev)(h244, t708);
      (0, import_internal40.append_dev)(h244, em44);
      (0, import_internal40.insert_dev)(target, t710, anchor);
      (0, import_internal40.insert_dev)(target, ul54, anchor);
      (0, import_internal40.append_dev)(ul54, li115);
      (0, import_internal40.append_dev)(li115, t711);
      (0, import_internal40.append_dev)(li115, code180);
      (0, import_internal40.append_dev)(li115, t713);
      (0, import_internal40.append_dev)(li115, code181);
      (0, import_internal40.insert_dev)(target, t715, anchor);
      (0, import_internal40.insert_dev)(target, hr2, anchor);
      (0, import_internal40.insert_dev)(target, t716, anchor);
      (0, import_internal40.insert_dev)(target, h245, anchor);
      (0, import_internal40.append_dev)(h245, t717);
      (0, import_internal40.append_dev)(h245, em45);
      (0, import_internal40.insert_dev)(target, t719, anchor);
      (0, import_internal40.insert_dev)(target, ul55, anchor);
      (0, import_internal40.append_dev)(ul55, li116);
      (0, import_internal40.append_dev)(ul55, t721);
      (0, import_internal40.append_dev)(ul55, li117);
      (0, import_internal40.append_dev)(ul55, t723);
      (0, import_internal40.append_dev)(ul55, li118);
      (0, import_internal40.insert_dev)(target, t725, anchor);
      (0, import_internal40.insert_dev)(target, h246, anchor);
      (0, import_internal40.append_dev)(h246, t726);
      (0, import_internal40.append_dev)(h246, em46);
      (0, import_internal40.insert_dev)(target, t728, anchor);
      (0, import_internal40.insert_dev)(target, ul56, anchor);
      (0, import_internal40.append_dev)(ul56, li119);
      (0, import_internal40.insert_dev)(target, t730, anchor);
      (0, import_internal40.insert_dev)(target, h247, anchor);
      (0, import_internal40.append_dev)(h247, t731);
      (0, import_internal40.append_dev)(h247, em47);
      (0, import_internal40.insert_dev)(target, t733, anchor);
      (0, import_internal40.insert_dev)(target, ul57, anchor);
      (0, import_internal40.append_dev)(ul57, li120);
      (0, import_internal40.insert_dev)(target, t735, anchor);
      (0, import_internal40.insert_dev)(target, h248, anchor);
      (0, import_internal40.append_dev)(h248, t736);
      (0, import_internal40.append_dev)(h248, em48);
      (0, import_internal40.insert_dev)(target, t738, anchor);
      (0, import_internal40.insert_dev)(target, ul58, anchor);
      (0, import_internal40.append_dev)(ul58, li121);
      (0, import_internal40.append_dev)(li121, t739);
      (0, import_internal40.append_dev)(li121, code182);
      (0, import_internal40.append_dev)(li121, t741);
      (0, import_internal40.insert_dev)(target, t742, anchor);
      (0, import_internal40.insert_dev)(target, h249, anchor);
      (0, import_internal40.append_dev)(h249, t743);
      (0, import_internal40.append_dev)(h249, em49);
      (0, import_internal40.insert_dev)(target, t745, anchor);
      (0, import_internal40.insert_dev)(target, ul59, anchor);
      (0, import_internal40.append_dev)(ul59, li122);
      (0, import_internal40.append_dev)(li122, t746);
      (0, import_internal40.append_dev)(li122, code183);
      (0, import_internal40.append_dev)(li122, t748);
      (0, import_internal40.insert_dev)(target, t749, anchor);
      (0, import_internal40.insert_dev)(target, h250, anchor);
      (0, import_internal40.append_dev)(h250, t750);
      (0, import_internal40.append_dev)(h250, em50);
      (0, import_internal40.insert_dev)(target, t752, anchor);
      (0, import_internal40.insert_dev)(target, ul60, anchor);
      (0, import_internal40.append_dev)(ul60, li123);
      (0, import_internal40.append_dev)(ul60, t754);
      (0, import_internal40.append_dev)(ul60, li124);
      (0, import_internal40.insert_dev)(target, t756, anchor);
      (0, import_internal40.insert_dev)(target, h251, anchor);
      (0, import_internal40.append_dev)(h251, t757);
      (0, import_internal40.append_dev)(h251, em51);
      (0, import_internal40.insert_dev)(target, t759, anchor);
      (0, import_internal40.insert_dev)(target, ul61, anchor);
      (0, import_internal40.append_dev)(ul61, li125);
      (0, import_internal40.insert_dev)(target, t761, anchor);
      (0, import_internal40.insert_dev)(target, h252, anchor);
      (0, import_internal40.append_dev)(h252, t762);
      (0, import_internal40.append_dev)(h252, em52);
      (0, import_internal40.insert_dev)(target, t764, anchor);
      (0, import_internal40.insert_dev)(target, ul62, anchor);
      (0, import_internal40.append_dev)(ul62, li126);
      (0, import_internal40.append_dev)(ul62, t766);
      (0, import_internal40.append_dev)(ul62, li127);
      (0, import_internal40.insert_dev)(target, t768, anchor);
      (0, import_internal40.insert_dev)(target, h253, anchor);
      (0, import_internal40.append_dev)(h253, t769);
      (0, import_internal40.append_dev)(h253, em53);
      (0, import_internal40.insert_dev)(target, t771, anchor);
      (0, import_internal40.insert_dev)(target, ul63, anchor);
      (0, import_internal40.append_dev)(ul63, li128);
      (0, import_internal40.append_dev)(li128, t772);
      (0, import_internal40.append_dev)(li128, code184);
      (0, import_internal40.append_dev)(li128, t774);
      (0, import_internal40.insert_dev)(target, t775, anchor);
      (0, import_internal40.insert_dev)(target, h254, anchor);
      (0, import_internal40.append_dev)(h254, t776);
      (0, import_internal40.append_dev)(h254, em54);
      (0, import_internal40.insert_dev)(target, t778, anchor);
      (0, import_internal40.insert_dev)(target, ul64, anchor);
      (0, import_internal40.append_dev)(ul64, li129);
      (0, import_internal40.append_dev)(li129, t779);
      (0, import_internal40.append_dev)(li129, code185);
      (0, import_internal40.append_dev)(li129, t781);
      (0, import_internal40.append_dev)(li129, code186);
      (0, import_internal40.append_dev)(li129, t783);
      (0, import_internal40.append_dev)(li129, code187);
      (0, import_internal40.append_dev)(li129, t785);
      (0, import_internal40.append_dev)(ul64, t786);
      (0, import_internal40.append_dev)(ul64, li130);
      (0, import_internal40.append_dev)(li130, t787);
      (0, import_internal40.append_dev)(li130, code188);
      (0, import_internal40.append_dev)(li130, t789);
      (0, import_internal40.append_dev)(ul64, t790);
      (0, import_internal40.append_dev)(ul64, li131);
      (0, import_internal40.append_dev)(ul64, t792);
      (0, import_internal40.append_dev)(ul64, li132);
      (0, import_internal40.append_dev)(ul64, t794);
      (0, import_internal40.append_dev)(ul64, li133);
      (0, import_internal40.append_dev)(li133, t795);
      (0, import_internal40.append_dev)(li133, code189);
      (0, import_internal40.append_dev)(li133, t797);
      (0, import_internal40.append_dev)(li133, code190);
      (0, import_internal40.append_dev)(li133, t799);
      (0, import_internal40.insert_dev)(target, t800, anchor);
      (0, import_internal40.insert_dev)(target, hr3, anchor);
      (0, import_internal40.insert_dev)(target, t801, anchor);
      (0, import_internal40.insert_dev)(target, h255, anchor);
      (0, import_internal40.append_dev)(h255, t802);
      (0, import_internal40.append_dev)(h255, em55);
      (0, import_internal40.insert_dev)(target, t804, anchor);
      (0, import_internal40.insert_dev)(target, ul65, anchor);
      (0, import_internal40.append_dev)(ul65, li134);
      (0, import_internal40.append_dev)(li134, t805);
      (0, import_internal40.append_dev)(li134, code191);
      (0, import_internal40.append_dev)(li134, t807);
      (0, import_internal40.append_dev)(li134, code192);
      (0, import_internal40.append_dev)(li134, t809);
      (0, import_internal40.append_dev)(li134, code193);
      (0, import_internal40.append_dev)(li134, t811);
      (0, import_internal40.append_dev)(li134, code194);
      (0, import_internal40.append_dev)(ul65, t813);
      (0, import_internal40.append_dev)(ul65, li135);
      (0, import_internal40.insert_dev)(target, t815, anchor);
      (0, import_internal40.insert_dev)(target, hr4, anchor);
      (0, import_internal40.insert_dev)(target, t816, anchor);
      (0, import_internal40.insert_dev)(target, h256, anchor);
      (0, import_internal40.append_dev)(h256, t817);
      (0, import_internal40.append_dev)(h256, em56);
      (0, import_internal40.insert_dev)(target, t819, anchor);
      (0, import_internal40.insert_dev)(target, ul66, anchor);
      (0, import_internal40.append_dev)(ul66, li136);
      (0, import_internal40.append_dev)(li136, t820);
      (0, import_internal40.append_dev)(li136, code195);
      (0, import_internal40.append_dev)(li136, t822);
      (0, import_internal40.append_dev)(li136, code196);
      (0, import_internal40.append_dev)(li136, t824);
      (0, import_internal40.insert_dev)(target, t825, anchor);
      (0, import_internal40.insert_dev)(target, h257, anchor);
      (0, import_internal40.append_dev)(h257, t826);
      (0, import_internal40.append_dev)(h257, em57);
      (0, import_internal40.insert_dev)(target, t828, anchor);
      (0, import_internal40.insert_dev)(target, ul67, anchor);
      (0, import_internal40.append_dev)(ul67, li137);
      (0, import_internal40.append_dev)(li137, t829);
      (0, import_internal40.append_dev)(li137, code197);
      (0, import_internal40.append_dev)(li137, t831);
      (0, import_internal40.append_dev)(ul67, t832);
      (0, import_internal40.append_dev)(ul67, li138);
      (0, import_internal40.append_dev)(li138, t833);
      (0, import_internal40.append_dev)(li138, code198);
      (0, import_internal40.append_dev)(li138, t835);
      (0, import_internal40.insert_dev)(target, t836, anchor);
      (0, import_internal40.insert_dev)(target, h258, anchor);
      (0, import_internal40.append_dev)(h258, t837);
      (0, import_internal40.append_dev)(h258, em58);
      (0, import_internal40.insert_dev)(target, t839, anchor);
      (0, import_internal40.insert_dev)(target, ul68, anchor);
      (0, import_internal40.append_dev)(ul68, li139);
      (0, import_internal40.append_dev)(li139, t840);
      (0, import_internal40.append_dev)(li139, code199);
      (0, import_internal40.append_dev)(li139, t842);
      (0, import_internal40.append_dev)(li139, code200);
      (0, import_internal40.append_dev)(li139, t844);
      (0, import_internal40.append_dev)(ul68, t845);
      (0, import_internal40.append_dev)(ul68, li140);
      (0, import_internal40.append_dev)(ul68, t847);
      (0, import_internal40.append_dev)(ul68, li141);
      (0, import_internal40.insert_dev)(target, t849, anchor);
      (0, import_internal40.insert_dev)(target, h259, anchor);
      (0, import_internal40.insert_dev)(target, t851, anchor);
      (0, import_internal40.insert_dev)(target, ul69, anchor);
      (0, import_internal40.append_dev)(ul69, li142);
      (0, import_internal40.insert_dev)(target, t853, anchor);
      (0, import_internal40.insert_dev)(target, h260, anchor);
      (0, import_internal40.insert_dev)(target, t855, anchor);
      (0, import_internal40.insert_dev)(target, ul70, anchor);
      (0, import_internal40.append_dev)(ul70, li143);
      (0, import_internal40.append_dev)(li143, t856);
      (0, import_internal40.append_dev)(li143, code201);
      (0, import_internal40.append_dev)(li143, t858);
      (0, import_internal40.append_dev)(li143, code202);
      (0, import_internal40.append_dev)(li143, t860);
      (0, import_internal40.append_dev)(ul70, t861);
      (0, import_internal40.append_dev)(ul70, li144);
      (0, import_internal40.append_dev)(li144, t862);
      (0, import_internal40.append_dev)(li144, code203);
      (0, import_internal40.append_dev)(li144, t864);
      (0, import_internal40.insert_dev)(target, t865, anchor);
      (0, import_internal40.insert_dev)(target, hr5, anchor);
      (0, import_internal40.insert_dev)(target, t866, anchor);
      (0, import_internal40.insert_dev)(target, h261, anchor);
      (0, import_internal40.insert_dev)(target, t868, anchor);
      (0, import_internal40.insert_dev)(target, ul71, anchor);
      (0, import_internal40.append_dev)(ul71, li145);
      (0, import_internal40.append_dev)(li145, t869);
      (0, import_internal40.append_dev)(li145, code204);
      (0, import_internal40.append_dev)(li145, t871);
      (0, import_internal40.append_dev)(li145, code205);
      (0, import_internal40.append_dev)(li145, t873);
      (0, import_internal40.insert_dev)(target, t874, anchor);
      (0, import_internal40.insert_dev)(target, hr6, anchor);
      (0, import_internal40.insert_dev)(target, t875, anchor);
      (0, import_internal40.insert_dev)(target, h262, anchor);
    },
    p: import_internal40.noop,
    i: import_internal40.noop,
    o: import_internal40.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal40.detach_dev)(h1);
      if (detaching)
        (0, import_internal40.detach_dev)(t1);
      if (detaching)
        (0, import_internal40.detach_dev)(h20);
      if (detaching)
        (0, import_internal40.detach_dev)(t4);
      if (detaching)
        (0, import_internal40.detach_dev)(ul0);
      if (detaching)
        (0, import_internal40.detach_dev)(t70);
      if (detaching)
        (0, import_internal40.detach_dev)(h30);
      if (detaching)
        (0, import_internal40.detach_dev)(t72);
      if (detaching)
        (0, import_internal40.detach_dev)(ul1);
      if (detaching)
        (0, import_internal40.detach_dev)(t129);
      if (detaching)
        (0, import_internal40.detach_dev)(h31);
      if (detaching)
        (0, import_internal40.detach_dev)(t131);
      if (detaching)
        (0, import_internal40.detach_dev)(ul2);
      if (detaching)
        (0, import_internal40.detach_dev)(t159);
      if (detaching)
        (0, import_internal40.detach_dev)(p);
      if (detaching)
        (0, import_internal40.detach_dev)(t165);
      if (detaching)
        (0, import_internal40.detach_dev)(hr0);
      if (detaching)
        (0, import_internal40.detach_dev)(t166);
      if (detaching)
        (0, import_internal40.detach_dev)(h21);
      if (detaching)
        (0, import_internal40.detach_dev)(t169);
      if (detaching)
        (0, import_internal40.detach_dev)(ul3);
      if (detaching)
        (0, import_internal40.detach_dev)(t173);
      if (detaching)
        (0, import_internal40.detach_dev)(h22);
      if (detaching)
        (0, import_internal40.detach_dev)(t176);
      if (detaching)
        (0, import_internal40.detach_dev)(ul4);
      if (detaching)
        (0, import_internal40.detach_dev)(t180);
      if (detaching)
        (0, import_internal40.detach_dev)(h23);
      if (detaching)
        (0, import_internal40.detach_dev)(t183);
      if (detaching)
        (0, import_internal40.detach_dev)(ul5);
      if (detaching)
        (0, import_internal40.detach_dev)(t191);
      if (detaching)
        (0, import_internal40.detach_dev)(h24);
      if (detaching)
        (0, import_internal40.detach_dev)(t194);
      if (detaching)
        (0, import_internal40.detach_dev)(ul6);
      if (detaching)
        (0, import_internal40.detach_dev)(t202);
      if (detaching)
        (0, import_internal40.detach_dev)(h25);
      if (detaching)
        (0, import_internal40.detach_dev)(t205);
      if (detaching)
        (0, import_internal40.detach_dev)(ul7);
      if (detaching)
        (0, import_internal40.detach_dev)(t216);
      if (detaching)
        (0, import_internal40.detach_dev)(h26);
      if (detaching)
        (0, import_internal40.detach_dev)(t219);
      if (detaching)
        (0, import_internal40.detach_dev)(ul8);
      if (detaching)
        (0, import_internal40.detach_dev)(t261);
      if (detaching)
        (0, import_internal40.detach_dev)(h32);
      if (detaching)
        (0, import_internal40.detach_dev)(t263);
      if (detaching)
        (0, import_internal40.detach_dev)(h40);
      if (detaching)
        (0, import_internal40.detach_dev)(t265);
      if (detaching)
        (0, import_internal40.detach_dev)(ul9);
      if (detaching)
        (0, import_internal40.detach_dev)(t276);
      if (detaching)
        (0, import_internal40.detach_dev)(h41);
      if (detaching)
        (0, import_internal40.detach_dev)(t278);
      if (detaching)
        (0, import_internal40.detach_dev)(ul10);
      if (detaching)
        (0, import_internal40.detach_dev)(t283);
      if (detaching)
        (0, import_internal40.detach_dev)(h42);
      if (detaching)
        (0, import_internal40.detach_dev)(t285);
      if (detaching)
        (0, import_internal40.detach_dev)(ul11);
      if (detaching)
        (0, import_internal40.detach_dev)(t290);
      if (detaching)
        (0, import_internal40.detach_dev)(h43);
      if (detaching)
        (0, import_internal40.detach_dev)(t292);
      if (detaching)
        (0, import_internal40.detach_dev)(ul12);
      if (detaching)
        (0, import_internal40.detach_dev)(t297);
      if (detaching)
        (0, import_internal40.detach_dev)(h44);
      if (detaching)
        (0, import_internal40.detach_dev)(t299);
      if (detaching)
        (0, import_internal40.detach_dev)(ul13);
      if (detaching)
        (0, import_internal40.detach_dev)(t303);
      if (detaching)
        (0, import_internal40.detach_dev)(hr1);
      if (detaching)
        (0, import_internal40.detach_dev)(t304);
      if (detaching)
        (0, import_internal40.detach_dev)(h27);
      if (detaching)
        (0, import_internal40.detach_dev)(t307);
      if (detaching)
        (0, import_internal40.detach_dev)(ul14);
      if (detaching)
        (0, import_internal40.detach_dev)(t315);
      if (detaching)
        (0, import_internal40.detach_dev)(h28);
      if (detaching)
        (0, import_internal40.detach_dev)(t318);
      if (detaching)
        (0, import_internal40.detach_dev)(ul15);
      if (detaching)
        (0, import_internal40.detach_dev)(t327);
      if (detaching)
        (0, import_internal40.detach_dev)(h29);
      if (detaching)
        (0, import_internal40.detach_dev)(t330);
      if (detaching)
        (0, import_internal40.detach_dev)(ul16);
      if (detaching)
        (0, import_internal40.detach_dev)(t334);
      if (detaching)
        (0, import_internal40.detach_dev)(h210);
      if (detaching)
        (0, import_internal40.detach_dev)(t337);
      if (detaching)
        (0, import_internal40.detach_dev)(ul18);
      if (detaching)
        (0, import_internal40.detach_dev)(t375);
      if (detaching)
        (0, import_internal40.detach_dev)(h211);
      if (detaching)
        (0, import_internal40.detach_dev)(t378);
      if (detaching)
        (0, import_internal40.detach_dev)(ul20);
      if (detaching)
        (0, import_internal40.detach_dev)(t397);
      if (detaching)
        (0, import_internal40.detach_dev)(h212);
      if (detaching)
        (0, import_internal40.detach_dev)(t400);
      if (detaching)
        (0, import_internal40.detach_dev)(ul22);
      if (detaching)
        (0, import_internal40.detach_dev)(t410);
      if (detaching)
        (0, import_internal40.detach_dev)(h213);
      if (detaching)
        (0, import_internal40.detach_dev)(t413);
      if (detaching)
        (0, import_internal40.detach_dev)(ul23);
      if (detaching)
        (0, import_internal40.detach_dev)(t417);
      if (detaching)
        (0, import_internal40.detach_dev)(h214);
      if (detaching)
        (0, import_internal40.detach_dev)(t420);
      if (detaching)
        (0, import_internal40.detach_dev)(ul24);
      if (detaching)
        (0, import_internal40.detach_dev)(t427);
      if (detaching)
        (0, import_internal40.detach_dev)(h215);
      if (detaching)
        (0, import_internal40.detach_dev)(t430);
      if (detaching)
        (0, import_internal40.detach_dev)(ul25);
      if (detaching)
        (0, import_internal40.detach_dev)(t441);
      if (detaching)
        (0, import_internal40.detach_dev)(h216);
      if (detaching)
        (0, import_internal40.detach_dev)(t444);
      if (detaching)
        (0, import_internal40.detach_dev)(ul26);
      if (detaching)
        (0, import_internal40.detach_dev)(t456);
      if (detaching)
        (0, import_internal40.detach_dev)(h217);
      if (detaching)
        (0, import_internal40.detach_dev)(t459);
      if (detaching)
        (0, import_internal40.detach_dev)(ul27);
      if (detaching)
        (0, import_internal40.detach_dev)(t461);
      if (detaching)
        (0, import_internal40.detach_dev)(h218);
      if (detaching)
        (0, import_internal40.detach_dev)(t464);
      if (detaching)
        (0, import_internal40.detach_dev)(ul28);
      if (detaching)
        (0, import_internal40.detach_dev)(t471);
      if (detaching)
        (0, import_internal40.detach_dev)(h219);
      if (detaching)
        (0, import_internal40.detach_dev)(t474);
      if (detaching)
        (0, import_internal40.detach_dev)(ul29);
      if (detaching)
        (0, import_internal40.detach_dev)(t486);
      if (detaching)
        (0, import_internal40.detach_dev)(h220);
      if (detaching)
        (0, import_internal40.detach_dev)(t489);
      if (detaching)
        (0, import_internal40.detach_dev)(ul30);
      if (detaching)
        (0, import_internal40.detach_dev)(t496);
      if (detaching)
        (0, import_internal40.detach_dev)(h221);
      if (detaching)
        (0, import_internal40.detach_dev)(t499);
      if (detaching)
        (0, import_internal40.detach_dev)(ul31);
      if (detaching)
        (0, import_internal40.detach_dev)(t509);
      if (detaching)
        (0, import_internal40.detach_dev)(h222);
      if (detaching)
        (0, import_internal40.detach_dev)(t512);
      if (detaching)
        (0, import_internal40.detach_dev)(ul32);
      if (detaching)
        (0, import_internal40.detach_dev)(t514);
      if (detaching)
        (0, import_internal40.detach_dev)(h223);
      if (detaching)
        (0, import_internal40.detach_dev)(t517);
      if (detaching)
        (0, import_internal40.detach_dev)(ul33);
      if (detaching)
        (0, import_internal40.detach_dev)(t527);
      if (detaching)
        (0, import_internal40.detach_dev)(h224);
      if (detaching)
        (0, import_internal40.detach_dev)(t530);
      if (detaching)
        (0, import_internal40.detach_dev)(ul34);
      if (detaching)
        (0, import_internal40.detach_dev)(t537);
      if (detaching)
        (0, import_internal40.detach_dev)(h225);
      if (detaching)
        (0, import_internal40.detach_dev)(t540);
      if (detaching)
        (0, import_internal40.detach_dev)(ul35);
      if (detaching)
        (0, import_internal40.detach_dev)(t542);
      if (detaching)
        (0, import_internal40.detach_dev)(h226);
      if (detaching)
        (0, import_internal40.detach_dev)(t545);
      if (detaching)
        (0, import_internal40.detach_dev)(ul36);
      if (detaching)
        (0, import_internal40.detach_dev)(t553);
      if (detaching)
        (0, import_internal40.detach_dev)(h227);
      if (detaching)
        (0, import_internal40.detach_dev)(t556);
      if (detaching)
        (0, import_internal40.detach_dev)(ul37);
      if (detaching)
        (0, import_internal40.detach_dev)(t576);
      if (detaching)
        (0, import_internal40.detach_dev)(h228);
      if (detaching)
        (0, import_internal40.detach_dev)(t579);
      if (detaching)
        (0, import_internal40.detach_dev)(ul38);
      if (detaching)
        (0, import_internal40.detach_dev)(t593);
      if (detaching)
        (0, import_internal40.detach_dev)(h229);
      if (detaching)
        (0, import_internal40.detach_dev)(t596);
      if (detaching)
        (0, import_internal40.detach_dev)(ul39);
      if (detaching)
        (0, import_internal40.detach_dev)(t602);
      if (detaching)
        (0, import_internal40.detach_dev)(h230);
      if (detaching)
        (0, import_internal40.detach_dev)(t605);
      if (detaching)
        (0, import_internal40.detach_dev)(ul40);
      if (detaching)
        (0, import_internal40.detach_dev)(t608);
      if (detaching)
        (0, import_internal40.detach_dev)(h231);
      if (detaching)
        (0, import_internal40.detach_dev)(t611);
      if (detaching)
        (0, import_internal40.detach_dev)(ul41);
      if (detaching)
        (0, import_internal40.detach_dev)(t615);
      if (detaching)
        (0, import_internal40.detach_dev)(h232);
      if (detaching)
        (0, import_internal40.detach_dev)(t618);
      if (detaching)
        (0, import_internal40.detach_dev)(ul42);
      if (detaching)
        (0, import_internal40.detach_dev)(t622);
      if (detaching)
        (0, import_internal40.detach_dev)(h233);
      if (detaching)
        (0, import_internal40.detach_dev)(t625);
      if (detaching)
        (0, import_internal40.detach_dev)(ul43);
      if (detaching)
        (0, import_internal40.detach_dev)(t629);
      if (detaching)
        (0, import_internal40.detach_dev)(h234);
      if (detaching)
        (0, import_internal40.detach_dev)(t632);
      if (detaching)
        (0, import_internal40.detach_dev)(ul44);
      if (detaching)
        (0, import_internal40.detach_dev)(t634);
      if (detaching)
        (0, import_internal40.detach_dev)(h235);
      if (detaching)
        (0, import_internal40.detach_dev)(t637);
      if (detaching)
        (0, import_internal40.detach_dev)(ul45);
      if (detaching)
        (0, import_internal40.detach_dev)(t641);
      if (detaching)
        (0, import_internal40.detach_dev)(h236);
      if (detaching)
        (0, import_internal40.detach_dev)(t644);
      if (detaching)
        (0, import_internal40.detach_dev)(ul46);
      if (detaching)
        (0, import_internal40.detach_dev)(t650);
      if (detaching)
        (0, import_internal40.detach_dev)(h237);
      if (detaching)
        (0, import_internal40.detach_dev)(t653);
      if (detaching)
        (0, import_internal40.detach_dev)(ul47);
      if (detaching)
        (0, import_internal40.detach_dev)(t656);
      if (detaching)
        (0, import_internal40.detach_dev)(h238);
      if (detaching)
        (0, import_internal40.detach_dev)(t659);
      if (detaching)
        (0, import_internal40.detach_dev)(ul48);
      if (detaching)
        (0, import_internal40.detach_dev)(t671);
      if (detaching)
        (0, import_internal40.detach_dev)(h239);
      if (detaching)
        (0, import_internal40.detach_dev)(t674);
      if (detaching)
        (0, import_internal40.detach_dev)(ul49);
      if (detaching)
        (0, import_internal40.detach_dev)(t676);
      if (detaching)
        (0, import_internal40.detach_dev)(h240);
      if (detaching)
        (0, import_internal40.detach_dev)(t679);
      if (detaching)
        (0, import_internal40.detach_dev)(ul50);
      if (detaching)
        (0, import_internal40.detach_dev)(t681);
      if (detaching)
        (0, import_internal40.detach_dev)(h241);
      if (detaching)
        (0, import_internal40.detach_dev)(t684);
      if (detaching)
        (0, import_internal40.detach_dev)(ul51);
      if (detaching)
        (0, import_internal40.detach_dev)(t694);
      if (detaching)
        (0, import_internal40.detach_dev)(h242);
      if (detaching)
        (0, import_internal40.detach_dev)(t697);
      if (detaching)
        (0, import_internal40.detach_dev)(ul52);
      if (detaching)
        (0, import_internal40.detach_dev)(t701);
      if (detaching)
        (0, import_internal40.detach_dev)(h243);
      if (detaching)
        (0, import_internal40.detach_dev)(t704);
      if (detaching)
        (0, import_internal40.detach_dev)(ul53);
      if (detaching)
        (0, import_internal40.detach_dev)(t707);
      if (detaching)
        (0, import_internal40.detach_dev)(h244);
      if (detaching)
        (0, import_internal40.detach_dev)(t710);
      if (detaching)
        (0, import_internal40.detach_dev)(ul54);
      if (detaching)
        (0, import_internal40.detach_dev)(t715);
      if (detaching)
        (0, import_internal40.detach_dev)(hr2);
      if (detaching)
        (0, import_internal40.detach_dev)(t716);
      if (detaching)
        (0, import_internal40.detach_dev)(h245);
      if (detaching)
        (0, import_internal40.detach_dev)(t719);
      if (detaching)
        (0, import_internal40.detach_dev)(ul55);
      if (detaching)
        (0, import_internal40.detach_dev)(t725);
      if (detaching)
        (0, import_internal40.detach_dev)(h246);
      if (detaching)
        (0, import_internal40.detach_dev)(t728);
      if (detaching)
        (0, import_internal40.detach_dev)(ul56);
      if (detaching)
        (0, import_internal40.detach_dev)(t730);
      if (detaching)
        (0, import_internal40.detach_dev)(h247);
      if (detaching)
        (0, import_internal40.detach_dev)(t733);
      if (detaching)
        (0, import_internal40.detach_dev)(ul57);
      if (detaching)
        (0, import_internal40.detach_dev)(t735);
      if (detaching)
        (0, import_internal40.detach_dev)(h248);
      if (detaching)
        (0, import_internal40.detach_dev)(t738);
      if (detaching)
        (0, import_internal40.detach_dev)(ul58);
      if (detaching)
        (0, import_internal40.detach_dev)(t742);
      if (detaching)
        (0, import_internal40.detach_dev)(h249);
      if (detaching)
        (0, import_internal40.detach_dev)(t745);
      if (detaching)
        (0, import_internal40.detach_dev)(ul59);
      if (detaching)
        (0, import_internal40.detach_dev)(t749);
      if (detaching)
        (0, import_internal40.detach_dev)(h250);
      if (detaching)
        (0, import_internal40.detach_dev)(t752);
      if (detaching)
        (0, import_internal40.detach_dev)(ul60);
      if (detaching)
        (0, import_internal40.detach_dev)(t756);
      if (detaching)
        (0, import_internal40.detach_dev)(h251);
      if (detaching)
        (0, import_internal40.detach_dev)(t759);
      if (detaching)
        (0, import_internal40.detach_dev)(ul61);
      if (detaching)
        (0, import_internal40.detach_dev)(t761);
      if (detaching)
        (0, import_internal40.detach_dev)(h252);
      if (detaching)
        (0, import_internal40.detach_dev)(t764);
      if (detaching)
        (0, import_internal40.detach_dev)(ul62);
      if (detaching)
        (0, import_internal40.detach_dev)(t768);
      if (detaching)
        (0, import_internal40.detach_dev)(h253);
      if (detaching)
        (0, import_internal40.detach_dev)(t771);
      if (detaching)
        (0, import_internal40.detach_dev)(ul63);
      if (detaching)
        (0, import_internal40.detach_dev)(t775);
      if (detaching)
        (0, import_internal40.detach_dev)(h254);
      if (detaching)
        (0, import_internal40.detach_dev)(t778);
      if (detaching)
        (0, import_internal40.detach_dev)(ul64);
      if (detaching)
        (0, import_internal40.detach_dev)(t800);
      if (detaching)
        (0, import_internal40.detach_dev)(hr3);
      if (detaching)
        (0, import_internal40.detach_dev)(t801);
      if (detaching)
        (0, import_internal40.detach_dev)(h255);
      if (detaching)
        (0, import_internal40.detach_dev)(t804);
      if (detaching)
        (0, import_internal40.detach_dev)(ul65);
      if (detaching)
        (0, import_internal40.detach_dev)(t815);
      if (detaching)
        (0, import_internal40.detach_dev)(hr4);
      if (detaching)
        (0, import_internal40.detach_dev)(t816);
      if (detaching)
        (0, import_internal40.detach_dev)(h256);
      if (detaching)
        (0, import_internal40.detach_dev)(t819);
      if (detaching)
        (0, import_internal40.detach_dev)(ul66);
      if (detaching)
        (0, import_internal40.detach_dev)(t825);
      if (detaching)
        (0, import_internal40.detach_dev)(h257);
      if (detaching)
        (0, import_internal40.detach_dev)(t828);
      if (detaching)
        (0, import_internal40.detach_dev)(ul67);
      if (detaching)
        (0, import_internal40.detach_dev)(t836);
      if (detaching)
        (0, import_internal40.detach_dev)(h258);
      if (detaching)
        (0, import_internal40.detach_dev)(t839);
      if (detaching)
        (0, import_internal40.detach_dev)(ul68);
      if (detaching)
        (0, import_internal40.detach_dev)(t849);
      if (detaching)
        (0, import_internal40.detach_dev)(h259);
      if (detaching)
        (0, import_internal40.detach_dev)(t851);
      if (detaching)
        (0, import_internal40.detach_dev)(ul69);
      if (detaching)
        (0, import_internal40.detach_dev)(t853);
      if (detaching)
        (0, import_internal40.detach_dev)(h260);
      if (detaching)
        (0, import_internal40.detach_dev)(t855);
      if (detaching)
        (0, import_internal40.detach_dev)(ul70);
      if (detaching)
        (0, import_internal40.detach_dev)(t865);
      if (detaching)
        (0, import_internal40.detach_dev)(hr5);
      if (detaching)
        (0, import_internal40.detach_dev)(t866);
      if (detaching)
        (0, import_internal40.detach_dev)(h261);
      if (detaching)
        (0, import_internal40.detach_dev)(t868);
      if (detaching)
        (0, import_internal40.detach_dev)(ul71);
      if (detaching)
        (0, import_internal40.detach_dev)(t874);
      if (detaching)
        (0, import_internal40.detach_dev)(hr6);
      if (detaching)
        (0, import_internal40.detach_dev)(t875);
      if (detaching)
        (0, import_internal40.detach_dev)(h262);
    }
  };
  (0, import_internal40.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment40.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance40($$self2, $$props2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal40.validate_slots)("Changelog", slots2, []);
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Changelog> was created with unknown prop '${key}'`);
  });
  return [];
}
var Changelog = class extends import_internal40.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal40.init)(this, options, instance40, create_fragment40, import_internal40.safe_not_equal, {});
    (0, import_internal40.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Changelog",
      options,
      id: create_fragment40.name
    });
  }
};
var changelog_default = Changelog;

// docs-src/components/index.js
var components_exports = {};
__export(components_exports, {
  Autocomplete: () => Autocomplete_default2,
  Button: () => Button_default2,
  ButtonGroup: () => ButtonGroup_default2,
  ButtonToggle: () => ButtonToggle_default2,
  Checkbox: () => Checkbox_default2,
  ColorPalette: () => ColorPalette_default,
  Dialog: () => Dialog_default2,
  Drawer: () => Drawer_default2,
  Icon: () => Icon_default2,
  InfoBar: () => InfoBar_default2,
  InputDate: () => InputDate_default2,
  InputMath: () => InputMath_default2,
  InputNumber: () => InputNumber_default2,
  InputPassword: () => InputPassword_default2,
  InputText: () => InputText_default2,
  Menu: () => Menu_default2,
  MessageBox: () => MessageBox_default2,
  NotificationCenter: () => NotificationCenter_default2,
  Panel: () => Panel_default2,
  PushButton: () => PushButton_default2,
  Radio: () => Radio_default2,
  Select: () => Select_default2,
  Splitter: () => Splitter_default2,
  Table: () => Table_default2,
  Textarea: () => Textarea_default2,
  Toggle: () => Toggle_default2,
  Tooltip: () => Tooltip_default2,
  Tree: () => Tree_default2
});

// docs-src/components/autocomplete/Autocomplete.svelte
var import_internal44 = __toESM(require_internal());

// docs-src/api-table/ApiTable.svelte
var import_internal41 = __toESM(require_internal());
var file35 = "docs-src/api-table/ApiTable.svelte";
function get_each_context10(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  return child_ctx;
}
function create_if_block19(ctx) {
  let p;
  const block = {
    c: function create() {
      p = (0, import_internal41.element)("p");
      (0, import_internal41.add_location)(p, file35, 2, 1, 36);
    },
    m: function mount(target, anchor) {
      (0, import_internal41.insert_dev)(target, p, anchor);
      p.innerHTML = /*description*/
      ctx[1];
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*description*/
      2)
        p.innerHTML = /*description*/
        ctx2[1];
      ;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal41.detach_dev)(p);
    }
  };
  (0, import_internal41.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block19.name,
    type: "if",
    source: "(2:0) {#if description}",
    ctx
  });
  return block;
}
function create_each_block10(ctx) {
  let tr;
  let td0;
  let t0_value = (
    /*prop*/
    ctx[3].name + ""
  );
  let t0;
  let t1;
  let td1;
  let raw0_value = buildType(
    /*prop*/
    ctx[3]
  ) + "";
  let t2;
  let td2;
  let raw1_value = (
    /*prop*/
    ctx[3].description + ""
  );
  let t3;
  const block = {
    c: function create() {
      tr = (0, import_internal41.element)("tr");
      td0 = (0, import_internal41.element)("td");
      t0 = (0, import_internal41.text)(t0_value);
      t1 = (0, import_internal41.space)();
      td1 = (0, import_internal41.element)("td");
      t2 = (0, import_internal41.space)();
      td2 = (0, import_internal41.element)("td");
      t3 = (0, import_internal41.space)();
      (0, import_internal41.add_location)(td0, file35, 11, 4, 247);
      (0, import_internal41.add_location)(td1, file35, 12, 4, 272);
      (0, import_internal41.add_location)(td2, file35, 13, 4, 309);
      (0, import_internal41.add_location)(tr, file35, 10, 3, 238);
    },
    m: function mount(target, anchor) {
      (0, import_internal41.insert_dev)(target, tr, anchor);
      (0, import_internal41.append_dev)(tr, td0);
      (0, import_internal41.append_dev)(td0, t0);
      (0, import_internal41.append_dev)(tr, t1);
      (0, import_internal41.append_dev)(tr, td1);
      td1.innerHTML = raw0_value;
      (0, import_internal41.append_dev)(tr, t2);
      (0, import_internal41.append_dev)(tr, td2);
      td2.innerHTML = raw1_value;
      (0, import_internal41.append_dev)(tr, t3);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*props*/
      4 && t0_value !== (t0_value = /*prop*/
      ctx2[3].name + ""))
        (0, import_internal41.set_data_dev)(t0, t0_value);
      if (dirty & /*props*/
      4 && raw0_value !== (raw0_value = buildType(
        /*prop*/
        ctx2[3]
      ) + ""))
        td1.innerHTML = raw0_value;
      ;
      if (dirty & /*props*/
      4 && raw1_value !== (raw1_value = /*prop*/
      ctx2[3].description + ""))
        td2.innerHTML = raw1_value;
      ;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal41.detach_dev)(tr);
    }
  };
  (0, import_internal41.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block10.name,
    type: "each",
    source: "(10:2) {#each props as prop}",
    ctx
  });
  return block;
}
function create_default_slot4(ctx) {
  let thead;
  let tr;
  let th0;
  let th1;
  let th2;
  let t3;
  let tbody;
  let each_value = (
    /*props*/
    ctx[2]
  );
  (0, import_internal41.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block10(get_each_context10(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      thead = (0, import_internal41.element)("thead");
      tr = (0, import_internal41.element)("tr");
      th0 = (0, import_internal41.element)("th");
      th0.textContent = "Attribute";
      th1 = (0, import_internal41.element)("th");
      th1.textContent = "Type/Value";
      th2 = (0, import_internal41.element)("th");
      th2.textContent = "Description";
      t3 = (0, import_internal41.space)();
      tbody = (0, import_internal41.element)("tbody");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      (0, import_internal41.add_location)(th0, file35, 6, 6, 129);
      (0, import_internal41.add_location)(th1, file35, 6, 24, 147);
      (0, import_internal41.add_location)(th2, file35, 6, 43, 166);
      (0, import_internal41.add_location)(tr, file35, 6, 2, 125);
      (0, import_internal41.add_location)(thead, file35, 5, 1, 115);
      (0, import_internal41.add_location)(tbody, file35, 8, 1, 203);
    },
    m: function mount(target, anchor) {
      (0, import_internal41.insert_dev)(target, thead, anchor);
      (0, import_internal41.append_dev)(thead, tr);
      (0, import_internal41.append_dev)(tr, th0);
      (0, import_internal41.append_dev)(tr, th1);
      (0, import_internal41.append_dev)(tr, th2);
      (0, import_internal41.insert_dev)(target, t3, anchor);
      (0, import_internal41.insert_dev)(target, tbody, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(tbody, null);
        }
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*props, buildType*/
      4) {
        each_value = /*props*/
        ctx2[2];
        (0, import_internal41.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context10(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block10(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(tbody, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal41.detach_dev)(thead);
      if (detaching)
        (0, import_internal41.detach_dev)(t3);
      if (detaching)
        (0, import_internal41.detach_dev)(tbody);
      (0, import_internal41.destroy_each)(each_blocks, detaching);
    }
  };
  (0, import_internal41.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot4.name,
    type: "slot",
    source: '(5:0) <Table class=\\"api-table\\" selectable=\\"false\\">',
    ctx
  });
  return block;
}
function create_fragment41(ctx) {
  let h3;
  let t0;
  let t1;
  let t2;
  let table;
  let current;
  let if_block = (
    /*description*/
    ctx[1] && create_if_block19(ctx)
  );
  table = new Table_default({
    props: {
      class: "api-table",
      selectable: "false",
      $$slots: { default: [create_default_slot4] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h3 = (0, import_internal41.element)("h3");
      t0 = (0, import_internal41.text)(
        /*title*/
        ctx[0]
      );
      t1 = (0, import_internal41.space)();
      if (if_block)
        if_block.c();
      t2 = (0, import_internal41.space)();
      (0, import_internal41.create_component)(table.$$.fragment);
      (0, import_internal41.add_location)(h3, file35, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal41.insert_dev)(target, h3, anchor);
      (0, import_internal41.append_dev)(h3, t0);
      (0, import_internal41.insert_dev)(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal41.insert_dev)(target, t2, anchor);
      (0, import_internal41.mount_component)(table, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (!current || dirty & /*title*/
      1)
        (0, import_internal41.set_data_dev)(
          t0,
          /*title*/
          ctx2[0]
        );
      if (
        /*description*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block19(ctx2);
          if_block.c();
          if_block.m(t2.parentNode, t2);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const table_changes = {};
      if (dirty & /*$$scope, props*/
      68) {
        table_changes.$$scope = { dirty, ctx: ctx2 };
      }
      table.$set(table_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal41.transition_in)(table.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal41.transition_out)(table.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal41.detach_dev)(h3);
      if (detaching)
        (0, import_internal41.detach_dev)(t1);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal41.detach_dev)(t2);
      (0, import_internal41.destroy_component)(table, detaching);
    }
  };
  (0, import_internal41.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment41.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function buildType(prop) {
  const res = [];
  if (!prop.type)
    prop.type = "-";
  const types = (Array.isArray(prop.type) ? prop.type : [prop.type]).map((t) => `<i>${t}</i>`);
  res.push(types.join(" | "));
  if (prop.required)
    res.push("<em>required</em>");
  if (prop.default)
    res.push(`<br>(defaults to ${prop.default})`);
  return res.join(" ");
}
function instance41($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal41.validate_slots)("ApiTable", slots2, []);
  let { title = "API" } = $$props2;
  let { description = "" } = $$props2;
  let { props: props2 = [
    {
      name: "id",
      type: "string",
      defalut: "",
      required: true,
      description: "assign ID to the underlying component"
    }
  ] } = $$props2;
  const writable_props = ["title", "description", "props"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ApiTable> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("title" in $$props3)
      $$invalidate2(0, title = $$props3.title);
    if ("description" in $$props3)
      $$invalidate2(1, description = $$props3.description);
    if ("props" in $$props3)
      $$invalidate2(2, props2 = $$props3.props);
  };
  $$self2.$capture_state = () => ({
    Table: Table_default,
    title,
    description,
    props: props2,
    buildType
  });
  $$self2.$inject_state = ($$props3) => {
    if ("title" in $$props3)
      $$invalidate2(0, title = $$props3.title);
    if ("description" in $$props3)
      $$invalidate2(1, description = $$props3.description);
    if ("props" in $$props3)
      $$invalidate2(2, props2 = $$props3.props);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [title, description, props2];
}
var ApiTable = class extends import_internal41.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal41.init)(this, options, instance41, create_fragment41, import_internal41.safe_not_equal, { title: 0, description: 1, props: 2 });
    (0, import_internal41.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ApiTable",
      options,
      id: create_fragment41.name
    });
  }
  get title() {
    throw new Error("<ApiTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value2) {
    throw new Error("<ApiTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get description() {
    throw new Error("<ApiTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set description(value2) {
    throw new Error("<ApiTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get props() {
    throw new Error("<ApiTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set props(value2) {
    throw new Error("<ApiTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ApiTable_default = ApiTable;

// docs-src/code-example/CodeExample.svelte
var import_internal42 = __toESM(require_internal());
var file36 = "docs-src/code-example/CodeExample.svelte";
function create_if_block20(ctx) {
  let hr;
  let h3;
  const block = {
    c: function create() {
      hr = (0, import_internal42.element)("hr");
      h3 = (0, import_internal42.element)("h3");
      h3.textContent = "Example";
      (0, import_internal42.add_location)(hr, file36, 1, 1, 16);
      (0, import_internal42.add_location)(h3, file36, 1, 5, 20);
    },
    m: function mount(target, anchor) {
      (0, import_internal42.insert_dev)(target, hr, anchor);
      (0, import_internal42.insert_dev)(target, h3, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal42.detach_dev)(hr);
      if (detaching)
        (0, import_internal42.detach_dev)(h3);
    }
  };
  (0, import_internal42.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block20.name,
    type: "if",
    source: "(1:0) {#if !notitle}",
    ctx
  });
  return block;
}
function create_fragment42(ctx) {
  let t0;
  let pre;
  let code;
  let t1;
  let html_tag;
  let raw_value = encode(
    /*html*/
    ctx[0]
  ) + "";
  let t2;
  let if_block = !/*notitle*/
  ctx[1] && create_if_block20(ctx);
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      t0 = (0, import_internal42.space)();
      pre = (0, import_internal42.element)("pre");
      code = (0, import_internal42.element)("code");
      t1 = (0, import_internal42.text)("\n	");
      html_tag = new import_internal42.HtmlTag(false);
      t2 = (0, import_internal42.text)("\n");
      html_tag.a = t2;
      (0, import_internal42.attr_dev)(code, "class", "language-svelte");
      (0, import_internal42.add_location)(code, file36, 3, 5, 48);
      (0, import_internal42.add_location)(pre, file36, 3, 0, 43);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      (0, import_internal42.insert_dev)(target, t0, anchor);
      (0, import_internal42.insert_dev)(target, pre, anchor);
      (0, import_internal42.append_dev)(pre, code);
      (0, import_internal42.append_dev)(code, t1);
      html_tag.m(raw_value, code);
      (0, import_internal42.append_dev)(code, t2);
    },
    p: function update(ctx2, [dirty]) {
      if (!/*notitle*/
      ctx2[1]) {
        if (if_block) {
        } else {
          if_block = create_if_block20(ctx2);
          if_block.c();
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*html*/
      1 && raw_value !== (raw_value = encode(
        /*html*/
        ctx2[0]
      ) + ""))
        html_tag.p(raw_value);
    },
    i: import_internal42.noop,
    o: import_internal42.noop,
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        (0, import_internal42.detach_dev)(t0);
      if (detaching)
        (0, import_internal42.detach_dev)(pre);
    }
  };
  (0, import_internal42.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment42.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function encode(s) {
  return s.replace(/{/gim, "&lbrace;").replace(/}/gim, "&rbrace;").replace(/</gim, "&lt;").replace(/>/gim, "&gt;").replace(/\t/gim, "    ").trim();
}
function instance42($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal42.validate_slots)("CodeExample", slots2, []);
  let { html = "" } = $$props2;
  let { notitle = false } = $$props2;
  const writable_props = ["html", "notitle"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<CodeExample> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("html" in $$props3)
      $$invalidate2(0, html = $$props3.html);
    if ("notitle" in $$props3)
      $$invalidate2(1, notitle = $$props3.notitle);
  };
  $$self2.$capture_state = () => ({ html, notitle, encode });
  $$self2.$inject_state = ($$props3) => {
    if ("html" in $$props3)
      $$invalidate2(0, html = $$props3.html);
    if ("notitle" in $$props3)
      $$invalidate2(1, notitle = $$props3.notitle);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [html, notitle];
}
var CodeExample = class extends import_internal42.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal42.init)(this, options, instance42, create_fragment42, import_internal42.safe_not_equal, { html: 0, notitle: 1 });
    (0, import_internal42.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "CodeExample",
      options,
      id: create_fragment42.name
    });
  }
  get html() {
    throw new Error("<CodeExample>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set html(value2) {
    throw new Error("<CodeExample>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get notitle() {
    throw new Error("<CodeExample>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set notitle(value2) {
    throw new Error("<CodeExample>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var CodeExample_default = CodeExample;

// docs-src/code-example/CodeBox.svelte
var import_internal43 = __toESM(require_internal());
var import_svelte23 = __toESM(require_svelte());
var file37 = "docs-src/code-example/CodeBox.svelte";
function create_fragment43(ctx) {
  let pre;
  let code;
  const block = {
    c: function create() {
      pre = (0, import_internal43.element)("pre");
      code = (0, import_internal43.element)("code");
      (0, import_internal43.attr_dev)(code, "class", "language-");
      (0, import_internal43.add_location)(code, file37, 0, 5, 5);
      (0, import_internal43.add_location)(pre, file37, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal43.insert_dev)(target, pre, anchor);
      (0, import_internal43.append_dev)(pre, code);
      code.innerHTML = /*html*/
      ctx[0];
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*html*/
      1)
        code.innerHTML = /*html*/
        ctx2[0];
      ;
    },
    i: import_internal43.noop,
    o: import_internal43.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal43.detach_dev)(pre);
    }
  };
  (0, import_internal43.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment43.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance43($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal43.validate_slots)("CodeBox", slots2, []);
  let { tag = "div" } = $$props2;
  let { props: props2 = {} } = $$props2;
  let { text: text40 = "" } = $$props2;
  let html = "";
  (0, import_svelte23.afterUpdate)(() => {
    requestAnimationFrame(update);
  });
  function update() {
    $$invalidate2(0, html = window.Prism.highlight(buildHtml(), window.Prism.languages.svelte, "svelte"));
  }
  function buildHtml() {
    const _props = {};
    for (const prop in props2) {
      if (props2[prop] === false)
        continue;
      if (props2[prop] === "")
        continue;
      _props[prop] = props2[prop];
    }
    let propsStr = JSON.stringify(_props).replace(/"([^"]+)":/g, "$1:").replace(/(:)/g, "=").replace(/,/g, " ").replace(/({|}|=true|default)/g, "").trim();
    if (propsStr)
      propsStr = " " + propsStr;
    if (!text40)
      return `<${tag}${propsStr}/>`;
    return `<${tag}${propsStr}>${text40}</${tag}>`;
  }
  const writable_props = ["tag", "props", "text"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<CodeBox> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("tag" in $$props3)
      $$invalidate2(1, tag = $$props3.tag);
    if ("props" in $$props3)
      $$invalidate2(2, props2 = $$props3.props);
    if ("text" in $$props3)
      $$invalidate2(3, text40 = $$props3.text);
  };
  $$self2.$capture_state = () => ({
    afterUpdate: import_svelte23.afterUpdate,
    tag,
    props: props2,
    text: text40,
    html,
    update,
    buildHtml
  });
  $$self2.$inject_state = ($$props3) => {
    if ("tag" in $$props3)
      $$invalidate2(1, tag = $$props3.tag);
    if ("props" in $$props3)
      $$invalidate2(2, props2 = $$props3.props);
    if ("text" in $$props3)
      $$invalidate2(3, text40 = $$props3.text);
    if ("html" in $$props3)
      $$invalidate2(0, html = $$props3.html);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [html, tag, props2, text40];
}
var CodeBox = class extends import_internal43.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal43.init)(this, options, instance43, create_fragment43, import_internal43.safe_not_equal, { tag: 1, props: 2, text: 3 });
    (0, import_internal43.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "CodeBox",
      options,
      id: create_fragment43.name
    });
  }
  get tag() {
    throw new Error("<CodeBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tag(value2) {
    throw new Error("<CodeBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get props() {
    throw new Error("<CodeBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set props(value2) {
    throw new Error("<CodeBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get text() {
    throw new Error("<CodeBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value2) {
    throw new Error("<CodeBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var CodeBox_default = CodeBox;

// docs-src/components/autocomplete/Autocomplete.svelte
var { console: console_1 } = import_internal44.globals;
var file38 = "docs-src/components/autocomplete/Autocomplete.svelte";
function create_fragment44(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let autocomplete0;
  let updating_value;
  let t4;
  let h4;
  let t6;
  let code;
  let t7_value = JSON.stringify(
    /*autocompleteValue*/
    ctx[0] || {}
  ) + "";
  let t7;
  let t8;
  let h31;
  let t10;
  let autocomplete1;
  let updating_value_1;
  let t11;
  let h32;
  let t13;
  let autocomplete2;
  let updating_value_2;
  let t14;
  let h33;
  let t16;
  let autocomplete3;
  let updating_value_3;
  let t17;
  let h34;
  let t19;
  let autocomplete4;
  let updating_value_4;
  let t20;
  let h35;
  let t22;
  let autocomplete5;
  let updating_value_5;
  let t23;
  let h36;
  let t24;
  let em0;
  let t26;
  let p0;
  let t27;
  let em1;
  let t29;
  let em2;
  let t31;
  let t32;
  let div;
  let small;
  let t34;
  let autocomplete6;
  let updating_value_6;
  let t35;
  let p1;
  let t36;
  let em3;
  let t38;
  let t39;
  let h37;
  let t41;
  let autocomplete7;
  let t42;
  let h38;
  let t44;
  let autocomplete8;
  let t45;
  let h39;
  let t47;
  let autocomplete9;
  let t48;
  let codeexample;
  let t49;
  let hr;
  let t50;
  let api;
  let current;
  function autocomplete0_value_binding(value2) {
    ctx[8](value2);
  }
  let autocomplete0_props = { data: (
    /*autocompleteData*/
    ctx[5]
  ) };
  if (
    /*autocompleteValue*/
    ctx[0] !== void 0
  ) {
    autocomplete0_props.value = /*autocompleteValue*/
    ctx[0];
  }
  autocomplete0 = new Autocomplete_default({
    props: autocomplete0_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete0, "value", autocomplete0_value_binding));
  autocomplete0.$on("change", onChange);
  function autocomplete1_value_binding(value2) {
    ctx[9](value2);
  }
  let autocomplete1_props = {
    disabled: true,
    data: (
      /*autocompleteData*/
      ctx[5]
    )
  };
  if (
    /*autocompleteValue*/
    ctx[0] !== void 0
  ) {
    autocomplete1_props.value = /*autocompleteValue*/
    ctx[0];
  }
  autocomplete1 = new Autocomplete_default({
    props: autocomplete1_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete1, "value", autocomplete1_value_binding));
  function autocomplete2_value_binding(value2) {
    ctx[10](value2);
  }
  let autocomplete2_props = {
    data: (
      /*autocompleteData*/
      ctx[5]
    ),
    placeholder: "Type to filter",
    allowNew: "true"
  };
  if (
    /*autocompleteValue*/
    ctx[0] !== void 0
  ) {
    autocomplete2_props.value = /*autocompleteValue*/
    ctx[0];
  }
  autocomplete2 = new Autocomplete_default({
    props: autocomplete2_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete2, "value", autocomplete2_value_binding));
  function autocomplete3_value_binding(value2) {
    ctx[11](value2);
  }
  let autocomplete3_props = {
    showOnFocus: "true",
    data: (
      /*autocompleteData*/
      ctx[5]
    )
  };
  if (
    /*autocompleteValue*/
    ctx[0] !== void 0
  ) {
    autocomplete3_props.value = /*autocompleteValue*/
    ctx[0];
  }
  autocomplete3 = new Autocomplete_default({
    props: autocomplete3_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete3, "value", autocomplete3_value_binding));
  function autocomplete4_value_binding(value2) {
    ctx[12](value2);
  }
  let autocomplete4_props = {
    data: (
      /*autocompleteDataSimple*/
      ctx[6]
    ),
    placeholder: "Type to filter"
  };
  if (
    /*autocompleteValueSimple*/
    ctx[1] !== void 0
  ) {
    autocomplete4_props.value = /*autocompleteValueSimple*/
    ctx[1];
  }
  autocomplete4 = new Autocomplete_default({
    props: autocomplete4_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete4, "value", autocomplete4_value_binding));
  function autocomplete5_value_binding(value2) {
    ctx[13](value2);
  }
  let autocomplete5_props = {
    data: (
      /*autocompleteDataSimplest*/
      ctx[7]
    ),
    placeholder: "Type to filter",
    allowNew: "true"
  };
  if (
    /*autocompleteValueSimplest*/
    ctx[2] !== void 0
  ) {
    autocomplete5_props.value = /*autocompleteValueSimplest*/
    ctx[2];
  }
  autocomplete5 = new Autocomplete_default({
    props: autocomplete5_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete5, "value", autocomplete5_value_binding));
  function autocomplete6_value_binding(value2) {
    ctx[14](value2);
  }
  let autocomplete6_props = {
    data: (
      /*autocompleteData*/
      ctx[5]
    ),
    elevate: "true"
  };
  if (
    /*autocompleteValue*/
    ctx[0] !== void 0
  ) {
    autocomplete6_props.value = /*autocompleteValue*/
    ctx[0];
  }
  autocomplete6 = new Autocomplete_default({
    props: autocomplete6_props,
    $$inline: true
  });
  import_internal44.binding_callbacks.push(() => (0, import_internal44.bind)(autocomplete6, "value", autocomplete6_value_binding));
  autocomplete7 = new Autocomplete_default({
    props: {
      data: (
        /*autocompleteData*/
        ctx[5]
      ),
      label: "Autocomplete label"
    },
    $$inline: true
  });
  autocomplete8 = new Autocomplete_default({
    props: {
      data: (
        /*autocompleteData*/
        ctx[5]
      ),
      label: "Autocomplete label",
      info: "Select something here"
    },
    $$inline: true
  });
  autocomplete9 = new Autocomplete_default({
    props: {
      data: (
        /*autocompleteData*/
        ctx[5]
      ),
      label: "Autocomplete label",
      error: "You picked the wrong side!"
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[4]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[3]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal44.element)("h2");
      h2.textContent = "Autocomplete";
      t1 = (0, import_internal44.space)();
      h30 = (0, import_internal44.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete0.$$.fragment);
      t4 = (0, import_internal44.space)();
      h4 = (0, import_internal44.element)("h4");
      h4.textContent = "Selected value:";
      t6 = (0, import_internal44.space)();
      code = (0, import_internal44.element)("code");
      t7 = (0, import_internal44.text)(t7_value);
      t8 = (0, import_internal44.space)();
      h31 = (0, import_internal44.element)("h3");
      h31.textContent = "Disabled";
      t10 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete1.$$.fragment);
      t11 = (0, import_internal44.space)();
      h32 = (0, import_internal44.element)("h3");
      h32.textContent = "Allow arbitrary values";
      t13 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete2.$$.fragment);
      t14 = (0, import_internal44.space)();
      h33 = (0, import_internal44.element)("h3");
      h33.textContent = "Show on focus";
      t16 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete3.$$.fragment);
      t17 = (0, import_internal44.space)();
      h34 = (0, import_internal44.element)("h3");
      h34.textContent = "Simpler data (no ID, just 'name')";
      t19 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete4.$$.fragment);
      t20 = (0, import_internal44.space)();
      h35 = (0, import_internal44.element)("h3");
      h35.textContent = "Simplest data (just an array of strings)";
      t22 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete5.$$.fragment);
      t23 = (0, import_internal44.space)();
      h36 = (0, import_internal44.element)("h3");
      t24 = (0, import_internal44.text)("In a container with ");
      em0 = (0, import_internal44.element)("em");
      em0.textContent = "overflow: hidden";
      t26 = (0, import_internal44.space)();
      p0 = (0, import_internal44.element)("p");
      t27 = (0, import_internal44.text)("Where parent container has ");
      em1 = (0, import_internal44.element)("em");
      em1.textContent = "overflow: hidden";
      t29 = (0, import_internal44.text)(", ");
      em2 = (0, import_internal44.element)("em");
      em2.textContent = 'elevate="true"';
      t31 = (0, import_internal44.text)("\n	property must be set on the component.");
      t32 = (0, import_internal44.space)();
      div = (0, import_internal44.element)("div");
      small = (0, import_internal44.element)("small");
      small.textContent = "overflow: hidden";
      t34 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete6.$$.fragment);
      t35 = (0, import_internal44.space)();
      p1 = (0, import_internal44.element)("p");
      t36 = (0, import_internal44.text)("This option should only be used when absolutely necessary (e.g. when Autocomplete\n	is used inside dialogs/popups), because it makes the component less accessible\n	(the list container is rendered directly in the ");
      em3 = (0, import_internal44.element)("em");
      em3.textContent = "<body>";
      t38 = (0, import_internal44.text)(", and not next to the input).");
      t39 = (0, import_internal44.space)();
      h37 = (0, import_internal44.element)("h3");
      h37.textContent = "Label";
      t41 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete7.$$.fragment);
      t42 = (0, import_internal44.space)();
      h38 = (0, import_internal44.element)("h3");
      h38.textContent = "Info";
      t44 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete8.$$.fragment);
      t45 = (0, import_internal44.space)();
      h39 = (0, import_internal44.element)("h3");
      h39.textContent = "Error";
      t47 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(autocomplete9.$$.fragment);
      t48 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(codeexample.$$.fragment);
      t49 = (0, import_internal44.space)();
      hr = (0, import_internal44.element)("hr");
      t50 = (0, import_internal44.space)();
      (0, import_internal44.create_component)(api.$$.fragment);
      (0, import_internal44.add_location)(h2, file38, 0, 0, 0);
      (0, import_internal44.add_location)(h30, file38, 2, 0, 23);
      (0, import_internal44.add_location)(h4, file38, 8, 0, 142);
      (0, import_internal44.add_location)(code, file38, 9, 0, 168);
      (0, import_internal44.add_location)(h31, file38, 12, 0, 225);
      (0, import_internal44.add_location)(h32, file38, 15, 0, 329);
      (0, import_internal44.add_location)(h33, file38, 22, 0, 487);
      (0, import_internal44.add_location)(h34, file38, 25, 0, 606);
      (0, import_internal44.add_location)(h35, file38, 29, 0, 768);
      (0, import_internal44.add_location)(em0, file38, 33, 24, 981);
      (0, import_internal44.add_location)(h36, file38, 33, 0, 957);
      (0, import_internal44.add_location)(em1, file38, 34, 30, 1042);
      (0, import_internal44.add_location)(em2, file38, 34, 57, 1069);
      (0, import_internal44.add_location)(p0, file38, 34, 0, 1012);
      (0, import_internal44.add_location)(small, file38, 37, 1, 1170);
      (0, import_internal44.attr_dev)(div, "class", "docs-overflow-box");
      (0, import_internal44.add_location)(div, file38, 36, 0, 1137);
      (0, import_internal44.add_location)(em3, file38, 42, 49, 1515);
      (0, import_internal44.add_location)(p1, file38, 40, 0, 1301);
      (0, import_internal44.add_location)(h37, file38, 44, 0, 1571);
      (0, import_internal44.add_location)(h38, file38, 47, 0, 1657);
      (0, import_internal44.add_location)(h39, file38, 50, 0, 1771);
      (0, import_internal44.add_location)(hr, file38, 57, 0, 1932);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal44.insert_dev)(target, h2, anchor);
      (0, import_internal44.insert_dev)(target, t1, anchor);
      (0, import_internal44.insert_dev)(target, h30, anchor);
      (0, import_internal44.insert_dev)(target, t3, anchor);
      (0, import_internal44.mount_component)(autocomplete0, target, anchor);
      (0, import_internal44.insert_dev)(target, t4, anchor);
      (0, import_internal44.insert_dev)(target, h4, anchor);
      (0, import_internal44.insert_dev)(target, t6, anchor);
      (0, import_internal44.insert_dev)(target, code, anchor);
      (0, import_internal44.append_dev)(code, t7);
      (0, import_internal44.insert_dev)(target, t8, anchor);
      (0, import_internal44.insert_dev)(target, h31, anchor);
      (0, import_internal44.insert_dev)(target, t10, anchor);
      (0, import_internal44.mount_component)(autocomplete1, target, anchor);
      (0, import_internal44.insert_dev)(target, t11, anchor);
      (0, import_internal44.insert_dev)(target, h32, anchor);
      (0, import_internal44.insert_dev)(target, t13, anchor);
      (0, import_internal44.mount_component)(autocomplete2, target, anchor);
      (0, import_internal44.insert_dev)(target, t14, anchor);
      (0, import_internal44.insert_dev)(target, h33, anchor);
      (0, import_internal44.insert_dev)(target, t16, anchor);
      (0, import_internal44.mount_component)(autocomplete3, target, anchor);
      (0, import_internal44.insert_dev)(target, t17, anchor);
      (0, import_internal44.insert_dev)(target, h34, anchor);
      (0, import_internal44.insert_dev)(target, t19, anchor);
      (0, import_internal44.mount_component)(autocomplete4, target, anchor);
      (0, import_internal44.insert_dev)(target, t20, anchor);
      (0, import_internal44.insert_dev)(target, h35, anchor);
      (0, import_internal44.insert_dev)(target, t22, anchor);
      (0, import_internal44.mount_component)(autocomplete5, target, anchor);
      (0, import_internal44.insert_dev)(target, t23, anchor);
      (0, import_internal44.insert_dev)(target, h36, anchor);
      (0, import_internal44.append_dev)(h36, t24);
      (0, import_internal44.append_dev)(h36, em0);
      (0, import_internal44.insert_dev)(target, t26, anchor);
      (0, import_internal44.insert_dev)(target, p0, anchor);
      (0, import_internal44.append_dev)(p0, t27);
      (0, import_internal44.append_dev)(p0, em1);
      (0, import_internal44.append_dev)(p0, t29);
      (0, import_internal44.append_dev)(p0, em2);
      (0, import_internal44.append_dev)(p0, t31);
      (0, import_internal44.insert_dev)(target, t32, anchor);
      (0, import_internal44.insert_dev)(target, div, anchor);
      (0, import_internal44.append_dev)(div, small);
      (0, import_internal44.append_dev)(div, t34);
      (0, import_internal44.mount_component)(autocomplete6, div, null);
      (0, import_internal44.insert_dev)(target, t35, anchor);
      (0, import_internal44.insert_dev)(target, p1, anchor);
      (0, import_internal44.append_dev)(p1, t36);
      (0, import_internal44.append_dev)(p1, em3);
      (0, import_internal44.append_dev)(p1, t38);
      (0, import_internal44.insert_dev)(target, t39, anchor);
      (0, import_internal44.insert_dev)(target, h37, anchor);
      (0, import_internal44.insert_dev)(target, t41, anchor);
      (0, import_internal44.mount_component)(autocomplete7, target, anchor);
      (0, import_internal44.insert_dev)(target, t42, anchor);
      (0, import_internal44.insert_dev)(target, h38, anchor);
      (0, import_internal44.insert_dev)(target, t44, anchor);
      (0, import_internal44.mount_component)(autocomplete8, target, anchor);
      (0, import_internal44.insert_dev)(target, t45, anchor);
      (0, import_internal44.insert_dev)(target, h39, anchor);
      (0, import_internal44.insert_dev)(target, t47, anchor);
      (0, import_internal44.mount_component)(autocomplete9, target, anchor);
      (0, import_internal44.insert_dev)(target, t48, anchor);
      (0, import_internal44.mount_component)(codeexample, target, anchor);
      (0, import_internal44.insert_dev)(target, t49, anchor);
      (0, import_internal44.insert_dev)(target, hr, anchor);
      (0, import_internal44.insert_dev)(target, t50, anchor);
      (0, import_internal44.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const autocomplete0_changes = {};
      if (!updating_value && dirty & /*autocompleteValue*/
      1) {
        updating_value = true;
        autocomplete0_changes.value = /*autocompleteValue*/
        ctx2[0];
        (0, import_internal44.add_flush_callback)(() => updating_value = false);
      }
      autocomplete0.$set(autocomplete0_changes);
      if ((!current || dirty & /*autocompleteValue*/
      1) && t7_value !== (t7_value = JSON.stringify(
        /*autocompleteValue*/
        ctx2[0] || {}
      ) + ""))
        (0, import_internal44.set_data_dev)(t7, t7_value);
      const autocomplete1_changes = {};
      if (!updating_value_1 && dirty & /*autocompleteValue*/
      1) {
        updating_value_1 = true;
        autocomplete1_changes.value = /*autocompleteValue*/
        ctx2[0];
        (0, import_internal44.add_flush_callback)(() => updating_value_1 = false);
      }
      autocomplete1.$set(autocomplete1_changes);
      const autocomplete2_changes = {};
      if (!updating_value_2 && dirty & /*autocompleteValue*/
      1) {
        updating_value_2 = true;
        autocomplete2_changes.value = /*autocompleteValue*/
        ctx2[0];
        (0, import_internal44.add_flush_callback)(() => updating_value_2 = false);
      }
      autocomplete2.$set(autocomplete2_changes);
      const autocomplete3_changes = {};
      if (!updating_value_3 && dirty & /*autocompleteValue*/
      1) {
        updating_value_3 = true;
        autocomplete3_changes.value = /*autocompleteValue*/
        ctx2[0];
        (0, import_internal44.add_flush_callback)(() => updating_value_3 = false);
      }
      autocomplete3.$set(autocomplete3_changes);
      const autocomplete4_changes = {};
      if (!updating_value_4 && dirty & /*autocompleteValueSimple*/
      2) {
        updating_value_4 = true;
        autocomplete4_changes.value = /*autocompleteValueSimple*/
        ctx2[1];
        (0, import_internal44.add_flush_callback)(() => updating_value_4 = false);
      }
      autocomplete4.$set(autocomplete4_changes);
      const autocomplete5_changes = {};
      if (!updating_value_5 && dirty & /*autocompleteValueSimplest*/
      4) {
        updating_value_5 = true;
        autocomplete5_changes.value = /*autocompleteValueSimplest*/
        ctx2[2];
        (0, import_internal44.add_flush_callback)(() => updating_value_5 = false);
      }
      autocomplete5.$set(autocomplete5_changes);
      const autocomplete6_changes = {};
      if (!updating_value_6 && dirty & /*autocompleteValue*/
      1) {
        updating_value_6 = true;
        autocomplete6_changes.value = /*autocompleteValue*/
        ctx2[0];
        (0, import_internal44.add_flush_callback)(() => updating_value_6 = false);
      }
      autocomplete6.$set(autocomplete6_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal44.transition_in)(autocomplete0.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete1.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete2.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete3.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete4.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete5.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete6.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete7.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete8.$$.fragment, local);
      (0, import_internal44.transition_in)(autocomplete9.$$.fragment, local);
      (0, import_internal44.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal44.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal44.transition_out)(autocomplete0.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete1.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete2.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete3.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete4.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete5.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete6.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete7.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete8.$$.fragment, local);
      (0, import_internal44.transition_out)(autocomplete9.$$.fragment, local);
      (0, import_internal44.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal44.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal44.detach_dev)(h2);
      if (detaching)
        (0, import_internal44.detach_dev)(t1);
      if (detaching)
        (0, import_internal44.detach_dev)(h30);
      if (detaching)
        (0, import_internal44.detach_dev)(t3);
      (0, import_internal44.destroy_component)(autocomplete0, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t4);
      if (detaching)
        (0, import_internal44.detach_dev)(h4);
      if (detaching)
        (0, import_internal44.detach_dev)(t6);
      if (detaching)
        (0, import_internal44.detach_dev)(code);
      if (detaching)
        (0, import_internal44.detach_dev)(t8);
      if (detaching)
        (0, import_internal44.detach_dev)(h31);
      if (detaching)
        (0, import_internal44.detach_dev)(t10);
      (0, import_internal44.destroy_component)(autocomplete1, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t11);
      if (detaching)
        (0, import_internal44.detach_dev)(h32);
      if (detaching)
        (0, import_internal44.detach_dev)(t13);
      (0, import_internal44.destroy_component)(autocomplete2, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t14);
      if (detaching)
        (0, import_internal44.detach_dev)(h33);
      if (detaching)
        (0, import_internal44.detach_dev)(t16);
      (0, import_internal44.destroy_component)(autocomplete3, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t17);
      if (detaching)
        (0, import_internal44.detach_dev)(h34);
      if (detaching)
        (0, import_internal44.detach_dev)(t19);
      (0, import_internal44.destroy_component)(autocomplete4, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t20);
      if (detaching)
        (0, import_internal44.detach_dev)(h35);
      if (detaching)
        (0, import_internal44.detach_dev)(t22);
      (0, import_internal44.destroy_component)(autocomplete5, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t23);
      if (detaching)
        (0, import_internal44.detach_dev)(h36);
      if (detaching)
        (0, import_internal44.detach_dev)(t26);
      if (detaching)
        (0, import_internal44.detach_dev)(p0);
      if (detaching)
        (0, import_internal44.detach_dev)(t32);
      if (detaching)
        (0, import_internal44.detach_dev)(div);
      (0, import_internal44.destroy_component)(autocomplete6);
      if (detaching)
        (0, import_internal44.detach_dev)(t35);
      if (detaching)
        (0, import_internal44.detach_dev)(p1);
      if (detaching)
        (0, import_internal44.detach_dev)(t39);
      if (detaching)
        (0, import_internal44.detach_dev)(h37);
      if (detaching)
        (0, import_internal44.detach_dev)(t41);
      (0, import_internal44.destroy_component)(autocomplete7, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t42);
      if (detaching)
        (0, import_internal44.detach_dev)(h38);
      if (detaching)
        (0, import_internal44.detach_dev)(t44);
      (0, import_internal44.destroy_component)(autocomplete8, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t45);
      if (detaching)
        (0, import_internal44.detach_dev)(h39);
      if (detaching)
        (0, import_internal44.detach_dev)(t47);
      (0, import_internal44.destroy_component)(autocomplete9, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t48);
      (0, import_internal44.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal44.detach_dev)(t49);
      if (detaching)
        (0, import_internal44.detach_dev)(hr);
      if (detaching)
        (0, import_internal44.detach_dev)(t50);
      (0, import_internal44.destroy_component)(api, detaching);
    }
  };
  (0, import_internal44.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment44.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onChange(e) {
  const { value: value2, oldValue } = e.detail;
  console.log({ value: value2, oldValue });
}
function instance44($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal44.validate_slots)("Autocomplete", slots2, []);
  const apiProps = [
    {
      name: "allowNew",
      type: ["true", "false"],
      default: "false",
      description: "Whether to allow arbitrary values (that don't exist in the list)."
    },
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "clearOnEsc",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the autocomplete will be cleared when Escape is pressed."
    },
    {
      name: "data",
      type: "array",
      required: true,
      description: "An array of strings or objects in the following format: <code>&lbrace; name: string, id?: string | number, group?: string &rbrace;</code>(<i>name</i> should be unique, or - if <i>id</i> is present - <i>id</i> should be unique)."
    },
    {
      name: "disabled",
      description: "Make the autocomplete disabled."
    },
    {
      name: "elevate",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the popup will be rendered into the <i>body</i>, to ensure it's not hidden under some elements (see example above)."
    },
    {
      name: "hideOnResize",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - resizing the window will close the popup."
    },
    {
      name: "hideOnScroll",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - scrolling the window will close the popup."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the autocomplete."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the autocomplete."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the autocomplete."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Shows placeholder text."
    },
    {
      name: "required",
      description: "Mark the autocomplete as <i>aria-required</i>."
    },
    {
      name: "showAllInitially",
      type: ["true", "false"],
      default: "true",
      description: 'When the autocomplete has a value - the list in the poput is filtered by the autocomplete value.<br>If this option is set to true (default) - when user navigates to the autocomplete (with a value)<br> or clicks such an autocomplete - the poput initially will show all items unfiltered, and only once<br> user starts typing - the list will be filtered again.<br> If this value is set to <i>"false"</i> (or boolean <i>false</i>) - the list will always be filtered. '
    },
    {
      name: "showOnFocus",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the popup will be automatically open when the autocomplete gets focus (as opposed to, when the user starts typing)."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Initial value of the autocomplete."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    },
    {
      name: "on:keydown",
      type: "function",
      description: "Triggered when a key is down."
    }
  ];
  const exampleHtml = `
<Autocomplete
    data="{ autocompleteData }"
    on:change="{ onChange }"
    bind:value="{ autocompleteValue }" />

<script>
const autocompleteData = [
    { id: 1, name: 'Alpha', group: 'Group 1' },
    { id: 2, name: 'Beta', group: 'Group 1' },
    { id: 3, name: 'Gamma', group: 'Group 2' },
    { id: 4, name: 'Delta', group: 'Group 2' },
];
let autocompleteValue = autocompleteData[1];

function onChange (e) {
    const { value, oldValue } = e.detail;
    console.log({ value, oldValue });
}
&lt;/script>
`;
  const autocompleteData = [
    { id: 1, name: "Alpha", group: "Group 1" },
    { id: 2, name: "Beta", group: "Group 1" },
    { id: 3, name: "Gamma", group: "Group 1" },
    { id: 4, name: "Delta", group: "Group 1" },
    { id: 5, name: "Epsilon", group: "Group 1" },
    {
      id: 6,
      name: "Zeta",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      id: 7,
      name: "Eta",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      id: 8,
      name: "Theta",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      id: 9,
      name: "Iota",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      id: 10,
      name: "Kappa",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      id: 11,
      name: "Lambda is the last item in Group 2",
      group: "\u{1F600} Group 2 has a very long name"
    },
    { id: 12, name: "Zeta", group: "Group 3" },
    { id: 13, name: "Eta", group: "Group 3" },
    { id: 14, name: "Theta", group: "Group 3" },
    { id: 15, name: "Iota", group: "Group 3" },
    { id: 16, name: "Kappa", group: "Group 3" },
    { id: 17, name: "Lambda", group: "Group 3" }
  ];
  let autocompleteValue = autocompleteData[1];
  const autocompleteDataSimple = [
    { name: "Alpha", group: "Group 1" },
    { name: "Beta", group: "Group 1" },
    { name: "Gamma", group: "Group 1" },
    { name: "Delta", group: "Group 1" },
    { name: "Epsilon", group: "Group 1" },
    {
      name: "Zeta",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      name: "Eta",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      name: "Theta",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      name: "Iota",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      name: "Kappa",
      group: "\u{1F600} Group 2 has a very long name"
    },
    {
      name: "Lambda is the last item in Group 2",
      group: "\u{1F600} Group 2 has a very long name"
    },
    { name: "Alpha" },
    { name: "Beta" },
    { name: "Gamma" },
    { name: "Delta" },
    { name: "Epsilon" }
  ];
  let autocompleteValueSimple = autocompleteDataSimple[3];
  const autocompleteDataSimplest = [
    "Alpha",
    "Beta",
    "Gamma",
    "Delta",
    "Epsilon",
    "Zeta",
    "Eta",
    "Theta",
    "Iota",
    "Iota",
    "Kappa",
    "Lambda is the last item in this list"
  ];
  let autocompleteValueSimplest = "Gamma";
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_1.warn(`<Autocomplete> was created with unknown prop '${key}'`);
  });
  function autocomplete0_value_binding(value2) {
    autocompleteValue = value2;
    $$invalidate2(0, autocompleteValue);
  }
  function autocomplete1_value_binding(value2) {
    autocompleteValue = value2;
    $$invalidate2(0, autocompleteValue);
  }
  function autocomplete2_value_binding(value2) {
    autocompleteValue = value2;
    $$invalidate2(0, autocompleteValue);
  }
  function autocomplete3_value_binding(value2) {
    autocompleteValue = value2;
    $$invalidate2(0, autocompleteValue);
  }
  function autocomplete4_value_binding(value2) {
    autocompleteValueSimple = value2;
    $$invalidate2(1, autocompleteValueSimple);
  }
  function autocomplete5_value_binding(value2) {
    autocompleteValueSimplest = value2;
    $$invalidate2(2, autocompleteValueSimplest);
  }
  function autocomplete6_value_binding(value2) {
    autocompleteValue = value2;
    $$invalidate2(0, autocompleteValue);
  }
  $$self2.$capture_state = () => ({
    Autocomplete: Autocomplete_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    autocompleteData,
    autocompleteValue,
    autocompleteDataSimple,
    autocompleteValueSimple,
    autocompleteDataSimplest,
    autocompleteValueSimplest,
    onChange
  });
  $$self2.$inject_state = ($$props3) => {
    if ("autocompleteValue" in $$props3)
      $$invalidate2(0, autocompleteValue = $$props3.autocompleteValue);
    if ("autocompleteValueSimple" in $$props3)
      $$invalidate2(1, autocompleteValueSimple = $$props3.autocompleteValueSimple);
    if ("autocompleteValueSimplest" in $$props3)
      $$invalidate2(2, autocompleteValueSimplest = $$props3.autocompleteValueSimplest);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    autocompleteValue,
    autocompleteValueSimple,
    autocompleteValueSimplest,
    apiProps,
    exampleHtml,
    autocompleteData,
    autocompleteDataSimple,
    autocompleteDataSimplest,
    autocomplete0_value_binding,
    autocomplete1_value_binding,
    autocomplete2_value_binding,
    autocomplete3_value_binding,
    autocomplete4_value_binding,
    autocomplete5_value_binding,
    autocomplete6_value_binding
  ];
}
var Autocomplete_1 = class extends import_internal44.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal44.init)(this, options, instance44, create_fragment44, import_internal44.safe_not_equal, {});
    (0, import_internal44.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Autocomplete_1",
      options,
      id: create_fragment44.name
    });
  }
};
var Autocomplete_default2 = Autocomplete_1;

// docs-src/components/button/Button.svelte
var import_internal45 = __toESM(require_internal());
var file39 = "docs-src/components/button/Button.svelte";
function create_else_block4(ctx) {
  let button;
  let current;
  const button_spread_levels = [
    /*props*/
    ctx[0]
  ];
  let button_props = {};
  for (let i = 0; i < button_spread_levels.length; i += 1) {
    button_props = (0, import_internal45.assign)(button_props, button_spread_levels[i]);
  }
  button = new Button_default({ props: button_props, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal45.create_component)(button.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal45.mount_component)(button, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = dirty & /*props*/
      1 ? (0, import_internal45.get_spread_update)(button_spread_levels, [(0, import_internal45.get_spread_object)(
        /*props*/
        ctx2[0]
      )]) : {};
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal45.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal45.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal45.destroy_component)(button, detaching);
    }
  };
  (0, import_internal45.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_else_block4.name,
    type: "else",
    source: "(7:1) {:else}",
    ctx
  });
  return block;
}
function create_if_block21(ctx) {
  let button;
  let current;
  const button_spread_levels = [
    /*props*/
    ctx[0]
  ];
  let button_props = {
    $$slots: { default: [create_default_slot5] },
    $$scope: { ctx }
  };
  for (let i = 0; i < button_spread_levels.length; i += 1) {
    button_props = (0, import_internal45.assign)(button_props, button_spread_levels[i]);
  }
  button = new Button_default({ props: button_props, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal45.create_component)(button.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal45.mount_component)(button, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = dirty & /*props*/
      1 ? (0, import_internal45.get_spread_update)(button_spread_levels, [(0, import_internal45.get_spread_object)(
        /*props*/
        ctx2[0]
      )]) : {};
      if (dirty & /*$$scope, buttonText*/
      8194) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal45.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal45.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal45.destroy_component)(button, detaching);
    }
  };
  (0, import_internal45.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_if_block21.name,
    type: "if",
    source: "(5:1) {#if buttonText}",
    ctx
  });
  return block;
}
function create_default_slot5(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal45.text)(
        /*buttonText*/
        ctx[1]
      );
    },
    m: function mount(target, anchor) {
      (0, import_internal45.insert_dev)(target, t, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*buttonText*/
      2)
        (0, import_internal45.set_data_dev)(
          t,
          /*buttonText*/
          ctx2[1]
        );
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal45.detach_dev)(t);
    }
  };
  (0, import_internal45.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot5.name,
    type: "slot",
    source: "(6:2) <Button {...props}>",
    ctx
  });
  return block;
}
function create_fragment45(ctx) {
  let h2;
  let t1;
  let h3;
  let t3;
  let div0;
  let current_block_type_index;
  let if_block;
  let t4;
  let codebox;
  let t5;
  let hr0;
  let t6;
  let div1;
  let inputtext;
  let updating_value;
  let t7;
  let buttontoggle0;
  let t8;
  let buttontoggle1;
  let t9;
  let buttontoggle2;
  let t10;
  let toggle0;
  let updating_value_1;
  let t11;
  let toggle1;
  let updating_value_2;
  let t12;
  let hr1;
  let t13;
  let api;
  let current;
  const if_block_creators = [create_if_block21, create_else_block4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*buttonText*/
      ctx2[1]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  codebox = new CodeBox_default({
    props: {
      tag: "Button",
      text: (
        /*buttonText*/
        ctx[1]
      ),
      props: (
        /*props*/
        ctx[0]
      )
    },
    $$inline: true
  });
  function inputtext_value_binding(value2) {
    ctx[9](value2);
  }
  let inputtext_props = { label: "Text" };
  if (
    /*buttonText*/
    ctx[1] !== void 0
  ) {
    inputtext_props.value = /*buttonText*/
    ctx[1];
  }
  inputtext = new InputText_default({ props: inputtext_props, $$inline: true });
  import_internal45.binding_callbacks.push(() => (0, import_internal45.bind)(inputtext, "value", inputtext_value_binding));
  buttontoggle0 = new ButtonToggle_default({
    props: {
      label: "Style",
      items: (
        /*buttonStyles*/
        ctx[3]
      ),
      value: ""
    },
    $$inline: true
  });
  buttontoggle0.$on(
    "change",
    /*onStyleChange*/
    ctx[6]
  );
  buttontoggle1 = new ButtonToggle_default({
    props: {
      label: "Type",
      items: (
        /*buttonTypes*/
        ctx[4]
      ),
      value: ""
    },
    $$inline: true
  });
  buttontoggle1.$on(
    "change",
    /*onTypeChange*/
    ctx[7]
  );
  buttontoggle2 = new ButtonToggle_default({
    props: {
      label: "Icon",
      items: (
        /*buttonIcons*/
        ctx[5]
      ),
      value: ""
    },
    $$inline: true
  });
  buttontoggle2.$on(
    "change",
    /*onIconChange*/
    ctx[8]
  );
  function toggle0_value_binding(value2) {
    ctx[10](value2);
  }
  let toggle0_props = { label: "Round" };
  if (
    /*props*/
    ctx[0].round !== void 0
  ) {
    toggle0_props.value = /*props*/
    ctx[0].round;
  }
  toggle0 = new Toggle_default({ props: toggle0_props, $$inline: true });
  import_internal45.binding_callbacks.push(() => (0, import_internal45.bind)(toggle0, "value", toggle0_value_binding));
  function toggle1_value_binding(value2) {
    ctx[11](value2);
  }
  let toggle1_props = { label: "Disabled" };
  if (
    /*props*/
    ctx[0].disabled !== void 0
  ) {
    toggle1_props.value = /*props*/
    ctx[0].disabled;
  }
  toggle1 = new Toggle_default({ props: toggle1_props, $$inline: true });
  import_internal45.binding_callbacks.push(() => (0, import_internal45.bind)(toggle1, "value", toggle1_value_binding));
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[2]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal45.element)("h2");
      h2.textContent = "Button";
      t1 = (0, import_internal45.space)();
      h3 = (0, import_internal45.element)("h3");
      h3.textContent = "Live demo";
      t3 = (0, import_internal45.space)();
      div0 = (0, import_internal45.element)("div");
      if_block.c();
      t4 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(codebox.$$.fragment);
      t5 = (0, import_internal45.space)();
      hr0 = (0, import_internal45.element)("hr");
      t6 = (0, import_internal45.space)();
      div1 = (0, import_internal45.element)("div");
      (0, import_internal45.create_component)(inputtext.$$.fragment);
      t7 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(buttontoggle0.$$.fragment);
      t8 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(buttontoggle1.$$.fragment);
      t9 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(buttontoggle2.$$.fragment);
      t10 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(toggle0.$$.fragment);
      t11 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(toggle1.$$.fragment);
      t12 = (0, import_internal45.space)();
      hr1 = (0, import_internal45.element)("hr");
      t13 = (0, import_internal45.space)();
      (0, import_internal45.create_component)(api.$$.fragment);
      (0, import_internal45.add_location)(h2, file39, 0, 0, 0);
      (0, import_internal45.add_location)(h3, file39, 2, 0, 17);
      (0, import_internal45.attr_dev)(div0, "class", "docs-buttons-row");
      (0, import_internal45.set_style)(div0, "height", "3rem");
      (0, import_internal45.add_location)(div0, file39, 3, 0, 36);
      (0, import_internal45.add_location)(hr0, file39, 13, 0, 251);
      (0, import_internal45.attr_dev)(div1, "class", "button-demo-props");
      (0, import_internal45.add_location)(div1, file39, 15, 0, 257);
      (0, import_internal45.add_location)(hr1, file39, 25, 0, 731);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal45.insert_dev)(target, h2, anchor);
      (0, import_internal45.insert_dev)(target, t1, anchor);
      (0, import_internal45.insert_dev)(target, h3, anchor);
      (0, import_internal45.insert_dev)(target, t3, anchor);
      (0, import_internal45.insert_dev)(target, div0, anchor);
      if_blocks[current_block_type_index].m(div0, null);
      (0, import_internal45.insert_dev)(target, t4, anchor);
      (0, import_internal45.mount_component)(codebox, target, anchor);
      (0, import_internal45.insert_dev)(target, t5, anchor);
      (0, import_internal45.insert_dev)(target, hr0, anchor);
      (0, import_internal45.insert_dev)(target, t6, anchor);
      (0, import_internal45.insert_dev)(target, div1, anchor);
      (0, import_internal45.mount_component)(inputtext, div1, null);
      (0, import_internal45.append_dev)(div1, t7);
      (0, import_internal45.mount_component)(buttontoggle0, div1, null);
      (0, import_internal45.append_dev)(div1, t8);
      (0, import_internal45.mount_component)(buttontoggle1, div1, null);
      (0, import_internal45.append_dev)(div1, t9);
      (0, import_internal45.mount_component)(buttontoggle2, div1, null);
      (0, import_internal45.append_dev)(div1, t10);
      (0, import_internal45.mount_component)(toggle0, div1, null);
      (0, import_internal45.append_dev)(div1, t11);
      (0, import_internal45.mount_component)(toggle1, div1, null);
      (0, import_internal45.insert_dev)(target, t12, anchor);
      (0, import_internal45.insert_dev)(target, hr1, anchor);
      (0, import_internal45.insert_dev)(target, t13, anchor);
      (0, import_internal45.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        (0, import_internal45.group_outros)();
        (0, import_internal45.transition_out)(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        (0, import_internal45.check_outros)();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        (0, import_internal45.transition_in)(if_block, 1);
        if_block.m(div0, null);
      }
      const codebox_changes = {};
      if (dirty & /*buttonText*/
      2)
        codebox_changes.text = /*buttonText*/
        ctx2[1];
      if (dirty & /*props*/
      1)
        codebox_changes.props = /*props*/
        ctx2[0];
      codebox.$set(codebox_changes);
      const inputtext_changes = {};
      if (!updating_value && dirty & /*buttonText*/
      2) {
        updating_value = true;
        inputtext_changes.value = /*buttonText*/
        ctx2[1];
        (0, import_internal45.add_flush_callback)(() => updating_value = false);
      }
      inputtext.$set(inputtext_changes);
      const toggle0_changes = {};
      if (!updating_value_1 && dirty & /*props*/
      1) {
        updating_value_1 = true;
        toggle0_changes.value = /*props*/
        ctx2[0].round;
        (0, import_internal45.add_flush_callback)(() => updating_value_1 = false);
      }
      toggle0.$set(toggle0_changes);
      const toggle1_changes = {};
      if (!updating_value_2 && dirty & /*props*/
      1) {
        updating_value_2 = true;
        toggle1_changes.value = /*props*/
        ctx2[0].disabled;
        (0, import_internal45.add_flush_callback)(() => updating_value_2 = false);
      }
      toggle1.$set(toggle1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal45.transition_in)(if_block);
      (0, import_internal45.transition_in)(codebox.$$.fragment, local);
      (0, import_internal45.transition_in)(inputtext.$$.fragment, local);
      (0, import_internal45.transition_in)(buttontoggle0.$$.fragment, local);
      (0, import_internal45.transition_in)(buttontoggle1.$$.fragment, local);
      (0, import_internal45.transition_in)(buttontoggle2.$$.fragment, local);
      (0, import_internal45.transition_in)(toggle0.$$.fragment, local);
      (0, import_internal45.transition_in)(toggle1.$$.fragment, local);
      (0, import_internal45.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal45.transition_out)(if_block);
      (0, import_internal45.transition_out)(codebox.$$.fragment, local);
      (0, import_internal45.transition_out)(inputtext.$$.fragment, local);
      (0, import_internal45.transition_out)(buttontoggle0.$$.fragment, local);
      (0, import_internal45.transition_out)(buttontoggle1.$$.fragment, local);
      (0, import_internal45.transition_out)(buttontoggle2.$$.fragment, local);
      (0, import_internal45.transition_out)(toggle0.$$.fragment, local);
      (0, import_internal45.transition_out)(toggle1.$$.fragment, local);
      (0, import_internal45.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal45.detach_dev)(h2);
      if (detaching)
        (0, import_internal45.detach_dev)(t1);
      if (detaching)
        (0, import_internal45.detach_dev)(h3);
      if (detaching)
        (0, import_internal45.detach_dev)(t3);
      if (detaching)
        (0, import_internal45.detach_dev)(div0);
      if_blocks[current_block_type_index].d();
      if (detaching)
        (0, import_internal45.detach_dev)(t4);
      (0, import_internal45.destroy_component)(codebox, detaching);
      if (detaching)
        (0, import_internal45.detach_dev)(t5);
      if (detaching)
        (0, import_internal45.detach_dev)(hr0);
      if (detaching)
        (0, import_internal45.detach_dev)(t6);
      if (detaching)
        (0, import_internal45.detach_dev)(div1);
      (0, import_internal45.destroy_component)(inputtext);
      (0, import_internal45.destroy_component)(buttontoggle0);
      (0, import_internal45.destroy_component)(buttontoggle1);
      (0, import_internal45.destroy_component)(buttontoggle2);
      (0, import_internal45.destroy_component)(toggle0);
      (0, import_internal45.destroy_component)(toggle1);
      if (detaching)
        (0, import_internal45.detach_dev)(t12);
      if (detaching)
        (0, import_internal45.detach_dev)(hr1);
      if (detaching)
        (0, import_internal45.detach_dev)(t13);
      (0, import_internal45.destroy_component)(api, detaching);
    }
  };
  (0, import_internal45.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment45.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance45($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal45.validate_slots)("Button", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "danger",
      description: "Button type: danger"
    },
    {
      name: "data-",
      description: "Dataset attribute allows to pass some data of a primitive type (string, number, boolean), which will be accessible in the <em>on:click</em> event listener, via button reference."
    },
    {
      name: "disabled",
      description: "Makes the button <i>disabled</i>"
    },
    {
      name: "icon",
      type: "string",
      description: 'Adds an icon, with this name, to the button (see <a href="#Icon">icons</a> section for icon names)'
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying button"
    },
    {
      name: "info",
      description: "Button type: info"
    },
    {
      name: "link",
      description: "Button style: link"
    },
    {
      name: "outline",
      description: "Button style: outline"
    },
    {
      name: "round",
      description: "Makes the button round"
    },
    {
      name: "submit",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> button type is set to <i>submit</i>, otherwise it's <i>button</i>"
    },
    {
      name: "success",
      description: "Button type: success"
    },
    {
      name: "text",
      description: "Button style: text"
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying button"
    },
    {
      name: "warning",
      description: "Button type: warning"
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:click",
      type: "function",
      description: "Triggered when the button is clicked."
    }
  ];
  const props2 = {};
  let buttonText = "Demo button";
  const buttonStyles = [
    { name: "Normal", value: "" },
    { name: "Outline", value: "outline" },
    { name: "Text", value: "text" },
    { name: "Link", value: "link" }
  ];
  const buttonTypes = [
    { name: "Default", value: "" },
    { name: "Info", value: "info" },
    { name: "Success", value: "success" },
    { name: "Warning", value: "warning" },
    { name: "Danger", value: "danger" }
  ];
  const buttonIcons = [
    { name: "none", value: "" },
    { name: "info", value: "info" },
    { name: "check", value: "check" },
    { name: "alert", value: "alert" },
    { name: "trash", value: "trash" }
  ];
  function onStyleChange(e) {
    $$invalidate2(0, props2.outline = false, props2);
    $$invalidate2(0, props2.text = false, props2);
    $$invalidate2(0, props2.link = false, props2);
    setProp(e.detail, true);
  }
  function onTypeChange(e) {
    $$invalidate2(0, props2.info = false, props2);
    $$invalidate2(0, props2.success = false, props2);
    $$invalidate2(0, props2.warning = false, props2);
    $$invalidate2(0, props2.danger = false, props2);
    setProp(e.detail, true);
  }
  function onIconChange(e) {
    setProp("icon", e.detail);
  }
  function setProp(name2, val) {
    if (!name2 || typeof val === "undefined")
      return;
    $$invalidate2(0, props2[name2] = val, props2);
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Button> was created with unknown prop '${key}'`);
  });
  function inputtext_value_binding(value2) {
    buttonText = value2;
    $$invalidate2(1, buttonText);
  }
  function toggle0_value_binding(value2) {
    if ($$self2.$$.not_equal(props2.round, value2)) {
      props2.round = value2;
      $$invalidate2(0, props2);
    }
  }
  function toggle1_value_binding(value2) {
    if ($$self2.$$.not_equal(props2.disabled, value2)) {
      props2.disabled = value2;
      $$invalidate2(0, props2);
    }
  }
  $$self2.$capture_state = () => ({
    Button: Button_default,
    ButtonToggle: ButtonToggle_default,
    Toggle: Toggle_default,
    InputText: InputText_default,
    API: ApiTable_default,
    CodeBox: CodeBox_default,
    apiProps,
    props: props2,
    buttonText,
    buttonStyles,
    buttonTypes,
    buttonIcons,
    onStyleChange,
    onTypeChange,
    onIconChange,
    setProp
  });
  $$self2.$inject_state = ($$props3) => {
    if ("buttonText" in $$props3)
      $$invalidate2(1, buttonText = $$props3.buttonText);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    props2,
    buttonText,
    apiProps,
    buttonStyles,
    buttonTypes,
    buttonIcons,
    onStyleChange,
    onTypeChange,
    onIconChange,
    inputtext_value_binding,
    toggle0_value_binding,
    toggle1_value_binding
  ];
}
var Button_1 = class extends import_internal45.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal45.init)(this, options, instance45, create_fragment45, import_internal45.safe_not_equal, {});
    (0, import_internal45.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Button_1",
      options,
      id: create_fragment45.name
    });
  }
};
var Button_default2 = Button_1;

// docs-src/components/push-button/PushButton.svelte
var import_internal46 = __toESM(require_internal());
var file40 = "docs-src/components/push-button/PushButton.svelte";
function create_default_slot_24(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Hello");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_24.name,
    type: "slot",
    source: "(7:1) <PushButton>",
    ctx
  });
  return block;
}
function create_default_slot_23(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Info");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_23.name,
    type: "slot",
    source: "(8:1) <PushButton info>",
    ctx
  });
  return block;
}
function create_default_slot_22(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_22.name,
    type: "slot",
    source: "(9:1) <PushButton success>",
    ctx
  });
  return block;
}
function create_default_slot_21(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_21.name,
    type: "slot",
    source: "(10:1) <PushButton warning>",
    ctx
  });
  return block;
}
function create_default_slot_20(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Danger");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_20.name,
    type: "slot",
    source: "(11:1) <PushButton danger>",
    ctx
  });
  return block;
}
function create_default_slot_19(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Hello");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_19.name,
    type: "slot",
    source: "(17:1) <PushButton pressed>",
    ctx
  });
  return block;
}
function create_default_slot_18(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Info");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_18.name,
    type: "slot",
    source: "(18:1) <PushButton pressed info>",
    ctx
  });
  return block;
}
function create_default_slot_17(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_17.name,
    type: "slot",
    source: "(19:1) <PushButton pressed success>",
    ctx
  });
  return block;
}
function create_default_slot_16(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_16.name,
    type: "slot",
    source: "(20:1) <PushButton pressed warning>",
    ctx
  });
  return block;
}
function create_default_slot_15(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Danger");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_15.name,
    type: "slot",
    source: "(21:1) <PushButton pressed danger>",
    ctx
  });
  return block;
}
function create_default_slot_14(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Hello");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_14.name,
    type: "slot",
    source: "(27:1) <PushButton disabled>",
    ctx
  });
  return block;
}
function create_default_slot_13(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Info");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_13.name,
    type: "slot",
    source: "(28:1) <PushButton disabled info>",
    ctx
  });
  return block;
}
function create_default_slot_12(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Success");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_12.name,
    type: "slot",
    source: "(29:1) <PushButton disabled success>",
    ctx
  });
  return block;
}
function create_default_slot_11(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_11.name,
    type: "slot",
    source: "(30:1) <PushButton disabled warning>",
    ctx
  });
  return block;
}
function create_default_slot_10(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Danger");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_10.name,
    type: "slot",
    source: "(31:1) <PushButton disabled danger>",
    ctx
  });
  return block;
}
function create_default_slot_9(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Help");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_9.name,
    type: "slot",
    source: '(37:1) <PushButton icon=\\"help\\">',
    ctx
  });
  return block;
}
function create_default_slot_8(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Info");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_8.name,
    type: "slot",
    source: '(38:1) <PushButton icon=\\"info\\" info>',
    ctx
  });
  return block;
}
function create_default_slot_7(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Success");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_7.name,
    type: "slot",
    source: '(39:1) <PushButton icon=\\"check\\" success>',
    ctx
  });
  return block;
}
function create_default_slot_6(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_6.name,
    type: "slot",
    source: '(40:1) <PushButton icon=\\"alert\\" warning>',
    ctx
  });
  return block;
}
function create_default_slot_5(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Delete");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_5.name,
    type: "slot",
    source: '(41:1) <PushButton icon=\\"trash\\" danger>',
    ctx
  });
  return block;
}
function create_default_slot_4(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Hello");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_4.name,
    type: "slot",
    source: "(47:1) <PushButton outline>",
    ctx
  });
  return block;
}
function create_default_slot_32(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Info");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_32.name,
    type: "slot",
    source: "(48:1) <PushButton outline info>",
    ctx
  });
  return block;
}
function create_default_slot_25(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_25.name,
    type: "slot",
    source: "(49:1) <PushButton outline success>",
    ctx
  });
  return block;
}
function create_default_slot_110(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_110.name,
    type: "slot",
    source: "(50:1) <PushButton outline warning>",
    ctx
  });
  return block;
}
function create_default_slot6(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal46.text)("Danger");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(t);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot6.name,
    type: "slot",
    source: "(51:1) <PushButton outline danger>",
    ctx
  });
  return block;
}
function create_fragment46(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let h40;
  let t5;
  let div0;
  let pushbutton0;
  let t6;
  let pushbutton1;
  let t7;
  let pushbutton2;
  let t8;
  let pushbutton3;
  let t9;
  let pushbutton4;
  let t10;
  let h41;
  let t12;
  let div1;
  let pushbutton5;
  let t13;
  let pushbutton6;
  let t14;
  let pushbutton7;
  let t15;
  let pushbutton8;
  let t16;
  let pushbutton9;
  let t17;
  let h42;
  let t19;
  let div2;
  let pushbutton10;
  let t20;
  let pushbutton11;
  let t21;
  let pushbutton12;
  let t22;
  let pushbutton13;
  let t23;
  let pushbutton14;
  let t24;
  let h43;
  let t26;
  let div3;
  let pushbutton15;
  let t27;
  let pushbutton16;
  let t28;
  let pushbutton17;
  let t29;
  let pushbutton18;
  let t30;
  let pushbutton19;
  let t31;
  let h44;
  let t33;
  let div4;
  let pushbutton20;
  let t34;
  let pushbutton21;
  let t35;
  let pushbutton22;
  let t36;
  let pushbutton23;
  let t37;
  let pushbutton24;
  let t38;
  let hr0;
  let t39;
  let h31;
  let t41;
  let h45;
  let t43;
  let div5;
  let pushbutton25;
  let t44;
  let pushbutton26;
  let t45;
  let pushbutton27;
  let t46;
  let pushbutton28;
  let t47;
  let pushbutton29;
  let t48;
  let hr1;
  let t49;
  let h32;
  let t51;
  let h46;
  let t53;
  let div6;
  let pushbutton30;
  let t54;
  let pushbutton31;
  let t55;
  let pushbutton32;
  let t56;
  let pushbutton33;
  let t57;
  let pushbutton34;
  let t58;
  let codeexample;
  let t59;
  let api;
  let current;
  pushbutton0 = new PushButton_default({
    props: {
      $$slots: { default: [create_default_slot_24] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton1 = new PushButton_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot_23] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton2 = new PushButton_default({
    props: {
      success: true,
      $$slots: { default: [create_default_slot_22] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton3 = new PushButton_default({
    props: {
      warning: true,
      $$slots: { default: [create_default_slot_21] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton4 = new PushButton_default({
    props: {
      danger: true,
      $$slots: { default: [create_default_slot_20] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton5 = new PushButton_default({
    props: {
      pressed: true,
      $$slots: { default: [create_default_slot_19] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton6 = new PushButton_default({
    props: {
      pressed: true,
      info: true,
      $$slots: { default: [create_default_slot_18] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton7 = new PushButton_default({
    props: {
      pressed: true,
      success: true,
      $$slots: { default: [create_default_slot_17] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton8 = new PushButton_default({
    props: {
      pressed: true,
      warning: true,
      $$slots: { default: [create_default_slot_16] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton9 = new PushButton_default({
    props: {
      pressed: true,
      danger: true,
      $$slots: { default: [create_default_slot_15] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton10 = new PushButton_default({
    props: {
      disabled: true,
      $$slots: { default: [create_default_slot_14] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton11 = new PushButton_default({
    props: {
      disabled: true,
      info: true,
      $$slots: { default: [create_default_slot_13] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton12 = new PushButton_default({
    props: {
      disabled: true,
      success: true,
      $$slots: { default: [create_default_slot_12] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton13 = new PushButton_default({
    props: {
      disabled: true,
      warning: true,
      $$slots: { default: [create_default_slot_11] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton14 = new PushButton_default({
    props: {
      disabled: true,
      danger: true,
      $$slots: { default: [create_default_slot_10] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton15 = new PushButton_default({
    props: {
      icon: "help",
      $$slots: { default: [create_default_slot_9] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton16 = new PushButton_default({
    props: {
      icon: "info",
      info: true,
      $$slots: { default: [create_default_slot_8] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton17 = new PushButton_default({
    props: {
      icon: "check",
      success: true,
      $$slots: { default: [create_default_slot_7] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton18 = new PushButton_default({
    props: {
      icon: "alert",
      warning: true,
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton19 = new PushButton_default({
    props: {
      icon: "trash",
      danger: true,
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton20 = new PushButton_default({
    props: {
      outline: true,
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton21 = new PushButton_default({
    props: {
      outline: true,
      info: true,
      $$slots: { default: [create_default_slot_32] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton22 = new PushButton_default({
    props: {
      outline: true,
      success: true,
      $$slots: { default: [create_default_slot_25] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton23 = new PushButton_default({
    props: {
      outline: true,
      warning: true,
      $$slots: { default: [create_default_slot_110] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton24 = new PushButton_default({
    props: {
      outline: true,
      danger: true,
      $$slots: { default: [create_default_slot6] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton25 = new PushButton_default({ props: { icon: "help" }, $$inline: true });
  pushbutton26 = new PushButton_default({
    props: { icon: "info", info: true },
    $$inline: true
  });
  pushbutton27 = new PushButton_default({
    props: { icon: "check", success: true },
    $$inline: true
  });
  pushbutton28 = new PushButton_default({
    props: { icon: "alert", warning: true },
    $$inline: true
  });
  pushbutton29 = new PushButton_default({
    props: { icon: "trash", danger: true },
    $$inline: true
  });
  pushbutton30 = new PushButton_default({
    props: { round: true, icon: "help" },
    $$inline: true
  });
  pushbutton31 = new PushButton_default({
    props: { round: true, icon: "info", info: true },
    $$inline: true
  });
  pushbutton32 = new PushButton_default({
    props: {
      round: true,
      icon: "check",
      success: true
    },
    $$inline: true
  });
  pushbutton33 = new PushButton_default({
    props: {
      round: true,
      icon: "alert",
      warning: true
    },
    $$inline: true
  });
  pushbutton34 = new PushButton_default({
    props: { round: true, icon: "trash", danger: true },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal46.element)("h2");
      h2.textContent = "Push Button";
      t1 = (0, import_internal46.space)();
      h30 = (0, import_internal46.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal46.space)();
      h40 = (0, import_internal46.element)("h4");
      h40.textContent = "Default";
      t5 = (0, import_internal46.space)();
      div0 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton0.$$.fragment);
      t6 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton1.$$.fragment);
      t7 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton2.$$.fragment);
      t8 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton3.$$.fragment);
      t9 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton4.$$.fragment);
      t10 = (0, import_internal46.space)();
      h41 = (0, import_internal46.element)("h4");
      h41.textContent = "Pressed";
      t12 = (0, import_internal46.space)();
      div1 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton5.$$.fragment);
      t13 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton6.$$.fragment);
      t14 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton7.$$.fragment);
      t15 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton8.$$.fragment);
      t16 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton9.$$.fragment);
      t17 = (0, import_internal46.space)();
      h42 = (0, import_internal46.element)("h4");
      h42.textContent = "Disabled";
      t19 = (0, import_internal46.space)();
      div2 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton10.$$.fragment);
      t20 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton11.$$.fragment);
      t21 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton12.$$.fragment);
      t22 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton13.$$.fragment);
      t23 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton14.$$.fragment);
      t24 = (0, import_internal46.space)();
      h43 = (0, import_internal46.element)("h4");
      h43.textContent = "With icon";
      t26 = (0, import_internal46.space)();
      div3 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton15.$$.fragment);
      t27 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton16.$$.fragment);
      t28 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton17.$$.fragment);
      t29 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton18.$$.fragment);
      t30 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton19.$$.fragment);
      t31 = (0, import_internal46.space)();
      h44 = (0, import_internal46.element)("h4");
      h44.textContent = "Outline";
      t33 = (0, import_internal46.space)();
      div4 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton20.$$.fragment);
      t34 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton21.$$.fragment);
      t35 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton22.$$.fragment);
      t36 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton23.$$.fragment);
      t37 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton24.$$.fragment);
      t38 = (0, import_internal46.space)();
      hr0 = (0, import_internal46.element)("hr");
      t39 = (0, import_internal46.space)();
      h31 = (0, import_internal46.element)("h3");
      h31.textContent = "Icon only buttons";
      t41 = (0, import_internal46.space)();
      h45 = (0, import_internal46.element)("h4");
      h45.textContent = "Default";
      t43 = (0, import_internal46.space)();
      div5 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton25.$$.fragment);
      t44 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton26.$$.fragment);
      t45 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton27.$$.fragment);
      t46 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton28.$$.fragment);
      t47 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton29.$$.fragment);
      t48 = (0, import_internal46.space)();
      hr1 = (0, import_internal46.element)("hr");
      t49 = (0, import_internal46.space)();
      h32 = (0, import_internal46.element)("h3");
      h32.textContent = "Icon only, and round";
      t51 = (0, import_internal46.space)();
      h46 = (0, import_internal46.element)("h4");
      h46.textContent = "Default";
      t53 = (0, import_internal46.space)();
      div6 = (0, import_internal46.element)("div");
      (0, import_internal46.create_component)(pushbutton30.$$.fragment);
      t54 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton31.$$.fragment);
      t55 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton32.$$.fragment);
      t56 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton33.$$.fragment);
      t57 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(pushbutton34.$$.fragment);
      t58 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(codeexample.$$.fragment);
      t59 = (0, import_internal46.space)();
      (0, import_internal46.create_component)(api.$$.fragment);
      (0, import_internal46.add_location)(h2, file40, 0, 0, 0);
      (0, import_internal46.add_location)(h30, file40, 2, 0, 22);
      (0, import_internal46.add_location)(h40, file40, 4, 0, 39);
      (0, import_internal46.attr_dev)(div0, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div0, file40, 5, 0, 56);
      (0, import_internal46.add_location)(h41, file40, 14, 0, 288);
      (0, import_internal46.attr_dev)(div1, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div1, file40, 15, 0, 305);
      (0, import_internal46.add_location)(h42, file40, 24, 0, 577);
      (0, import_internal46.attr_dev)(div2, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div2, file40, 25, 0, 595);
      (0, import_internal46.add_location)(h43, file40, 34, 0, 872);
      (0, import_internal46.attr_dev)(div3, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div3, file40, 35, 0, 891);
      (0, import_internal46.add_location)(h44, file40, 44, 0, 1185);
      (0, import_internal46.attr_dev)(div4, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div4, file40, 45, 0, 1202);
      (0, import_internal46.add_location)(hr0, file40, 54, 0, 1474);
      (0, import_internal46.add_location)(h31, file40, 55, 0, 1479);
      (0, import_internal46.add_location)(h45, file40, 57, 0, 1507);
      (0, import_internal46.attr_dev)(div5, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div5, file40, 58, 0, 1524);
      (0, import_internal46.add_location)(hr1, file40, 67, 0, 1790);
      (0, import_internal46.add_location)(h32, file40, 68, 0, 1795);
      (0, import_internal46.add_location)(h46, file40, 70, 0, 1826);
      (0, import_internal46.attr_dev)(div6, "class", "docs-buttons-row");
      (0, import_internal46.add_location)(div6, file40, 71, 0, 1843);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal46.insert_dev)(target, h2, anchor);
      (0, import_internal46.insert_dev)(target, t1, anchor);
      (0, import_internal46.insert_dev)(target, h30, anchor);
      (0, import_internal46.insert_dev)(target, t3, anchor);
      (0, import_internal46.insert_dev)(target, h40, anchor);
      (0, import_internal46.insert_dev)(target, t5, anchor);
      (0, import_internal46.insert_dev)(target, div0, anchor);
      (0, import_internal46.mount_component)(pushbutton0, div0, null);
      (0, import_internal46.append_dev)(div0, t6);
      (0, import_internal46.mount_component)(pushbutton1, div0, null);
      (0, import_internal46.append_dev)(div0, t7);
      (0, import_internal46.mount_component)(pushbutton2, div0, null);
      (0, import_internal46.append_dev)(div0, t8);
      (0, import_internal46.mount_component)(pushbutton3, div0, null);
      (0, import_internal46.append_dev)(div0, t9);
      (0, import_internal46.mount_component)(pushbutton4, div0, null);
      (0, import_internal46.insert_dev)(target, t10, anchor);
      (0, import_internal46.insert_dev)(target, h41, anchor);
      (0, import_internal46.insert_dev)(target, t12, anchor);
      (0, import_internal46.insert_dev)(target, div1, anchor);
      (0, import_internal46.mount_component)(pushbutton5, div1, null);
      (0, import_internal46.append_dev)(div1, t13);
      (0, import_internal46.mount_component)(pushbutton6, div1, null);
      (0, import_internal46.append_dev)(div1, t14);
      (0, import_internal46.mount_component)(pushbutton7, div1, null);
      (0, import_internal46.append_dev)(div1, t15);
      (0, import_internal46.mount_component)(pushbutton8, div1, null);
      (0, import_internal46.append_dev)(div1, t16);
      (0, import_internal46.mount_component)(pushbutton9, div1, null);
      (0, import_internal46.insert_dev)(target, t17, anchor);
      (0, import_internal46.insert_dev)(target, h42, anchor);
      (0, import_internal46.insert_dev)(target, t19, anchor);
      (0, import_internal46.insert_dev)(target, div2, anchor);
      (0, import_internal46.mount_component)(pushbutton10, div2, null);
      (0, import_internal46.append_dev)(div2, t20);
      (0, import_internal46.mount_component)(pushbutton11, div2, null);
      (0, import_internal46.append_dev)(div2, t21);
      (0, import_internal46.mount_component)(pushbutton12, div2, null);
      (0, import_internal46.append_dev)(div2, t22);
      (0, import_internal46.mount_component)(pushbutton13, div2, null);
      (0, import_internal46.append_dev)(div2, t23);
      (0, import_internal46.mount_component)(pushbutton14, div2, null);
      (0, import_internal46.insert_dev)(target, t24, anchor);
      (0, import_internal46.insert_dev)(target, h43, anchor);
      (0, import_internal46.insert_dev)(target, t26, anchor);
      (0, import_internal46.insert_dev)(target, div3, anchor);
      (0, import_internal46.mount_component)(pushbutton15, div3, null);
      (0, import_internal46.append_dev)(div3, t27);
      (0, import_internal46.mount_component)(pushbutton16, div3, null);
      (0, import_internal46.append_dev)(div3, t28);
      (0, import_internal46.mount_component)(pushbutton17, div3, null);
      (0, import_internal46.append_dev)(div3, t29);
      (0, import_internal46.mount_component)(pushbutton18, div3, null);
      (0, import_internal46.append_dev)(div3, t30);
      (0, import_internal46.mount_component)(pushbutton19, div3, null);
      (0, import_internal46.insert_dev)(target, t31, anchor);
      (0, import_internal46.insert_dev)(target, h44, anchor);
      (0, import_internal46.insert_dev)(target, t33, anchor);
      (0, import_internal46.insert_dev)(target, div4, anchor);
      (0, import_internal46.mount_component)(pushbutton20, div4, null);
      (0, import_internal46.append_dev)(div4, t34);
      (0, import_internal46.mount_component)(pushbutton21, div4, null);
      (0, import_internal46.append_dev)(div4, t35);
      (0, import_internal46.mount_component)(pushbutton22, div4, null);
      (0, import_internal46.append_dev)(div4, t36);
      (0, import_internal46.mount_component)(pushbutton23, div4, null);
      (0, import_internal46.append_dev)(div4, t37);
      (0, import_internal46.mount_component)(pushbutton24, div4, null);
      (0, import_internal46.insert_dev)(target, t38, anchor);
      (0, import_internal46.insert_dev)(target, hr0, anchor);
      (0, import_internal46.insert_dev)(target, t39, anchor);
      (0, import_internal46.insert_dev)(target, h31, anchor);
      (0, import_internal46.insert_dev)(target, t41, anchor);
      (0, import_internal46.insert_dev)(target, h45, anchor);
      (0, import_internal46.insert_dev)(target, t43, anchor);
      (0, import_internal46.insert_dev)(target, div5, anchor);
      (0, import_internal46.mount_component)(pushbutton25, div5, null);
      (0, import_internal46.append_dev)(div5, t44);
      (0, import_internal46.mount_component)(pushbutton26, div5, null);
      (0, import_internal46.append_dev)(div5, t45);
      (0, import_internal46.mount_component)(pushbutton27, div5, null);
      (0, import_internal46.append_dev)(div5, t46);
      (0, import_internal46.mount_component)(pushbutton28, div5, null);
      (0, import_internal46.append_dev)(div5, t47);
      (0, import_internal46.mount_component)(pushbutton29, div5, null);
      (0, import_internal46.insert_dev)(target, t48, anchor);
      (0, import_internal46.insert_dev)(target, hr1, anchor);
      (0, import_internal46.insert_dev)(target, t49, anchor);
      (0, import_internal46.insert_dev)(target, h32, anchor);
      (0, import_internal46.insert_dev)(target, t51, anchor);
      (0, import_internal46.insert_dev)(target, h46, anchor);
      (0, import_internal46.insert_dev)(target, t53, anchor);
      (0, import_internal46.insert_dev)(target, div6, anchor);
      (0, import_internal46.mount_component)(pushbutton30, div6, null);
      (0, import_internal46.append_dev)(div6, t54);
      (0, import_internal46.mount_component)(pushbutton31, div6, null);
      (0, import_internal46.append_dev)(div6, t55);
      (0, import_internal46.mount_component)(pushbutton32, div6, null);
      (0, import_internal46.append_dev)(div6, t56);
      (0, import_internal46.mount_component)(pushbutton33, div6, null);
      (0, import_internal46.append_dev)(div6, t57);
      (0, import_internal46.mount_component)(pushbutton34, div6, null);
      (0, import_internal46.insert_dev)(target, t58, anchor);
      (0, import_internal46.mount_component)(codeexample, target, anchor);
      (0, import_internal46.insert_dev)(target, t59, anchor);
      (0, import_internal46.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const pushbutton0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton0.$set(pushbutton0_changes);
      const pushbutton1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton1.$set(pushbutton1_changes);
      const pushbutton2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton2.$set(pushbutton2_changes);
      const pushbutton3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton3.$set(pushbutton3_changes);
      const pushbutton4_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton4.$set(pushbutton4_changes);
      const pushbutton5_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton5.$set(pushbutton5_changes);
      const pushbutton6_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton6.$set(pushbutton6_changes);
      const pushbutton7_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton7.$set(pushbutton7_changes);
      const pushbutton8_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton8.$set(pushbutton8_changes);
      const pushbutton9_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton9.$set(pushbutton9_changes);
      const pushbutton10_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton10.$set(pushbutton10_changes);
      const pushbutton11_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton11_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton11.$set(pushbutton11_changes);
      const pushbutton12_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton12_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton12.$set(pushbutton12_changes);
      const pushbutton13_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton13_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton13.$set(pushbutton13_changes);
      const pushbutton14_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton14_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton14.$set(pushbutton14_changes);
      const pushbutton15_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton15_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton15.$set(pushbutton15_changes);
      const pushbutton16_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton16_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton16.$set(pushbutton16_changes);
      const pushbutton17_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton17_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton17.$set(pushbutton17_changes);
      const pushbutton18_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton18_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton18.$set(pushbutton18_changes);
      const pushbutton19_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton19_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton19.$set(pushbutton19_changes);
      const pushbutton20_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton20_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton20.$set(pushbutton20_changes);
      const pushbutton21_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton21_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton21.$set(pushbutton21_changes);
      const pushbutton22_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton22_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton22.$set(pushbutton22_changes);
      const pushbutton23_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton23_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton23.$set(pushbutton23_changes);
      const pushbutton24_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton24_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton24.$set(pushbutton24_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal46.transition_in)(pushbutton0.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton1.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton2.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton3.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton4.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton5.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton6.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton7.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton8.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton9.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton10.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton11.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton12.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton13.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton14.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton15.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton16.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton17.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton18.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton19.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton20.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton21.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton22.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton23.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton24.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton25.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton26.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton27.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton28.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton29.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton30.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton31.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton32.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton33.$$.fragment, local);
      (0, import_internal46.transition_in)(pushbutton34.$$.fragment, local);
      (0, import_internal46.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal46.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal46.transition_out)(pushbutton0.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton1.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton2.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton3.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton4.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton5.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton6.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton7.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton8.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton9.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton10.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton11.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton12.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton13.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton14.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton15.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton16.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton17.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton18.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton19.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton20.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton21.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton22.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton23.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton24.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton25.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton26.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton27.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton28.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton29.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton30.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton31.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton32.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton33.$$.fragment, local);
      (0, import_internal46.transition_out)(pushbutton34.$$.fragment, local);
      (0, import_internal46.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal46.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal46.detach_dev)(h2);
      if (detaching)
        (0, import_internal46.detach_dev)(t1);
      if (detaching)
        (0, import_internal46.detach_dev)(h30);
      if (detaching)
        (0, import_internal46.detach_dev)(t3);
      if (detaching)
        (0, import_internal46.detach_dev)(h40);
      if (detaching)
        (0, import_internal46.detach_dev)(t5);
      if (detaching)
        (0, import_internal46.detach_dev)(div0);
      (0, import_internal46.destroy_component)(pushbutton0);
      (0, import_internal46.destroy_component)(pushbutton1);
      (0, import_internal46.destroy_component)(pushbutton2);
      (0, import_internal46.destroy_component)(pushbutton3);
      (0, import_internal46.destroy_component)(pushbutton4);
      if (detaching)
        (0, import_internal46.detach_dev)(t10);
      if (detaching)
        (0, import_internal46.detach_dev)(h41);
      if (detaching)
        (0, import_internal46.detach_dev)(t12);
      if (detaching)
        (0, import_internal46.detach_dev)(div1);
      (0, import_internal46.destroy_component)(pushbutton5);
      (0, import_internal46.destroy_component)(pushbutton6);
      (0, import_internal46.destroy_component)(pushbutton7);
      (0, import_internal46.destroy_component)(pushbutton8);
      (0, import_internal46.destroy_component)(pushbutton9);
      if (detaching)
        (0, import_internal46.detach_dev)(t17);
      if (detaching)
        (0, import_internal46.detach_dev)(h42);
      if (detaching)
        (0, import_internal46.detach_dev)(t19);
      if (detaching)
        (0, import_internal46.detach_dev)(div2);
      (0, import_internal46.destroy_component)(pushbutton10);
      (0, import_internal46.destroy_component)(pushbutton11);
      (0, import_internal46.destroy_component)(pushbutton12);
      (0, import_internal46.destroy_component)(pushbutton13);
      (0, import_internal46.destroy_component)(pushbutton14);
      if (detaching)
        (0, import_internal46.detach_dev)(t24);
      if (detaching)
        (0, import_internal46.detach_dev)(h43);
      if (detaching)
        (0, import_internal46.detach_dev)(t26);
      if (detaching)
        (0, import_internal46.detach_dev)(div3);
      (0, import_internal46.destroy_component)(pushbutton15);
      (0, import_internal46.destroy_component)(pushbutton16);
      (0, import_internal46.destroy_component)(pushbutton17);
      (0, import_internal46.destroy_component)(pushbutton18);
      (0, import_internal46.destroy_component)(pushbutton19);
      if (detaching)
        (0, import_internal46.detach_dev)(t31);
      if (detaching)
        (0, import_internal46.detach_dev)(h44);
      if (detaching)
        (0, import_internal46.detach_dev)(t33);
      if (detaching)
        (0, import_internal46.detach_dev)(div4);
      (0, import_internal46.destroy_component)(pushbutton20);
      (0, import_internal46.destroy_component)(pushbutton21);
      (0, import_internal46.destroy_component)(pushbutton22);
      (0, import_internal46.destroy_component)(pushbutton23);
      (0, import_internal46.destroy_component)(pushbutton24);
      if (detaching)
        (0, import_internal46.detach_dev)(t38);
      if (detaching)
        (0, import_internal46.detach_dev)(hr0);
      if (detaching)
        (0, import_internal46.detach_dev)(t39);
      if (detaching)
        (0, import_internal46.detach_dev)(h31);
      if (detaching)
        (0, import_internal46.detach_dev)(t41);
      if (detaching)
        (0, import_internal46.detach_dev)(h45);
      if (detaching)
        (0, import_internal46.detach_dev)(t43);
      if (detaching)
        (0, import_internal46.detach_dev)(div5);
      (0, import_internal46.destroy_component)(pushbutton25);
      (0, import_internal46.destroy_component)(pushbutton26);
      (0, import_internal46.destroy_component)(pushbutton27);
      (0, import_internal46.destroy_component)(pushbutton28);
      (0, import_internal46.destroy_component)(pushbutton29);
      if (detaching)
        (0, import_internal46.detach_dev)(t48);
      if (detaching)
        (0, import_internal46.detach_dev)(hr1);
      if (detaching)
        (0, import_internal46.detach_dev)(t49);
      if (detaching)
        (0, import_internal46.detach_dev)(h32);
      if (detaching)
        (0, import_internal46.detach_dev)(t51);
      if (detaching)
        (0, import_internal46.detach_dev)(h46);
      if (detaching)
        (0, import_internal46.detach_dev)(t53);
      if (detaching)
        (0, import_internal46.detach_dev)(div6);
      (0, import_internal46.destroy_component)(pushbutton30);
      (0, import_internal46.destroy_component)(pushbutton31);
      (0, import_internal46.destroy_component)(pushbutton32);
      (0, import_internal46.destroy_component)(pushbutton33);
      (0, import_internal46.destroy_component)(pushbutton34);
      if (detaching)
        (0, import_internal46.detach_dev)(t58);
      (0, import_internal46.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal46.detach_dev)(t59);
      (0, import_internal46.destroy_component)(api, detaching);
    }
  };
  (0, import_internal46.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment46.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance46($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal46.validate_slots)("PushButton", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "danger",
      description: "Button type: danger"
    },
    {
      name: "disabled",
      description: "Makes the button <i>disabled</i>"
    },
    {
      name: "icon",
      type: "string",
      description: 'Adds an icon, with this name, to the button (see <a href="#Icon">icons</a> section for icon names)'
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying button"
    },
    {
      name: "outline",
      description: "Button style: outline"
    },
    {
      name: "pressed",
      type: ["true", "false"],
      default: "false",
      description: "Initial <i>pressed</i> state of the button."
    },
    {
      name: "round",
      description: "Makes the button round"
    },
    {
      name: "submit",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> button type is set to <i>submit</i>, otherwise it's <i>button</i>"
    },
    {
      name: "success",
      description: "Button type: success"
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying button"
    },
    {
      name: "warning",
      description: "Button type: warning"
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:click",
      type: "function",
      description: "Triggered when the button is clicked."
    }
  ];
  const exampleHtml = `
<PushButton round icon="info" on:change="{onChange}"></PushButton>

<script>
function onChange (e) {
    const { pressed } = e.detail;
    console.log('is pressed:', pressed);
}
&lt;/script>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<PushButton> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    PushButton: PushButton_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml
  });
  return [apiProps, exampleHtml];
}
var PushButton_1 = class extends import_internal46.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal46.init)(this, options, instance46, create_fragment46, import_internal46.safe_not_equal, {});
    (0, import_internal46.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "PushButton_1",
      options,
      id: create_fragment46.name
    });
  }
};
var PushButton_default2 = PushButton_1;

// docs-src/components/button-group/ButtonGroup.svelte
var import_internal47 = __toESM(require_internal());
var file41 = "docs-src/components/button-group/ButtonGroup.svelte";
function create_default_slot_44(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_44.name,
    type: "slot",
    source: "(6:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_43(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Disabled");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_43.name,
    type: "slot",
    source: "(7:1) <Button disabled>",
    ctx
  });
  return block;
}
function create_default_slot_42(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_42.name,
    type: "slot",
    source: "(8:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_41(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Four");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_41.name,
    type: "slot",
    source: "(9:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_40(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let t2;
  let button3;
  let current;
  button0 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_44] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      disabled: true,
      $$slots: { default: [create_default_slot_43] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_42] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_41] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
      t2 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button3.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      (0, import_internal47.insert_dev)(target, t2, anchor);
      (0, import_internal47.mount_component)(button3, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      (0, import_internal47.transition_in)(button3.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      (0, import_internal47.transition_out)(button3.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t2);
      (0, import_internal47.destroy_component)(button3, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_40.name,
    type: "slot",
    source: "(5:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_39(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_39.name,
    type: "slot",
    source: "(15:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_38(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Disabled");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_38.name,
    type: "slot",
    source: "(16:2) <Button disabled>",
    ctx
  });
  return block;
}
function create_default_slot_37(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_37.name,
    type: "slot",
    source: "(17:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_36(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Four");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_36.name,
    type: "slot",
    source: "(18:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_35(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Five");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_35.name,
    type: "slot",
    source: "(19:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_34(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Six");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_34.name,
    type: "slot",
    source: "(20:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_33(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Seven");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_33.name,
    type: "slot",
    source: "(21:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_322(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Eight");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_322.name,
    type: "slot",
    source: "(22:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_31(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Nine");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_31.name,
    type: "slot",
    source: "(23:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_30(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Ten");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_30.name,
    type: "slot",
    source: "(24:2) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_29(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let t2;
  let button3;
  let t3;
  let button4;
  let t4;
  let button5;
  let t5;
  let button6;
  let t6;
  let button7;
  let t7;
  let button8;
  let t8;
  let button9;
  let current;
  button0 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_39] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      disabled: true,
      $$slots: { default: [create_default_slot_38] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_37] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_36] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button4 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_35] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button5 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_34] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button6 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_33] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button7 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_322] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button8 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_31] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button9 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_30] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
      t2 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button3.$$.fragment);
      t3 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button4.$$.fragment);
      t4 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button5.$$.fragment);
      t5 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button6.$$.fragment);
      t6 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button7.$$.fragment);
      t7 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button8.$$.fragment);
      t8 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button9.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      (0, import_internal47.insert_dev)(target, t2, anchor);
      (0, import_internal47.mount_component)(button3, target, anchor);
      (0, import_internal47.insert_dev)(target, t3, anchor);
      (0, import_internal47.mount_component)(button4, target, anchor);
      (0, import_internal47.insert_dev)(target, t4, anchor);
      (0, import_internal47.mount_component)(button5, target, anchor);
      (0, import_internal47.insert_dev)(target, t5, anchor);
      (0, import_internal47.mount_component)(button6, target, anchor);
      (0, import_internal47.insert_dev)(target, t6, anchor);
      (0, import_internal47.mount_component)(button7, target, anchor);
      (0, import_internal47.insert_dev)(target, t7, anchor);
      (0, import_internal47.mount_component)(button8, target, anchor);
      (0, import_internal47.insert_dev)(target, t8, anchor);
      (0, import_internal47.mount_component)(button9, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
      const button4_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button4.$set(button4_changes);
      const button5_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button5.$set(button5_changes);
      const button6_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button6.$set(button6_changes);
      const button7_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button7.$set(button7_changes);
      const button8_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button8.$set(button8_changes);
      const button9_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button9.$set(button9_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      (0, import_internal47.transition_in)(button3.$$.fragment, local);
      (0, import_internal47.transition_in)(button4.$$.fragment, local);
      (0, import_internal47.transition_in)(button5.$$.fragment, local);
      (0, import_internal47.transition_in)(button6.$$.fragment, local);
      (0, import_internal47.transition_in)(button7.$$.fragment, local);
      (0, import_internal47.transition_in)(button8.$$.fragment, local);
      (0, import_internal47.transition_in)(button9.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      (0, import_internal47.transition_out)(button3.$$.fragment, local);
      (0, import_internal47.transition_out)(button4.$$.fragment, local);
      (0, import_internal47.transition_out)(button5.$$.fragment, local);
      (0, import_internal47.transition_out)(button6.$$.fragment, local);
      (0, import_internal47.transition_out)(button7.$$.fragment, local);
      (0, import_internal47.transition_out)(button8.$$.fragment, local);
      (0, import_internal47.transition_out)(button9.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t2);
      (0, import_internal47.destroy_component)(button3, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t3);
      (0, import_internal47.destroy_component)(button4, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t4);
      (0, import_internal47.destroy_component)(button5, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t5);
      (0, import_internal47.destroy_component)(button6, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t6);
      (0, import_internal47.destroy_component)(button7, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t7);
      (0, import_internal47.destroy_component)(button8, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t8);
      (0, import_internal47.destroy_component)(button9, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_29.name,
    type: "slot",
    source: "(14:1) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_28(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_28.name,
    type: "slot",
    source: "(30:1) <Button info>",
    ctx
  });
  return block;
}
function create_default_slot_27(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Disabled");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_27.name,
    type: "slot",
    source: "(31:1) <Button success disabled>",
    ctx
  });
  return block;
}
function create_default_slot_26(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_26.name,
    type: "slot",
    source: "(32:1) <Button warning>",
    ctx
  });
  return block;
}
function create_default_slot_252(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Four");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_252.name,
    type: "slot",
    source: "(33:1) <Button danger>",
    ctx
  });
  return block;
}
function create_default_slot_242(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let t2;
  let button3;
  let current;
  button0 = new Button_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot_28] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      success: true,
      disabled: true,
      $$slots: { default: [create_default_slot_27] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      warning: true,
      $$slots: { default: [create_default_slot_26] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3 = new Button_default({
    props: {
      danger: true,
      $$slots: { default: [create_default_slot_252] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
      t2 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button3.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      (0, import_internal47.insert_dev)(target, t2, anchor);
      (0, import_internal47.mount_component)(button3, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      (0, import_internal47.transition_in)(button3.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      (0, import_internal47.transition_out)(button3.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t2);
      (0, import_internal47.destroy_component)(button3, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_242.name,
    type: "slot",
    source: "(29:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_232(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_232.name,
    type: "slot",
    source: "(38:1) <Button outline>",
    ctx
  });
  return block;
}
function create_default_slot_222(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Two");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_222.name,
    type: "slot",
    source: "(39:1) <Button outline>",
    ctx
  });
  return block;
}
function create_default_slot_212(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Disabled");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_212.name,
    type: "slot",
    source: "(40:1) <Button outline disabled>",
    ctx
  });
  return block;
}
function create_default_slot_202(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Four");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_202.name,
    type: "slot",
    source: "(41:1) <Button outline>",
    ctx
  });
  return block;
}
function create_default_slot_192(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let t2;
  let button3;
  let current;
  button0 = new Button_default({
    props: {
      outline: true,
      $$slots: { default: [create_default_slot_232] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      outline: true,
      $$slots: { default: [create_default_slot_222] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      outline: true,
      disabled: true,
      $$slots: { default: [create_default_slot_212] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3 = new Button_default({
    props: {
      outline: true,
      $$slots: { default: [create_default_slot_202] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
      t2 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button3.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      (0, import_internal47.insert_dev)(target, t2, anchor);
      (0, import_internal47.mount_component)(button3, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      (0, import_internal47.transition_in)(button3.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      (0, import_internal47.transition_out)(button3.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t2);
      (0, import_internal47.destroy_component)(button3, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_192.name,
    type: "slot",
    source: "(37:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_182(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_182.name,
    type: "slot",
    source: "(47:1) <Button text>",
    ctx
  });
  return block;
}
function create_default_slot_172(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Disabled");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_172.name,
    type: "slot",
    source: "(48:1) <Button text disabled>",
    ctx
  });
  return block;
}
function create_default_slot_162(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_162.name,
    type: "slot",
    source: "(49:1) <Button text>",
    ctx
  });
  return block;
}
function create_default_slot_152(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Four");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_152.name,
    type: "slot",
    source: "(50:1) <Button text>",
    ctx
  });
  return block;
}
function create_default_slot_142(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let t2;
  let button3;
  let current;
  button0 = new Button_default({
    props: {
      text: true,
      $$slots: { default: [create_default_slot_182] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      text: true,
      disabled: true,
      $$slots: { default: [create_default_slot_172] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      text: true,
      $$slots: { default: [create_default_slot_162] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3 = new Button_default({
    props: {
      text: true,
      $$slots: { default: [create_default_slot_152] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
      t2 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button3.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      (0, import_internal47.insert_dev)(target, t2, anchor);
      (0, import_internal47.mount_component)(button3, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      (0, import_internal47.transition_in)(button3.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      (0, import_internal47.transition_out)(button3.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t2);
      (0, import_internal47.destroy_component)(button3, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_142.name,
    type: "slot",
    source: "(46:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_132(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_132.name,
    type: "slot",
    source: "(56:1) <PushButton>",
    ctx
  });
  return block;
}
function create_default_slot_122(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Two");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_122.name,
    type: "slot",
    source: "(57:1) <PushButton>",
    ctx
  });
  return block;
}
function create_default_slot_112(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_112.name,
    type: "slot",
    source: "(58:1) <PushButton>",
    ctx
  });
  return block;
}
function create_default_slot_102(ctx) {
  let pushbutton0;
  let t0;
  let pushbutton1;
  let t1;
  let pushbutton2;
  let current;
  pushbutton0 = new PushButton_default({
    props: {
      $$slots: { default: [create_default_slot_132] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton1 = new PushButton_default({
    props: {
      $$slots: { default: [create_default_slot_122] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  pushbutton2 = new PushButton_default({
    props: {
      $$slots: { default: [create_default_slot_112] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(pushbutton0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(pushbutton1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(pushbutton2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(pushbutton0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(pushbutton1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(pushbutton2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const pushbutton0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton0.$set(pushbutton0_changes);
      const pushbutton1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton1.$set(pushbutton1_changes);
      const pushbutton2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        pushbutton2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      pushbutton2.$set(pushbutton2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(pushbutton0.$$.fragment, local);
      (0, import_internal47.transition_in)(pushbutton1.$$.fragment, local);
      (0, import_internal47.transition_in)(pushbutton2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(pushbutton0.$$.fragment, local);
      (0, import_internal47.transition_out)(pushbutton1.$$.fragment, local);
      (0, import_internal47.transition_out)(pushbutton2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(pushbutton0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(pushbutton1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(pushbutton2, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_102.name,
    type: "slot",
    source: "(55:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_92(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_92.name,
    type: "slot",
    source: "(64:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_82(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Two");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_82.name,
    type: "slot",
    source: "(65:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_72(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_72.name,
    type: "slot",
    source: "(66:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot_62(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let current;
  button0 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_92] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_82] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_72] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_62.name,
    type: "slot",
    source: "(63:0) <ButtonGroup round>",
    ctx
  });
  return block;
}
function create_default_slot_52(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("One");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_52.name,
    type: "slot",
    source: '(72:1) <Button icon=\\"info\\">',
    ctx
  });
  return block;
}
function create_default_slot_45(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Two");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_45.name,
    type: "slot",
    source: '(73:1) <Button icon=\\"check\\">',
    ctx
  });
  return block;
}
function create_default_slot_310(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal47.text)("Three");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(t);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_310.name,
    type: "slot",
    source: '(74:1) <Button icon=\\"alert\\">',
    ctx
  });
  return block;
}
function create_default_slot_210(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let current;
  button0 = new Button_default({
    props: {
      icon: "info",
      $$slots: { default: [create_default_slot_52] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1 = new Button_default({
    props: {
      icon: "check",
      $$slots: { default: [create_default_slot_45] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2 = new Button_default({
    props: {
      icon: "alert",
      $$slots: { default: [create_default_slot_310] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_210.name,
    type: "slot",
    source: "(71:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot_111(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let current;
  button0 = new Button_default({ props: { icon: "info" }, $$inline: true });
  button1 = new Button_default({ props: { icon: "check" }, $$inline: true });
  button2 = new Button_default({ props: { icon: "alert" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      current = true;
    },
    p: import_internal47.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_111.name,
    type: "slot",
    source: "(79:0) <ButtonGroup>",
    ctx
  });
  return block;
}
function create_default_slot7(ctx) {
  let button0;
  let t0;
  let button1;
  let t1;
  let button2;
  let current;
  button0 = new Button_default({ props: { icon: "info" }, $$inline: true });
  button1 = new Button_default({ props: { icon: "check" }, $$inline: true });
  button2 = new Button_default({ props: { icon: "alert" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal47.create_component)(button0.$$.fragment);
      t0 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button1.$$.fragment);
      t1 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(button2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal47.mount_component)(button0, target, anchor);
      (0, import_internal47.insert_dev)(target, t0, anchor);
      (0, import_internal47.mount_component)(button1, target, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.mount_component)(button2, target, anchor);
      current = true;
    },
    p: import_internal47.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(button0.$$.fragment, local);
      (0, import_internal47.transition_in)(button1.$$.fragment, local);
      (0, import_internal47.transition_in)(button2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(button0.$$.fragment, local);
      (0, import_internal47.transition_out)(button1.$$.fragment, local);
      (0, import_internal47.transition_out)(button2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal47.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t0);
      (0, import_internal47.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      (0, import_internal47.destroy_component)(button2, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot7.name,
    type: "slot",
    source: "(87:0) <ButtonGroup round>",
    ctx
  });
  return block;
}
function create_fragment47(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let buttongroup0;
  let t4;
  let h31;
  let t6;
  let div;
  let buttongroup1;
  let t7;
  let h32;
  let t9;
  let buttongroup2;
  let t10;
  let h33;
  let t12;
  let buttongroup3;
  let t13;
  let h34;
  let t15;
  let buttongroup4;
  let t16;
  let h35;
  let t18;
  let buttongroup5;
  let t19;
  let h36;
  let t21;
  let buttongroup6;
  let t22;
  let h37;
  let t24;
  let buttongroup7;
  let t25;
  let h38;
  let t27;
  let buttongroup8;
  let t28;
  let h39;
  let t30;
  let buttongroup9;
  let t31;
  let codeexample;
  let t32;
  let api;
  let current;
  buttongroup0 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_40] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup1 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_29] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup2 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_242] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup3 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_192] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup4 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_142] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup5 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_102] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup6 = new ButtonGroup_default({
    props: {
      round: true,
      $$slots: { default: [create_default_slot_62] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup7 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_210] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup8 = new ButtonGroup_default({
    props: {
      $$slots: { default: [create_default_slot_111] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  buttongroup9 = new ButtonGroup_default({
    props: {
      round: true,
      $$slots: { default: [create_default_slot7] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal47.element)("h2");
      h2.textContent = "Button Group";
      t1 = (0, import_internal47.space)();
      h30 = (0, import_internal47.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup0.$$.fragment);
      t4 = (0, import_internal47.space)();
      h31 = (0, import_internal47.element)("h3");
      h31.textContent = "Long";
      t6 = (0, import_internal47.space)();
      div = (0, import_internal47.element)("div");
      (0, import_internal47.create_component)(buttongroup1.$$.fragment);
      t7 = (0, import_internal47.space)();
      h32 = (0, import_internal47.element)("h3");
      h32.textContent = "Normal, info, success, warning, danger";
      t9 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup2.$$.fragment);
      t10 = (0, import_internal47.space)();
      h33 = (0, import_internal47.element)("h3");
      h33.textContent = "Outline Buttons";
      t12 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup3.$$.fragment);
      t13 = (0, import_internal47.space)();
      h34 = (0, import_internal47.element)("h3");
      h34.textContent = "Text Buttons";
      t15 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup4.$$.fragment);
      t16 = (0, import_internal47.space)();
      h35 = (0, import_internal47.element)("h3");
      h35.textContent = "Push Buttons";
      t18 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup5.$$.fragment);
      t19 = (0, import_internal47.space)();
      h36 = (0, import_internal47.element)("h3");
      h36.textContent = "Round";
      t21 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup6.$$.fragment);
      t22 = (0, import_internal47.space)();
      h37 = (0, import_internal47.element)("h3");
      h37.textContent = "With icons";
      t24 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup7.$$.fragment);
      t25 = (0, import_internal47.space)();
      h38 = (0, import_internal47.element)("h3");
      h38.textContent = "Icons only";
      t27 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup8.$$.fragment);
      t28 = (0, import_internal47.space)();
      h39 = (0, import_internal47.element)("h3");
      h39.textContent = "Icons only, and round";
      t30 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(buttongroup9.$$.fragment);
      t31 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(codeexample.$$.fragment);
      t32 = (0, import_internal47.space)();
      (0, import_internal47.create_component)(api.$$.fragment);
      (0, import_internal47.add_location)(h2, file41, 0, 0, 0);
      (0, import_internal47.add_location)(h30, file41, 3, 0, 24);
      (0, import_internal47.add_location)(h31, file41, 11, 0, 175);
      (0, import_internal47.set_style)(div, "width", "400px");
      (0, import_internal47.set_style)(div, "max-width", "100%");
      (0, import_internal47.add_location)(div, file41, 12, 0, 189);
      (0, import_internal47.add_location)(h32, file41, 27, 0, 525);
      (0, import_internal47.add_location)(h33, file41, 35, 0, 736);
      (0, import_internal47.add_location)(h34, file41, 44, 0, 927);
      (0, import_internal47.add_location)(h35, file41, 53, 0, 1105);
      (0, import_internal47.add_location)(h36, file41, 61, 0, 1250);
      (0, import_internal47.add_location)(h37, file41, 69, 0, 1370);
      (0, import_internal47.add_location)(h38, file41, 77, 0, 1527);
      (0, import_internal47.add_location)(h39, file41, 85, 0, 1673);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal47.insert_dev)(target, h2, anchor);
      (0, import_internal47.insert_dev)(target, t1, anchor);
      (0, import_internal47.insert_dev)(target, h30, anchor);
      (0, import_internal47.insert_dev)(target, t3, anchor);
      (0, import_internal47.mount_component)(buttongroup0, target, anchor);
      (0, import_internal47.insert_dev)(target, t4, anchor);
      (0, import_internal47.insert_dev)(target, h31, anchor);
      (0, import_internal47.insert_dev)(target, t6, anchor);
      (0, import_internal47.insert_dev)(target, div, anchor);
      (0, import_internal47.mount_component)(buttongroup1, div, null);
      (0, import_internal47.insert_dev)(target, t7, anchor);
      (0, import_internal47.insert_dev)(target, h32, anchor);
      (0, import_internal47.insert_dev)(target, t9, anchor);
      (0, import_internal47.mount_component)(buttongroup2, target, anchor);
      (0, import_internal47.insert_dev)(target, t10, anchor);
      (0, import_internal47.insert_dev)(target, h33, anchor);
      (0, import_internal47.insert_dev)(target, t12, anchor);
      (0, import_internal47.mount_component)(buttongroup3, target, anchor);
      (0, import_internal47.insert_dev)(target, t13, anchor);
      (0, import_internal47.insert_dev)(target, h34, anchor);
      (0, import_internal47.insert_dev)(target, t15, anchor);
      (0, import_internal47.mount_component)(buttongroup4, target, anchor);
      (0, import_internal47.insert_dev)(target, t16, anchor);
      (0, import_internal47.insert_dev)(target, h35, anchor);
      (0, import_internal47.insert_dev)(target, t18, anchor);
      (0, import_internal47.mount_component)(buttongroup5, target, anchor);
      (0, import_internal47.insert_dev)(target, t19, anchor);
      (0, import_internal47.insert_dev)(target, h36, anchor);
      (0, import_internal47.insert_dev)(target, t21, anchor);
      (0, import_internal47.mount_component)(buttongroup6, target, anchor);
      (0, import_internal47.insert_dev)(target, t22, anchor);
      (0, import_internal47.insert_dev)(target, h37, anchor);
      (0, import_internal47.insert_dev)(target, t24, anchor);
      (0, import_internal47.mount_component)(buttongroup7, target, anchor);
      (0, import_internal47.insert_dev)(target, t25, anchor);
      (0, import_internal47.insert_dev)(target, h38, anchor);
      (0, import_internal47.insert_dev)(target, t27, anchor);
      (0, import_internal47.mount_component)(buttongroup8, target, anchor);
      (0, import_internal47.insert_dev)(target, t28, anchor);
      (0, import_internal47.insert_dev)(target, h39, anchor);
      (0, import_internal47.insert_dev)(target, t30, anchor);
      (0, import_internal47.mount_component)(buttongroup9, target, anchor);
      (0, import_internal47.insert_dev)(target, t31, anchor);
      (0, import_internal47.mount_component)(codeexample, target, anchor);
      (0, import_internal47.insert_dev)(target, t32, anchor);
      (0, import_internal47.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const buttongroup0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup0.$set(buttongroup0_changes);
      const buttongroup1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup1.$set(buttongroup1_changes);
      const buttongroup2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup2.$set(buttongroup2_changes);
      const buttongroup3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup3.$set(buttongroup3_changes);
      const buttongroup4_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup4.$set(buttongroup4_changes);
      const buttongroup5_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup5.$set(buttongroup5_changes);
      const buttongroup6_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup6.$set(buttongroup6_changes);
      const buttongroup7_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup7.$set(buttongroup7_changes);
      const buttongroup8_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup8.$set(buttongroup8_changes);
      const buttongroup9_changes = {};
      if (dirty & /*$$scope*/
      4) {
        buttongroup9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      buttongroup9.$set(buttongroup9_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal47.transition_in)(buttongroup0.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup1.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup2.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup3.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup4.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup5.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup6.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup7.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup8.$$.fragment, local);
      (0, import_internal47.transition_in)(buttongroup9.$$.fragment, local);
      (0, import_internal47.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal47.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal47.transition_out)(buttongroup0.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup1.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup2.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup3.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup4.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup5.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup6.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup7.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup8.$$.fragment, local);
      (0, import_internal47.transition_out)(buttongroup9.$$.fragment, local);
      (0, import_internal47.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal47.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal47.detach_dev)(h2);
      if (detaching)
        (0, import_internal47.detach_dev)(t1);
      if (detaching)
        (0, import_internal47.detach_dev)(h30);
      if (detaching)
        (0, import_internal47.detach_dev)(t3);
      (0, import_internal47.destroy_component)(buttongroup0, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t4);
      if (detaching)
        (0, import_internal47.detach_dev)(h31);
      if (detaching)
        (0, import_internal47.detach_dev)(t6);
      if (detaching)
        (0, import_internal47.detach_dev)(div);
      (0, import_internal47.destroy_component)(buttongroup1);
      if (detaching)
        (0, import_internal47.detach_dev)(t7);
      if (detaching)
        (0, import_internal47.detach_dev)(h32);
      if (detaching)
        (0, import_internal47.detach_dev)(t9);
      (0, import_internal47.destroy_component)(buttongroup2, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t10);
      if (detaching)
        (0, import_internal47.detach_dev)(h33);
      if (detaching)
        (0, import_internal47.detach_dev)(t12);
      (0, import_internal47.destroy_component)(buttongroup3, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t13);
      if (detaching)
        (0, import_internal47.detach_dev)(h34);
      if (detaching)
        (0, import_internal47.detach_dev)(t15);
      (0, import_internal47.destroy_component)(buttongroup4, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t16);
      if (detaching)
        (0, import_internal47.detach_dev)(h35);
      if (detaching)
        (0, import_internal47.detach_dev)(t18);
      (0, import_internal47.destroy_component)(buttongroup5, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t19);
      if (detaching)
        (0, import_internal47.detach_dev)(h36);
      if (detaching)
        (0, import_internal47.detach_dev)(t21);
      (0, import_internal47.destroy_component)(buttongroup6, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t22);
      if (detaching)
        (0, import_internal47.detach_dev)(h37);
      if (detaching)
        (0, import_internal47.detach_dev)(t24);
      (0, import_internal47.destroy_component)(buttongroup7, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t25);
      if (detaching)
        (0, import_internal47.detach_dev)(h38);
      if (detaching)
        (0, import_internal47.detach_dev)(t27);
      (0, import_internal47.destroy_component)(buttongroup8, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t28);
      if (detaching)
        (0, import_internal47.detach_dev)(h39);
      if (detaching)
        (0, import_internal47.detach_dev)(t30);
      (0, import_internal47.destroy_component)(buttongroup9, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t31);
      (0, import_internal47.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal47.detach_dev)(t32);
      (0, import_internal47.destroy_component)(api, detaching);
    }
  };
  (0, import_internal47.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment47.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance47($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal47.validate_slots)("ButtonGroup", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "round",
      description: "Makes the buttons, on both sides of the group, round."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    }
  ];
  const exampleHtml = `
<ButtonGroup>
    <Button>One</Button>
    <Button>Two</Button>
    <Button>Three</Button>
</ButtonGroup>

<script>
function onChange (e) {
    const { value, oldValue } = e.detail;
    console.log({ value, oldValue });
}
&lt;/script>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ButtonGroup> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    ButtonGroup: ButtonGroup_default,
    Button: Button_default,
    PushButton: PushButton_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml
  });
  return [apiProps, exampleHtml];
}
var ButtonGroup_1 = class extends import_internal47.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal47.init)(this, options, instance47, create_fragment47, import_internal47.safe_not_equal, {});
    (0, import_internal47.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ButtonGroup_1",
      options,
      id: create_fragment47.name
    });
  }
};
var ButtonGroup_default2 = ButtonGroup_1;

// docs-src/components/button-toggle/ButtonToggle.svelte
var import_internal48 = __toESM(require_internal());
var { console: console_12 } = import_internal48.globals;
var file42 = "docs-src/components/button-toggle/ButtonToggle.svelte";
function create_fragment48(ctx) {
  let h2;
  let t1;
  let p;
  let t3;
  let h30;
  let t5;
  let buttontoggle0;
  let t6;
  let h31;
  let t8;
  let div0;
  let buttontoggle1;
  let t9;
  let h32;
  let t11;
  let div1;
  let buttontoggle2;
  let t12;
  let br0;
  let br1;
  let t13;
  let h40;
  let t15;
  let buttontoggle3;
  let br2;
  let br3;
  let t16;
  let h41;
  let t18;
  let buttontoggle4;
  let br4;
  let br5;
  let t19;
  let h42;
  let t21;
  let buttontoggle5;
  let br6;
  let br7;
  let t22;
  let h33;
  let t24;
  let buttontoggle6;
  let br8;
  let br9;
  let t25;
  let h34;
  let t27;
  let buttontoggle7;
  let br10;
  let br11;
  let t28;
  let h35;
  let t29;
  let em0;
  let t31;
  let buttontoggle8;
  let br12;
  let br13;
  let t32;
  let h36;
  let t34;
  let buttontoggle9;
  let t35;
  let h37;
  let t37;
  let buttontoggle10;
  let t38;
  let h38;
  let t40;
  let buttontoggle11;
  let t41;
  let codeexample0;
  let t42;
  let em1;
  let t44;
  let i0;
  let t46;
  let i1;
  let t48;
  let i2;
  let t50;
  let i3;
  let t52;
  let codeexample1;
  let t53;
  let api;
  let current;
  buttontoggle0 = new ButtonToggle_default({
    props: { items: (
      /*buttons*/
      ctx[4]
    ), value: "1" },
    $$inline: true
  });
  buttontoggle1 = new ButtonToggle_default({
    props: { items: (
      /*buttons*/
      ctx[4]
    ), value: "1" },
    $$inline: true
  });
  buttontoggle2 = new ButtonToggle_default({
    props: {
      items: (
        /*buttonsGalore*/
        ctx[5]
      ),
      value: "1"
    },
    $$inline: true
  });
  buttontoggle3 = new ButtonToggle_default({
    props: {
      disabled: true,
      items: (
        /*buttons*/
        ctx[4]
      )
    },
    $$inline: true
  });
  buttontoggle4 = new ButtonToggle_default({
    props: {
      round: true,
      items: (
        /*buttons*/
        ctx[4]
      ),
      value: "2"
    },
    $$inline: true
  });
  buttontoggle5 = new ButtonToggle_default({
    props: { items: (
      /*items*/
      ctx[6]
    ), value: "3" },
    $$inline: true
  });
  buttontoggle6 = new ButtonToggle_default({
    props: { items: (
      /*icons*/
      ctx[7]
    ), value: "1" },
    $$inline: true
  });
  buttontoggle7 = new ButtonToggle_default({
    props: {
      round: true,
      items: (
        /*icons*/
        ctx[7]
      ),
      value: "2"
    },
    $$inline: true
  });
  buttontoggle8 = new ButtonToggle_default({
    props: { items: (
      /*strings*/
      ctx[8]
    ), value: "One" },
    $$inline: true
  });
  buttontoggle9 = new ButtonToggle_default({
    props: {
      items: (
        /*items*/
        ctx[6]
      ),
      label: "Pick one"
    },
    $$inline: true
  });
  buttontoggle10 = new ButtonToggle_default({
    props: {
      items: (
        /*items*/
        ctx[6]
      ),
      label: "Pick one",
      info: "Pick your pick"
    },
    $$inline: true
  });
  buttontoggle11 = new ButtonToggle_default({
    props: {
      items: (
        /*items*/
        ctx[6]
      ),
      label: "Pick one",
      error: (
        /*error*/
        ctx[0]
      )
    },
    $$inline: true
  });
  buttontoggle11.$on(
    "change",
    /*onchange*/
    ctx[9]
  );
  codeexample0 = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  codeexample1 = new CodeExample_default({
    props: {
      notitle: true,
      html: (
        /*exampleHtml2*/
        ctx[3]
      )
    },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal48.element)("h2");
      h2.textContent = "Button Toggle";
      t1 = (0, import_internal48.space)();
      p = (0, import_internal48.element)("p");
      p.textContent = "This adds a nice visual styling of the buttons on top of a radio-button group.";
      t3 = (0, import_internal48.space)();
      h30 = (0, import_internal48.element)("h3");
      h30.textContent = "Normal";
      t5 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle0.$$.fragment);
      t6 = (0, import_internal48.space)();
      h31 = (0, import_internal48.element)("h3");
      h31.textContent = "Fit width";
      t8 = (0, import_internal48.space)();
      div0 = (0, import_internal48.element)("div");
      (0, import_internal48.create_component)(buttontoggle1.$$.fragment);
      t9 = (0, import_internal48.space)();
      h32 = (0, import_internal48.element)("h3");
      h32.textContent = "With scroller";
      t11 = (0, import_internal48.space)();
      div1 = (0, import_internal48.element)("div");
      (0, import_internal48.create_component)(buttontoggle2.$$.fragment);
      t12 = (0, import_internal48.space)();
      br0 = (0, import_internal48.element)("br");
      br1 = (0, import_internal48.element)("br");
      t13 = (0, import_internal48.space)();
      h40 = (0, import_internal48.element)("h4");
      h40.textContent = "Disabled";
      t15 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle3.$$.fragment);
      br2 = (0, import_internal48.element)("br");
      br3 = (0, import_internal48.element)("br");
      t16 = (0, import_internal48.space)();
      h41 = (0, import_internal48.element)("h4");
      h41.textContent = "Round";
      t18 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle4.$$.fragment);
      br4 = (0, import_internal48.element)("br");
      br5 = (0, import_internal48.element)("br");
      t19 = (0, import_internal48.space)();
      h42 = (0, import_internal48.element)("h4");
      h42.textContent = "With icon";
      t21 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle5.$$.fragment);
      br6 = (0, import_internal48.element)("br");
      br7 = (0, import_internal48.element)("br");
      t22 = (0, import_internal48.space)();
      h33 = (0, import_internal48.element)("h3");
      h33.textContent = "Icon only buttons";
      t24 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle6.$$.fragment);
      br8 = (0, import_internal48.element)("br");
      br9 = (0, import_internal48.element)("br");
      t25 = (0, import_internal48.space)();
      h34 = (0, import_internal48.element)("h3");
      h34.textContent = "Icon only, and round";
      t27 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle7.$$.fragment);
      br10 = (0, import_internal48.element)("br");
      br11 = (0, import_internal48.element)("br");
      t28 = (0, import_internal48.space)();
      h35 = (0, import_internal48.element)("h3");
      t29 = (0, import_internal48.text)("Array of strings for ");
      em0 = (0, import_internal48.element)("em");
      em0.textContent = "items";
      t31 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle8.$$.fragment);
      br12 = (0, import_internal48.element)("br");
      br13 = (0, import_internal48.element)("br");
      t32 = (0, import_internal48.space)();
      h36 = (0, import_internal48.element)("h3");
      h36.textContent = "Label";
      t34 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle9.$$.fragment);
      t35 = (0, import_internal48.space)();
      h37 = (0, import_internal48.element)("h3");
      h37.textContent = "Info";
      t37 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle10.$$.fragment);
      t38 = (0, import_internal48.space)();
      h38 = (0, import_internal48.element)("h3");
      h38.textContent = "Error";
      t40 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(buttontoggle11.$$.fragment);
      t41 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(codeexample0.$$.fragment);
      t42 = (0, import_internal48.space)();
      em1 = (0, import_internal48.element)("em");
      em1.textContent = "Note:";
      t44 = (0, import_internal48.text)(" the component ");
      i0 = (0, import_internal48.element)("i");
      i0.textContent = "value";
      t46 = (0, import_internal48.text)(" type and the item's ");
      i1 = (0, import_internal48.element)("i");
      i1.textContent = "value";
      t48 = (0, import_internal48.text)(" type must match,\nso you can either use ");
      i2 = (0, import_internal48.element)("i");
      i2.textContent = "string";
      t50 = (0, import_internal48.text)(" for both - like in the example, or ");
      i3 = (0, import_internal48.element)("i");
      i3.textContent = "number";
      t52 = (0, import_internal48.text)(", like so:\n");
      (0, import_internal48.create_component)(codeexample1.$$.fragment);
      t53 = (0, import_internal48.space)();
      (0, import_internal48.create_component)(api.$$.fragment);
      (0, import_internal48.add_location)(h2, file42, 0, 0, 0);
      (0, import_internal48.add_location)(p, file42, 2, 0, 24);
      (0, import_internal48.add_location)(h30, file42, 4, 0, 111);
      (0, import_internal48.add_location)(h31, file42, 7, 0, 173);
      (0, import_internal48.attr_dev)(div0, "class", "button-toggle-wrapper-wide");
      (0, import_internal48.add_location)(div0, file42, 8, 0, 192);
      (0, import_internal48.add_location)(h32, file42, 12, 0, 287);
      (0, import_internal48.attr_dev)(div1, "class", "button-toggle-wrapper-wide");
      (0, import_internal48.add_location)(div1, file42, 13, 0, 310);
      (0, import_internal48.add_location)(br0, file42, 17, 0, 411);
      (0, import_internal48.add_location)(br1, file42, 17, 4, 415);
      (0, import_internal48.add_location)(h40, file42, 19, 0, 421);
      (0, import_internal48.add_location)(br2, file42, 20, 42, 481);
      (0, import_internal48.add_location)(br3, file42, 20, 46, 485);
      (0, import_internal48.add_location)(h41, file42, 22, 0, 491);
      (0, import_internal48.add_location)(br4, file42, 23, 50, 556);
      (0, import_internal48.add_location)(br5, file42, 23, 54, 560);
      (0, import_internal48.add_location)(h42, file42, 25, 0, 566);
      (0, import_internal48.add_location)(br6, file42, 26, 42, 627);
      (0, import_internal48.add_location)(br7, file42, 26, 46, 631);
      (0, import_internal48.add_location)(h33, file42, 28, 0, 637);
      (0, import_internal48.add_location)(br8, file42, 29, 42, 706);
      (0, import_internal48.add_location)(br9, file42, 29, 46, 710);
      (0, import_internal48.add_location)(h34, file42, 32, 0, 717);
      (0, import_internal48.add_location)(br10, file42, 33, 48, 795);
      (0, import_internal48.add_location)(br11, file42, 33, 52, 799);
      (0, import_internal48.add_location)(em0, file42, 35, 25, 830);
      (0, import_internal48.add_location)(h35, file42, 35, 0, 805);
      (0, import_internal48.add_location)(br12, file42, 36, 46, 896);
      (0, import_internal48.add_location)(br13, file42, 36, 50, 900);
      (0, import_internal48.add_location)(h36, file42, 39, 0, 907);
      (0, import_internal48.add_location)(h37, file42, 42, 0, 973);
      (0, import_internal48.add_location)(h38, file42, 45, 0, 1060);
      (0, import_internal48.add_location)(em1, file42, 53, 0, 1205);
      (0, import_internal48.add_location)(i0, file42, 53, 29, 1234);
      (0, import_internal48.add_location)(i1, file42, 53, 62, 1267);
      (0, import_internal48.add_location)(i2, file42, 54, 22, 1319);
      (0, import_internal48.add_location)(i3, file42, 54, 71, 1368);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal48.insert_dev)(target, h2, anchor);
      (0, import_internal48.insert_dev)(target, t1, anchor);
      (0, import_internal48.insert_dev)(target, p, anchor);
      (0, import_internal48.insert_dev)(target, t3, anchor);
      (0, import_internal48.insert_dev)(target, h30, anchor);
      (0, import_internal48.insert_dev)(target, t5, anchor);
      (0, import_internal48.mount_component)(buttontoggle0, target, anchor);
      (0, import_internal48.insert_dev)(target, t6, anchor);
      (0, import_internal48.insert_dev)(target, h31, anchor);
      (0, import_internal48.insert_dev)(target, t8, anchor);
      (0, import_internal48.insert_dev)(target, div0, anchor);
      (0, import_internal48.mount_component)(buttontoggle1, div0, null);
      (0, import_internal48.insert_dev)(target, t9, anchor);
      (0, import_internal48.insert_dev)(target, h32, anchor);
      (0, import_internal48.insert_dev)(target, t11, anchor);
      (0, import_internal48.insert_dev)(target, div1, anchor);
      (0, import_internal48.mount_component)(buttontoggle2, div1, null);
      (0, import_internal48.insert_dev)(target, t12, anchor);
      (0, import_internal48.insert_dev)(target, br0, anchor);
      (0, import_internal48.insert_dev)(target, br1, anchor);
      (0, import_internal48.insert_dev)(target, t13, anchor);
      (0, import_internal48.insert_dev)(target, h40, anchor);
      (0, import_internal48.insert_dev)(target, t15, anchor);
      (0, import_internal48.mount_component)(buttontoggle3, target, anchor);
      (0, import_internal48.insert_dev)(target, br2, anchor);
      (0, import_internal48.insert_dev)(target, br3, anchor);
      (0, import_internal48.insert_dev)(target, t16, anchor);
      (0, import_internal48.insert_dev)(target, h41, anchor);
      (0, import_internal48.insert_dev)(target, t18, anchor);
      (0, import_internal48.mount_component)(buttontoggle4, target, anchor);
      (0, import_internal48.insert_dev)(target, br4, anchor);
      (0, import_internal48.insert_dev)(target, br5, anchor);
      (0, import_internal48.insert_dev)(target, t19, anchor);
      (0, import_internal48.insert_dev)(target, h42, anchor);
      (0, import_internal48.insert_dev)(target, t21, anchor);
      (0, import_internal48.mount_component)(buttontoggle5, target, anchor);
      (0, import_internal48.insert_dev)(target, br6, anchor);
      (0, import_internal48.insert_dev)(target, br7, anchor);
      (0, import_internal48.insert_dev)(target, t22, anchor);
      (0, import_internal48.insert_dev)(target, h33, anchor);
      (0, import_internal48.insert_dev)(target, t24, anchor);
      (0, import_internal48.mount_component)(buttontoggle6, target, anchor);
      (0, import_internal48.insert_dev)(target, br8, anchor);
      (0, import_internal48.insert_dev)(target, br9, anchor);
      (0, import_internal48.insert_dev)(target, t25, anchor);
      (0, import_internal48.insert_dev)(target, h34, anchor);
      (0, import_internal48.insert_dev)(target, t27, anchor);
      (0, import_internal48.mount_component)(buttontoggle7, target, anchor);
      (0, import_internal48.insert_dev)(target, br10, anchor);
      (0, import_internal48.insert_dev)(target, br11, anchor);
      (0, import_internal48.insert_dev)(target, t28, anchor);
      (0, import_internal48.insert_dev)(target, h35, anchor);
      (0, import_internal48.append_dev)(h35, t29);
      (0, import_internal48.append_dev)(h35, em0);
      (0, import_internal48.insert_dev)(target, t31, anchor);
      (0, import_internal48.mount_component)(buttontoggle8, target, anchor);
      (0, import_internal48.insert_dev)(target, br12, anchor);
      (0, import_internal48.insert_dev)(target, br13, anchor);
      (0, import_internal48.insert_dev)(target, t32, anchor);
      (0, import_internal48.insert_dev)(target, h36, anchor);
      (0, import_internal48.insert_dev)(target, t34, anchor);
      (0, import_internal48.mount_component)(buttontoggle9, target, anchor);
      (0, import_internal48.insert_dev)(target, t35, anchor);
      (0, import_internal48.insert_dev)(target, h37, anchor);
      (0, import_internal48.insert_dev)(target, t37, anchor);
      (0, import_internal48.mount_component)(buttontoggle10, target, anchor);
      (0, import_internal48.insert_dev)(target, t38, anchor);
      (0, import_internal48.insert_dev)(target, h38, anchor);
      (0, import_internal48.insert_dev)(target, t40, anchor);
      (0, import_internal48.mount_component)(buttontoggle11, target, anchor);
      (0, import_internal48.insert_dev)(target, t41, anchor);
      (0, import_internal48.mount_component)(codeexample0, target, anchor);
      (0, import_internal48.insert_dev)(target, t42, anchor);
      (0, import_internal48.insert_dev)(target, em1, anchor);
      (0, import_internal48.insert_dev)(target, t44, anchor);
      (0, import_internal48.insert_dev)(target, i0, anchor);
      (0, import_internal48.insert_dev)(target, t46, anchor);
      (0, import_internal48.insert_dev)(target, i1, anchor);
      (0, import_internal48.insert_dev)(target, t48, anchor);
      (0, import_internal48.insert_dev)(target, i2, anchor);
      (0, import_internal48.insert_dev)(target, t50, anchor);
      (0, import_internal48.insert_dev)(target, i3, anchor);
      (0, import_internal48.insert_dev)(target, t52, anchor);
      (0, import_internal48.mount_component)(codeexample1, target, anchor);
      (0, import_internal48.insert_dev)(target, t53, anchor);
      (0, import_internal48.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const buttontoggle11_changes = {};
      if (dirty & /*error*/
      1)
        buttontoggle11_changes.error = /*error*/
        ctx2[0];
      buttontoggle11.$set(buttontoggle11_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal48.transition_in)(buttontoggle0.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle1.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle2.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle3.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle4.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle5.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle6.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle7.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle8.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle9.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle10.$$.fragment, local);
      (0, import_internal48.transition_in)(buttontoggle11.$$.fragment, local);
      (0, import_internal48.transition_in)(codeexample0.$$.fragment, local);
      (0, import_internal48.transition_in)(codeexample1.$$.fragment, local);
      (0, import_internal48.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal48.transition_out)(buttontoggle0.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle1.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle2.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle3.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle4.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle5.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle6.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle7.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle8.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle9.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle10.$$.fragment, local);
      (0, import_internal48.transition_out)(buttontoggle11.$$.fragment, local);
      (0, import_internal48.transition_out)(codeexample0.$$.fragment, local);
      (0, import_internal48.transition_out)(codeexample1.$$.fragment, local);
      (0, import_internal48.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal48.detach_dev)(h2);
      if (detaching)
        (0, import_internal48.detach_dev)(t1);
      if (detaching)
        (0, import_internal48.detach_dev)(p);
      if (detaching)
        (0, import_internal48.detach_dev)(t3);
      if (detaching)
        (0, import_internal48.detach_dev)(h30);
      if (detaching)
        (0, import_internal48.detach_dev)(t5);
      (0, import_internal48.destroy_component)(buttontoggle0, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(t6);
      if (detaching)
        (0, import_internal48.detach_dev)(h31);
      if (detaching)
        (0, import_internal48.detach_dev)(t8);
      if (detaching)
        (0, import_internal48.detach_dev)(div0);
      (0, import_internal48.destroy_component)(buttontoggle1);
      if (detaching)
        (0, import_internal48.detach_dev)(t9);
      if (detaching)
        (0, import_internal48.detach_dev)(h32);
      if (detaching)
        (0, import_internal48.detach_dev)(t11);
      if (detaching)
        (0, import_internal48.detach_dev)(div1);
      (0, import_internal48.destroy_component)(buttontoggle2);
      if (detaching)
        (0, import_internal48.detach_dev)(t12);
      if (detaching)
        (0, import_internal48.detach_dev)(br0);
      if (detaching)
        (0, import_internal48.detach_dev)(br1);
      if (detaching)
        (0, import_internal48.detach_dev)(t13);
      if (detaching)
        (0, import_internal48.detach_dev)(h40);
      if (detaching)
        (0, import_internal48.detach_dev)(t15);
      (0, import_internal48.destroy_component)(buttontoggle3, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(br2);
      if (detaching)
        (0, import_internal48.detach_dev)(br3);
      if (detaching)
        (0, import_internal48.detach_dev)(t16);
      if (detaching)
        (0, import_internal48.detach_dev)(h41);
      if (detaching)
        (0, import_internal48.detach_dev)(t18);
      (0, import_internal48.destroy_component)(buttontoggle4, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(br4);
      if (detaching)
        (0, import_internal48.detach_dev)(br5);
      if (detaching)
        (0, import_internal48.detach_dev)(t19);
      if (detaching)
        (0, import_internal48.detach_dev)(h42);
      if (detaching)
        (0, import_internal48.detach_dev)(t21);
      (0, import_internal48.destroy_component)(buttontoggle5, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(br6);
      if (detaching)
        (0, import_internal48.detach_dev)(br7);
      if (detaching)
        (0, import_internal48.detach_dev)(t22);
      if (detaching)
        (0, import_internal48.detach_dev)(h33);
      if (detaching)
        (0, import_internal48.detach_dev)(t24);
      (0, import_internal48.destroy_component)(buttontoggle6, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(br8);
      if (detaching)
        (0, import_internal48.detach_dev)(br9);
      if (detaching)
        (0, import_internal48.detach_dev)(t25);
      if (detaching)
        (0, import_internal48.detach_dev)(h34);
      if (detaching)
        (0, import_internal48.detach_dev)(t27);
      (0, import_internal48.destroy_component)(buttontoggle7, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(br10);
      if (detaching)
        (0, import_internal48.detach_dev)(br11);
      if (detaching)
        (0, import_internal48.detach_dev)(t28);
      if (detaching)
        (0, import_internal48.detach_dev)(h35);
      if (detaching)
        (0, import_internal48.detach_dev)(t31);
      (0, import_internal48.destroy_component)(buttontoggle8, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(br12);
      if (detaching)
        (0, import_internal48.detach_dev)(br13);
      if (detaching)
        (0, import_internal48.detach_dev)(t32);
      if (detaching)
        (0, import_internal48.detach_dev)(h36);
      if (detaching)
        (0, import_internal48.detach_dev)(t34);
      (0, import_internal48.destroy_component)(buttontoggle9, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(t35);
      if (detaching)
        (0, import_internal48.detach_dev)(h37);
      if (detaching)
        (0, import_internal48.detach_dev)(t37);
      (0, import_internal48.destroy_component)(buttontoggle10, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(t38);
      if (detaching)
        (0, import_internal48.detach_dev)(h38);
      if (detaching)
        (0, import_internal48.detach_dev)(t40);
      (0, import_internal48.destroy_component)(buttontoggle11, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(t41);
      (0, import_internal48.destroy_component)(codeexample0, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(t42);
      if (detaching)
        (0, import_internal48.detach_dev)(em1);
      if (detaching)
        (0, import_internal48.detach_dev)(t44);
      if (detaching)
        (0, import_internal48.detach_dev)(i0);
      if (detaching)
        (0, import_internal48.detach_dev)(t46);
      if (detaching)
        (0, import_internal48.detach_dev)(i1);
      if (detaching)
        (0, import_internal48.detach_dev)(t48);
      if (detaching)
        (0, import_internal48.detach_dev)(i2);
      if (detaching)
        (0, import_internal48.detach_dev)(t50);
      if (detaching)
        (0, import_internal48.detach_dev)(i3);
      if (detaching)
        (0, import_internal48.detach_dev)(t52);
      (0, import_internal48.destroy_component)(codeexample1, detaching);
      if (detaching)
        (0, import_internal48.detach_dev)(t53);
      (0, import_internal48.destroy_component)(api, detaching);
    }
  };
  (0, import_internal48.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment48.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance48($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal48.validate_slots)("ButtonToggle", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Makes the component disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign id to the first radio button in the group (useful for the associate label's <i>for</i> attribute)"
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the toggle."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the toggle."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the toggle."
    },
    {
      name: "items",
      type: "array",
      required: true,
      description: "An array of strings or objects in the following format: <code>&lbrace; name: string, value: string | number, icon?: string &rbrace;</code>"
    },
    {
      name: "name",
      type: "string",
      description: "Assign name to the underlying radio group"
    },
    {
      name: "round",
      description: "Makes the buttons, on both sides of the group, round."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the component"
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Assign initial value to the underlying radio group"
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    }
  ];
  const exampleHtml = `
<ButtonToggle items="{buttons}" value="2" />

<script>
const buttons = [
    { name: 'One', value: '1' },
    { name: 'Two', value: '2' },
    { name: 'Three', value: '3' },
];
&lt;/script>
`;
  const exampleHtml2 = `
<ButtonToggle items="{buttons}" value="{2}" />

<script>
const buttons = [
    { name: 'One', value: 1 },
    { name: 'Two', value: 2 },
    { name: 'Three', value: 3 },
];
&lt;/script>
`;
  const buttons = [
    { name: "One", value: "1" },
    { name: "Two", value: "2" },
    { name: "Three", value: "3" }
  ];
  const buttonsGalore = [
    "One",
    "Two",
    "Three",
    "Four",
    "Five",
    "Six",
    "Seven",
    "Eight",
    "Nine",
    "Ten",
    "Eleven",
    "Twelve",
    "Thirteen",
    "Fourteen",
    "Fifteen",
    "Sixteen",
    "Seventeen"
  ];
  const items = [
    { name: "One", icon: "info", value: "1" },
    {
      name: "Two and some long text",
      icon: "check",
      value: "2"
    },
    { name: "Three", icon: "alert", value: "3" }
  ];
  const icons2 = [
    { icon: "info", value: "1" },
    { icon: "check", value: "2" },
    { icon: "alert", value: "3" }
  ];
  const strings = ["One", "Two", "Three"];
  let error2 = "You picked wrong!";
  function onchange4(e) {
    const val = e.detail;
    console.log(val);
    $$invalidate2(0, error2 = val === "1" ? "" : "You picked wrong!");
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_12.warn(`<ButtonToggle> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    ButtonToggle: ButtonToggle_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    exampleHtml2,
    buttons,
    buttonsGalore,
    items,
    icons: icons2,
    strings,
    error: error2,
    onchange: onchange4
  });
  $$self2.$inject_state = ($$props3) => {
    if ("error" in $$props3)
      $$invalidate2(0, error2 = $$props3.error);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    error2,
    apiProps,
    exampleHtml,
    exampleHtml2,
    buttons,
    buttonsGalore,
    items,
    icons2,
    strings,
    onchange4
  ];
}
var ButtonToggle_1 = class extends import_internal48.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal48.init)(this, options, instance48, create_fragment48, import_internal48.safe_not_equal, {});
    (0, import_internal48.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ButtonToggle_1",
      options,
      id: create_fragment48.name
    });
  }
};
var ButtonToggle_default2 = ButtonToggle_1;

// docs-src/components/checkbox/Checkbox.svelte
var import_internal49 = __toESM(require_internal());
var { console: console_13 } = import_internal49.globals;
var file43 = "docs-src/components/checkbox/Checkbox.svelte";
function create_fragment49(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let checkbox0;
  let t4;
  let h31;
  let t6;
  let checkbox1;
  let br;
  let t7;
  let checkbox2;
  let t8;
  let h32;
  let t10;
  let checkbox3;
  let t11;
  let h33;
  let t13;
  let checkbox4;
  let t14;
  let h34;
  let t16;
  let checkbox5;
  let t17;
  let h35;
  let t19;
  let checkbox6;
  let t20;
  let h36;
  let t22;
  let checkbox7;
  let t23;
  let codeexample;
  let t24;
  let api;
  let current;
  checkbox0 = new Checkbox_default({
    props: {
      label: "I do not wish to be excluded from the dont-send-newsletter list, not."
    },
    $$inline: true
  });
  checkbox0.$on(
    "change",
    /*onchange*/
    ctx[3]
  );
  checkbox1 = new Checkbox_default({
    props: {
      disabled: true,
      label: "I would like to receive all your spam, please."
    },
    $$inline: true
  });
  checkbox2 = new Checkbox_default({
    props: {
      checked: "true",
      disabled: true,
      label: "You can't check me!"
    },
    $$inline: true
  });
  checkbox3 = new Checkbox_default({
    props: {
      checked: "true",
      label: "Check the checkbox to have the checkbox checked."
    },
    $$inline: true
  });
  checkbox4 = new Checkbox_default({
    props: {
      indeterminate: "true",
      label: "Check, mate!"
    },
    $$inline: true
  });
  checkbox5 = new Checkbox_default({
    props: {
      error: (
        /*error*/
        ctx[0]
      ),
      label: "Please, check this by mistake."
    },
    $$inline: true
  });
  checkbox5.$on(
    "change",
    /*onchange*/
    ctx[3]
  );
  checkbox6 = new Checkbox_default({
    props: {
      info: "This checkbox is the most important box ever!",
      label: "Please, check this by mistake."
    },
    $$inline: true
  });
  checkbox7 = new Checkbox_default({
    props: {
      info: "This checkbox is the most important box ever!",
      error: "And you're wrong!",
      label: "Please, check this by mistake."
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal49.element)("h2");
      h2.textContent = "Checkbox";
      t1 = (0, import_internal49.space)();
      h30 = (0, import_internal49.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox0.$$.fragment);
      t4 = (0, import_internal49.space)();
      h31 = (0, import_internal49.element)("h3");
      h31.textContent = "Disabled";
      t6 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox1.$$.fragment);
      br = (0, import_internal49.element)("br");
      t7 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox2.$$.fragment);
      t8 = (0, import_internal49.space)();
      h32 = (0, import_internal49.element)("h3");
      h32.textContent = "Checked";
      t10 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox3.$$.fragment);
      t11 = (0, import_internal49.space)();
      h33 = (0, import_internal49.element)("h3");
      h33.textContent = "Indeterminate";
      t13 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox4.$$.fragment);
      t14 = (0, import_internal49.space)();
      h34 = (0, import_internal49.element)("h3");
      h34.textContent = "With error and live validation";
      t16 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox5.$$.fragment);
      t17 = (0, import_internal49.space)();
      h35 = (0, import_internal49.element)("h3");
      h35.textContent = "With info";
      t19 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox6.$$.fragment);
      t20 = (0, import_internal49.space)();
      h36 = (0, import_internal49.element)("h3");
      h36.textContent = "With error and info";
      t22 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(checkbox7.$$.fragment);
      t23 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(codeexample.$$.fragment);
      t24 = (0, import_internal49.space)();
      (0, import_internal49.create_component)(api.$$.fragment);
      (0, import_internal49.add_location)(h2, file43, 0, 0, 0);
      (0, import_internal49.add_location)(h30, file43, 2, 0, 19);
      (0, import_internal49.add_location)(h31, file43, 5, 0, 150);
      (0, import_internal49.add_location)(br, file43, 6, 75, 243);
      (0, import_internal49.add_location)(h32, file43, 9, 0, 313);
      (0, import_internal49.add_location)(h33, file43, 13, 0, 416);
      (0, import_internal49.add_location)(h34, file43, 17, 0, 495);
      (0, import_internal49.add_location)(h35, file43, 20, 0, 618);
      (0, import_internal49.add_location)(h36, file43, 23, 0, 742);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal49.insert_dev)(target, h2, anchor);
      (0, import_internal49.insert_dev)(target, t1, anchor);
      (0, import_internal49.insert_dev)(target, h30, anchor);
      (0, import_internal49.insert_dev)(target, t3, anchor);
      (0, import_internal49.mount_component)(checkbox0, target, anchor);
      (0, import_internal49.insert_dev)(target, t4, anchor);
      (0, import_internal49.insert_dev)(target, h31, anchor);
      (0, import_internal49.insert_dev)(target, t6, anchor);
      (0, import_internal49.mount_component)(checkbox1, target, anchor);
      (0, import_internal49.insert_dev)(target, br, anchor);
      (0, import_internal49.insert_dev)(target, t7, anchor);
      (0, import_internal49.mount_component)(checkbox2, target, anchor);
      (0, import_internal49.insert_dev)(target, t8, anchor);
      (0, import_internal49.insert_dev)(target, h32, anchor);
      (0, import_internal49.insert_dev)(target, t10, anchor);
      (0, import_internal49.mount_component)(checkbox3, target, anchor);
      (0, import_internal49.insert_dev)(target, t11, anchor);
      (0, import_internal49.insert_dev)(target, h33, anchor);
      (0, import_internal49.insert_dev)(target, t13, anchor);
      (0, import_internal49.mount_component)(checkbox4, target, anchor);
      (0, import_internal49.insert_dev)(target, t14, anchor);
      (0, import_internal49.insert_dev)(target, h34, anchor);
      (0, import_internal49.insert_dev)(target, t16, anchor);
      (0, import_internal49.mount_component)(checkbox5, target, anchor);
      (0, import_internal49.insert_dev)(target, t17, anchor);
      (0, import_internal49.insert_dev)(target, h35, anchor);
      (0, import_internal49.insert_dev)(target, t19, anchor);
      (0, import_internal49.mount_component)(checkbox6, target, anchor);
      (0, import_internal49.insert_dev)(target, t20, anchor);
      (0, import_internal49.insert_dev)(target, h36, anchor);
      (0, import_internal49.insert_dev)(target, t22, anchor);
      (0, import_internal49.mount_component)(checkbox7, target, anchor);
      (0, import_internal49.insert_dev)(target, t23, anchor);
      (0, import_internal49.mount_component)(codeexample, target, anchor);
      (0, import_internal49.insert_dev)(target, t24, anchor);
      (0, import_internal49.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const checkbox5_changes = {};
      if (dirty & /*error*/
      1)
        checkbox5_changes.error = /*error*/
        ctx2[0];
      checkbox5.$set(checkbox5_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal49.transition_in)(checkbox0.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox1.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox2.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox3.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox4.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox5.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox6.$$.fragment, local);
      (0, import_internal49.transition_in)(checkbox7.$$.fragment, local);
      (0, import_internal49.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal49.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal49.transition_out)(checkbox0.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox1.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox2.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox3.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox4.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox5.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox6.$$.fragment, local);
      (0, import_internal49.transition_out)(checkbox7.$$.fragment, local);
      (0, import_internal49.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal49.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal49.detach_dev)(h2);
      if (detaching)
        (0, import_internal49.detach_dev)(t1);
      if (detaching)
        (0, import_internal49.detach_dev)(h30);
      if (detaching)
        (0, import_internal49.detach_dev)(t3);
      (0, import_internal49.destroy_component)(checkbox0, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t4);
      if (detaching)
        (0, import_internal49.detach_dev)(h31);
      if (detaching)
        (0, import_internal49.detach_dev)(t6);
      (0, import_internal49.destroy_component)(checkbox1, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(br);
      if (detaching)
        (0, import_internal49.detach_dev)(t7);
      (0, import_internal49.destroy_component)(checkbox2, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t8);
      if (detaching)
        (0, import_internal49.detach_dev)(h32);
      if (detaching)
        (0, import_internal49.detach_dev)(t10);
      (0, import_internal49.destroy_component)(checkbox3, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t11);
      if (detaching)
        (0, import_internal49.detach_dev)(h33);
      if (detaching)
        (0, import_internal49.detach_dev)(t13);
      (0, import_internal49.destroy_component)(checkbox4, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t14);
      if (detaching)
        (0, import_internal49.detach_dev)(h34);
      if (detaching)
        (0, import_internal49.detach_dev)(t16);
      (0, import_internal49.destroy_component)(checkbox5, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t17);
      if (detaching)
        (0, import_internal49.detach_dev)(h35);
      if (detaching)
        (0, import_internal49.detach_dev)(t19);
      (0, import_internal49.destroy_component)(checkbox6, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t20);
      if (detaching)
        (0, import_internal49.detach_dev)(h36);
      if (detaching)
        (0, import_internal49.detach_dev)(t22);
      (0, import_internal49.destroy_component)(checkbox7, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t23);
      (0, import_internal49.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal49.detach_dev)(t24);
      (0, import_internal49.destroy_component)(api, detaching);
    }
  };
  (0, import_internal49.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment49.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance49($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal49.validate_slots)("Checkbox", slots2, []);
  const apiProps = [
    {
      name: "checked",
      type: ["true", "false"],
      description: "Make the checkbox checked or unchecked."
    },
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the input."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "indeterminate",
      type: ["true", "false"],
      description: "If set to <i>true</i> it makes the checkbox show its 3rd state - indeterminate."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the component."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    }
  ];
  const exampleHtml = `
<Checkbox on:change="{onChange}" label="I'm a little label" {error} />

<script>
let error = '';

function onChange (e) {
	const { checked, indeterminate } = e.detail;
	error = checked ? '' : 'You must check me!'
	console.log({ checked, indeterminate });
}
&lt;/script>
`;
  let error2 = "You must check me!";
  function onchange4(e) {
    const { checked, indeterminate } = e.detail;
    $$invalidate2(0, error2 = checked ? "" : "You must check me!");
    console.log({ checked, indeterminate });
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_13.warn(`<Checkbox> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Checkbox: Checkbox_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    error: error2,
    onchange: onchange4
  });
  $$self2.$inject_state = ($$props3) => {
    if ("error" in $$props3)
      $$invalidate2(0, error2 = $$props3.error);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [error2, apiProps, exampleHtml, onchange4];
}
var Checkbox_1 = class extends import_internal49.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal49.init)(this, options, instance49, create_fragment49, import_internal49.safe_not_equal, {});
    (0, import_internal49.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Checkbox_1",
      options,
      id: create_fragment49.name
    });
  }
};
var Checkbox_default2 = Checkbox_1;

// docs-src/components/input-date/InputDate.svelte
var import_internal50 = __toESM(require_internal());
var { console: console_14 } = import_internal50.globals;
var file44 = "docs-src/components/input-date/InputDate.svelte";
function create_fragment50(ctx) {
  let h2;
  let t1;
  let p0;
  let t2;
  let a;
  let t4;
  let t5;
  let br;
  let t6;
  let h30;
  let t8;
  let inputdate0;
  let t9;
  let h31;
  let t11;
  let inputdate1;
  let t12;
  let h32;
  let t14;
  let inputdate2;
  let t15;
  let h33;
  let t16;
  let em0;
  let t18;
  let p1;
  let t19;
  let em1;
  let t21;
  let em2;
  let t23;
  let t24;
  let div;
  let small;
  let t26;
  let inputdate3;
  let t27;
  let p2;
  let t28;
  let em3;
  let t30;
  let t31;
  let h34;
  let t33;
  let inputdate4;
  let t34;
  let h35;
  let t36;
  let inputdate5;
  let t37;
  let h36;
  let t39;
  let inputdate6;
  let t40;
  let codeexample;
  let t41;
  let api;
  let current;
  inputdate0 = new InputDate_default({ $$inline: true });
  inputdate0.$on("keydown", onkey);
  inputdate1 = new InputDate_default({
    props: {
      showOnFocus: "true",
      placeholder: "Custom placeholder"
    },
    $$inline: true
  });
  inputdate2 = new InputDate_default({
    props: { format: "dd-mm-yy" },
    $$inline: true
  });
  inputdate3 = new InputDate_default({
    props: { elevate: "true" },
    $$inline: true
  });
  inputdate4 = new InputDate_default({
    props: { label: "Pick one" },
    $$inline: true
  });
  inputdate5 = new InputDate_default({
    props: {
      label: "Pick one",
      info: "Pick your pick"
    },
    $$inline: true
  });
  inputdate6 = new InputDate_default({
    props: {
      label: "Pick one",
      error: (
        /*error*/
        ctx[0]
      )
    },
    $$inline: true
  });
  inputdate6.$on(
    "change",
    /*onchange*/
    ctx[3]
  );
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal50.element)("h2");
      h2.textContent = "Input Date";
      t1 = (0, import_internal50.space)();
      p0 = (0, import_internal50.element)("p");
      t2 = (0, import_internal50.text)("This is a wrapper for the vanilla javascript component ");
      a = (0, import_internal50.element)("a");
      a.textContent = "vanillajs-datepicker";
      t4 = (0, import_internal50.text)(".");
      t5 = (0, import_internal50.space)();
      br = (0, import_internal50.element)("br");
      t6 = (0, import_internal50.space)();
      h30 = (0, import_internal50.element)("h3");
      h30.textContent = "Normal";
      t8 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate0.$$.fragment);
      t9 = (0, import_internal50.space)();
      h31 = (0, import_internal50.element)("h3");
      h31.textContent = "Show on focus";
      t11 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate1.$$.fragment);
      t12 = (0, import_internal50.space)();
      h32 = (0, import_internal50.element)("h3");
      h32.textContent = "Change date format";
      t14 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate2.$$.fragment);
      t15 = (0, import_internal50.space)();
      h33 = (0, import_internal50.element)("h3");
      t16 = (0, import_internal50.text)("In a container with ");
      em0 = (0, import_internal50.element)("em");
      em0.textContent = "overflow: hidden";
      t18 = (0, import_internal50.space)();
      p1 = (0, import_internal50.element)("p");
      t19 = (0, import_internal50.text)("Where parent container has ");
      em1 = (0, import_internal50.element)("em");
      em1.textContent = "overflow: hidden";
      t21 = (0, import_internal50.text)(", ");
      em2 = (0, import_internal50.element)("em");
      em2.textContent = 'elevate="true"';
      t23 = (0, import_internal50.text)("\n	property must be set on the component.");
      t24 = (0, import_internal50.space)();
      div = (0, import_internal50.element)("div");
      small = (0, import_internal50.element)("small");
      small.textContent = "overflow: hidden";
      t26 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate3.$$.fragment);
      t27 = (0, import_internal50.space)();
      p2 = (0, import_internal50.element)("p");
      t28 = (0, import_internal50.text)("This option should only be used when absolutely necessary (e.g. when InputDate\n	is used inside dialogs/popups), because it makes the component less accessible\n	(the list container is rendered directly in the ");
      em3 = (0, import_internal50.element)("em");
      em3.textContent = "<body>";
      t30 = (0, import_internal50.text)(", and not next to the input).");
      t31 = (0, import_internal50.space)();
      h34 = (0, import_internal50.element)("h3");
      h34.textContent = "Label";
      t33 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate4.$$.fragment);
      t34 = (0, import_internal50.space)();
      h35 = (0, import_internal50.element)("h3");
      h35.textContent = "Info";
      t36 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate5.$$.fragment);
      t37 = (0, import_internal50.space)();
      h36 = (0, import_internal50.element)("h3");
      h36.textContent = "Error";
      t39 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(inputdate6.$$.fragment);
      t40 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(codeexample.$$.fragment);
      t41 = (0, import_internal50.space)();
      (0, import_internal50.create_component)(api.$$.fragment);
      (0, import_internal50.add_location)(h2, file44, 0, 0, 0);
      (0, import_internal50.attr_dev)(a, "href", "https://mymth.github.io/vanillajs-datepicker/#/");
      (0, import_internal50.add_location)(a, file44, 1, 58, 78);
      (0, import_internal50.add_location)(p0, file44, 1, 0, 20);
      (0, import_internal50.add_location)(br, file44, 2, 0, 166);
      (0, import_internal50.add_location)(h30, file44, 4, 0, 172);
      (0, import_internal50.add_location)(h31, file44, 7, 0, 223);
      (0, import_internal50.add_location)(h32, file44, 10, 0, 313);
      (0, import_internal50.add_location)(em0, file44, 14, 24, 399);
      (0, import_internal50.add_location)(h33, file44, 14, 0, 375);
      (0, import_internal50.add_location)(em1, file44, 15, 30, 460);
      (0, import_internal50.add_location)(em2, file44, 15, 57, 487);
      (0, import_internal50.add_location)(p1, file44, 15, 0, 430);
      (0, import_internal50.add_location)(small, file44, 18, 1, 588);
      (0, import_internal50.attr_dev)(div, "class", "docs-overflow-box");
      (0, import_internal50.add_location)(div, file44, 17, 0, 555);
      (0, import_internal50.add_location)(em3, file44, 23, 49, 868);
      (0, import_internal50.add_location)(p2, file44, 21, 0, 657);
      (0, import_internal50.add_location)(h34, file44, 26, 0, 925);
      (0, import_internal50.add_location)(h35, file44, 29, 0, 972);
      (0, import_internal50.add_location)(h36, file44, 32, 0, 1040);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal50.insert_dev)(target, h2, anchor);
      (0, import_internal50.insert_dev)(target, t1, anchor);
      (0, import_internal50.insert_dev)(target, p0, anchor);
      (0, import_internal50.append_dev)(p0, t2);
      (0, import_internal50.append_dev)(p0, a);
      (0, import_internal50.append_dev)(p0, t4);
      (0, import_internal50.insert_dev)(target, t5, anchor);
      (0, import_internal50.insert_dev)(target, br, anchor);
      (0, import_internal50.insert_dev)(target, t6, anchor);
      (0, import_internal50.insert_dev)(target, h30, anchor);
      (0, import_internal50.insert_dev)(target, t8, anchor);
      (0, import_internal50.mount_component)(inputdate0, target, anchor);
      (0, import_internal50.insert_dev)(target, t9, anchor);
      (0, import_internal50.insert_dev)(target, h31, anchor);
      (0, import_internal50.insert_dev)(target, t11, anchor);
      (0, import_internal50.mount_component)(inputdate1, target, anchor);
      (0, import_internal50.insert_dev)(target, t12, anchor);
      (0, import_internal50.insert_dev)(target, h32, anchor);
      (0, import_internal50.insert_dev)(target, t14, anchor);
      (0, import_internal50.mount_component)(inputdate2, target, anchor);
      (0, import_internal50.insert_dev)(target, t15, anchor);
      (0, import_internal50.insert_dev)(target, h33, anchor);
      (0, import_internal50.append_dev)(h33, t16);
      (0, import_internal50.append_dev)(h33, em0);
      (0, import_internal50.insert_dev)(target, t18, anchor);
      (0, import_internal50.insert_dev)(target, p1, anchor);
      (0, import_internal50.append_dev)(p1, t19);
      (0, import_internal50.append_dev)(p1, em1);
      (0, import_internal50.append_dev)(p1, t21);
      (0, import_internal50.append_dev)(p1, em2);
      (0, import_internal50.append_dev)(p1, t23);
      (0, import_internal50.insert_dev)(target, t24, anchor);
      (0, import_internal50.insert_dev)(target, div, anchor);
      (0, import_internal50.append_dev)(div, small);
      (0, import_internal50.append_dev)(div, t26);
      (0, import_internal50.mount_component)(inputdate3, div, null);
      (0, import_internal50.insert_dev)(target, t27, anchor);
      (0, import_internal50.insert_dev)(target, p2, anchor);
      (0, import_internal50.append_dev)(p2, t28);
      (0, import_internal50.append_dev)(p2, em3);
      (0, import_internal50.append_dev)(p2, t30);
      (0, import_internal50.insert_dev)(target, t31, anchor);
      (0, import_internal50.insert_dev)(target, h34, anchor);
      (0, import_internal50.insert_dev)(target, t33, anchor);
      (0, import_internal50.mount_component)(inputdate4, target, anchor);
      (0, import_internal50.insert_dev)(target, t34, anchor);
      (0, import_internal50.insert_dev)(target, h35, anchor);
      (0, import_internal50.insert_dev)(target, t36, anchor);
      (0, import_internal50.mount_component)(inputdate5, target, anchor);
      (0, import_internal50.insert_dev)(target, t37, anchor);
      (0, import_internal50.insert_dev)(target, h36, anchor);
      (0, import_internal50.insert_dev)(target, t39, anchor);
      (0, import_internal50.mount_component)(inputdate6, target, anchor);
      (0, import_internal50.insert_dev)(target, t40, anchor);
      (0, import_internal50.mount_component)(codeexample, target, anchor);
      (0, import_internal50.insert_dev)(target, t41, anchor);
      (0, import_internal50.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const inputdate6_changes = {};
      if (dirty & /*error*/
      1)
        inputdate6_changes.error = /*error*/
        ctx2[0];
      inputdate6.$set(inputdate6_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal50.transition_in)(inputdate0.$$.fragment, local);
      (0, import_internal50.transition_in)(inputdate1.$$.fragment, local);
      (0, import_internal50.transition_in)(inputdate2.$$.fragment, local);
      (0, import_internal50.transition_in)(inputdate3.$$.fragment, local);
      (0, import_internal50.transition_in)(inputdate4.$$.fragment, local);
      (0, import_internal50.transition_in)(inputdate5.$$.fragment, local);
      (0, import_internal50.transition_in)(inputdate6.$$.fragment, local);
      (0, import_internal50.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal50.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal50.transition_out)(inputdate0.$$.fragment, local);
      (0, import_internal50.transition_out)(inputdate1.$$.fragment, local);
      (0, import_internal50.transition_out)(inputdate2.$$.fragment, local);
      (0, import_internal50.transition_out)(inputdate3.$$.fragment, local);
      (0, import_internal50.transition_out)(inputdate4.$$.fragment, local);
      (0, import_internal50.transition_out)(inputdate5.$$.fragment, local);
      (0, import_internal50.transition_out)(inputdate6.$$.fragment, local);
      (0, import_internal50.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal50.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal50.detach_dev)(h2);
      if (detaching)
        (0, import_internal50.detach_dev)(t1);
      if (detaching)
        (0, import_internal50.detach_dev)(p0);
      if (detaching)
        (0, import_internal50.detach_dev)(t5);
      if (detaching)
        (0, import_internal50.detach_dev)(br);
      if (detaching)
        (0, import_internal50.detach_dev)(t6);
      if (detaching)
        (0, import_internal50.detach_dev)(h30);
      if (detaching)
        (0, import_internal50.detach_dev)(t8);
      (0, import_internal50.destroy_component)(inputdate0, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t9);
      if (detaching)
        (0, import_internal50.detach_dev)(h31);
      if (detaching)
        (0, import_internal50.detach_dev)(t11);
      (0, import_internal50.destroy_component)(inputdate1, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t12);
      if (detaching)
        (0, import_internal50.detach_dev)(h32);
      if (detaching)
        (0, import_internal50.detach_dev)(t14);
      (0, import_internal50.destroy_component)(inputdate2, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t15);
      if (detaching)
        (0, import_internal50.detach_dev)(h33);
      if (detaching)
        (0, import_internal50.detach_dev)(t18);
      if (detaching)
        (0, import_internal50.detach_dev)(p1);
      if (detaching)
        (0, import_internal50.detach_dev)(t24);
      if (detaching)
        (0, import_internal50.detach_dev)(div);
      (0, import_internal50.destroy_component)(inputdate3);
      if (detaching)
        (0, import_internal50.detach_dev)(t27);
      if (detaching)
        (0, import_internal50.detach_dev)(p2);
      if (detaching)
        (0, import_internal50.detach_dev)(t31);
      if (detaching)
        (0, import_internal50.detach_dev)(h34);
      if (detaching)
        (0, import_internal50.detach_dev)(t33);
      (0, import_internal50.destroy_component)(inputdate4, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t34);
      if (detaching)
        (0, import_internal50.detach_dev)(h35);
      if (detaching)
        (0, import_internal50.detach_dev)(t36);
      (0, import_internal50.destroy_component)(inputdate5, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t37);
      if (detaching)
        (0, import_internal50.detach_dev)(h36);
      if (detaching)
        (0, import_internal50.detach_dev)(t39);
      (0, import_internal50.destroy_component)(inputdate6, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t40);
      (0, import_internal50.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal50.detach_dev)(t41);
      (0, import_internal50.destroy_component)(api, detaching);
    }
  };
  (0, import_internal50.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment50.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onkey(e) {
  console.log(1111, e.detail.event.key);
}
function instance50($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal50.validate_slots)("InputDate", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component container."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "elevate",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the popup will be rendered into the <i>body</i>, to ensure it's not hidden under some elements (see example above)."
    },
    {
      name: "format",
      type: "string",
      default: "yyyy-mm-dd",
      description: 'Date format (<a href="https://mymth.github.io/vanillajs-datepicker/#/date-string+format" target="_blank">docs</a>).'
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the input."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "placeholder",
      type: "string",
      default: "yyyy-mm-dd",
      description: "Add a custom placeholder for the input."
    },
    {
      name: "required",
      description: "Mark the input as <i>required</i> for form submission and effectively shows it as invalid, until checked."
    },
    {
      name: "showOnFocus",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the datepicker will be automatically open when the input gets focus (normally opens on click)."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: "string",
      description: "Initial value of the input."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    },
    {
      name: "on:keydown",
      type: "function",
      description: "Triggered when a key is down."
    }
  ];
  const exampleHtml = `
<InputDate on:change="{ onChange }" />

<script>
function onChange (e) {
    console.log(e.detail.value);
}
&lt;/script>

`;
  let error2 = "You picked wrong!";
  function onchange4(e) {
    const val = e.detail;
    $$invalidate2(0, error2 = val === "1" ? "" : "You picked wrong!");
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_14.warn(`<InputDate> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    InputDate: InputDate_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    error: error2,
    onchange: onchange4,
    onkey
  });
  $$self2.$inject_state = ($$props3) => {
    if ("error" in $$props3)
      $$invalidate2(0, error2 = $$props3.error);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [error2, apiProps, exampleHtml, onchange4];
}
var InputDate_1 = class extends import_internal50.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal50.init)(this, options, instance50, create_fragment50, import_internal50.safe_not_equal, {});
    (0, import_internal50.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputDate_1",
      options,
      id: create_fragment50.name
    });
  }
};
var InputDate_default2 = InputDate_1;

// docs-src/components/input-math/InputMath.svelte
var import_internal51 = __toESM(require_internal());
var file45 = "docs-src/components/input-math/InputMath.svelte";
function create_fragment51(ctx) {
  let h2;
  let t1;
  let p;
  let t2;
  let em;
  let br;
  let t4;
  let t5;
  let hr;
  let t6;
  let h30;
  let t8;
  let inputmath0;
  let t9;
  let h31;
  let t11;
  let inputmath1;
  let t12;
  let h32;
  let t14;
  let inputmath2;
  let t15;
  let codeexample;
  let t16;
  let api;
  let current;
  inputmath0 = new InputMath_default({
    props: { label: "Enter amount" },
    $$inline: true
  });
  inputmath1 = new InputMath_default({
    props: {
      label: "Enter amount",
      info: "You can add 2 numbers here"
    },
    $$inline: true
  });
  inputmath2 = new InputMath_default({
    props: {
      label: "Enter amount",
      info: "You can add 2 numbers here",
      error: "Number must be big!"
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal51.element)("h2");
      h2.textContent = "Input Math";
      t1 = (0, import_internal51.space)();
      p = (0, import_internal51.element)("p");
      t2 = (0, import_internal51.text)("Enhanced input number field, which allows user to enter the basic math symbols: ");
      em = (0, import_internal51.element)("em");
      em.textContent = "+ - * / ( )";
      br = (0, import_internal51.element)("br");
      t4 = (0, import_internal51.text)("\n	and - on blur - replaces the equasion with the resolved number.");
      t5 = (0, import_internal51.space)();
      hr = (0, import_internal51.element)("hr");
      t6 = (0, import_internal51.space)();
      h30 = (0, import_internal51.element)("h3");
      h30.textContent = "Normal";
      t8 = (0, import_internal51.space)();
      (0, import_internal51.create_component)(inputmath0.$$.fragment);
      t9 = (0, import_internal51.space)();
      h31 = (0, import_internal51.element)("h3");
      h31.textContent = "With info box";
      t11 = (0, import_internal51.space)();
      (0, import_internal51.create_component)(inputmath1.$$.fragment);
      t12 = (0, import_internal51.space)();
      h32 = (0, import_internal51.element)("h3");
      h32.textContent = "With info box and error.";
      t14 = (0, import_internal51.space)();
      (0, import_internal51.create_component)(inputmath2.$$.fragment);
      t15 = (0, import_internal51.space)();
      (0, import_internal51.create_component)(codeexample.$$.fragment);
      t16 = (0, import_internal51.space)();
      (0, import_internal51.create_component)(api.$$.fragment);
      (0, import_internal51.add_location)(h2, file45, 0, 0, 0);
      (0, import_internal51.add_location)(em, file45, 1, 83, 103);
      (0, import_internal51.add_location)(br, file45, 1, 103, 123);
      (0, import_internal51.add_location)(p, file45, 1, 0, 20);
      (0, import_internal51.add_location)(hr, file45, 4, 0, 198);
      (0, import_internal51.add_location)(h30, file45, 6, 0, 204);
      (0, import_internal51.add_location)(h31, file45, 9, 0, 256);
      (0, import_internal51.add_location)(h32, file45, 12, 0, 348);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal51.insert_dev)(target, h2, anchor);
      (0, import_internal51.insert_dev)(target, t1, anchor);
      (0, import_internal51.insert_dev)(target, p, anchor);
      (0, import_internal51.append_dev)(p, t2);
      (0, import_internal51.append_dev)(p, em);
      (0, import_internal51.append_dev)(p, br);
      (0, import_internal51.append_dev)(p, t4);
      (0, import_internal51.insert_dev)(target, t5, anchor);
      (0, import_internal51.insert_dev)(target, hr, anchor);
      (0, import_internal51.insert_dev)(target, t6, anchor);
      (0, import_internal51.insert_dev)(target, h30, anchor);
      (0, import_internal51.insert_dev)(target, t8, anchor);
      (0, import_internal51.mount_component)(inputmath0, target, anchor);
      (0, import_internal51.insert_dev)(target, t9, anchor);
      (0, import_internal51.insert_dev)(target, h31, anchor);
      (0, import_internal51.insert_dev)(target, t11, anchor);
      (0, import_internal51.mount_component)(inputmath1, target, anchor);
      (0, import_internal51.insert_dev)(target, t12, anchor);
      (0, import_internal51.insert_dev)(target, h32, anchor);
      (0, import_internal51.insert_dev)(target, t14, anchor);
      (0, import_internal51.mount_component)(inputmath2, target, anchor);
      (0, import_internal51.insert_dev)(target, t15, anchor);
      (0, import_internal51.mount_component)(codeexample, target, anchor);
      (0, import_internal51.insert_dev)(target, t16, anchor);
      (0, import_internal51.mount_component)(api, target, anchor);
      current = true;
    },
    p: import_internal51.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal51.transition_in)(inputmath0.$$.fragment, local);
      (0, import_internal51.transition_in)(inputmath1.$$.fragment, local);
      (0, import_internal51.transition_in)(inputmath2.$$.fragment, local);
      (0, import_internal51.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal51.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal51.transition_out)(inputmath0.$$.fragment, local);
      (0, import_internal51.transition_out)(inputmath1.$$.fragment, local);
      (0, import_internal51.transition_out)(inputmath2.$$.fragment, local);
      (0, import_internal51.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal51.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal51.detach_dev)(h2);
      if (detaching)
        (0, import_internal51.detach_dev)(t1);
      if (detaching)
        (0, import_internal51.detach_dev)(p);
      if (detaching)
        (0, import_internal51.detach_dev)(t5);
      if (detaching)
        (0, import_internal51.detach_dev)(hr);
      if (detaching)
        (0, import_internal51.detach_dev)(t6);
      if (detaching)
        (0, import_internal51.detach_dev)(h30);
      if (detaching)
        (0, import_internal51.detach_dev)(t8);
      (0, import_internal51.destroy_component)(inputmath0, detaching);
      if (detaching)
        (0, import_internal51.detach_dev)(t9);
      if (detaching)
        (0, import_internal51.detach_dev)(h31);
      if (detaching)
        (0, import_internal51.detach_dev)(t11);
      (0, import_internal51.destroy_component)(inputmath1, detaching);
      if (detaching)
        (0, import_internal51.detach_dev)(t12);
      if (detaching)
        (0, import_internal51.detach_dev)(h32);
      if (detaching)
        (0, import_internal51.detach_dev)(t14);
      (0, import_internal51.destroy_component)(inputmath2, detaching);
      if (detaching)
        (0, import_internal51.detach_dev)(t15);
      (0, import_internal51.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal51.detach_dev)(t16);
      (0, import_internal51.destroy_component)(api, detaching);
    }
  };
  (0, import_internal51.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment51.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance51($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal51.validate_slots)("InputMath", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the input."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Assign placeholder to the underlying input."
    },
    {
      name: "required",
      description: "Mark the input as <i>aria-required</i>."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Initial value of the input."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    },
    {
      name: "on:keydown",
      type: "function",
      description: "Triggered when a key is down."
    }
  ];
  const exampleHtml = `
<InputMath label="Enter amount" on:change="{onChange}" />

<script>
function onChange (e) {
    const { value, oldValue } = e.detail;
    console.log({ value, oldValue });
}
&lt;/script>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InputMath> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    InputMath: InputMath_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml
  });
  return [apiProps, exampleHtml];
}
var InputMath_1 = class extends import_internal51.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal51.init)(this, options, instance51, create_fragment51, import_internal51.safe_not_equal, {});
    (0, import_internal51.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputMath_1",
      options,
      id: create_fragment51.name
    });
  }
};
var InputMath_default2 = InputMath_1;

// docs-src/components/input-number/InputNumber.svelte
var import_internal52 = __toESM(require_internal());
var file46 = "docs-src/components/input-number/InputNumber.svelte";
function create_fragment52(ctx) {
  let h2;
  let t1;
  let p;
  let t3;
  let h30;
  let t5;
  let inputnumber0;
  let t6;
  let h31;
  let t8;
  let inputnumber1;
  let updating_value;
  let t9;
  let h32;
  let t11;
  let inputnumber2;
  let t12;
  let h33;
  let t14;
  let inputnumber3;
  let t15;
  let codeexample;
  let t16;
  let api;
  let current;
  inputnumber0 = new InputNumber_default({
    props: { label: "Enter amount" },
    $$inline: true
  });
  function inputnumber1_value_binding(value2) {
    ctx[5](value2);
  }
  let inputnumber1_props = {
    label: "Enter amount",
    error: (
      /*error*/
      ctx[0]
    )
  };
  if (
    /*value*/
    ctx[1] !== void 0
  ) {
    inputnumber1_props.value = /*value*/
    ctx[1];
  }
  inputnumber1 = new InputNumber_default({
    props: inputnumber1_props,
    $$inline: true
  });
  import_internal52.binding_callbacks.push(() => (0, import_internal52.bind)(inputnumber1, "value", inputnumber1_value_binding));
  inputnumber1.$on(
    "input",
    /*validator*/
    ctx[4]
  );
  inputnumber2 = new InputNumber_default({
    props: {
      label: "Enter amount",
      info: "Additional information."
    },
    $$inline: true
  });
  inputnumber3 = new InputNumber_default({
    props: { label: "Enter amount", separator: "," },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[3]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[2]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal52.element)("h2");
      h2.textContent = "Input Number";
      t1 = (0, import_internal52.space)();
      p = (0, import_internal52.element)("p");
      p.textContent = "Only allows numbers, a single dot (for decimals) and the minus sign at the beginning.";
      t3 = (0, import_internal52.space)();
      h30 = (0, import_internal52.element)("h3");
      h30.textContent = "Normal";
      t5 = (0, import_internal52.space)();
      (0, import_internal52.create_component)(inputnumber0.$$.fragment);
      t6 = (0, import_internal52.space)();
      h31 = (0, import_internal52.element)("h3");
      h31.textContent = "With validation error";
      t8 = (0, import_internal52.space)();
      (0, import_internal52.create_component)(inputnumber1.$$.fragment);
      t9 = (0, import_internal52.space)();
      h32 = (0, import_internal52.element)("h3");
      h32.textContent = "With info box";
      t11 = (0, import_internal52.space)();
      (0, import_internal52.create_component)(inputnumber2.$$.fragment);
      t12 = (0, import_internal52.space)();
      h33 = (0, import_internal52.element)("h3");
      h33.textContent = "With comma as the decimal separator";
      t14 = (0, import_internal52.space)();
      (0, import_internal52.create_component)(inputnumber3.$$.fragment);
      t15 = (0, import_internal52.space)();
      (0, import_internal52.create_component)(codeexample.$$.fragment);
      t16 = (0, import_internal52.space)();
      (0, import_internal52.create_component)(api.$$.fragment);
      (0, import_internal52.add_location)(h2, file46, 0, 0, 0);
      (0, import_internal52.add_location)(p, file46, 1, 0, 22);
      (0, import_internal52.add_location)(h30, file46, 4, 0, 117);
      (0, import_internal52.add_location)(h31, file46, 7, 0, 171);
      (0, import_internal52.add_location)(h32, file46, 10, 0, 292);
      (0, import_internal52.add_location)(h33, file46, 13, 0, 384);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal52.insert_dev)(target, h2, anchor);
      (0, import_internal52.insert_dev)(target, t1, anchor);
      (0, import_internal52.insert_dev)(target, p, anchor);
      (0, import_internal52.insert_dev)(target, t3, anchor);
      (0, import_internal52.insert_dev)(target, h30, anchor);
      (0, import_internal52.insert_dev)(target, t5, anchor);
      (0, import_internal52.mount_component)(inputnumber0, target, anchor);
      (0, import_internal52.insert_dev)(target, t6, anchor);
      (0, import_internal52.insert_dev)(target, h31, anchor);
      (0, import_internal52.insert_dev)(target, t8, anchor);
      (0, import_internal52.mount_component)(inputnumber1, target, anchor);
      (0, import_internal52.insert_dev)(target, t9, anchor);
      (0, import_internal52.insert_dev)(target, h32, anchor);
      (0, import_internal52.insert_dev)(target, t11, anchor);
      (0, import_internal52.mount_component)(inputnumber2, target, anchor);
      (0, import_internal52.insert_dev)(target, t12, anchor);
      (0, import_internal52.insert_dev)(target, h33, anchor);
      (0, import_internal52.insert_dev)(target, t14, anchor);
      (0, import_internal52.mount_component)(inputnumber3, target, anchor);
      (0, import_internal52.insert_dev)(target, t15, anchor);
      (0, import_internal52.mount_component)(codeexample, target, anchor);
      (0, import_internal52.insert_dev)(target, t16, anchor);
      (0, import_internal52.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const inputnumber1_changes = {};
      if (dirty & /*error*/
      1)
        inputnumber1_changes.error = /*error*/
        ctx2[0];
      if (!updating_value && dirty & /*value*/
      2) {
        updating_value = true;
        inputnumber1_changes.value = /*value*/
        ctx2[1];
        (0, import_internal52.add_flush_callback)(() => updating_value = false);
      }
      inputnumber1.$set(inputnumber1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal52.transition_in)(inputnumber0.$$.fragment, local);
      (0, import_internal52.transition_in)(inputnumber1.$$.fragment, local);
      (0, import_internal52.transition_in)(inputnumber2.$$.fragment, local);
      (0, import_internal52.transition_in)(inputnumber3.$$.fragment, local);
      (0, import_internal52.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal52.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal52.transition_out)(inputnumber0.$$.fragment, local);
      (0, import_internal52.transition_out)(inputnumber1.$$.fragment, local);
      (0, import_internal52.transition_out)(inputnumber2.$$.fragment, local);
      (0, import_internal52.transition_out)(inputnumber3.$$.fragment, local);
      (0, import_internal52.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal52.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal52.detach_dev)(h2);
      if (detaching)
        (0, import_internal52.detach_dev)(t1);
      if (detaching)
        (0, import_internal52.detach_dev)(p);
      if (detaching)
        (0, import_internal52.detach_dev)(t3);
      if (detaching)
        (0, import_internal52.detach_dev)(h30);
      if (detaching)
        (0, import_internal52.detach_dev)(t5);
      (0, import_internal52.destroy_component)(inputnumber0, detaching);
      if (detaching)
        (0, import_internal52.detach_dev)(t6);
      if (detaching)
        (0, import_internal52.detach_dev)(h31);
      if (detaching)
        (0, import_internal52.detach_dev)(t8);
      (0, import_internal52.destroy_component)(inputnumber1, detaching);
      if (detaching)
        (0, import_internal52.detach_dev)(t9);
      if (detaching)
        (0, import_internal52.detach_dev)(h32);
      if (detaching)
        (0, import_internal52.detach_dev)(t11);
      (0, import_internal52.destroy_component)(inputnumber2, detaching);
      if (detaching)
        (0, import_internal52.detach_dev)(t12);
      if (detaching)
        (0, import_internal52.detach_dev)(h33);
      if (detaching)
        (0, import_internal52.detach_dev)(t14);
      (0, import_internal52.destroy_component)(inputnumber3, detaching);
      if (detaching)
        (0, import_internal52.detach_dev)(t15);
      (0, import_internal52.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal52.detach_dev)(t16);
      (0, import_internal52.destroy_component)(api, detaching);
    }
  };
  (0, import_internal52.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment52.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance52($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal52.validate_slots)("InputNumber", slots2, []);
  let error2 = "Number must be <100";
  let value2 = 123;
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the input."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Assign placeholder to the underlying input."
    },
    {
      name: "required",
      description: "Mark the input as <i>aria-required</i>. The actual validation must be done in the consumer."
    },
    {
      name: "separator",
      type: "string",
      default: ".",
      description: "Custom decimal separator."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Initial value of the input."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered after the value changes and the focus leaves the input."
    },
    {
      name: "on:input",
      type: "function",
      description: "Triggered as soon as the input value changes."
    }
  ];
  const exampleHtml = `
<InputNumber label="Enter amount"/>
`;
  function validator(e) {
    const num2 = parseFloat("" + e.target.value) || 0;
    $$invalidate2(0, error2 = num2 > 100 ? "Number must be <100" : "");
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InputNumber> was created with unknown prop '${key}'`);
  });
  function inputnumber1_value_binding(value$1) {
    value2 = value$1;
    $$invalidate2(1, value2);
  }
  $$self2.$capture_state = () => ({
    InputNumber: InputNumber_default,
    CodeExample: CodeExample_default,
    API: ApiTable_default,
    error: error2,
    value: value2,
    apiProps,
    exampleHtml,
    validator
  });
  $$self2.$inject_state = ($$props3) => {
    if ("error" in $$props3)
      $$invalidate2(0, error2 = $$props3.error);
    if ("value" in $$props3)
      $$invalidate2(1, value2 = $$props3.value);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [error2, value2, apiProps, exampleHtml, validator, inputnumber1_value_binding];
}
var InputNumber_1 = class extends import_internal52.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal52.init)(this, options, instance52, create_fragment52, import_internal52.safe_not_equal, {});
    (0, import_internal52.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputNumber_1",
      options,
      id: create_fragment52.name
    });
  }
};
var InputNumber_default2 = InputNumber_1;

// docs-src/components/input-password/InputPassword.svelte
var import_internal53 = __toESM(require_internal());
var file47 = "docs-src/components/input-password/InputPassword.svelte";
function create_fragment53(ctx) {
  let h2;
  let t1;
  let p0;
  let t3;
  let p1;
  let t4;
  let a;
  let t6;
  let em0;
  let t8;
  let br0;
  let t9;
  let em1;
  let t11;
  let em2;
  let t13;
  let t14;
  let hr;
  let t15;
  let h30;
  let t17;
  let inputpassword0;
  let updating_value;
  let br1;
  let t18;
  let p2;
  let t19;
  let t20;
  let t21;
  let h31;
  let t23;
  let inputpassword1;
  let t24;
  let h32;
  let t26;
  let inputpassword2;
  let t27;
  let h33;
  let t29;
  let inputpassword3;
  let t30;
  let h34;
  let t32;
  let inputpassword4;
  let t33;
  let codeexample;
  let t34;
  let api;
  let current;
  function inputpassword0_value_binding(value2) {
    ctx[3](value2);
  }
  let inputpassword0_props = {
    label: "Current password",
    name: "password",
    placeholder: "Not 123456"
  };
  if (
    /*val*/
    ctx[0] !== void 0
  ) {
    inputpassword0_props.value = /*val*/
    ctx[0];
  }
  inputpassword0 = new InputPassword_default({
    props: inputpassword0_props,
    $$inline: true
  });
  import_internal53.binding_callbacks.push(() => (0, import_internal53.bind)(inputpassword0, "value", inputpassword0_value_binding));
  inputpassword1 = new InputPassword_default({
    props: { strength: true },
    $$inline: true
  });
  inputpassword2 = new InputPassword_default({
    props: { strength: true, label: "New password" },
    $$inline: true
  });
  inputpassword3 = new InputPassword_default({
    props: {
      strength: true,
      label: "New password",
      info: "Password rules"
    },
    $$inline: true
  });
  inputpassword4 = new InputPassword_default({
    props: {
      strength: true,
      label: "New password",
      info: "Password rules",
      error: "Your password is weak!"
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal53.element)("h2");
      h2.textContent = "Input Password";
      t1 = (0, import_internal53.space)();
      p0 = (0, import_internal53.element)("p");
      p0.textContent = "Enhanced input password field with password strength indicator.";
      t3 = (0, import_internal53.space)();
      p1 = (0, import_internal53.element)("p");
      t4 = (0, import_internal53.text)("To be able to use the password strength indicator, ");
      a = (0, import_internal53.element)("a");
      a.textContent = "zxcvbn";
      t6 = (0, import_internal53.text)(" lib must be available on the global scope (");
      em0 = (0, import_internal53.element)("em");
      em0.textContent = "window.zxcvbn";
      t8 = (0, import_internal53.text)(").");
      br0 = (0, import_internal53.element)("br");
      t9 = (0, import_internal53.text)("\n	This script file is available in this npm package ");
      em1 = (0, import_internal53.element)("em");
      em1.textContent = "node_modules/@perfectthings/ui/docs/zxcvbn.js";
      t11 = (0, import_internal53.text)(", from where it can be copied and loaded e.g. in a ");
      em2 = (0, import_internal53.element)("em");
      em2.textContent = "<script>";
      t13 = (0, import_internal53.text)(" tag.");
      t14 = (0, import_internal53.space)();
      hr = (0, import_internal53.element)("hr");
      t15 = (0, import_internal53.space)();
      h30 = (0, import_internal53.element)("h3");
      h30.textContent = "Default";
      t17 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(inputpassword0.$$.fragment);
      br1 = (0, import_internal53.element)("br");
      t18 = (0, import_internal53.space)();
      p2 = (0, import_internal53.element)("p");
      t19 = (0, import_internal53.text)("Your secret password is: ");
      t20 = (0, import_internal53.text)(
        /*val*/
        ctx[0]
      );
      t21 = (0, import_internal53.space)();
      h31 = (0, import_internal53.element)("h3");
      h31.textContent = "With password strength indicator";
      t23 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(inputpassword1.$$.fragment);
      t24 = (0, import_internal53.space)();
      h32 = (0, import_internal53.element)("h3");
      h32.textContent = "With password strength indicator and label";
      t26 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(inputpassword2.$$.fragment);
      t27 = (0, import_internal53.space)();
      h33 = (0, import_internal53.element)("h3");
      h33.textContent = "With password strength indicator, label, and info box";
      t29 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(inputpassword3.$$.fragment);
      t30 = (0, import_internal53.space)();
      h34 = (0, import_internal53.element)("h3");
      h34.textContent = "With password strength indicator, label, info box, and error";
      t32 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(inputpassword4.$$.fragment);
      t33 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(codeexample.$$.fragment);
      t34 = (0, import_internal53.space)();
      (0, import_internal53.create_component)(api.$$.fragment);
      (0, import_internal53.add_location)(h2, file47, 0, 0, 0);
      (0, import_internal53.add_location)(p0, file47, 1, 0, 24);
      (0, import_internal53.attr_dev)(a, "href", "https://github.com/dropbox/zxcvbn");
      (0, import_internal53.add_location)(a, file47, 2, 54, 149);
      (0, import_internal53.add_location)(em0, file47, 2, 152, 247);
      (0, import_internal53.add_location)(br0, file47, 2, 176, 271);
      (0, import_internal53.add_location)(em1, file47, 3, 51, 327);
      (0, import_internal53.add_location)(em2, file47, 3, 156, 432);
      (0, import_internal53.add_location)(p1, file47, 2, 0, 95);
      (0, import_internal53.add_location)(hr, file47, 6, 0, 467);
      (0, import_internal53.add_location)(h30, file47, 8, 0, 473);
      (0, import_internal53.add_location)(br1, file47, 9, 101, 591);
      (0, import_internal53.add_location)(p2, file47, 10, 0, 596);
      (0, import_internal53.add_location)(h31, file47, 12, 0, 635);
      (0, import_internal53.add_location)(h32, file47, 17, 0, 707);
      (0, import_internal53.add_location)(h33, file47, 20, 0, 807);
      (0, import_internal53.add_location)(h34, file47, 23, 0, 940);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal53.insert_dev)(target, h2, anchor);
      (0, import_internal53.insert_dev)(target, t1, anchor);
      (0, import_internal53.insert_dev)(target, p0, anchor);
      (0, import_internal53.insert_dev)(target, t3, anchor);
      (0, import_internal53.insert_dev)(target, p1, anchor);
      (0, import_internal53.append_dev)(p1, t4);
      (0, import_internal53.append_dev)(p1, a);
      (0, import_internal53.append_dev)(p1, t6);
      (0, import_internal53.append_dev)(p1, em0);
      (0, import_internal53.append_dev)(p1, t8);
      (0, import_internal53.append_dev)(p1, br0);
      (0, import_internal53.append_dev)(p1, t9);
      (0, import_internal53.append_dev)(p1, em1);
      (0, import_internal53.append_dev)(p1, t11);
      (0, import_internal53.append_dev)(p1, em2);
      (0, import_internal53.append_dev)(p1, t13);
      (0, import_internal53.insert_dev)(target, t14, anchor);
      (0, import_internal53.insert_dev)(target, hr, anchor);
      (0, import_internal53.insert_dev)(target, t15, anchor);
      (0, import_internal53.insert_dev)(target, h30, anchor);
      (0, import_internal53.insert_dev)(target, t17, anchor);
      (0, import_internal53.mount_component)(inputpassword0, target, anchor);
      (0, import_internal53.insert_dev)(target, br1, anchor);
      (0, import_internal53.insert_dev)(target, t18, anchor);
      (0, import_internal53.insert_dev)(target, p2, anchor);
      (0, import_internal53.append_dev)(p2, t19);
      (0, import_internal53.append_dev)(p2, t20);
      (0, import_internal53.insert_dev)(target, t21, anchor);
      (0, import_internal53.insert_dev)(target, h31, anchor);
      (0, import_internal53.insert_dev)(target, t23, anchor);
      (0, import_internal53.mount_component)(inputpassword1, target, anchor);
      (0, import_internal53.insert_dev)(target, t24, anchor);
      (0, import_internal53.insert_dev)(target, h32, anchor);
      (0, import_internal53.insert_dev)(target, t26, anchor);
      (0, import_internal53.mount_component)(inputpassword2, target, anchor);
      (0, import_internal53.insert_dev)(target, t27, anchor);
      (0, import_internal53.insert_dev)(target, h33, anchor);
      (0, import_internal53.insert_dev)(target, t29, anchor);
      (0, import_internal53.mount_component)(inputpassword3, target, anchor);
      (0, import_internal53.insert_dev)(target, t30, anchor);
      (0, import_internal53.insert_dev)(target, h34, anchor);
      (0, import_internal53.insert_dev)(target, t32, anchor);
      (0, import_internal53.mount_component)(inputpassword4, target, anchor);
      (0, import_internal53.insert_dev)(target, t33, anchor);
      (0, import_internal53.mount_component)(codeexample, target, anchor);
      (0, import_internal53.insert_dev)(target, t34, anchor);
      (0, import_internal53.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const inputpassword0_changes = {};
      if (!updating_value && dirty & /*val*/
      1) {
        updating_value = true;
        inputpassword0_changes.value = /*val*/
        ctx2[0];
        (0, import_internal53.add_flush_callback)(() => updating_value = false);
      }
      inputpassword0.$set(inputpassword0_changes);
      if (!current || dirty & /*val*/
      1)
        (0, import_internal53.set_data_dev)(
          t20,
          /*val*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal53.transition_in)(inputpassword0.$$.fragment, local);
      (0, import_internal53.transition_in)(inputpassword1.$$.fragment, local);
      (0, import_internal53.transition_in)(inputpassword2.$$.fragment, local);
      (0, import_internal53.transition_in)(inputpassword3.$$.fragment, local);
      (0, import_internal53.transition_in)(inputpassword4.$$.fragment, local);
      (0, import_internal53.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal53.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal53.transition_out)(inputpassword0.$$.fragment, local);
      (0, import_internal53.transition_out)(inputpassword1.$$.fragment, local);
      (0, import_internal53.transition_out)(inputpassword2.$$.fragment, local);
      (0, import_internal53.transition_out)(inputpassword3.$$.fragment, local);
      (0, import_internal53.transition_out)(inputpassword4.$$.fragment, local);
      (0, import_internal53.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal53.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal53.detach_dev)(h2);
      if (detaching)
        (0, import_internal53.detach_dev)(t1);
      if (detaching)
        (0, import_internal53.detach_dev)(p0);
      if (detaching)
        (0, import_internal53.detach_dev)(t3);
      if (detaching)
        (0, import_internal53.detach_dev)(p1);
      if (detaching)
        (0, import_internal53.detach_dev)(t14);
      if (detaching)
        (0, import_internal53.detach_dev)(hr);
      if (detaching)
        (0, import_internal53.detach_dev)(t15);
      if (detaching)
        (0, import_internal53.detach_dev)(h30);
      if (detaching)
        (0, import_internal53.detach_dev)(t17);
      (0, import_internal53.destroy_component)(inputpassword0, detaching);
      if (detaching)
        (0, import_internal53.detach_dev)(br1);
      if (detaching)
        (0, import_internal53.detach_dev)(t18);
      if (detaching)
        (0, import_internal53.detach_dev)(p2);
      if (detaching)
        (0, import_internal53.detach_dev)(t21);
      if (detaching)
        (0, import_internal53.detach_dev)(h31);
      if (detaching)
        (0, import_internal53.detach_dev)(t23);
      (0, import_internal53.destroy_component)(inputpassword1, detaching);
      if (detaching)
        (0, import_internal53.detach_dev)(t24);
      if (detaching)
        (0, import_internal53.detach_dev)(h32);
      if (detaching)
        (0, import_internal53.detach_dev)(t26);
      (0, import_internal53.destroy_component)(inputpassword2, detaching);
      if (detaching)
        (0, import_internal53.detach_dev)(t27);
      if (detaching)
        (0, import_internal53.detach_dev)(h33);
      if (detaching)
        (0, import_internal53.detach_dev)(t29);
      (0, import_internal53.destroy_component)(inputpassword3, detaching);
      if (detaching)
        (0, import_internal53.detach_dev)(t30);
      if (detaching)
        (0, import_internal53.detach_dev)(h34);
      if (detaching)
        (0, import_internal53.detach_dev)(t32);
      (0, import_internal53.destroy_component)(inputpassword4, detaching);
      if (detaching)
        (0, import_internal53.detach_dev)(t33);
      (0, import_internal53.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal53.detach_dev)(t34);
      (0, import_internal53.destroy_component)(api, detaching);
    }
  };
  (0, import_internal53.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment53.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance53($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal53.validate_slots)("InputPassword", slots2, []);
  let val;
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the input."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Assign placeholder to the underlying input."
    },
    {
      name: "required",
      description: "Mark the input as <i>required</i> for form submission and effectively shows it as invalid, until filled."
    },
    {
      name: "strength",
      description: "Provide the password strength UI (zxcvbn lib must be loaded)."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Initial value of the input."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    },
    {
      name: "on:keydown",
      type: "function",
      description: "Triggered when a key is down."
    }
  ];
  const exampleHtml = `
<InputPassword strength label="Current password" on:change="{onChange}" />

<script>
function onChange (e) {
    console.log('value', e.target.value);
}
&lt;/script>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InputPassword> was created with unknown prop '${key}'`);
  });
  function inputpassword0_value_binding(value2) {
    val = value2;
    $$invalidate2(0, val);
  }
  $$self2.$capture_state = () => ({
    InputPassword: InputPassword_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    val,
    apiProps,
    exampleHtml
  });
  $$self2.$inject_state = ($$props3) => {
    if ("val" in $$props3)
      $$invalidate2(0, val = $$props3.val);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [val, apiProps, exampleHtml, inputpassword0_value_binding];
}
var InputPassword_1 = class extends import_internal53.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal53.init)(this, options, instance53, create_fragment53, import_internal53.safe_not_equal, {});
    (0, import_internal53.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputPassword_1",
      options,
      id: create_fragment53.name
    });
  }
};
var InputPassword_default2 = InputPassword_1;

// docs-src/components/input-text/InputText.svelte
var import_internal54 = __toESM(require_internal());
var { console: console_15 } = import_internal54.globals;
var file48 = "docs-src/components/input-text/InputText.svelte";
function create_fragment54(ctx) {
  let h2;
  let t1;
  let p0;
  let t2;
  let br0;
  let t3;
  let t4;
  let br1;
  let t5;
  let h30;
  let t7;
  let inputtext0;
  let updating_value;
  let t8;
  let p1;
  let t9;
  let t10;
  let t11;
  let h31;
  let t13;
  let inputtext1;
  let t14;
  let h32;
  let t16;
  let inputtext2;
  let t17;
  let br2;
  let t18;
  let inputtext3;
  let t19;
  let codeexample;
  let t20;
  let api;
  let current;
  function inputtext0_value_binding(value2) {
    ctx[7](value2);
  }
  let inputtext0_props = {};
  if (
    /*val*/
    ctx[0] !== void 0
  ) {
    inputtext0_props.value = /*val*/
    ctx[0];
  }
  inputtext0 = new InputText_default({ props: inputtext0_props, $$inline: true });
  import_internal54.binding_callbacks.push(() => (0, import_internal54.bind)(inputtext0, "value", inputtext0_value_binding));
  inputtext0.$on(
    "input",
    /*oninput*/
    ctx[6]
  );
  inputtext1 = new InputText_default({
    props: { disabled: true, value: "disabled value" },
    $$inline: true
  });
  inputtext1.$on(
    "input",
    /*oninput*/
    ctx[6]
  );
  inputtext2 = new InputText_default({
    props: {
      label: "Validate on change",
      error: (
        /*error1*/
        ctx[1]
      ),
      value: (
        /*val*/
        ctx[0]
      )
    },
    $$inline: true
  });
  inputtext2.$on(
    "change",
    /*onchange*/
    ctx[5]
  );
  inputtext3 = new InputText_default({
    props: {
      label: "Validate on input",
      info: "This should be avoided in most cases. Validating input as user is typing is a bad UX.",
      required: true,
      error: (
        /*error2*/
        ctx[2]
      ),
      value: (
        /*val*/
        ctx[0]
      )
    },
    $$inline: true
  });
  inputtext3.$on(
    "input",
    /*oninput*/
    ctx[6]
  );
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[4]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[3]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal54.element)("h2");
      h2.textContent = "Input";
      t1 = (0, import_internal54.space)();
      p0 = (0, import_internal54.element)("p");
      t2 = (0, import_internal54.text)("The basic inputs are styled with css.");
      br0 = (0, import_internal54.element)("br");
      t3 = (0, import_internal54.text)("\n	Enhanced components provide additional functionality and better DX.");
      t4 = (0, import_internal54.space)();
      br1 = (0, import_internal54.element)("br");
      t5 = (0, import_internal54.space)();
      h30 = (0, import_internal54.element)("h3");
      h30.textContent = "Normal";
      t7 = (0, import_internal54.space)();
      (0, import_internal54.create_component)(inputtext0.$$.fragment);
      t8 = (0, import_internal54.space)();
      p1 = (0, import_internal54.element)("p");
      t9 = (0, import_internal54.text)("Input value: ");
      t10 = (0, import_internal54.text)(
        /*val*/
        ctx[0]
      );
      t11 = (0, import_internal54.space)();
      h31 = (0, import_internal54.element)("h3");
      h31.textContent = "Disabled";
      t13 = (0, import_internal54.space)();
      (0, import_internal54.create_component)(inputtext1.$$.fragment);
      t14 = (0, import_internal54.space)();
      h32 = (0, import_internal54.element)("h3");
      h32.textContent = "With validation";
      t16 = (0, import_internal54.space)();
      (0, import_internal54.create_component)(inputtext2.$$.fragment);
      t17 = (0, import_internal54.space)();
      br2 = (0, import_internal54.element)("br");
      t18 = (0, import_internal54.space)();
      (0, import_internal54.create_component)(inputtext3.$$.fragment);
      t19 = (0, import_internal54.space)();
      (0, import_internal54.create_component)(codeexample.$$.fragment);
      t20 = (0, import_internal54.space)();
      (0, import_internal54.create_component)(api.$$.fragment);
      (0, import_internal54.add_location)(h2, file48, 0, 0, 0);
      (0, import_internal54.add_location)(br0, file48, 3, 38, 58);
      (0, import_internal54.add_location)(p0, file48, 2, 0, 16);
      (0, import_internal54.add_location)(br1, file48, 7, 0, 138);
      (0, import_internal54.add_location)(h30, file48, 9, 0, 144);
      (0, import_internal54.add_location)(p1, file48, 11, 0, 214);
      (0, import_internal54.add_location)(h31, file48, 13, 0, 241);
      (0, import_internal54.add_location)(h32, file48, 17, 0, 328);
      (0, import_internal54.add_location)(br2, file48, 24, 0, 453);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal54.insert_dev)(target, h2, anchor);
      (0, import_internal54.insert_dev)(target, t1, anchor);
      (0, import_internal54.insert_dev)(target, p0, anchor);
      (0, import_internal54.append_dev)(p0, t2);
      (0, import_internal54.append_dev)(p0, br0);
      (0, import_internal54.append_dev)(p0, t3);
      (0, import_internal54.insert_dev)(target, t4, anchor);
      (0, import_internal54.insert_dev)(target, br1, anchor);
      (0, import_internal54.insert_dev)(target, t5, anchor);
      (0, import_internal54.insert_dev)(target, h30, anchor);
      (0, import_internal54.insert_dev)(target, t7, anchor);
      (0, import_internal54.mount_component)(inputtext0, target, anchor);
      (0, import_internal54.insert_dev)(target, t8, anchor);
      (0, import_internal54.insert_dev)(target, p1, anchor);
      (0, import_internal54.append_dev)(p1, t9);
      (0, import_internal54.append_dev)(p1, t10);
      (0, import_internal54.insert_dev)(target, t11, anchor);
      (0, import_internal54.insert_dev)(target, h31, anchor);
      (0, import_internal54.insert_dev)(target, t13, anchor);
      (0, import_internal54.mount_component)(inputtext1, target, anchor);
      (0, import_internal54.insert_dev)(target, t14, anchor);
      (0, import_internal54.insert_dev)(target, h32, anchor);
      (0, import_internal54.insert_dev)(target, t16, anchor);
      (0, import_internal54.mount_component)(inputtext2, target, anchor);
      (0, import_internal54.insert_dev)(target, t17, anchor);
      (0, import_internal54.insert_dev)(target, br2, anchor);
      (0, import_internal54.insert_dev)(target, t18, anchor);
      (0, import_internal54.mount_component)(inputtext3, target, anchor);
      (0, import_internal54.insert_dev)(target, t19, anchor);
      (0, import_internal54.mount_component)(codeexample, target, anchor);
      (0, import_internal54.insert_dev)(target, t20, anchor);
      (0, import_internal54.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const inputtext0_changes = {};
      if (!updating_value && dirty & /*val*/
      1) {
        updating_value = true;
        inputtext0_changes.value = /*val*/
        ctx2[0];
        (0, import_internal54.add_flush_callback)(() => updating_value = false);
      }
      inputtext0.$set(inputtext0_changes);
      if (!current || dirty & /*val*/
      1)
        (0, import_internal54.set_data_dev)(
          t10,
          /*val*/
          ctx2[0]
        );
      const inputtext2_changes = {};
      if (dirty & /*error1*/
      2)
        inputtext2_changes.error = /*error1*/
        ctx2[1];
      if (dirty & /*val*/
      1)
        inputtext2_changes.value = /*val*/
        ctx2[0];
      inputtext2.$set(inputtext2_changes);
      const inputtext3_changes = {};
      if (dirty & /*error2*/
      4)
        inputtext3_changes.error = /*error2*/
        ctx2[2];
      if (dirty & /*val*/
      1)
        inputtext3_changes.value = /*val*/
        ctx2[0];
      inputtext3.$set(inputtext3_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal54.transition_in)(inputtext0.$$.fragment, local);
      (0, import_internal54.transition_in)(inputtext1.$$.fragment, local);
      (0, import_internal54.transition_in)(inputtext2.$$.fragment, local);
      (0, import_internal54.transition_in)(inputtext3.$$.fragment, local);
      (0, import_internal54.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal54.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal54.transition_out)(inputtext0.$$.fragment, local);
      (0, import_internal54.transition_out)(inputtext1.$$.fragment, local);
      (0, import_internal54.transition_out)(inputtext2.$$.fragment, local);
      (0, import_internal54.transition_out)(inputtext3.$$.fragment, local);
      (0, import_internal54.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal54.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal54.detach_dev)(h2);
      if (detaching)
        (0, import_internal54.detach_dev)(t1);
      if (detaching)
        (0, import_internal54.detach_dev)(p0);
      if (detaching)
        (0, import_internal54.detach_dev)(t4);
      if (detaching)
        (0, import_internal54.detach_dev)(br1);
      if (detaching)
        (0, import_internal54.detach_dev)(t5);
      if (detaching)
        (0, import_internal54.detach_dev)(h30);
      if (detaching)
        (0, import_internal54.detach_dev)(t7);
      (0, import_internal54.destroy_component)(inputtext0, detaching);
      if (detaching)
        (0, import_internal54.detach_dev)(t8);
      if (detaching)
        (0, import_internal54.detach_dev)(p1);
      if (detaching)
        (0, import_internal54.detach_dev)(t11);
      if (detaching)
        (0, import_internal54.detach_dev)(h31);
      if (detaching)
        (0, import_internal54.detach_dev)(t13);
      (0, import_internal54.destroy_component)(inputtext1, detaching);
      if (detaching)
        (0, import_internal54.detach_dev)(t14);
      if (detaching)
        (0, import_internal54.detach_dev)(h32);
      if (detaching)
        (0, import_internal54.detach_dev)(t16);
      (0, import_internal54.destroy_component)(inputtext2, detaching);
      if (detaching)
        (0, import_internal54.detach_dev)(t17);
      if (detaching)
        (0, import_internal54.detach_dev)(br2);
      if (detaching)
        (0, import_internal54.detach_dev)(t18);
      (0, import_internal54.destroy_component)(inputtext3, detaching);
      if (detaching)
        (0, import_internal54.detach_dev)(t19);
      (0, import_internal54.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal54.detach_dev)(t20);
      (0, import_internal54.destroy_component)(api, detaching);
    }
  };
  (0, import_internal54.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment54.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var email = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
function validate(v) {
  if (!v)
    return "This field is required";
  if (!email.test(v))
    return "Invalid email";
  return;
}
function instance54($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal54.validate_slots)("InputText", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the input."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the input."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Assign placeholder to the underlying input."
    },
    {
      name: "required",
      description: "Mark the input as <i>aria-required</i>. The actual validation must be done in the consumer."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Initial value of the input."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered after the value changes and the focus leaves the input."
    },
    {
      name: "on:input",
      type: "function",
      description: "Triggered as soon as the input value changes."
    }
  ];
  const exampleHtml = `
<InputText label="Email" error="Invalid email" value="admin" on:change="{onChange}" />

<script>
function onChange (e) {
    console.log('value', e.target.value);
}
&lt;/script>
`;
  let val = "Hi!";
  let error1 = "", error2 = "";
  function onchange4(e) {
    $$invalidate2(1, error1 = validate(e.target.value));
    console.log(e.target.value);
  }
  function oninput(e) {
    $$invalidate2(2, error2 = validate(e.target.value));
    console.log(e.target.value);
  }
  oninput({ target: { value: "-" } });
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_15.warn(`<InputText> was created with unknown prop '${key}'`);
  });
  function inputtext0_value_binding(value2) {
    val = value2;
    $$invalidate2(0, val);
  }
  $$self2.$capture_state = () => ({
    InputText: InputText_default,
    CodeExample: CodeExample_default,
    API: ApiTable_default,
    apiProps,
    exampleHtml,
    val,
    error1,
    error2,
    email,
    validate,
    onchange: onchange4,
    oninput
  });
  $$self2.$inject_state = ($$props3) => {
    if ("val" in $$props3)
      $$invalidate2(0, val = $$props3.val);
    if ("error1" in $$props3)
      $$invalidate2(1, error1 = $$props3.error1);
    if ("error2" in $$props3)
      $$invalidate2(2, error2 = $$props3.error2);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    val,
    error1,
    error2,
    apiProps,
    exampleHtml,
    onchange4,
    oninput,
    inputtext0_value_binding
  ];
}
var InputText_1 = class extends import_internal54.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal54.init)(this, options, instance54, create_fragment54, import_internal54.safe_not_equal, {});
    (0, import_internal54.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InputText_1",
      options,
      id: create_fragment54.name
    });
  }
};
var InputText_default2 = InputText_1;

// docs-src/components/radio/Radio.svelte
var import_internal55 = __toESM(require_internal());
var { console: console_16 } = import_internal55.globals;
var file49 = "docs-src/components/radio/Radio.svelte";
function create_fragment55(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let radio0;
  let updating_value;
  let t4;
  let h31;
  let t6;
  let radio1;
  let t7;
  let h32;
  let t9;
  let radio2;
  let t10;
  let h33;
  let t12;
  let radio3;
  let t13;
  let h34;
  let t15;
  let radio4;
  let t16;
  let h35;
  let t18;
  let radio5;
  let t19;
  let codeexample;
  let t20;
  let api;
  let current;
  function radio0_value_binding(value2) {
    ctx[8](value2);
  }
  let radio0_props = {
    items: (
      /*items1*/
      ctx[4]
    ),
    name: "my-radio1",
    label: "Select option 1"
  };
  if (
    /*val*/
    ctx[0] !== void 0
  ) {
    radio0_props.value = /*val*/
    ctx[0];
  }
  radio0 = new Radio_default({ props: radio0_props, $$inline: true });
  import_internal55.binding_callbacks.push(() => (0, import_internal55.bind)(radio0, "value", radio0_value_binding));
  radio0.$on("change", onchange2);
  radio1 = new Radio_default({
    props: {
      items: (
        /*items2*/
        ctx[5]
      ),
      name: "my-radio2",
      label: "Select option 2",
      disabled: true
    },
    $$inline: true
  });
  radio2 = new Radio_default({
    props: {
      items: (
        /*strings*/
        ctx[6]
      ),
      name: "my-radio3",
      label: "Select option 3"
    },
    $$inline: true
  });
  radio2.$on("change", onchange2);
  radio3 = new Radio_default({
    props: {
      items: (
        /*strings*/
        ctx[6]
      ),
      name: "my-radio4",
      label: "Select option 4",
      error: (
        /*error4*/
        ctx[1]
      )
    },
    $$inline: true
  });
  radio3.$on(
    "change",
    /*validate4*/
    ctx[7]
  );
  radio4 = new Radio_default({
    props: {
      items: (
        /*strings*/
        ctx[6]
      ),
      name: "my-radio5",
      label: "Select option 5",
      info: "Here be info message."
    },
    $$inline: true
  });
  radio5 = new Radio_default({
    props: {
      items: (
        /*strings*/
        ctx[6]
      ),
      name: "my-radio5",
      label: "Select option 5",
      error: "Here be error message.",
      info: "Here be info message."
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[3]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[2]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal55.element)("h2");
      h2.textContent = "Radio";
      t1 = (0, import_internal55.space)();
      h30 = (0, import_internal55.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(radio0.$$.fragment);
      t4 = (0, import_internal55.space)();
      h31 = (0, import_internal55.element)("h3");
      h31.textContent = "Disabled";
      t6 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(radio1.$$.fragment);
      t7 = (0, import_internal55.space)();
      h32 = (0, import_internal55.element)("h3");
      h32.textContent = "List of strings as values";
      t9 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(radio2.$$.fragment);
      t10 = (0, import_internal55.space)();
      h33 = (0, import_internal55.element)("h3");
      h33.textContent = "With error and live validation";
      t12 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(radio3.$$.fragment);
      t13 = (0, import_internal55.space)();
      h34 = (0, import_internal55.element)("h3");
      h34.textContent = "With info";
      t15 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(radio4.$$.fragment);
      t16 = (0, import_internal55.space)();
      h35 = (0, import_internal55.element)("h3");
      h35.textContent = "With info and error";
      t18 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(radio5.$$.fragment);
      t19 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(codeexample.$$.fragment);
      t20 = (0, import_internal55.space)();
      (0, import_internal55.create_component)(api.$$.fragment);
      (0, import_internal55.add_location)(h2, file49, 0, 0, 0);
      (0, import_internal55.add_location)(h30, file49, 2, 0, 16);
      (0, import_internal55.add_location)(h31, file49, 5, 0, 143);
      (0, import_internal55.add_location)(h32, file49, 8, 0, 239);
      (0, import_internal55.add_location)(h33, file49, 11, 0, 367);
      (0, import_internal55.add_location)(h34, file49, 14, 0, 518);
      (0, import_internal55.add_location)(h35, file49, 17, 0, 636);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal55.insert_dev)(target, h2, anchor);
      (0, import_internal55.insert_dev)(target, t1, anchor);
      (0, import_internal55.insert_dev)(target, h30, anchor);
      (0, import_internal55.insert_dev)(target, t3, anchor);
      (0, import_internal55.mount_component)(radio0, target, anchor);
      (0, import_internal55.insert_dev)(target, t4, anchor);
      (0, import_internal55.insert_dev)(target, h31, anchor);
      (0, import_internal55.insert_dev)(target, t6, anchor);
      (0, import_internal55.mount_component)(radio1, target, anchor);
      (0, import_internal55.insert_dev)(target, t7, anchor);
      (0, import_internal55.insert_dev)(target, h32, anchor);
      (0, import_internal55.insert_dev)(target, t9, anchor);
      (0, import_internal55.mount_component)(radio2, target, anchor);
      (0, import_internal55.insert_dev)(target, t10, anchor);
      (0, import_internal55.insert_dev)(target, h33, anchor);
      (0, import_internal55.insert_dev)(target, t12, anchor);
      (0, import_internal55.mount_component)(radio3, target, anchor);
      (0, import_internal55.insert_dev)(target, t13, anchor);
      (0, import_internal55.insert_dev)(target, h34, anchor);
      (0, import_internal55.insert_dev)(target, t15, anchor);
      (0, import_internal55.mount_component)(radio4, target, anchor);
      (0, import_internal55.insert_dev)(target, t16, anchor);
      (0, import_internal55.insert_dev)(target, h35, anchor);
      (0, import_internal55.insert_dev)(target, t18, anchor);
      (0, import_internal55.mount_component)(radio5, target, anchor);
      (0, import_internal55.insert_dev)(target, t19, anchor);
      (0, import_internal55.mount_component)(codeexample, target, anchor);
      (0, import_internal55.insert_dev)(target, t20, anchor);
      (0, import_internal55.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const radio0_changes = {};
      if (!updating_value && dirty & /*val*/
      1) {
        updating_value = true;
        radio0_changes.value = /*val*/
        ctx2[0];
        (0, import_internal55.add_flush_callback)(() => updating_value = false);
      }
      radio0.$set(radio0_changes);
      const radio3_changes = {};
      if (dirty & /*error4*/
      2)
        radio3_changes.error = /*error4*/
        ctx2[1];
      radio3.$set(radio3_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal55.transition_in)(radio0.$$.fragment, local);
      (0, import_internal55.transition_in)(radio1.$$.fragment, local);
      (0, import_internal55.transition_in)(radio2.$$.fragment, local);
      (0, import_internal55.transition_in)(radio3.$$.fragment, local);
      (0, import_internal55.transition_in)(radio4.$$.fragment, local);
      (0, import_internal55.transition_in)(radio5.$$.fragment, local);
      (0, import_internal55.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal55.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal55.transition_out)(radio0.$$.fragment, local);
      (0, import_internal55.transition_out)(radio1.$$.fragment, local);
      (0, import_internal55.transition_out)(radio2.$$.fragment, local);
      (0, import_internal55.transition_out)(radio3.$$.fragment, local);
      (0, import_internal55.transition_out)(radio4.$$.fragment, local);
      (0, import_internal55.transition_out)(radio5.$$.fragment, local);
      (0, import_internal55.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal55.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal55.detach_dev)(h2);
      if (detaching)
        (0, import_internal55.detach_dev)(t1);
      if (detaching)
        (0, import_internal55.detach_dev)(h30);
      if (detaching)
        (0, import_internal55.detach_dev)(t3);
      (0, import_internal55.destroy_component)(radio0, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t4);
      if (detaching)
        (0, import_internal55.detach_dev)(h31);
      if (detaching)
        (0, import_internal55.detach_dev)(t6);
      (0, import_internal55.destroy_component)(radio1, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t7);
      if (detaching)
        (0, import_internal55.detach_dev)(h32);
      if (detaching)
        (0, import_internal55.detach_dev)(t9);
      (0, import_internal55.destroy_component)(radio2, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t10);
      if (detaching)
        (0, import_internal55.detach_dev)(h33);
      if (detaching)
        (0, import_internal55.detach_dev)(t12);
      (0, import_internal55.destroy_component)(radio3, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t13);
      if (detaching)
        (0, import_internal55.detach_dev)(h34);
      if (detaching)
        (0, import_internal55.detach_dev)(t15);
      (0, import_internal55.destroy_component)(radio4, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t16);
      if (detaching)
        (0, import_internal55.detach_dev)(h35);
      if (detaching)
        (0, import_internal55.detach_dev)(t18);
      (0, import_internal55.destroy_component)(radio5, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t19);
      (0, import_internal55.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal55.detach_dev)(t20);
      (0, import_internal55.destroy_component)(api, detaching);
    }
  };
  (0, import_internal55.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment55.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onchange2(e) {
  const { item, value: value2 } = e.detail;
  console.log(item, value2);
}
function instance55($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal55.validate_slots)("Radio", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make all radio buttons disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the whole component."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the inputs."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the inputs."
    },
    {
      name: "items",
      type: "array",
      required: true,
      description: "An array of strings or objects in the following format: <code>&lbrace; name: string, value: string | number, id?: string | number, disabled?: boolean &rbrace;</code>(if <i>id</i> is present - it should be unique)."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the whole component."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to whole component."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Value of the component (=value of the checked item)."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    }
  ];
  const exampleHtml = `
<Radio {items} name="my-radio" bind:value="{value}" label="Select option" />


<script>
const items = [
	{ name: 'One', value: 1, disabled: true },
	{ name: 'Two', value: 2 },
	{ name: 'Three', value: 3 },
	{ name: 'Four', value: 4 },
];

function onChange (e) {
    console.log('value', e.target.value);
}
&lt;/script>
`;
  const items1 = [
    { name: "One", value: 1, disabled: true },
    { name: "Two", value: 2 },
    { name: "Three", value: 3 },
    { name: "Four", value: 4 }
  ];
  let val = items1[1].value;
  const items2 = ["One", "Two", "Three", "Four"];
  const strings = ["One", "Two", "Three", "Four"];
  let error4 = 'You must select "Four"!';
  function validate4(e) {
    const { value: value2 } = e.detail;
    $$invalidate2(1, error4 = value2 === strings[3] ? "" : 'You must select "Four"!');
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_16.warn(`<Radio> was created with unknown prop '${key}'`);
  });
  function radio0_value_binding(value2) {
    val = value2;
    $$invalidate2(0, val);
  }
  $$self2.$capture_state = () => ({
    Radio: Radio_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    items1,
    val,
    items2,
    strings,
    onchange: onchange2,
    error4,
    validate4
  });
  $$self2.$inject_state = ($$props3) => {
    if ("val" in $$props3)
      $$invalidate2(0, val = $$props3.val);
    if ("error4" in $$props3)
      $$invalidate2(1, error4 = $$props3.error4);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    val,
    error4,
    apiProps,
    exampleHtml,
    items1,
    items2,
    strings,
    validate4,
    radio0_value_binding
  ];
}
var Radio_1 = class extends import_internal55.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal55.init)(this, options, instance55, create_fragment55, import_internal55.safe_not_equal, {});
    (0, import_internal55.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Radio_1",
      options,
      id: create_fragment55.name
    });
  }
};
var Radio_default2 = Radio_1;

// docs-src/components/select/Select.svelte
var import_internal56 = __toESM(require_internal());
var file50 = "docs-src/components/select/Select.svelte";
function create_fragment56(ctx) {
  let h2;
  let t1;
  let p;
  let t3;
  let h30;
  let t5;
  let select0;
  let t6;
  let h31;
  let t8;
  let select1;
  let t9;
  let h32;
  let t11;
  let select2;
  let t12;
  let h33;
  let t14;
  let select3;
  let updating_value;
  let t15;
  let t16;
  let t17;
  let h34;
  let t18;
  let em;
  let t20;
  let select4;
  let updating_value_1;
  let t21;
  let t22;
  let t23;
  let h35;
  let t25;
  let select5;
  let t26;
  let h36;
  let t28;
  let select6;
  let t29;
  let h37;
  let t31;
  let select7;
  let t32;
  let codeexample;
  let t33;
  let api;
  let current;
  select0 = new Select_default({
    props: {
      placeholder: "None",
      items: (
        /*selectItems*/
        ctx[3]
      )
    },
    $$inline: true
  });
  select1 = new Select_default({
    props: {
      items: [{ name: "Disabled" }],
      disabled: true
    },
    $$inline: true
  });
  select2 = new Select_default({
    props: {
      placeholder: "Select something",
      items: []
    },
    $$inline: true
  });
  function select3_value_binding(value2) {
    ctx[5](value2);
  }
  let select3_props = {
    placeholder: "Empty",
    items: (
      /*selectItems*/
      ctx[3]
    )
  };
  if (
    /*val*/
    ctx[0] !== void 0
  ) {
    select3_props.value = /*val*/
    ctx[0];
  }
  select3 = new Select_default({ props: select3_props, $$inline: true });
  import_internal56.binding_callbacks.push(() => (0, import_internal56.bind)(select3, "value", select3_value_binding));
  function select4_value_binding(value2) {
    ctx[6](value2);
  }
  let select4_props = {
    placeholder: "Please select...",
    items: (
      /*stringItems*/
      ctx[4]
    )
  };
  if (
    /*val*/
    ctx[0] !== void 0
  ) {
    select4_props.value = /*val*/
    ctx[0];
  }
  select4 = new Select_default({ props: select4_props, $$inline: true });
  import_internal56.binding_callbacks.push(() => (0, import_internal56.bind)(select4, "value", select4_value_binding));
  select5 = new Select_default({
    props: {
      items: (
        /*selectItems*/
        ctx[3]
      ),
      label: "Select label"
    },
    $$inline: true
  });
  select6 = new Select_default({
    props: {
      items: (
        /*selectItems*/
        ctx[3]
      ),
      label: "Select label",
      info: "Select something here"
    },
    $$inline: true
  });
  select7 = new Select_default({
    props: {
      items: (
        /*selectItems*/
        ctx[3]
      ),
      label: "Select label",
      error: "You picked the wrong side!"
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal56.element)("h2");
      h2.textContent = "Select";
      t1 = (0, import_internal56.space)();
      p = (0, import_internal56.element)("p");
      p.textContent = "Select component is based on the native HTML select control.\n	It provides some visual styling and also better data management,\n	i.e. it accepts an array of strings or objects.";
      t3 = (0, import_internal56.space)();
      h30 = (0, import_internal56.element)("h3");
      h30.textContent = "Normal";
      t5 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select0.$$.fragment);
      t6 = (0, import_internal56.space)();
      h31 = (0, import_internal56.element)("h3");
      h31.textContent = "Disabled";
      t8 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select1.$$.fragment);
      t9 = (0, import_internal56.space)();
      h32 = (0, import_internal56.element)("h3");
      h32.textContent = "With placeholder";
      t11 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select2.$$.fragment);
      t12 = (0, import_internal56.space)();
      h33 = (0, import_internal56.element)("h3");
      h33.textContent = "With initial value";
      t14 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select3.$$.fragment);
      t15 = (0, import_internal56.text)(" Selected value: ");
      t16 = (0, import_internal56.text)(
        /*val*/
        ctx[0]
      );
      t17 = (0, import_internal56.space)();
      h34 = (0, import_internal56.element)("h3");
      t18 = (0, import_internal56.text)("With array of strings for ");
      em = (0, import_internal56.element)("em");
      em.textContent = "items";
      t20 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select4.$$.fragment);
      t21 = (0, import_internal56.text)(" Selected value: ");
      t22 = (0, import_internal56.text)(
        /*val*/
        ctx[0]
      );
      t23 = (0, import_internal56.space)();
      h35 = (0, import_internal56.element)("h3");
      h35.textContent = "Label";
      t25 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select5.$$.fragment);
      t26 = (0, import_internal56.space)();
      h36 = (0, import_internal56.element)("h3");
      h36.textContent = "Info";
      t28 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select6.$$.fragment);
      t29 = (0, import_internal56.space)();
      h37 = (0, import_internal56.element)("h3");
      h37.textContent = "Error";
      t31 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(select7.$$.fragment);
      t32 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(codeexample.$$.fragment);
      t33 = (0, import_internal56.space)();
      (0, import_internal56.create_component)(api.$$.fragment);
      (0, import_internal56.add_location)(h2, file50, 0, 0, 0);
      (0, import_internal56.add_location)(p, file50, 1, 0, 16);
      (0, import_internal56.add_location)(h30, file50, 6, 0, 201);
      (0, import_internal56.add_location)(h31, file50, 9, 0, 269);
      (0, import_internal56.add_location)(h32, file50, 12, 0, 340);
      (0, import_internal56.add_location)(h33, file50, 15, 0, 422);
      (0, import_internal56.add_location)(em, file50, 18, 30, 574);
      (0, import_internal56.add_location)(h34, file50, 18, 0, 544);
      (0, import_internal56.add_location)(h35, file50, 22, 0, 700);
      (0, import_internal56.add_location)(h36, file50, 25, 0, 770);
      (0, import_internal56.add_location)(h37, file50, 28, 0, 868);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal56.insert_dev)(target, h2, anchor);
      (0, import_internal56.insert_dev)(target, t1, anchor);
      (0, import_internal56.insert_dev)(target, p, anchor);
      (0, import_internal56.insert_dev)(target, t3, anchor);
      (0, import_internal56.insert_dev)(target, h30, anchor);
      (0, import_internal56.insert_dev)(target, t5, anchor);
      (0, import_internal56.mount_component)(select0, target, anchor);
      (0, import_internal56.insert_dev)(target, t6, anchor);
      (0, import_internal56.insert_dev)(target, h31, anchor);
      (0, import_internal56.insert_dev)(target, t8, anchor);
      (0, import_internal56.mount_component)(select1, target, anchor);
      (0, import_internal56.insert_dev)(target, t9, anchor);
      (0, import_internal56.insert_dev)(target, h32, anchor);
      (0, import_internal56.insert_dev)(target, t11, anchor);
      (0, import_internal56.mount_component)(select2, target, anchor);
      (0, import_internal56.insert_dev)(target, t12, anchor);
      (0, import_internal56.insert_dev)(target, h33, anchor);
      (0, import_internal56.insert_dev)(target, t14, anchor);
      (0, import_internal56.mount_component)(select3, target, anchor);
      (0, import_internal56.insert_dev)(target, t15, anchor);
      (0, import_internal56.insert_dev)(target, t16, anchor);
      (0, import_internal56.insert_dev)(target, t17, anchor);
      (0, import_internal56.insert_dev)(target, h34, anchor);
      (0, import_internal56.append_dev)(h34, t18);
      (0, import_internal56.append_dev)(h34, em);
      (0, import_internal56.insert_dev)(target, t20, anchor);
      (0, import_internal56.mount_component)(select4, target, anchor);
      (0, import_internal56.insert_dev)(target, t21, anchor);
      (0, import_internal56.insert_dev)(target, t22, anchor);
      (0, import_internal56.insert_dev)(target, t23, anchor);
      (0, import_internal56.insert_dev)(target, h35, anchor);
      (0, import_internal56.insert_dev)(target, t25, anchor);
      (0, import_internal56.mount_component)(select5, target, anchor);
      (0, import_internal56.insert_dev)(target, t26, anchor);
      (0, import_internal56.insert_dev)(target, h36, anchor);
      (0, import_internal56.insert_dev)(target, t28, anchor);
      (0, import_internal56.mount_component)(select6, target, anchor);
      (0, import_internal56.insert_dev)(target, t29, anchor);
      (0, import_internal56.insert_dev)(target, h37, anchor);
      (0, import_internal56.insert_dev)(target, t31, anchor);
      (0, import_internal56.mount_component)(select7, target, anchor);
      (0, import_internal56.insert_dev)(target, t32, anchor);
      (0, import_internal56.mount_component)(codeexample, target, anchor);
      (0, import_internal56.insert_dev)(target, t33, anchor);
      (0, import_internal56.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const select3_changes = {};
      if (!updating_value && dirty & /*val*/
      1) {
        updating_value = true;
        select3_changes.value = /*val*/
        ctx2[0];
        (0, import_internal56.add_flush_callback)(() => updating_value = false);
      }
      select3.$set(select3_changes);
      if (!current || dirty & /*val*/
      1)
        (0, import_internal56.set_data_dev)(
          t16,
          /*val*/
          ctx2[0]
        );
      const select4_changes = {};
      if (!updating_value_1 && dirty & /*val*/
      1) {
        updating_value_1 = true;
        select4_changes.value = /*val*/
        ctx2[0];
        (0, import_internal56.add_flush_callback)(() => updating_value_1 = false);
      }
      select4.$set(select4_changes);
      if (!current || dirty & /*val*/
      1)
        (0, import_internal56.set_data_dev)(
          t22,
          /*val*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal56.transition_in)(select0.$$.fragment, local);
      (0, import_internal56.transition_in)(select1.$$.fragment, local);
      (0, import_internal56.transition_in)(select2.$$.fragment, local);
      (0, import_internal56.transition_in)(select3.$$.fragment, local);
      (0, import_internal56.transition_in)(select4.$$.fragment, local);
      (0, import_internal56.transition_in)(select5.$$.fragment, local);
      (0, import_internal56.transition_in)(select6.$$.fragment, local);
      (0, import_internal56.transition_in)(select7.$$.fragment, local);
      (0, import_internal56.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal56.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal56.transition_out)(select0.$$.fragment, local);
      (0, import_internal56.transition_out)(select1.$$.fragment, local);
      (0, import_internal56.transition_out)(select2.$$.fragment, local);
      (0, import_internal56.transition_out)(select3.$$.fragment, local);
      (0, import_internal56.transition_out)(select4.$$.fragment, local);
      (0, import_internal56.transition_out)(select5.$$.fragment, local);
      (0, import_internal56.transition_out)(select6.$$.fragment, local);
      (0, import_internal56.transition_out)(select7.$$.fragment, local);
      (0, import_internal56.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal56.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal56.detach_dev)(h2);
      if (detaching)
        (0, import_internal56.detach_dev)(t1);
      if (detaching)
        (0, import_internal56.detach_dev)(p);
      if (detaching)
        (0, import_internal56.detach_dev)(t3);
      if (detaching)
        (0, import_internal56.detach_dev)(h30);
      if (detaching)
        (0, import_internal56.detach_dev)(t5);
      (0, import_internal56.destroy_component)(select0, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t6);
      if (detaching)
        (0, import_internal56.detach_dev)(h31);
      if (detaching)
        (0, import_internal56.detach_dev)(t8);
      (0, import_internal56.destroy_component)(select1, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t9);
      if (detaching)
        (0, import_internal56.detach_dev)(h32);
      if (detaching)
        (0, import_internal56.detach_dev)(t11);
      (0, import_internal56.destroy_component)(select2, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t12);
      if (detaching)
        (0, import_internal56.detach_dev)(h33);
      if (detaching)
        (0, import_internal56.detach_dev)(t14);
      (0, import_internal56.destroy_component)(select3, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t15);
      if (detaching)
        (0, import_internal56.detach_dev)(t16);
      if (detaching)
        (0, import_internal56.detach_dev)(t17);
      if (detaching)
        (0, import_internal56.detach_dev)(h34);
      if (detaching)
        (0, import_internal56.detach_dev)(t20);
      (0, import_internal56.destroy_component)(select4, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t21);
      if (detaching)
        (0, import_internal56.detach_dev)(t22);
      if (detaching)
        (0, import_internal56.detach_dev)(t23);
      if (detaching)
        (0, import_internal56.detach_dev)(h35);
      if (detaching)
        (0, import_internal56.detach_dev)(t25);
      (0, import_internal56.destroy_component)(select5, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t26);
      if (detaching)
        (0, import_internal56.detach_dev)(h36);
      if (detaching)
        (0, import_internal56.detach_dev)(t28);
      (0, import_internal56.destroy_component)(select6, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t29);
      if (detaching)
        (0, import_internal56.detach_dev)(h37);
      if (detaching)
        (0, import_internal56.detach_dev)(t31);
      (0, import_internal56.destroy_component)(select7, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t32);
      (0, import_internal56.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal56.detach_dev)(t33);
      (0, import_internal56.destroy_component)(api, detaching);
    }
  };
  (0, import_internal56.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment56.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance56($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal56.validate_slots)("Select", slots2, []);
  let val = "Beta";
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the select disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying select."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the select."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the select."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the select."
    },
    {
      name: "items",
      type: "array",
      required: true,
      description: "An array of strings or objects in the following format: <code>&lbrace; name: string, id?: string | number, group?: string &rbrace;</code>(<i>name</i> should be unique, or - if <i>id</i> is present - <i>id</i> should be unique)."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying select."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Adds an item to the beginning of the options list."
    },
    {
      name: "required",
      description: "Mark the select as <i>aria-required</i>."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying select."
    },
    {
      name: "value",
      type: ["string", "number"],
      description: "Initial value of the select.<br>If the list is an array of strings - it would match the item,<br>if the list is an array of objects - it should match the id of the item. "
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying select."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    }
  ];
  const exampleHtml = `
<Select items="{items}" on:change="{onChange}" />

<script>
const items = [
	{ id: '1', name: 'Alpha', group: 'Group 1' },
	{ id: '2', name: 'Beta', group: 'Group 1' },
	{ id: '3', name: 'Gamma', group: 'Group 1' },
];
function onChange (e) {
	const { value, oldValue } = e.detail;
	console.log({ value, oldValue });
}
&lt;/script>
`;
  const selectItems = [
    {
      id: "Alpha",
      name: "Alpha",
      group: "Group 1"
    },
    {
      id: "Beta",
      name: "Beta",
      group: "Group 1"
    },
    {
      id: "Gamma",
      name: "Gamma",
      group: "Group 1"
    },
    {
      id: "Delta",
      name: "Delta",
      group: "Group 1"
    },
    { id: "Epsilon", name: "Epsilon" },
    { id: "Zeta", name: "Zeta" },
    { id: "Eta", name: "Eta", group: "Group 2" },
    {
      id: "Theta",
      name: "Theta",
      group: "Group 2"
    },
    {
      id: "Iota",
      name: "Iota",
      group: "Group 2"
    },
    {
      id: "Kappa",
      name: "Kappa",
      group: "Group 2"
    },
    {
      id: "Lambda",
      name: "Lambda",
      group: "Group 2"
    },
    {
      id: "long-one",
      name: "A very long text",
      group: "Group 2"
    },
    { id: "Eta", name: "Eta", group: "Group 3" },
    {
      id: "Theta",
      name: "Theta",
      group: "Group 3"
    },
    {
      id: "Iota",
      name: "Iota",
      group: "Group 3"
    },
    {
      id: "Kappa",
      name: "Kappa",
      group: "Group 3"
    },
    {
      id: "Lambda",
      name: "Lambda",
      group: "Group 3"
    },
    {
      id: "long-one",
      name: "A very long text",
      group: "Group 3"
    },
    { id: "Eta", name: "Eta", group: "Group 4" },
    {
      id: "Theta",
      name: "Theta",
      group: "Group 4"
    },
    {
      id: "Iota",
      name: "Iota",
      group: "Group 4"
    },
    {
      id: "Kappa",
      name: "Kappa",
      group: "Group 4"
    },
    {
      id: "Lambda",
      name: "Lambda",
      group: "Group 4"
    },
    {
      id: "long-one",
      name: "A very long text",
      group: "Group 4"
    }
  ];
  const stringItems = ["Alpha", "Beta", "Gamma", "Delta"];
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Select> was created with unknown prop '${key}'`);
  });
  function select3_value_binding(value2) {
    val = value2;
    $$invalidate2(0, val);
  }
  function select4_value_binding(value2) {
    val = value2;
    $$invalidate2(0, val);
  }
  $$self2.$capture_state = () => ({
    Select: Select_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    val,
    apiProps,
    exampleHtml,
    selectItems,
    stringItems
  });
  $$self2.$inject_state = ($$props3) => {
    if ("val" in $$props3)
      $$invalidate2(0, val = $$props3.val);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    val,
    apiProps,
    exampleHtml,
    selectItems,
    stringItems,
    select3_value_binding,
    select4_value_binding
  ];
}
var Select_1 = class extends import_internal56.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal56.init)(this, options, instance56, create_fragment56, import_internal56.safe_not_equal, {});
    (0, import_internal56.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Select_1",
      options,
      id: create_fragment56.name
    });
  }
};
var Select_default2 = Select_1;

// docs-src/components/textarea/Textarea.svelte
var import_internal57 = __toESM(require_internal());
var file51 = "docs-src/components/textarea/Textarea.svelte";
function create_fragment57(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let textarea0;
  let t4;
  let h31;
  let t6;
  let textarea1;
  let t7;
  let h32;
  let t9;
  let textarea2;
  let t10;
  let h33;
  let t12;
  let textarea3;
  let t13;
  let h34;
  let t15;
  let textarea4;
  let t16;
  let h35;
  let t18;
  let textarea5;
  let t19;
  let h36;
  let t21;
  let textarea6;
  let t22;
  let codeexample;
  let t23;
  let api;
  let current;
  textarea0 = new Textarea_default({
    props: { label: "Write some text" },
    $$inline: true
  });
  textarea1 = new Textarea_default({
    props: { label: "Write some text", disabled: true },
    $$inline: true
  });
  textarea2 = new Textarea_default({
    props: {
      label: "Write some text",
      placeholder: "Add some text"
    },
    $$inline: true
  });
  textarea3 = new Textarea_default({
    props: { label: "Write some text", autogrow: true },
    $$inline: true
  });
  textarea4 = new Textarea_default({
    props: {
      label: "Write some text",
      info: "This is some extra info for you"
    },
    $$inline: true
  });
  textarea5 = new Textarea_default({
    props: {
      label: "Write some text",
      error: (
        /*error*/
        ctx[0]
      )
    },
    $$inline: true
  });
  textarea5.$on(
    "input",
    /*oninput*/
    ctx[3]
  );
  textarea6 = new Textarea_default({
    props: {
      label: "Write some text",
      info: "Don't make any mistakes!",
      error: "You have a typo somewhere in here",
      autogrow: true
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal57.element)("h2");
      h2.textContent = "Textarea";
      t1 = (0, import_internal57.space)();
      h30 = (0, import_internal57.element)("h3");
      h30.textContent = "Default";
      t3 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea0.$$.fragment);
      t4 = (0, import_internal57.space)();
      h31 = (0, import_internal57.element)("h3");
      h31.textContent = "Disabled";
      t6 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea1.$$.fragment);
      t7 = (0, import_internal57.space)();
      h32 = (0, import_internal57.element)("h3");
      h32.textContent = "Placeholder";
      t9 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea2.$$.fragment);
      t10 = (0, import_internal57.space)();
      h33 = (0, import_internal57.element)("h3");
      h33.textContent = "Autogrow";
      t12 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea3.$$.fragment);
      t13 = (0, import_internal57.space)();
      h34 = (0, import_internal57.element)("h3");
      h34.textContent = "With info text";
      t15 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea4.$$.fragment);
      t16 = (0, import_internal57.space)();
      h35 = (0, import_internal57.element)("h3");
      h35.textContent = "With error and live validation";
      t18 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea5.$$.fragment);
      t19 = (0, import_internal57.space)();
      h36 = (0, import_internal57.element)("h3");
      h36.textContent = "With info, error and autogrow";
      t21 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(textarea6.$$.fragment);
      t22 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(codeexample.$$.fragment);
      t23 = (0, import_internal57.space)();
      (0, import_internal57.create_component)(api.$$.fragment);
      (0, import_internal57.add_location)(h2, file51, 0, 0, 0);
      (0, import_internal57.add_location)(h30, file51, 2, 0, 19);
      (0, import_internal57.add_location)(h31, file51, 5, 0, 83);
      (0, import_internal57.add_location)(h32, file51, 8, 0, 157);
      (0, import_internal57.add_location)(h33, file51, 12, 0, 254);
      (0, import_internal57.add_location)(h34, file51, 16, 0, 329);
      (0, import_internal57.add_location)(h35, file51, 19, 0, 439);
      (0, import_internal57.add_location)(h36, file51, 22, 0, 555);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal57.insert_dev)(target, h2, anchor);
      (0, import_internal57.insert_dev)(target, t1, anchor);
      (0, import_internal57.insert_dev)(target, h30, anchor);
      (0, import_internal57.insert_dev)(target, t3, anchor);
      (0, import_internal57.mount_component)(textarea0, target, anchor);
      (0, import_internal57.insert_dev)(target, t4, anchor);
      (0, import_internal57.insert_dev)(target, h31, anchor);
      (0, import_internal57.insert_dev)(target, t6, anchor);
      (0, import_internal57.mount_component)(textarea1, target, anchor);
      (0, import_internal57.insert_dev)(target, t7, anchor);
      (0, import_internal57.insert_dev)(target, h32, anchor);
      (0, import_internal57.insert_dev)(target, t9, anchor);
      (0, import_internal57.mount_component)(textarea2, target, anchor);
      (0, import_internal57.insert_dev)(target, t10, anchor);
      (0, import_internal57.insert_dev)(target, h33, anchor);
      (0, import_internal57.insert_dev)(target, t12, anchor);
      (0, import_internal57.mount_component)(textarea3, target, anchor);
      (0, import_internal57.insert_dev)(target, t13, anchor);
      (0, import_internal57.insert_dev)(target, h34, anchor);
      (0, import_internal57.insert_dev)(target, t15, anchor);
      (0, import_internal57.mount_component)(textarea4, target, anchor);
      (0, import_internal57.insert_dev)(target, t16, anchor);
      (0, import_internal57.insert_dev)(target, h35, anchor);
      (0, import_internal57.insert_dev)(target, t18, anchor);
      (0, import_internal57.mount_component)(textarea5, target, anchor);
      (0, import_internal57.insert_dev)(target, t19, anchor);
      (0, import_internal57.insert_dev)(target, h36, anchor);
      (0, import_internal57.insert_dev)(target, t21, anchor);
      (0, import_internal57.mount_component)(textarea6, target, anchor);
      (0, import_internal57.insert_dev)(target, t22, anchor);
      (0, import_internal57.mount_component)(codeexample, target, anchor);
      (0, import_internal57.insert_dev)(target, t23, anchor);
      (0, import_internal57.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const textarea5_changes = {};
      if (dirty & /*error*/
      1)
        textarea5_changes.error = /*error*/
        ctx2[0];
      textarea5.$set(textarea5_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal57.transition_in)(textarea0.$$.fragment, local);
      (0, import_internal57.transition_in)(textarea1.$$.fragment, local);
      (0, import_internal57.transition_in)(textarea2.$$.fragment, local);
      (0, import_internal57.transition_in)(textarea3.$$.fragment, local);
      (0, import_internal57.transition_in)(textarea4.$$.fragment, local);
      (0, import_internal57.transition_in)(textarea5.$$.fragment, local);
      (0, import_internal57.transition_in)(textarea6.$$.fragment, local);
      (0, import_internal57.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal57.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal57.transition_out)(textarea0.$$.fragment, local);
      (0, import_internal57.transition_out)(textarea1.$$.fragment, local);
      (0, import_internal57.transition_out)(textarea2.$$.fragment, local);
      (0, import_internal57.transition_out)(textarea3.$$.fragment, local);
      (0, import_internal57.transition_out)(textarea4.$$.fragment, local);
      (0, import_internal57.transition_out)(textarea5.$$.fragment, local);
      (0, import_internal57.transition_out)(textarea6.$$.fragment, local);
      (0, import_internal57.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal57.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal57.detach_dev)(h2);
      if (detaching)
        (0, import_internal57.detach_dev)(t1);
      if (detaching)
        (0, import_internal57.detach_dev)(h30);
      if (detaching)
        (0, import_internal57.detach_dev)(t3);
      (0, import_internal57.destroy_component)(textarea0, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t4);
      if (detaching)
        (0, import_internal57.detach_dev)(h31);
      if (detaching)
        (0, import_internal57.detach_dev)(t6);
      (0, import_internal57.destroy_component)(textarea1, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t7);
      if (detaching)
        (0, import_internal57.detach_dev)(h32);
      if (detaching)
        (0, import_internal57.detach_dev)(t9);
      (0, import_internal57.destroy_component)(textarea2, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t10);
      if (detaching)
        (0, import_internal57.detach_dev)(h33);
      if (detaching)
        (0, import_internal57.detach_dev)(t12);
      (0, import_internal57.destroy_component)(textarea3, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t13);
      if (detaching)
        (0, import_internal57.detach_dev)(h34);
      if (detaching)
        (0, import_internal57.detach_dev)(t15);
      (0, import_internal57.destroy_component)(textarea4, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t16);
      if (detaching)
        (0, import_internal57.detach_dev)(h35);
      if (detaching)
        (0, import_internal57.detach_dev)(t18);
      (0, import_internal57.destroy_component)(textarea5, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t19);
      if (detaching)
        (0, import_internal57.detach_dev)(h36);
      if (detaching)
        (0, import_internal57.detach_dev)(t21);
      (0, import_internal57.destroy_component)(textarea6, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t22);
      (0, import_internal57.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal57.detach_dev)(t23);
      (0, import_internal57.destroy_component)(api, detaching);
    }
  };
  (0, import_internal57.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment57.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance57($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal57.validate_slots)("Textarea", slots2, []);
  const apiProps = [
    {
      name: "autogrow",
      description: "If present - the textarea will grow in height to match the text and avoid scrollbar."
    },
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the textarea disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying textarea."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the textarea."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the textarea."
    },
    {
      name: "name",
      type: "string",
      description: "Assign title to the underlying textarea."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the textarea."
    },
    {
      name: "placeholder",
      type: "string",
      description: "Assign placeholder to the underlying textarea."
    },
    {
      name: "required",
      description: "Mark the textarea as <i>aria-required</i>."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying textarea."
    },
    {
      name: "value",
      type: "string",
      description: "Initial value of the textarea."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    },
    {
      name: "on:input",
      type: "function",
      description: "Triggered when textarea value is edited."
    }
  ];
  const exampleHtml = `
<Textarea autogrow on:change="{onChange}" error="Invalid text" />

<script>
function onChange (e) {
    console.log('value', e.target.value);
}
&lt;/script>
`;
  let error2 = 'Enter "hello" to pass.';
  function oninput(e) {
    $$invalidate2(0, error2 = e.target.value === "hello" ? "" : 'Enter "hello" to pass.');
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Textarea> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Textarea: Textarea_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    error: error2,
    oninput
  });
  $$self2.$inject_state = ($$props3) => {
    if ("error" in $$props3)
      $$invalidate2(0, error2 = $$props3.error);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [error2, apiProps, exampleHtml, oninput];
}
var Textarea_1 = class extends import_internal57.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal57.init)(this, options, instance57, create_fragment57, import_internal57.safe_not_equal, {});
    (0, import_internal57.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Textarea_1",
      options,
      id: create_fragment57.name
    });
  }
};
var Textarea_default2 = Textarea_1;

// docs-src/components/toggle/Toggle.svelte
var import_internal58 = __toESM(require_internal());
var { console: console_17 } = import_internal58.globals;
var file52 = "docs-src/components/toggle/Toggle.svelte";
function create_fragment58(ctx) {
  let h2;
  let t1;
  let ul;
  let li0;
  let t2;
  let em0;
  let t4;
  let em1;
  let t6;
  let li1;
  let t7;
  let em2;
  let t9;
  let em3;
  let t11;
  let li2;
  let li3;
  let t14;
  let br0;
  let t15;
  let toggle0;
  let updating_value;
  let t16;
  let t17;
  let t18;
  let div;
  let toggle1;
  let t19;
  let br1;
  let t20;
  let toggle2;
  let t21;
  let t22;
  let br2;
  let br3;
  let br4;
  let t23;
  let h30;
  let t25;
  let toggle3;
  let t26;
  let h31;
  let t28;
  let toggle4;
  let t29;
  let h32;
  let t31;
  let toggle5;
  let t32;
  let h33;
  let t34;
  let toggle6;
  let t35;
  let codeexample;
  let t36;
  let api;
  let current;
  function toggle0_value_binding(value2) {
    ctx[5](value2);
  }
  let toggle0_props = {};
  if (
    /*toggleValue*/
    ctx[1] !== void 0
  ) {
    toggle0_props.value = /*toggleValue*/
    ctx[1];
  }
  toggle0 = new Toggle_default({ props: toggle0_props, $$inline: true });
  import_internal58.binding_callbacks.push(() => (0, import_internal58.bind)(toggle0, "value", toggle0_value_binding));
  toggle1 = new Toggle_default({ $$inline: true });
  toggle2 = new Toggle_default({ props: { value: "true" }, $$inline: true });
  toggle3 = new Toggle_default({
    props: { value: true, disabled: true },
    $$inline: true
  });
  toggle4 = new Toggle_default({
    props: { label: "Toggle the lights" },
    $$inline: true
  });
  toggle5 = new Toggle_default({
    props: {
      label: "Toggle the lights",
      info: "This toggle switches the bathroom lights on/off"
    },
    $$inline: true
  });
  toggle6 = new Toggle_default({
    props: {
      label: "Toggle the lights",
      error: (
        /*error*/
        ctx[0]
      )
    },
    $$inline: true
  });
  toggle6.$on(
    "change",
    /*onchange*/
    ctx[4]
  );
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[3]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[2]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal58.element)("h2");
      h2.textContent = "Toggle";
      t1 = (0, import_internal58.text)("\n\nThe perfect toggle component in Svelte:\n");
      ul = (0, import_internal58.element)("ul");
      li0 = (0, import_internal58.element)("li");
      t2 = (0, import_internal58.text)("allows ");
      em0 = (0, import_internal58.element)("em");
      em0.textContent = "click";
      t4 = (0, import_internal58.text)(" as well as ");
      em1 = (0, import_internal58.element)("em");
      em1.textContent = "drag";
      t6 = (0, import_internal58.text)(" to toggle\n	");
      li1 = (0, import_internal58.element)("li");
      t7 = (0, import_internal58.text)("keyboard support: press ");
      em2 = (0, import_internal58.element)("em");
      em2.textContent = "Enter";
      t9 = (0, import_internal58.text)(" or ");
      em3 = (0, import_internal58.element)("em");
      em3.textContent = "Space";
      t11 = (0, import_internal58.text)(" to toggle\n	");
      li2 = (0, import_internal58.element)("li");
      li2.textContent = "accessible (based on a checkbox input)\n	";
      li3 = (0, import_internal58.element)("li");
      li3.textContent = "no bloat, no dependencies";
      t14 = (0, import_internal58.space)();
      br0 = (0, import_internal58.element)("br");
      t15 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(toggle0.$$.fragment);
      t16 = (0, import_internal58.space)();
      t17 = (0, import_internal58.text)(
        /*toggleValue*/
        ctx[1]
      );
      t18 = (0, import_internal58.space)();
      div = (0, import_internal58.element)("div");
      (0, import_internal58.create_component)(toggle1.$$.fragment);
      t19 = (0, import_internal58.text)(" hidden initially");
      br1 = (0, import_internal58.element)("br");
      t20 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(toggle2.$$.fragment);
      t21 = (0, import_internal58.text)(" hidden initially");
      t22 = (0, import_internal58.space)();
      br2 = (0, import_internal58.element)("br");
      br3 = (0, import_internal58.element)("br");
      br4 = (0, import_internal58.element)("br");
      t23 = (0, import_internal58.space)();
      h30 = (0, import_internal58.element)("h3");
      h30.textContent = "Disabled";
      t25 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(toggle3.$$.fragment);
      t26 = (0, import_internal58.text)(" (disabled)\n\n\n");
      h31 = (0, import_internal58.element)("h3");
      h31.textContent = "Label";
      t28 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(toggle4.$$.fragment);
      t29 = (0, import_internal58.space)();
      h32 = (0, import_internal58.element)("h3");
      h32.textContent = "Info";
      t31 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(toggle5.$$.fragment);
      t32 = (0, import_internal58.space)();
      h33 = (0, import_internal58.element)("h3");
      h33.textContent = "Error";
      t34 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(toggle6.$$.fragment);
      t35 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(codeexample.$$.fragment);
      t36 = (0, import_internal58.space)();
      (0, import_internal58.create_component)(api.$$.fragment);
      (0, import_internal58.add_location)(h2, file52, 0, 0, 0);
      (0, import_internal58.add_location)(em0, file52, 4, 12, 74);
      (0, import_internal58.add_location)(em1, file52, 4, 38, 100);
      (0, import_internal58.add_location)(li0, file52, 4, 1, 63);
      (0, import_internal58.add_location)(em2, file52, 5, 29, 153);
      (0, import_internal58.add_location)(em3, file52, 5, 47, 171);
      (0, import_internal58.add_location)(li1, file52, 5, 1, 125);
      (0, import_internal58.add_location)(li2, file52, 6, 1, 197);
      (0, import_internal58.add_location)(li3, file52, 7, 1, 241);
      (0, import_internal58.add_location)(ul, file52, 3, 0, 57);
      (0, import_internal58.add_location)(br0, file52, 9, 0, 277);
      (0, import_internal58.add_location)(br1, file52, 13, 28, 418);
      (0, import_internal58.attr_dev)(div, "class", "toggle-box");
      (0, import_internal58.toggle_class)(
        div,
        "visible",
        /*toggleValue*/
        ctx[1]
      );
      (0, import_internal58.add_location)(div, file52, 12, 0, 335);
      (0, import_internal58.add_location)(br2, file52, 16, 0, 471);
      (0, import_internal58.add_location)(br3, file52, 16, 4, 475);
      (0, import_internal58.add_location)(br4, file52, 16, 8, 479);
      (0, import_internal58.add_location)(h30, file52, 18, 0, 485);
      (0, import_internal58.add_location)(h31, file52, 22, 0, 551);
      (0, import_internal58.add_location)(h32, file52, 25, 0, 604);
      (0, import_internal58.add_location)(h33, file52, 28, 0, 711);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal58.insert_dev)(target, h2, anchor);
      (0, import_internal58.insert_dev)(target, t1, anchor);
      (0, import_internal58.insert_dev)(target, ul, anchor);
      (0, import_internal58.append_dev)(ul, li0);
      (0, import_internal58.append_dev)(li0, t2);
      (0, import_internal58.append_dev)(li0, em0);
      (0, import_internal58.append_dev)(li0, t4);
      (0, import_internal58.append_dev)(li0, em1);
      (0, import_internal58.append_dev)(li0, t6);
      (0, import_internal58.append_dev)(ul, li1);
      (0, import_internal58.append_dev)(li1, t7);
      (0, import_internal58.append_dev)(li1, em2);
      (0, import_internal58.append_dev)(li1, t9);
      (0, import_internal58.append_dev)(li1, em3);
      (0, import_internal58.append_dev)(li1, t11);
      (0, import_internal58.append_dev)(ul, li2);
      (0, import_internal58.append_dev)(ul, li3);
      (0, import_internal58.insert_dev)(target, t14, anchor);
      (0, import_internal58.insert_dev)(target, br0, anchor);
      (0, import_internal58.insert_dev)(target, t15, anchor);
      (0, import_internal58.mount_component)(toggle0, target, anchor);
      (0, import_internal58.insert_dev)(target, t16, anchor);
      (0, import_internal58.insert_dev)(target, t17, anchor);
      (0, import_internal58.insert_dev)(target, t18, anchor);
      (0, import_internal58.insert_dev)(target, div, anchor);
      (0, import_internal58.mount_component)(toggle1, div, null);
      (0, import_internal58.append_dev)(div, t19);
      (0, import_internal58.append_dev)(div, br1);
      (0, import_internal58.append_dev)(div, t20);
      (0, import_internal58.mount_component)(toggle2, div, null);
      (0, import_internal58.append_dev)(div, t21);
      (0, import_internal58.insert_dev)(target, t22, anchor);
      (0, import_internal58.insert_dev)(target, br2, anchor);
      (0, import_internal58.insert_dev)(target, br3, anchor);
      (0, import_internal58.insert_dev)(target, br4, anchor);
      (0, import_internal58.insert_dev)(target, t23, anchor);
      (0, import_internal58.insert_dev)(target, h30, anchor);
      (0, import_internal58.insert_dev)(target, t25, anchor);
      (0, import_internal58.mount_component)(toggle3, target, anchor);
      (0, import_internal58.insert_dev)(target, t26, anchor);
      (0, import_internal58.insert_dev)(target, h31, anchor);
      (0, import_internal58.insert_dev)(target, t28, anchor);
      (0, import_internal58.mount_component)(toggle4, target, anchor);
      (0, import_internal58.insert_dev)(target, t29, anchor);
      (0, import_internal58.insert_dev)(target, h32, anchor);
      (0, import_internal58.insert_dev)(target, t31, anchor);
      (0, import_internal58.mount_component)(toggle5, target, anchor);
      (0, import_internal58.insert_dev)(target, t32, anchor);
      (0, import_internal58.insert_dev)(target, h33, anchor);
      (0, import_internal58.insert_dev)(target, t34, anchor);
      (0, import_internal58.mount_component)(toggle6, target, anchor);
      (0, import_internal58.insert_dev)(target, t35, anchor);
      (0, import_internal58.mount_component)(codeexample, target, anchor);
      (0, import_internal58.insert_dev)(target, t36, anchor);
      (0, import_internal58.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const toggle0_changes = {};
      if (!updating_value && dirty & /*toggleValue*/
      2) {
        updating_value = true;
        toggle0_changes.value = /*toggleValue*/
        ctx2[1];
        (0, import_internal58.add_flush_callback)(() => updating_value = false);
      }
      toggle0.$set(toggle0_changes);
      if (!current || dirty & /*toggleValue*/
      2)
        (0, import_internal58.set_data_dev)(
          t17,
          /*toggleValue*/
          ctx2[1]
        );
      if (!current || dirty & /*toggleValue*/
      2) {
        (0, import_internal58.toggle_class)(
          div,
          "visible",
          /*toggleValue*/
          ctx2[1]
        );
      }
      const toggle6_changes = {};
      if (dirty & /*error*/
      1)
        toggle6_changes.error = /*error*/
        ctx2[0];
      toggle6.$set(toggle6_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal58.transition_in)(toggle0.$$.fragment, local);
      (0, import_internal58.transition_in)(toggle1.$$.fragment, local);
      (0, import_internal58.transition_in)(toggle2.$$.fragment, local);
      (0, import_internal58.transition_in)(toggle3.$$.fragment, local);
      (0, import_internal58.transition_in)(toggle4.$$.fragment, local);
      (0, import_internal58.transition_in)(toggle5.$$.fragment, local);
      (0, import_internal58.transition_in)(toggle6.$$.fragment, local);
      (0, import_internal58.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal58.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal58.transition_out)(toggle0.$$.fragment, local);
      (0, import_internal58.transition_out)(toggle1.$$.fragment, local);
      (0, import_internal58.transition_out)(toggle2.$$.fragment, local);
      (0, import_internal58.transition_out)(toggle3.$$.fragment, local);
      (0, import_internal58.transition_out)(toggle4.$$.fragment, local);
      (0, import_internal58.transition_out)(toggle5.$$.fragment, local);
      (0, import_internal58.transition_out)(toggle6.$$.fragment, local);
      (0, import_internal58.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal58.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal58.detach_dev)(h2);
      if (detaching)
        (0, import_internal58.detach_dev)(t1);
      if (detaching)
        (0, import_internal58.detach_dev)(ul);
      if (detaching)
        (0, import_internal58.detach_dev)(t14);
      if (detaching)
        (0, import_internal58.detach_dev)(br0);
      if (detaching)
        (0, import_internal58.detach_dev)(t15);
      (0, import_internal58.destroy_component)(toggle0, detaching);
      if (detaching)
        (0, import_internal58.detach_dev)(t16);
      if (detaching)
        (0, import_internal58.detach_dev)(t17);
      if (detaching)
        (0, import_internal58.detach_dev)(t18);
      if (detaching)
        (0, import_internal58.detach_dev)(div);
      (0, import_internal58.destroy_component)(toggle1);
      (0, import_internal58.destroy_component)(toggle2);
      if (detaching)
        (0, import_internal58.detach_dev)(t22);
      if (detaching)
        (0, import_internal58.detach_dev)(br2);
      if (detaching)
        (0, import_internal58.detach_dev)(br3);
      if (detaching)
        (0, import_internal58.detach_dev)(br4);
      if (detaching)
        (0, import_internal58.detach_dev)(t23);
      if (detaching)
        (0, import_internal58.detach_dev)(h30);
      if (detaching)
        (0, import_internal58.detach_dev)(t25);
      (0, import_internal58.destroy_component)(toggle3, detaching);
      if (detaching)
        (0, import_internal58.detach_dev)(t26);
      if (detaching)
        (0, import_internal58.detach_dev)(h31);
      if (detaching)
        (0, import_internal58.detach_dev)(t28);
      (0, import_internal58.destroy_component)(toggle4, detaching);
      if (detaching)
        (0, import_internal58.detach_dev)(t29);
      if (detaching)
        (0, import_internal58.detach_dev)(h32);
      if (detaching)
        (0, import_internal58.detach_dev)(t31);
      (0, import_internal58.destroy_component)(toggle5, detaching);
      if (detaching)
        (0, import_internal58.detach_dev)(t32);
      if (detaching)
        (0, import_internal58.detach_dev)(h33);
      if (detaching)
        (0, import_internal58.detach_dev)(t34);
      (0, import_internal58.destroy_component)(toggle6, detaching);
      if (detaching)
        (0, import_internal58.detach_dev)(t35);
      (0, import_internal58.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal58.detach_dev)(t36);
      (0, import_internal58.destroy_component)(api, detaching);
    }
  };
  (0, import_internal58.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment58.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance58($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal58.validate_slots)("Toggle", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the input disabled."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying input (if not set, a random string will be assigned)."
    },
    {
      name: "info",
      type: "string",
      description: "Show info message above the toggle."
    },
    {
      name: "error",
      type: "string",
      description: "Error message to show above the toggle."
    },
    {
      name: "name",
      type: "string",
      description: "Assign name to the underlying input."
    },
    {
      name: "label",
      type: "string",
      description: "Label for the input."
    },
    {
      name: "required",
      description: "Mark the input as <i>aria-required</i>."
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying input."
    },
    {
      name: "value",
      type: ["true", "false"],
      description: "Initial value of the toggle."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:inputElement",
      type: "element",
      description: "Exposes the HTML element of the underlying input."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered when the value changes."
    }
  ];
  const exampleHtml = `
<Toggle value="true" label="Field label" on:change="{onChange}" />

<script>
function onChange (e) {
    console.log('onchange', e.detail);
}
&lt;/script>
`;
  let error2 = "I can't see anything now!";
  let toggleValue = false;
  function onchange4(e) {
    const val = e.detail;
    $$invalidate2(0, error2 = val ? "" : "I can't see anything now!");
    console.log("onchange", e.detail);
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_17.warn(`<Toggle> was created with unknown prop '${key}'`);
  });
  function toggle0_value_binding(value2) {
    toggleValue = value2;
    $$invalidate2(1, toggleValue);
  }
  $$self2.$capture_state = () => ({
    Toggle: Toggle_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    error: error2,
    toggleValue,
    onchange: onchange4
  });
  $$self2.$inject_state = ($$props3) => {
    if ("error" in $$props3)
      $$invalidate2(0, error2 = $$props3.error);
    if ("toggleValue" in $$props3)
      $$invalidate2(1, toggleValue = $$props3.toggleValue);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [error2, toggleValue, apiProps, exampleHtml, onchange4, toggle0_value_binding];
}
var Toggle_1 = class extends import_internal58.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal58.init)(this, options, instance58, create_fragment58, import_internal58.safe_not_equal, {});
    (0, import_internal58.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Toggle_1",
      options,
      id: create_fragment58.name
    });
  }
};
var Toggle_default2 = Toggle_1;

// docs-src/components/dialog/Dialog.svelte
var import_internal59 = __toESM(require_internal());
var file53 = "docs-src/components/dialog/Dialog.svelte";
function create_default_slot_83(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Show dialog 1");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_83.name,
    type: "slot",
    source: '(11:1) <Button on:click=\\"{() => dialog1.open()}\\">',
    ctx
  });
  return block;
}
function create_default_slot_73(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Show dialog 2");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_73.name,
    type: "slot",
    source: '(12:1) <Button on:click=\\"{() => dialog2.open()}\\">',
    ctx
  });
  return block;
}
function create_default_slot_63(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Show dialog 3");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_63.name,
    type: "slot",
    source: '(13:1) <Button on:click=\\"{() => dialog3.open()}\\">',
    ctx
  });
  return block;
}
function create_default_slot_53(ctx) {
  let t0;
  let br;
  let t1;
  let p0;
  let t3;
  let p1;
  let t5;
  let p2;
  let t7;
  let p3;
  let t9;
  let p4;
  const block = {
    c: function create() {
      t0 = (0, import_internal59.text)("dialog contents");
      br = (0, import_internal59.element)("br");
      t1 = (0, import_internal59.text)("\n	Hello world!\n\n	");
      p0 = (0, import_internal59.element)("p");
      p0.textContent = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris mollis porttitor justo, eget ornare massa commodo non. Pellentesque semper dictum mauris, id pretium mi mattis in. Proin sodales neque id euismod interdum. Fusce vel blandit orci. Mauris nec ligula aliquam, vestibulum erat nec, ullamcorper nunc. Cras vel lacinia sem. Aenean non tincidunt nisl, vitae consectetur est. Integer id neque tempor, facilisis felis egestas, aliquam turpis. Mauris id consectetur purus. Praesent vehicula, mauris eu hendrerit vehicula, velit tortor fermentum enim, eget malesuada quam eros at quam. Integer mattis egestas tempus.";
      t3 = (0, import_internal59.space)();
      p1 = (0, import_internal59.element)("p");
      p1.textContent = "Aliquam et purus enim. Suspendisse potenti. Suspendisse tincidunt ullamcorper nulla non gravida. Morbi at tellus dui. Sed orci ligula, facilisis sit amet odio eu, commodo ultricies lorem. Nullam sagittis sapien metus, eu posuere sem iaculis sed. Duis at nibh feugiat, placerat lectus nec, consectetur elit. In sollicitudin est in ultricies gravida. Ut malesuada ex lacinia, posuere augue eget, imperdiet erat. Phasellus ac dui sit amet ligula condimentum venenatis vitae ornare augue. Vivamus pellentesque felis in orci finibus, a accumsan libero consectetur.";
      t5 = (0, import_internal59.space)();
      p2 = (0, import_internal59.element)("p");
      p2.textContent = "Nulla facilisi. Sed in neque hendrerit, convallis neque a, semper sem. Maecenas suscipit ex quis risus mollis, at tincidunt mi faucibus. Pellentesque in faucibus metus. Etiam sollicitudin accumsan arcu interdum sollicitudin. Suspendisse iaculis congue justo id posuere. Ut sed nisi molestie, egestas nulla at, feugiat neque. Nullam vitae libero eu sem ornare tempus vel id tortor. Ut varius ullamcorper nisl et dignissim. Vestibulum sodales massa id odio aliquet ornare. Nunc mollis quis sapien fringilla ullamcorper. Interdum et malesuada fames ac ante ipsum primis in faucibus. Phasellus eget posuere orci.";
      t7 = (0, import_internal59.space)();
      p3 = (0, import_internal59.element)("p");
      p3.textContent = "Suspendisse sollicitudin sed ligula nec tempus. Phasellus quis luctus sapien. Nullam nec sapien fringilla, sollicitudin dui sit amet, molestie arcu. Pellentesque id elit et sem pharetra gravida. Donec sed metus ut dui venenatis euismod varius ut libero. Duis ornare odio finibus eros rhoncus ullamcorper. Maecenas auctor lectus volutpat sem pretium volutpat. Mauris blandit quam diam, nec consequat arcu dignissim ut. Donec ac lacus pretium, sollicitudin nisi in, ullamcorper enim. Ut convallis nec eros nec scelerisque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Mauris non odio a ipsum varius pretium non ut ex. Quisque euismod luctus risus, sit amet venenatis justo vehicula non. Aliquam erat volutpat. Phasellus eu leo ut odio cursus cursus. Pellentesque porta odio id arcu mattis, vitae aliquam risus efficitur.";
      t9 = (0, import_internal59.space)();
      p4 = (0, import_internal59.element)("p");
      p4.textContent = "Curabitur nec cursus purus. Nullam scelerisque et odio ut pretium. Donec gravida auctor enim, in venenatis mi viverra sit amet. Integer tincidunt lectus quis sagittis pellentesque. Morbi nec ipsum erat. Donec finibus sit amet lorem et dignissim. Praesent pretium consequat enim, quis rutrum nisl imperdiet ut.";
      (0, import_internal59.add_location)(br, file53, 17, 16, 422);
      (0, import_internal59.add_location)(p0, file53, 20, 1, 443);
      (0, import_internal59.add_location)(p1, file53, 21, 1, 1071);
      (0, import_internal59.add_location)(p2, file53, 22, 1, 1639);
      (0, import_internal59.add_location)(p3, file53, 23, 1, 2256);
      (0, import_internal59.add_location)(p4, file53, 24, 1, 3126);
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t0, anchor);
      (0, import_internal59.insert_dev)(target, br, anchor);
      (0, import_internal59.insert_dev)(target, t1, anchor);
      (0, import_internal59.insert_dev)(target, p0, anchor);
      (0, import_internal59.insert_dev)(target, t3, anchor);
      (0, import_internal59.insert_dev)(target, p1, anchor);
      (0, import_internal59.insert_dev)(target, t5, anchor);
      (0, import_internal59.insert_dev)(target, p2, anchor);
      (0, import_internal59.insert_dev)(target, t7, anchor);
      (0, import_internal59.insert_dev)(target, p3, anchor);
      (0, import_internal59.insert_dev)(target, t9, anchor);
      (0, import_internal59.insert_dev)(target, p4, anchor);
    },
    p: import_internal59.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t0);
      if (detaching)
        (0, import_internal59.detach_dev)(br);
      if (detaching)
        (0, import_internal59.detach_dev)(t1);
      if (detaching)
        (0, import_internal59.detach_dev)(p0);
      if (detaching)
        (0, import_internal59.detach_dev)(t3);
      if (detaching)
        (0, import_internal59.detach_dev)(p1);
      if (detaching)
        (0, import_internal59.detach_dev)(t5);
      if (detaching)
        (0, import_internal59.detach_dev)(p2);
      if (detaching)
        (0, import_internal59.detach_dev)(t7);
      if (detaching)
        (0, import_internal59.detach_dev)(p3);
      if (detaching)
        (0, import_internal59.detach_dev)(t9);
      if (detaching)
        (0, import_internal59.detach_dev)(p4);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_53.name,
    type: "slot",
    source: '(17:0) <Dialog bind:this=\\"{dialog1}\\" title=\\"Hello\\">',
    ctx
  });
  return block;
}
function create_default_slot_46(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Close");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_46.name,
    type: "slot",
    source: '(28:2) <Button on:click=\\"{() => dialog1.close()}\\">',
    ctx
  });
  return block;
}
function create_footer_slot_1(ctx) {
  let div;
  let button;
  let current;
  button = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_46] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*click_handler_3*/
    ctx[9]
  );
  const block = {
    c: function create() {
      div = (0, import_internal59.element)("div");
      (0, import_internal59.create_component)(button.$$.fragment);
      (0, import_internal59.attr_dev)(div, "slot", "footer");
      (0, import_internal59.add_location)(div, file53, 26, 1, 3446);
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, div, anchor);
      (0, import_internal59.mount_component)(button, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal59.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal59.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(div);
      (0, import_internal59.destroy_component)(button);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_footer_slot_1.name,
    type: "slot",
    source: "(27:1) ",
    ctx
  });
  return block;
}
function create_default_slot_311(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Hello!");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_311.name,
    type: "slot",
    source: '(32:0) <Dialog bind:this=\\"{dialog2}\\" title=\\"Hello\\">',
    ctx
  });
  return block;
}
function create_default_slot_211(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Are you sure?");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_211.name,
    type: "slot",
    source: '(37:0) <Dialog bind:this=\\"{dialog3}\\">',
    ctx
  });
  return block;
}
function create_default_slot_113(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("Yes");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_113.name,
    type: "slot",
    source: '(40:2) <Button on:click=\\"{() => dialog3.close()}\\">',
    ctx
  });
  return block;
}
function create_default_slot8(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal59.text)("No");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(t);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot8.name,
    type: "slot",
    source: '(41:2) <Button on:click=\\"{() => dialog3.close()}\\">',
    ctx
  });
  return block;
}
function create_footer_slot2(ctx) {
  let div;
  let button0;
  let t;
  let button1;
  let current;
  button0 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_113] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button0.$on(
    "click",
    /*click_handler_4*/
    ctx[12]
  );
  button1 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot8] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1.$on(
    "click",
    /*click_handler_5*/
    ctx[13]
  );
  const block = {
    c: function create() {
      div = (0, import_internal59.element)("div");
      (0, import_internal59.create_component)(button0.$$.fragment);
      t = (0, import_internal59.space)();
      (0, import_internal59.create_component)(button1.$$.fragment);
      (0, import_internal59.attr_dev)(div, "slot", "footer");
      (0, import_internal59.add_location)(div, file53, 38, 1, 3657);
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, div, anchor);
      (0, import_internal59.mount_component)(button0, div, null);
      (0, import_internal59.append_dev)(div, t);
      (0, import_internal59.mount_component)(button1, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal59.transition_in)(button0.$$.fragment, local);
      (0, import_internal59.transition_in)(button1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal59.transition_out)(button0.$$.fragment, local);
      (0, import_internal59.transition_out)(button1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(div);
      (0, import_internal59.destroy_component)(button0);
      (0, import_internal59.destroy_component)(button1);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_footer_slot2.name,
    type: "slot",
    source: "(39:1) ",
    ctx
  });
  return block;
}
function create_fragment59(ctx) {
  let h2;
  let t1;
  let ul;
  let li0;
  let li1;
  let t4;
  let br;
  let t5;
  let div;
  let button0;
  let t6;
  let button1;
  let t7;
  let button2;
  let t8;
  let dialog0;
  let t9;
  let dialog1_1;
  let t10;
  let dialog2_1;
  let t11;
  let codeexample;
  let t12;
  let api0;
  let t13;
  let api1;
  let current;
  button0 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_83] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button0.$on(
    "click",
    /*click_handler*/
    ctx[6]
  );
  button1 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_73] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1.$on(
    "click",
    /*click_handler_1*/
    ctx[7]
  );
  button2 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_63] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2.$on(
    "click",
    /*click_handler_2*/
    ctx[8]
  );
  let dialog0_props = {
    title: "Hello",
    $$slots: {
      footer: [create_footer_slot_1],
      default: [create_default_slot_53]
    },
    $$scope: { ctx }
  };
  dialog0 = new Dialog_default({ props: dialog0_props, $$inline: true });
  ctx[10](dialog0);
  let dialog1_1_props = {
    title: "Hello",
    $$slots: { default: [create_default_slot_311] },
    $$scope: { ctx }
  };
  dialog1_1 = new Dialog_default({ props: dialog1_1_props, $$inline: true });
  ctx[11](dialog1_1);
  let dialog2_1_props = {
    $$slots: {
      footer: [create_footer_slot2],
      default: [create_default_slot_211]
    },
    $$scope: { ctx }
  };
  dialog2_1 = new Dialog_default({ props: dialog2_1_props, $$inline: true });
  ctx[14](dialog2_1);
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[5]
    ) },
    $$inline: true
  });
  api0 = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[3]
    ) },
    $$inline: true
  });
  api1 = new ApiTable_default({
    props: {
      props: (
        /*instanceApiProps*/
        ctx[4]
      ),
      title: "Instance API",
      description: "A component exposes <em>this</em> property, to which a variable can be bound, creating an instance of the component, with the following API"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal59.element)("h2");
      h2.textContent = "Dialog";
      t1 = (0, import_internal59.space)();
      ul = (0, import_internal59.element)("ul");
      li0 = (0, import_internal59.element)("li");
      li0.textContent = "simple, small, no dependencies\n	";
      li1 = (0, import_internal59.element)("li");
      li1.textContent = "accessible (full keyboard support, focus trap)";
      t4 = (0, import_internal59.space)();
      br = (0, import_internal59.element)("br");
      t5 = (0, import_internal59.space)();
      div = (0, import_internal59.element)("div");
      (0, import_internal59.create_component)(button0.$$.fragment);
      t6 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(button1.$$.fragment);
      t7 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(button2.$$.fragment);
      t8 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(dialog0.$$.fragment);
      t9 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(dialog1_1.$$.fragment);
      t10 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(dialog2_1.$$.fragment);
      t11 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(codeexample.$$.fragment);
      t12 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(api0.$$.fragment);
      t13 = (0, import_internal59.space)();
      (0, import_internal59.create_component)(api1.$$.fragment);
      (0, import_internal59.add_location)(h2, file53, 0, 0, 0);
      (0, import_internal59.add_location)(li0, file53, 3, 1, 23);
      (0, import_internal59.add_location)(li1, file53, 4, 1, 59);
      (0, import_internal59.add_location)(ul, file53, 2, 0, 17);
      (0, import_internal59.add_location)(br, file53, 7, 0, 117);
      (0, import_internal59.attr_dev)(div, "class", "docs-buttons-row");
      (0, import_internal59.add_location)(div, file53, 9, 0, 123);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal59.insert_dev)(target, h2, anchor);
      (0, import_internal59.insert_dev)(target, t1, anchor);
      (0, import_internal59.insert_dev)(target, ul, anchor);
      (0, import_internal59.append_dev)(ul, li0);
      (0, import_internal59.append_dev)(ul, li1);
      (0, import_internal59.insert_dev)(target, t4, anchor);
      (0, import_internal59.insert_dev)(target, br, anchor);
      (0, import_internal59.insert_dev)(target, t5, anchor);
      (0, import_internal59.insert_dev)(target, div, anchor);
      (0, import_internal59.mount_component)(button0, div, null);
      (0, import_internal59.append_dev)(div, t6);
      (0, import_internal59.mount_component)(button1, div, null);
      (0, import_internal59.append_dev)(div, t7);
      (0, import_internal59.mount_component)(button2, div, null);
      (0, import_internal59.insert_dev)(target, t8, anchor);
      (0, import_internal59.mount_component)(dialog0, target, anchor);
      (0, import_internal59.insert_dev)(target, t9, anchor);
      (0, import_internal59.mount_component)(dialog1_1, target, anchor);
      (0, import_internal59.insert_dev)(target, t10, anchor);
      (0, import_internal59.mount_component)(dialog2_1, target, anchor);
      (0, import_internal59.insert_dev)(target, t11, anchor);
      (0, import_internal59.mount_component)(codeexample, target, anchor);
      (0, import_internal59.insert_dev)(target, t12, anchor);
      (0, import_internal59.mount_component)(api0, target, anchor);
      (0, import_internal59.insert_dev)(target, t13, anchor);
      (0, import_internal59.mount_component)(api1, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const dialog0_changes = {};
      if (dirty & /*$$scope, dialog1*/
      32769) {
        dialog0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dialog0.$set(dialog0_changes);
      const dialog1_1_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        dialog1_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dialog1_1.$set(dialog1_1_changes);
      const dialog2_1_changes = {};
      if (dirty & /*$$scope, dialog3*/
      32772) {
        dialog2_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      dialog2_1.$set(dialog2_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal59.transition_in)(button0.$$.fragment, local);
      (0, import_internal59.transition_in)(button1.$$.fragment, local);
      (0, import_internal59.transition_in)(button2.$$.fragment, local);
      (0, import_internal59.transition_in)(dialog0.$$.fragment, local);
      (0, import_internal59.transition_in)(dialog1_1.$$.fragment, local);
      (0, import_internal59.transition_in)(dialog2_1.$$.fragment, local);
      (0, import_internal59.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal59.transition_in)(api0.$$.fragment, local);
      (0, import_internal59.transition_in)(api1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal59.transition_out)(button0.$$.fragment, local);
      (0, import_internal59.transition_out)(button1.$$.fragment, local);
      (0, import_internal59.transition_out)(button2.$$.fragment, local);
      (0, import_internal59.transition_out)(dialog0.$$.fragment, local);
      (0, import_internal59.transition_out)(dialog1_1.$$.fragment, local);
      (0, import_internal59.transition_out)(dialog2_1.$$.fragment, local);
      (0, import_internal59.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal59.transition_out)(api0.$$.fragment, local);
      (0, import_internal59.transition_out)(api1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal59.detach_dev)(h2);
      if (detaching)
        (0, import_internal59.detach_dev)(t1);
      if (detaching)
        (0, import_internal59.detach_dev)(ul);
      if (detaching)
        (0, import_internal59.detach_dev)(t4);
      if (detaching)
        (0, import_internal59.detach_dev)(br);
      if (detaching)
        (0, import_internal59.detach_dev)(t5);
      if (detaching)
        (0, import_internal59.detach_dev)(div);
      (0, import_internal59.destroy_component)(button0);
      (0, import_internal59.destroy_component)(button1);
      (0, import_internal59.destroy_component)(button2);
      if (detaching)
        (0, import_internal59.detach_dev)(t8);
      ctx[10](null);
      (0, import_internal59.destroy_component)(dialog0, detaching);
      if (detaching)
        (0, import_internal59.detach_dev)(t9);
      ctx[11](null);
      (0, import_internal59.destroy_component)(dialog1_1, detaching);
      if (detaching)
        (0, import_internal59.detach_dev)(t10);
      ctx[14](null);
      (0, import_internal59.destroy_component)(dialog2_1, detaching);
      if (detaching)
        (0, import_internal59.detach_dev)(t11);
      (0, import_internal59.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal59.detach_dev)(t12);
      (0, import_internal59.destroy_component)(api0, detaching);
      if (detaching)
        (0, import_internal59.detach_dev)(t13);
      (0, import_internal59.destroy_component)(api1, detaching);
    }
  };
  (0, import_internal59.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment59.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance59($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal59.validate_slots)("Dialog", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component container."
    },
    {
      name: "opened",
      type: ["true", "false"],
      default: "false",
      description: "Set dialog's open state."
    },
    {
      name: "skipFirstFocus",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the dialog will not set focus to the first focusable element in the dialog.<br>This is useful if another element in the dialog should be focused first."
    },
    {
      name: "title",
      type: "string",
      description: "Set title for the dialog."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:this",
      type: "object",
      description: "Exposes the component instance."
    },
    {
      name: "on:close",
      type: "function",
      description: "Triggered after the dialog is closed."
    },
    {
      name: "on:open",
      type: "function",
      description: "Triggered after the dialog is opened."
    }
  ];
  const instanceApiProps = [
    {
      name: "close",
      type: "function",
      description: "Closes the dialog."
    },
    {
      name: "open",
      type: "function",
      description: "Opens the dialog."
    }
  ];
  const exampleHtml = `
<Dialog bind:this="{dialog1}">
    Are you sure?
    <div slot="footer">
        <Button on:click="{() => dialog1.close()}">Close</Button>
    </div>
</Dialog>

<Button on:click="{() => dialog1.open()}">Show dialog</Button>

<script>
    let dialog1;
&lt;/script>
`;
  let dialog1, dialog2, dialog3;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Dialog> was created with unknown prop '${key}'`);
  });
  const click_handler = () => dialog1.open();
  const click_handler_1 = () => dialog2.open();
  const click_handler_2 = () => dialog3.open();
  const click_handler_3 = () => dialog1.close();
  function dialog0_binding($$value) {
    import_internal59.binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialog1 = $$value;
      $$invalidate2(0, dialog1);
    });
  }
  function dialog1_1_binding($$value) {
    import_internal59.binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialog2 = $$value;
      $$invalidate2(1, dialog2);
    });
  }
  const click_handler_4 = () => dialog3.close();
  const click_handler_5 = () => dialog3.close();
  function dialog2_1_binding($$value) {
    import_internal59.binding_callbacks[$$value ? "unshift" : "push"](() => {
      dialog3 = $$value;
      $$invalidate2(2, dialog3);
    });
  }
  $$self2.$capture_state = () => ({
    Button: Button_default,
    Dialog: Dialog_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    instanceApiProps,
    exampleHtml,
    dialog1,
    dialog2,
    dialog3
  });
  $$self2.$inject_state = ($$props3) => {
    if ("dialog1" in $$props3)
      $$invalidate2(0, dialog1 = $$props3.dialog1);
    if ("dialog2" in $$props3)
      $$invalidate2(1, dialog2 = $$props3.dialog2);
    if ("dialog3" in $$props3)
      $$invalidate2(2, dialog3 = $$props3.dialog3);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    dialog1,
    dialog2,
    dialog3,
    apiProps,
    instanceApiProps,
    exampleHtml,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    dialog0_binding,
    dialog1_1_binding,
    click_handler_4,
    click_handler_5,
    dialog2_1_binding
  ];
}
var Dialog_1 = class extends import_internal59.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal59.init)(this, options, instance59, create_fragment59, import_internal59.safe_not_equal, {});
    (0, import_internal59.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Dialog_1",
      options,
      id: create_fragment59.name
    });
  }
};
var Dialog_default2 = Dialog_1;

// docs-src/components/drawer/Drawer.svelte
var import_internal60 = __toESM(require_internal());
var file54 = "docs-src/components/drawer/Drawer.svelte";
function create_default_slot_213(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal60.text)("Toggle drawer");
    },
    m: function mount(target, anchor) {
      (0, import_internal60.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal60.detach_dev)(t);
    }
  };
  (0, import_internal60.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_213.name,
    type: "slot",
    source: '(3:0) <Button on:click=\\"{() => drawer.toggle()}\\">',
    ctx
  });
  return block;
}
function create_default_slot_114(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal60.text)("Close Drawer");
    },
    m: function mount(target, anchor) {
      (0, import_internal60.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal60.detach_dev)(t);
    }
  };
  (0, import_internal60.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_114.name,
    type: "slot",
    source: '(9:1) <Button on:click=\\"{() => drawer.close()}\\">',
    ctx
  });
  return block;
}
function create_default_slot9(ctx) {
  let t0;
  let br0;
  let t1;
  let br1;
  let t2;
  let br2;
  let t3;
  let button;
  let t4;
  let p0;
  let t6;
  let p1;
  let t8;
  let p2;
  let t10;
  let p3;
  let t12;
  let p4;
  let current;
  button = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_114] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*click_handler_1*/
    ctx[5]
  );
  const block = {
    c: function create() {
      t0 = (0, import_internal60.text)("drawer contents");
      br0 = (0, import_internal60.element)("br");
      t1 = (0, import_internal60.text)("\n	Hello world!");
      br1 = (0, import_internal60.element)("br");
      t2 = (0, import_internal60.space)();
      br2 = (0, import_internal60.element)("br");
      t3 = (0, import_internal60.space)();
      (0, import_internal60.create_component)(button.$$.fragment);
      t4 = (0, import_internal60.space)();
      p0 = (0, import_internal60.element)("p");
      p0.textContent = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris mollis porttitor justo, eget ornare massa commodo non. Pellentesque semper dictum mauris, id pretium mi mattis in. Proin sodales neque id euismod interdum. Fusce vel blandit orci. Mauris nec ligula aliquam, vestibulum erat nec, ullamcorper nunc. Cras vel lacinia sem. Aenean non tincidunt nisl, vitae consectetur est. Integer id neque tempor, facilisis felis egestas, aliquam turpis. Mauris id consectetur purus. Praesent vehicula, mauris eu hendrerit vehicula, velit tortor fermentum enim, eget malesuada quam eros at quam. Integer mattis egestas tempus.";
      t6 = (0, import_internal60.space)();
      p1 = (0, import_internal60.element)("p");
      p1.textContent = "Aliquam et purus enim. Suspendisse potenti. Suspendisse tincidunt ullamcorper nulla non gravida. Morbi at tellus dui. Sed orci ligula, facilisis sit amet odio eu, commodo ultricies lorem. Nullam sagittis sapien metus, eu posuere sem iaculis sed. Duis at nibh feugiat, placerat lectus nec, consectetur elit. In sollicitudin est in ultricies gravida. Ut malesuada ex lacinia, posuere augue eget, imperdiet erat. Phasellus ac dui sit amet ligula condimentum venenatis vitae ornare augue. Vivamus pellentesque felis in orci finibus, a accumsan libero consectetur.";
      t8 = (0, import_internal60.space)();
      p2 = (0, import_internal60.element)("p");
      p2.textContent = "Nulla facilisi. Sed in neque hendrerit, convallis neque a, semper sem. Maecenas suscipit ex quis risus mollis, at tincidunt mi faucibus. Pellentesque in faucibus metus. Etiam sollicitudin accumsan arcu interdum sollicitudin. Suspendisse iaculis congue justo id posuere. Ut sed nisi molestie, egestas nulla at, feugiat neque. Nullam vitae libero eu sem ornare tempus vel id tortor. Ut varius ullamcorper nisl et dignissim. Vestibulum sodales massa id odio aliquet ornare. Nunc mollis quis sapien fringilla ullamcorper. Interdum et malesuada fames ac ante ipsum primis in faucibus. Phasellus eget posuere orci.";
      t10 = (0, import_internal60.space)();
      p3 = (0, import_internal60.element)("p");
      p3.textContent = "Suspendisse sollicitudin sed ligula nec tempus. Phasellus quis luctus sapien. Nullam nec sapien fringilla, sollicitudin dui sit amet, molestie arcu. Pellentesque id elit et sem pharetra gravida. Donec sed metus ut dui venenatis euismod varius ut libero. Duis ornare odio finibus eros rhoncus ullamcorper. Maecenas auctor lectus volutpat sem pretium volutpat. Mauris blandit quam diam, nec consequat arcu dignissim ut. Donec ac lacus pretium, sollicitudin nisi in, ullamcorper enim. Ut convallis nec eros nec scelerisque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Mauris non odio a ipsum varius pretium non ut ex. Quisque euismod luctus risus, sit amet venenatis justo vehicula non. Aliquam erat volutpat. Phasellus eu leo ut odio cursus cursus. Pellentesque porta odio id arcu mattis, vitae aliquam risus efficitur.";
      t12 = (0, import_internal60.space)();
      p4 = (0, import_internal60.element)("p");
      p4.textContent = "Curabitur nec cursus purus. Nullam scelerisque et odio ut pretium. Donec gravida auctor enim, in venenatis mi viverra sit amet. Integer tincidunt lectus quis sagittis pellentesque. Morbi nec ipsum erat. Donec finibus sit amet lorem et dignissim. Praesent pretium consequat enim, quis rutrum nisl imperdiet ut.";
      (0, import_internal60.add_location)(br0, file54, 5, 16, 145);
      (0, import_internal60.add_location)(br1, file54, 6, 13, 163);
      (0, import_internal60.add_location)(br2, file54, 7, 1, 169);
      (0, import_internal60.add_location)(p0, file54, 9, 1, 240);
      (0, import_internal60.add_location)(p1, file54, 10, 1, 868);
      (0, import_internal60.add_location)(p2, file54, 11, 1, 1436);
      (0, import_internal60.add_location)(p3, file54, 12, 1, 2053);
      (0, import_internal60.add_location)(p4, file54, 13, 1, 2923);
    },
    m: function mount(target, anchor) {
      (0, import_internal60.insert_dev)(target, t0, anchor);
      (0, import_internal60.insert_dev)(target, br0, anchor);
      (0, import_internal60.insert_dev)(target, t1, anchor);
      (0, import_internal60.insert_dev)(target, br1, anchor);
      (0, import_internal60.insert_dev)(target, t2, anchor);
      (0, import_internal60.insert_dev)(target, br2, anchor);
      (0, import_internal60.insert_dev)(target, t3, anchor);
      (0, import_internal60.mount_component)(button, target, anchor);
      (0, import_internal60.insert_dev)(target, t4, anchor);
      (0, import_internal60.insert_dev)(target, p0, anchor);
      (0, import_internal60.insert_dev)(target, t6, anchor);
      (0, import_internal60.insert_dev)(target, p1, anchor);
      (0, import_internal60.insert_dev)(target, t8, anchor);
      (0, import_internal60.insert_dev)(target, p2, anchor);
      (0, import_internal60.insert_dev)(target, t10, anchor);
      (0, import_internal60.insert_dev)(target, p3, anchor);
      (0, import_internal60.insert_dev)(target, t12, anchor);
      (0, import_internal60.insert_dev)(target, p4, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*$$scope*/
      128) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal60.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal60.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal60.detach_dev)(t0);
      if (detaching)
        (0, import_internal60.detach_dev)(br0);
      if (detaching)
        (0, import_internal60.detach_dev)(t1);
      if (detaching)
        (0, import_internal60.detach_dev)(br1);
      if (detaching)
        (0, import_internal60.detach_dev)(t2);
      if (detaching)
        (0, import_internal60.detach_dev)(br2);
      if (detaching)
        (0, import_internal60.detach_dev)(t3);
      (0, import_internal60.destroy_component)(button, detaching);
      if (detaching)
        (0, import_internal60.detach_dev)(t4);
      if (detaching)
        (0, import_internal60.detach_dev)(p0);
      if (detaching)
        (0, import_internal60.detach_dev)(t6);
      if (detaching)
        (0, import_internal60.detach_dev)(p1);
      if (detaching)
        (0, import_internal60.detach_dev)(t8);
      if (detaching)
        (0, import_internal60.detach_dev)(p2);
      if (detaching)
        (0, import_internal60.detach_dev)(t10);
      if (detaching)
        (0, import_internal60.detach_dev)(p3);
      if (detaching)
        (0, import_internal60.detach_dev)(t12);
      if (detaching)
        (0, import_internal60.detach_dev)(p4);
    }
  };
  (0, import_internal60.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot9.name,
    type: "slot",
    source: '(5:0) <Drawer bind:this=\\"{drawer}\\" title=\\"Drawer\\">',
    ctx
  });
  return block;
}
function create_fragment60(ctx) {
  let h2;
  let t1;
  let button;
  let t2;
  let drawer_1;
  let t3;
  let codeexample;
  let t4;
  let api0;
  let t5;
  let api1;
  let current;
  button = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_213] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*click_handler*/
    ctx[4]
  );
  let drawer_1_props = {
    title: "Drawer",
    $$slots: { default: [create_default_slot9] },
    $$scope: { ctx }
  };
  drawer_1 = new Drawer_default({ props: drawer_1_props, $$inline: true });
  ctx[6](drawer_1);
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[3]
    ) },
    $$inline: true
  });
  api0 = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  api1 = new ApiTable_default({
    props: {
      props: (
        /*instanceApiProps*/
        ctx[2]
      ),
      title: "Instance API",
      description: "A component exposes <em>this</em> property, to which a variable can be bound, creating an instance of the component, with the following API"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal60.element)("h2");
      h2.textContent = "Drawer";
      t1 = (0, import_internal60.space)();
      (0, import_internal60.create_component)(button.$$.fragment);
      t2 = (0, import_internal60.space)();
      (0, import_internal60.create_component)(drawer_1.$$.fragment);
      t3 = (0, import_internal60.space)();
      (0, import_internal60.create_component)(codeexample.$$.fragment);
      t4 = (0, import_internal60.space)();
      (0, import_internal60.create_component)(api0.$$.fragment);
      t5 = (0, import_internal60.space)();
      (0, import_internal60.create_component)(api1.$$.fragment);
      (0, import_internal60.add_location)(h2, file54, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal60.insert_dev)(target, h2, anchor);
      (0, import_internal60.insert_dev)(target, t1, anchor);
      (0, import_internal60.mount_component)(button, target, anchor);
      (0, import_internal60.insert_dev)(target, t2, anchor);
      (0, import_internal60.mount_component)(drawer_1, target, anchor);
      (0, import_internal60.insert_dev)(target, t3, anchor);
      (0, import_internal60.mount_component)(codeexample, target, anchor);
      (0, import_internal60.insert_dev)(target, t4, anchor);
      (0, import_internal60.mount_component)(api0, target, anchor);
      (0, import_internal60.insert_dev)(target, t5, anchor);
      (0, import_internal60.mount_component)(api1, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope*/
      128) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const drawer_1_changes = {};
      if (dirty & /*$$scope, drawer*/
      129) {
        drawer_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      drawer_1.$set(drawer_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal60.transition_in)(button.$$.fragment, local);
      (0, import_internal60.transition_in)(drawer_1.$$.fragment, local);
      (0, import_internal60.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal60.transition_in)(api0.$$.fragment, local);
      (0, import_internal60.transition_in)(api1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal60.transition_out)(button.$$.fragment, local);
      (0, import_internal60.transition_out)(drawer_1.$$.fragment, local);
      (0, import_internal60.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal60.transition_out)(api0.$$.fragment, local);
      (0, import_internal60.transition_out)(api1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal60.detach_dev)(h2);
      if (detaching)
        (0, import_internal60.detach_dev)(t1);
      (0, import_internal60.destroy_component)(button, detaching);
      if (detaching)
        (0, import_internal60.detach_dev)(t2);
      ctx[6](null);
      (0, import_internal60.destroy_component)(drawer_1, detaching);
      if (detaching)
        (0, import_internal60.detach_dev)(t3);
      (0, import_internal60.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal60.detach_dev)(t4);
      (0, import_internal60.destroy_component)(api0, detaching);
      if (detaching)
        (0, import_internal60.detach_dev)(t5);
      (0, import_internal60.destroy_component)(api1, detaching);
    }
  };
  (0, import_internal60.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment60.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance60($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal60.validate_slots)("Drawer", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component container."
    },
    {
      name: "title",
      type: "string",
      description: "Set title for the drawer."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "bind:this",
      type: "object",
      description: "Exposes the component instance."
    },
    {
      name: "on:close",
      type: "function",
      description: "Triggered after the drawer is closed."
    },
    {
      name: "on:open",
      type: "function",
      description: "Triggered after the drawer is opened."
    }
  ];
  const instanceApiProps = [
    {
      name: "close",
      type: "function",
      description: "Closes the drawer."
    },
    {
      name: "open",
      type: "function",
      description: "Opens the drawer."
    },
    {
      name: "toggle",
      type: "function",
      description: "Toggles the open state (opens when closed, closes when open)."
    }
  ];
  const exampleHtml = `
<Drawer bind:this="{drawer1}" title="Drawer">
    Hello world!
    <Button on:click="{() => drawer1.close()}">Close</Button>
</Drawer>

<Button on:click="{() => drawer1.toggle()}">Show dialog</Button>

<script>
    let drawer1;
&lt;/script>
`;
  let drawer;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Drawer> was created with unknown prop '${key}'`);
  });
  const click_handler = () => drawer.toggle();
  const click_handler_1 = () => drawer.close();
  function drawer_1_binding($$value) {
    import_internal60.binding_callbacks[$$value ? "unshift" : "push"](() => {
      drawer = $$value;
      $$invalidate2(0, drawer);
    });
  }
  $$self2.$capture_state = () => ({
    Button: Button_default,
    Drawer: Drawer_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    instanceApiProps,
    exampleHtml,
    drawer
  });
  $$self2.$inject_state = ($$props3) => {
    if ("drawer" in $$props3)
      $$invalidate2(0, drawer = $$props3.drawer);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    drawer,
    apiProps,
    instanceApiProps,
    exampleHtml,
    click_handler,
    click_handler_1,
    drawer_1_binding
  ];
}
var Drawer_1 = class extends import_internal60.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal60.init)(this, options, instance60, create_fragment60, import_internal60.safe_not_equal, {});
    (0, import_internal60.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Drawer_1",
      options,
      id: create_fragment60.name
    });
  }
};
var Drawer_default2 = Drawer_1;

// docs-src/components/info-bar/InfoBar.svelte
var import_internal61 = __toESM(require_internal());
var { Error: Error_13 } = import_internal61.globals;
var file55 = "docs-src/components/info-bar/InfoBar.svelte";
function create_fragment61(ctx) {
  let h2;
  let t1;
  let p0;
  let t3;
  let p1;
  let t4;
  let em0;
  let t6;
  let em1;
  let t8;
  let em2;
  let t10;
  let em3;
  let t12;
  let t13;
  let br;
  let t14;
  let h30;
  let t16;
  let infobar;
  let t17;
  let h31;
  let t19;
  let info2;
  let t20;
  let warning;
  let t21;
  let error2;
  let t22;
  let success;
  let t23;
  let codeexample;
  let t24;
  let api;
  let current;
  infobar = new InfoBar_default({
    props: {
      id: "msg001",
      msg: "This is a comprehensive explanation of a thing.",
      type: "info"
    },
    $$inline: true
  });
  info2 = new Info_default({
    props: { msg: "Some info text" },
    $$inline: true
  });
  warning = new Warning_default({
    props: { msg: "Some warning text" },
    $$inline: true
  });
  error2 = new Error_default({
    props: { msg: "Some error text" },
    $$inline: true
  });
  success = new Success_default({
    props: { msg: "Some success text" },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal61.element)("h2");
      h2.textContent = "InfoBar";
      t1 = (0, import_internal61.space)();
      p0 = (0, import_internal61.element)("p");
      p0.textContent = "A simple information box with type-styling.";
      t3 = (0, import_internal61.space)();
      p1 = (0, import_internal61.element)("p");
      t4 = (0, import_internal61.text)("There are also shortcut-components available, for more semantic HTML:\n	");
      em0 = (0, import_internal61.element)("em");
      em0.textContent = "Info";
      t6 = (0, import_internal61.text)(", ");
      em1 = (0, import_internal61.element)("em");
      em1.textContent = "Warning";
      t8 = (0, import_internal61.text)(", ");
      em2 = (0, import_internal61.element)("em");
      em2.textContent = "Error";
      t10 = (0, import_internal61.text)(", and ");
      em3 = (0, import_internal61.element)("em");
      em3.textContent = "Success";
      t12 = (0, import_internal61.text)(".");
      t13 = (0, import_internal61.space)();
      br = (0, import_internal61.element)("br");
      t14 = (0, import_internal61.space)();
      h30 = (0, import_internal61.element)("h3");
      h30.textContent = "Normal";
      t16 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(infobar.$$.fragment);
      t17 = (0, import_internal61.space)();
      h31 = (0, import_internal61.element)("h3");
      h31.textContent = "Using shortcuts";
      t19 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(info2.$$.fragment);
      t20 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(warning.$$.fragment);
      t21 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(error2.$$.fragment);
      t22 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(success.$$.fragment);
      t23 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(codeexample.$$.fragment);
      t24 = (0, import_internal61.space)();
      (0, import_internal61.create_component)(api.$$.fragment);
      (0, import_internal61.add_location)(h2, file55, 0, 0, 0);
      (0, import_internal61.add_location)(p0, file55, 2, 0, 18);
      (0, import_internal61.add_location)(em0, file55, 4, 1, 143);
      (0, import_internal61.add_location)(em1, file55, 4, 16, 158);
      (0, import_internal61.add_location)(em2, file55, 4, 34, 176);
      (0, import_internal61.add_location)(em3, file55, 4, 54, 196);
      (0, import_internal61.add_location)(p1, file55, 3, 0, 69);
      (0, import_internal61.add_location)(br, file55, 6, 0, 219);
      (0, import_internal61.add_location)(h30, file55, 8, 0, 225);
      (0, import_internal61.add_location)(h31, file55, 12, 0, 333);
    },
    l: function claim(nodes) {
      throw new Error_13("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal61.insert_dev)(target, h2, anchor);
      (0, import_internal61.insert_dev)(target, t1, anchor);
      (0, import_internal61.insert_dev)(target, p0, anchor);
      (0, import_internal61.insert_dev)(target, t3, anchor);
      (0, import_internal61.insert_dev)(target, p1, anchor);
      (0, import_internal61.append_dev)(p1, t4);
      (0, import_internal61.append_dev)(p1, em0);
      (0, import_internal61.append_dev)(p1, t6);
      (0, import_internal61.append_dev)(p1, em1);
      (0, import_internal61.append_dev)(p1, t8);
      (0, import_internal61.append_dev)(p1, em2);
      (0, import_internal61.append_dev)(p1, t10);
      (0, import_internal61.append_dev)(p1, em3);
      (0, import_internal61.append_dev)(p1, t12);
      (0, import_internal61.insert_dev)(target, t13, anchor);
      (0, import_internal61.insert_dev)(target, br, anchor);
      (0, import_internal61.insert_dev)(target, t14, anchor);
      (0, import_internal61.insert_dev)(target, h30, anchor);
      (0, import_internal61.insert_dev)(target, t16, anchor);
      (0, import_internal61.mount_component)(infobar, target, anchor);
      (0, import_internal61.insert_dev)(target, t17, anchor);
      (0, import_internal61.insert_dev)(target, h31, anchor);
      (0, import_internal61.insert_dev)(target, t19, anchor);
      (0, import_internal61.mount_component)(info2, target, anchor);
      (0, import_internal61.insert_dev)(target, t20, anchor);
      (0, import_internal61.mount_component)(warning, target, anchor);
      (0, import_internal61.insert_dev)(target, t21, anchor);
      (0, import_internal61.mount_component)(error2, target, anchor);
      (0, import_internal61.insert_dev)(target, t22, anchor);
      (0, import_internal61.mount_component)(success, target, anchor);
      (0, import_internal61.insert_dev)(target, t23, anchor);
      (0, import_internal61.mount_component)(codeexample, target, anchor);
      (0, import_internal61.insert_dev)(target, t24, anchor);
      (0, import_internal61.mount_component)(api, target, anchor);
      current = true;
    },
    p: import_internal61.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal61.transition_in)(infobar.$$.fragment, local);
      (0, import_internal61.transition_in)(info2.$$.fragment, local);
      (0, import_internal61.transition_in)(warning.$$.fragment, local);
      (0, import_internal61.transition_in)(error2.$$.fragment, local);
      (0, import_internal61.transition_in)(success.$$.fragment, local);
      (0, import_internal61.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal61.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal61.transition_out)(infobar.$$.fragment, local);
      (0, import_internal61.transition_out)(info2.$$.fragment, local);
      (0, import_internal61.transition_out)(warning.$$.fragment, local);
      (0, import_internal61.transition_out)(error2.$$.fragment, local);
      (0, import_internal61.transition_out)(success.$$.fragment, local);
      (0, import_internal61.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal61.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal61.detach_dev)(h2);
      if (detaching)
        (0, import_internal61.detach_dev)(t1);
      if (detaching)
        (0, import_internal61.detach_dev)(p0);
      if (detaching)
        (0, import_internal61.detach_dev)(t3);
      if (detaching)
        (0, import_internal61.detach_dev)(p1);
      if (detaching)
        (0, import_internal61.detach_dev)(t13);
      if (detaching)
        (0, import_internal61.detach_dev)(br);
      if (detaching)
        (0, import_internal61.detach_dev)(t14);
      if (detaching)
        (0, import_internal61.detach_dev)(h30);
      if (detaching)
        (0, import_internal61.detach_dev)(t16);
      (0, import_internal61.destroy_component)(infobar, detaching);
      if (detaching)
        (0, import_internal61.detach_dev)(t17);
      if (detaching)
        (0, import_internal61.detach_dev)(h31);
      if (detaching)
        (0, import_internal61.detach_dev)(t19);
      (0, import_internal61.destroy_component)(info2, detaching);
      if (detaching)
        (0, import_internal61.detach_dev)(t20);
      (0, import_internal61.destroy_component)(warning, detaching);
      if (detaching)
        (0, import_internal61.detach_dev)(t21);
      (0, import_internal61.destroy_component)(error2, detaching);
      if (detaching)
        (0, import_internal61.detach_dev)(t22);
      (0, import_internal61.destroy_component)(success, detaching);
      if (detaching)
        (0, import_internal61.detach_dev)(t23);
      (0, import_internal61.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal61.detach_dev)(t24);
      (0, import_internal61.destroy_component)(api, detaching);
    }
  };
  (0, import_internal61.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment61.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance61($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal61.validate_slots)("InfoBar", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the message paragraph."
    },
    {
      name: "msg",
      type: "string",
      description: "Message to display. It can use simple html for formatting (message is wrapped in <em>&lt;p&gt;</em> tag)."
    },
    {
      name: "type",
      type: ["info", "warning", "error", "success"],
      default: "info",
      description: "Type of the info-bar. This property only exists on the <em>&lt;InfoBar&gt;</em> component, not on the shortcut-components."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    }
  ];
  const exampleHtml = `
<InfoBar id="msg001" msg="This is a comprehensive explanation of a thing." type="info" />

<!-- Using shortcuts -->
<Info msg="Some info text" />
<Warning msg="Some warning text" />
<Error msg="Some error text" />
<Success msg="Some success text" />
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<InfoBar> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    InfoBar: InfoBar_default,
    Info: Info_default,
    Error: Error_default,
    Success: Success_default,
    Warning: Warning_default,
    CodeExample: CodeExample_default,
    API: ApiTable_default,
    apiProps,
    exampleHtml
  });
  return [apiProps, exampleHtml];
}
var InfoBar_1 = class extends import_internal61.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal61.init)(this, options, instance61, create_fragment61, import_internal61.safe_not_equal, {});
    (0, import_internal61.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "InfoBar_1",
      options,
      id: create_fragment61.name
    });
  }
};
var InfoBar_default2 = InfoBar_1;

// docs-src/components/menu/Menu.svelte
var import_internal62 = __toESM(require_internal());
var { console: console_18 } = import_internal62.globals;
var file56 = "docs-src/components/menu/Menu.svelte";
function create_default_slot_412(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Show menu");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_412.name,
    type: "slot",
    source: '(4:0) <Button data-name=\\"show-menu-button\\" on:click=\\"{thingsMenu.open}\\">',
    ctx
  });
  return block;
}
function create_default_slot_402(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Show menu aligned to right");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_402.name,
    type: "slot",
    source: '(5:0) <Button data-name=\\"show-menu-button\\" on:click=\\"{thingsMenu2.open}\\">',
    ctx
  });
  return block;
}
function create_default_slot_392(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Add a thing (success)");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_392.name,
    type: "slot",
    source: '(8:1) <MenuItem success icon=\\"plus\\" data-value=\\"add-something\\" on:click=\\"{onMenuClick}\\">',
    ctx
  });
  return block;
}
function create_default_slot_382(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Add another one");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_382.name,
    type: "slot",
    source: "(9:1) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_372(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Third option");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_372.name,
    type: "slot",
    source: '(11:1) <MenuItem shortcut=\\"cmd+shift+c\\">',
    ctx
  });
  return block;
}
function create_default_slot_362(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Fourth menu item");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_362.name,
    type: "slot",
    source: '(12:1) <MenuItem shortcut=\\"cmd+alt+d\\">',
    ctx
  });
  return block;
}
function create_default_slot_352(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Fifth element");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_352.name,
    type: "slot",
    source: '(13:1) <MenuItem shortcut=\\"cmd+c\\">',
    ctx
  });
  return block;
}
function create_default_slot_342(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Sixth one, to make it longer");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_342.name,
    type: "slot",
    source: '(14:1) <MenuItem shortcut=\\"cmd+enter\\">',
    ctx
  });
  return block;
}
function create_default_slot_332(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Seventh. Menu supports type-ahead");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_332.name,
    type: "slot",
    source: '(15:1) <MenuItem shortcut=\\"backspace\\">',
    ctx
  });
  return block;
}
function create_default_slot_323(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Eight, so go ahead and try typing");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_323.name,
    type: "slot",
    source: '(16:1) <MenuItem shortcut=\\"escape\\">',
    ctx
  });
  return block;
}
function create_default_slot_312(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Ninth, the beginning of the menu item text");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_312.name,
    type: "slot",
    source: '(17:1) <MenuItem shortcut=\\"cmd+option+s\\">',
    ctx
  });
  return block;
}
function create_default_slot_302(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Tenth, and it should be focused");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_302.name,
    type: "slot",
    source: "(18:1) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_292(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("A disabled option too");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_292.name,
    type: "slot",
    source: "(19:1) <MenuItem disabled>",
    ctx
  });
  return block;
}
function create_default_slot_282(ctx) {
  let t0;
  let t1;
  const block = {
    c: function create() {
      t0 = (0, import_internal62.text)(
        /*closeThingsText*/
        ctx[7]
      );
      t1 = (0, import_internal62.text)(" (danger)");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*closeThingsText*/
      128)
        (0, import_internal62.set_data_dev)(
          t0,
          /*closeThingsText*/
          ctx2[7]
        );
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_282.name,
    type: "slot",
    source: '(21:1) <MenuItem danger icon=\\"close\\" on:click=\\"{menuCloseThings}\\">',
    ctx
  });
  return block;
}
function create_default_slot_272(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator0;
  let t2;
  let menuitem2;
  let t3;
  let menuitem3;
  let t4;
  let menuitem4;
  let t5;
  let menuitem5;
  let t6;
  let menuitem6;
  let t7;
  let menuitem7;
  let t8;
  let menuitem8;
  let t9;
  let menuitem9;
  let t10;
  let menuitem10;
  let t11;
  let menuseparator1;
  let t12;
  let menuitem11;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      success: true,
      icon: "plus",
      "data-value": "add-something",
      $$slots: { default: [create_default_slot_392] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem0.$on("click", onMenuClick);
  menuitem1 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_382] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuseparator0 = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      shortcut: "cmd+shift+c",
      $$slots: { default: [create_default_slot_372] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem3 = new MenuItem_default({
    props: {
      shortcut: "cmd+alt+d",
      $$slots: { default: [create_default_slot_362] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem4 = new MenuItem_default({
    props: {
      shortcut: "cmd+c",
      $$slots: { default: [create_default_slot_352] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem5 = new MenuItem_default({
    props: {
      shortcut: "cmd+enter",
      $$slots: { default: [create_default_slot_342] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem6 = new MenuItem_default({
    props: {
      shortcut: "backspace",
      $$slots: { default: [create_default_slot_332] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem7 = new MenuItem_default({
    props: {
      shortcut: "escape",
      $$slots: { default: [create_default_slot_323] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem8 = new MenuItem_default({
    props: {
      shortcut: "cmd+option+s",
      $$slots: { default: [create_default_slot_312] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem9 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_302] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem10 = new MenuItem_default({
    props: {
      disabled: true,
      $$slots: { default: [create_default_slot_292] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuseparator1 = new MenuSeparator_default({ $$inline: true });
  menuitem11 = new MenuItem_default({
    props: {
      danger: true,
      icon: "close",
      $$slots: { default: [create_default_slot_282] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem11.$on(
    "click",
    /*menuCloseThings*/
    ctx[13]
  );
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator0.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
      t3 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem3.$$.fragment);
      t4 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem4.$$.fragment);
      t5 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem5.$$.fragment);
      t6 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem6.$$.fragment);
      t7 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem7.$$.fragment);
      t8 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem8.$$.fragment);
      t9 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem9.$$.fragment);
      t10 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem10.$$.fragment);
      t11 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator1.$$.fragment);
      t12 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem11.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator0, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      (0, import_internal62.insert_dev)(target, t3, anchor);
      (0, import_internal62.mount_component)(menuitem3, target, anchor);
      (0, import_internal62.insert_dev)(target, t4, anchor);
      (0, import_internal62.mount_component)(menuitem4, target, anchor);
      (0, import_internal62.insert_dev)(target, t5, anchor);
      (0, import_internal62.mount_component)(menuitem5, target, anchor);
      (0, import_internal62.insert_dev)(target, t6, anchor);
      (0, import_internal62.mount_component)(menuitem6, target, anchor);
      (0, import_internal62.insert_dev)(target, t7, anchor);
      (0, import_internal62.mount_component)(menuitem7, target, anchor);
      (0, import_internal62.insert_dev)(target, t8, anchor);
      (0, import_internal62.mount_component)(menuitem8, target, anchor);
      (0, import_internal62.insert_dev)(target, t9, anchor);
      (0, import_internal62.mount_component)(menuitem9, target, anchor);
      (0, import_internal62.insert_dev)(target, t10, anchor);
      (0, import_internal62.mount_component)(menuitem10, target, anchor);
      (0, import_internal62.insert_dev)(target, t11, anchor);
      (0, import_internal62.mount_component)(menuseparator1, target, anchor);
      (0, import_internal62.insert_dev)(target, t12, anchor);
      (0, import_internal62.mount_component)(menuitem11, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
      const menuitem3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem3.$set(menuitem3_changes);
      const menuitem4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem4.$set(menuitem4_changes);
      const menuitem5_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem5.$set(menuitem5_changes);
      const menuitem6_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem6.$set(menuitem6_changes);
      const menuitem7_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem7.$set(menuitem7_changes);
      const menuitem8_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem8.$set(menuitem8_changes);
      const menuitem9_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem9.$set(menuitem9_changes);
      const menuitem10_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem10.$set(menuitem10_changes);
      const menuitem11_changes = {};
      if (dirty & /*$$scope, closeThingsText*/
      1073741952) {
        menuitem11_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem11.$set(menuitem11_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem3.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem4.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem5.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem6.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem7.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem8.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem9.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem10.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem11.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem3.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem4.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem5.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem6.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem7.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem8.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem9.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem10.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem11.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t3);
      (0, import_internal62.destroy_component)(menuitem3, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t4);
      (0, import_internal62.destroy_component)(menuitem4, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t5);
      (0, import_internal62.destroy_component)(menuitem5, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t6);
      (0, import_internal62.destroy_component)(menuitem6, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t7);
      (0, import_internal62.destroy_component)(menuitem7, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t8);
      (0, import_internal62.destroy_component)(menuitem8, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t9);
      (0, import_internal62.destroy_component)(menuitem9, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t10);
      (0, import_internal62.destroy_component)(menuitem10, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t11);
      (0, import_internal62.destroy_component)(menuseparator1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t12);
      (0, import_internal62.destroy_component)(menuitem11, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_272.name,
    type: "slot",
    source: '(7:0) <Menu bind:this=\\"{thingsMenu}\\">',
    ctx
  });
  return block;
}
function create_default_slot_262(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Add a thing (success)");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_262.name,
    type: "slot",
    source: '(26:1) <MenuItem success icon=\\"plus\\" data-value=\\"add-something\\" on:click=\\"{onMenuClick}\\">',
    ctx
  });
  return block;
}
function create_default_slot_253(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Add another one");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_253.name,
    type: "slot",
    source: "(27:1) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_243(ctx) {
  let t0;
  let t1;
  const block = {
    c: function create() {
      t0 = (0, import_internal62.text)(
        /*closeThingsText*/
        ctx[7]
      );
      t1 = (0, import_internal62.text)(" (danger)");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*closeThingsText*/
      128)
        (0, import_internal62.set_data_dev)(
          t0,
          /*closeThingsText*/
          ctx2[7]
        );
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_243.name,
    type: "slot",
    source: '(29:1) <MenuItem danger icon=\\"close\\" on:click=\\"{menuCloseThings}\\">',
    ctx
  });
  return block;
}
function create_default_slot_233(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator;
  let t2;
  let menuitem2;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      success: true,
      icon: "plus",
      "data-value": "add-something",
      $$slots: { default: [create_default_slot_262] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem0.$on("click", onMenuClick);
  menuitem1 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_253] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuseparator = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      danger: true,
      icon: "close",
      $$slots: { default: [create_default_slot_243] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem2.$on(
    "click",
    /*menuCloseThings*/
    ctx[13]
  );
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope, closeThingsText*/
      1073741952) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_233.name,
    type: "slot",
    source: '(25:0) <Menu align=\\"right\\" bind:this=\\"{thingsMenu2}\\">',
    ctx
  });
  return block;
}
function create_default_slot_223(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Regular Menu");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_223.name,
    type: "slot",
    source: '(40:1) <Button on:click=\\"{someMenu1.open}\\">',
    ctx
  });
  return block;
}
function create_default_slot_214(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "plus" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" Add some");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_214.name,
    type: "slot",
    source: "(42:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_203(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Add some more");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_203.name,
    type: "slot",
    source: "(43:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_193(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "close" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" Close something");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_193.name,
    type: "slot",
    source: "(45:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_183(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator;
  let t2;
  let menuitem2;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_214] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem1 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_203] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuseparator = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_193] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_183.name,
    type: "slot",
    source: '(41:1) <Menu bind:this=\\"{someMenu1}\\">',
    ctx
  });
  return block;
}
function create_default_slot_173(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Elevated Menu");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_173.name,
    type: "slot",
    source: '(48:1) <Button on:click=\\"{someMenu2.open}\\">',
    ctx
  });
  return block;
}
function create_default_slot_163(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "plus" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" Add some");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_163.name,
    type: "slot",
    source: "(50:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_153(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Add some more");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_153.name,
    type: "slot",
    source: "(51:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_143(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "close" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" Close something");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_143.name,
    type: "slot",
    source: "(53:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_133(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator;
  let t2;
  let menuitem2;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_163] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem1 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_153] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuseparator = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_143] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_133.name,
    type: "slot",
    source: '(49:1) <Menu bind:this=\\"{someMenu2}\\" elevate=\\"true\\">',
    ctx
  });
  return block;
}
function create_default_slot_123(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Right edge");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_123.name,
    type: "slot",
    source: '(56:1) <Button class=\\"docs-menu-align-right\\" on:click=\\"{someMenu3.open}\\">',
    ctx
  });
  return block;
}
function create_default_slot_115(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "plus" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" A very long text");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_115.name,
    type: "slot",
    source: "(58:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_103(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Another very long text");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_103.name,
    type: "slot",
    source: "(59:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_93(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "close" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" Probably the longest text in the world!");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_93.name,
    type: "slot",
    source: "(61:2) <MenuItem>",
    ctx
  });
  return block;
}
function create_default_slot_84(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator;
  let t2;
  let menuitem2;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_115] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem1 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_103] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuseparator = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      $$slots: { default: [create_default_slot_93] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_84.name,
    type: "slot",
    source: '(57:1) <Menu bind:this=\\"{someMenu3}\\" elevate=\\"true\\">',
    ctx
  });
  return block;
}
function create_default_slot_74(ctx) {
  let icon;
  let t;
  let current;
  icon = new Icon_default({ props: { name: "plus" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t = (0, import_internal62.text)(" New Tab");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t, anchor);
      current = true;
    },
    p: import_internal62.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_74.name,
    type: "slot",
    source: '(82:1) <MenuItem shortcut=\\"cmd+t\\" on:click=\\"{newTab}\\">',
    ctx
  });
  return block;
}
function create_default_slot_64(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("New Private Tab");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_64.name,
    type: "slot",
    source: '(83:1) <MenuItem shortcut=\\"cmd+shift+t\\" on:click=\\"{newPrivateTab}\\">',
    ctx
  });
  return block;
}
function create_default_slot_54(ctx) {
  let icon;
  let t0;
  let t1;
  let current;
  icon = new Icon_default({ props: { name: "close" }, $$inline: true });
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(icon.$$.fragment);
      t0 = (0, import_internal62.space)();
      t1 = (0, import_internal62.text)(
        /*closeTabsText*/
        ctx[8]
      );
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(icon, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (!current || dirty & /*closeTabsText*/
      256)
        (0, import_internal62.set_data_dev)(
          t1,
          /*closeTabsText*/
          ctx2[8]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(icon, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_54.name,
    type: "slot",
    source: '(85:1) <MenuItem shortcut=\\"cmd+shift+w\\" on:click=\\"{closeTabs}\\">',
    ctx
  });
  return block;
}
function create_default_slot_47(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator;
  let t2;
  let menuitem2;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      shortcut: "cmd+t",
      $$slots: { default: [create_default_slot_74] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem0.$on(
    "click",
    /*newTab*/
    ctx[14]
  );
  menuitem1 = new MenuItem_default({
    props: {
      shortcut: "cmd+shift+t",
      $$slots: { default: [create_default_slot_64] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem1.$on(
    "click",
    /*newPrivateTab*/
    ctx[15]
  );
  menuseparator = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      shortcut: "cmd+shift+w",
      $$slots: { default: [create_default_slot_54] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem2.$on(
    "click",
    /*closeTabs*/
    ctx[16]
  );
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope, closeTabsText*/
      1073742080) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_47.name,
    type: "slot",
    source: '(81:0) <Menu type=\\"context\\" targetSelector=\\".div1\\" bind:this=\\"{tabsMenu}\\" on:close=\\"{onTabsMenuClose}\\">',
    ctx
  });
  return block;
}
function create_default_slot_313(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("New window");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_313.name,
    type: "slot",
    source: '(89:1) <MenuItem shortcut=\\"cmd+n\\" on:click=\\"{newWindow}\\">',
    ctx
  });
  return block;
}
function create_default_slot_215(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("New private window");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_215.name,
    type: "slot",
    source: '(90:1) <MenuItem shortcut=\\"cmd+shift+n\\" on:click=\\"{newPrivateWindow}\\">',
    ctx
  });
  return block;
}
function create_default_slot_116(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal62.text)("Close All Windows");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(t);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_116.name,
    type: "slot",
    source: '(92:1) <MenuItem shortcut=\\"cmd+shift+q\\" on:click=\\"{closeWindows}\\">',
    ctx
  });
  return block;
}
function create_default_slot10(ctx) {
  let menuitem0;
  let t0;
  let menuitem1;
  let t1;
  let menuseparator;
  let t2;
  let menuitem2;
  let current;
  menuitem0 = new MenuItem_default({
    props: {
      shortcut: "cmd+n",
      $$slots: { default: [create_default_slot_313] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem0.$on(
    "click",
    /*newWindow*/
    ctx[18]
  );
  menuitem1 = new MenuItem_default({
    props: {
      shortcut: "cmd+shift+n",
      $$slots: { default: [create_default_slot_215] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem1.$on(
    "click",
    /*newPrivateWindow*/
    ctx[19]
  );
  menuseparator = new MenuSeparator_default({ $$inline: true });
  menuitem2 = new MenuItem_default({
    props: {
      shortcut: "cmd+shift+q",
      $$slots: { default: [create_default_slot_116] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  menuitem2.$on(
    "click",
    /*closeWindows*/
    ctx[20]
  );
  const block = {
    c: function create() {
      (0, import_internal62.create_component)(menuitem0.$$.fragment);
      t0 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem1.$$.fragment);
      t1 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuseparator.$$.fragment);
      t2 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menuitem2.$$.fragment);
    },
    m: function mount(target, anchor) {
      (0, import_internal62.mount_component)(menuitem0, target, anchor);
      (0, import_internal62.insert_dev)(target, t0, anchor);
      (0, import_internal62.mount_component)(menuitem1, target, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.mount_component)(menuseparator, target, anchor);
      (0, import_internal62.insert_dev)(target, t2, anchor);
      (0, import_internal62.mount_component)(menuitem2, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const menuitem0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem0.$set(menuitem0_changes);
      const menuitem1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem1.$set(menuitem1_changes);
      const menuitem2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menuitem2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      menuitem2.$set(menuitem2_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_in)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_in)(menuitem2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(menuitem0.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem1.$$.fragment, local);
      (0, import_internal62.transition_out)(menuseparator.$$.fragment, local);
      (0, import_internal62.transition_out)(menuitem2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal62.destroy_component)(menuitem0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t0);
      (0, import_internal62.destroy_component)(menuitem1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      (0, import_internal62.destroy_component)(menuseparator, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t2);
      (0, import_internal62.destroy_component)(menuitem2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot10.name,
    type: "slot",
    source: '(88:0) <Menu type=\\"context\\" targetSelector=\\".div2\\" bind:this=\\"{windowsMenu}\\">',
    ctx
  });
  return block;
}
function create_fragment62(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let button0;
  let t4;
  let button1;
  let t5;
  let menu0;
  let t6;
  let menu1;
  let t7;
  let h31;
  let t8;
  let em0;
  let t10;
  let p0;
  let t11;
  let em1;
  let t13;
  let em2;
  let t15;
  let t16;
  let div0;
  let small0;
  let t17;
  let em3;
  let t19;
  let button2;
  let t20;
  let menu2;
  let t21;
  let button3;
  let t22;
  let menu3;
  let t23;
  let button4;
  let t24;
  let menu4;
  let t25;
  let div1;
  let small1;
  let t26;
  let em4;
  let t28;
  let t29;
  let p1;
  let t30;
  let em5;
  let t32;
  let t33;
  let h32;
  let t35;
  let small2;
  let t37;
  let div2;
  let t39;
  let div3;
  let t41;
  let menu5;
  let t42;
  let menu6;
  let t43;
  let codeexample;
  let t44;
  let api0;
  let t45;
  let api1;
  let t46;
  let api2;
  let current;
  button0 = new Button_default({
    props: {
      "data-name": "show-menu-button",
      $$slots: { default: [create_default_slot_412] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button0.$on("click", function() {
    if ((0, import_internal62.is_function)(
      /*thingsMenu*/
      ctx[3].open
    ))
      ctx[3].open.apply(this, arguments);
  });
  button1 = new Button_default({
    props: {
      "data-name": "show-menu-button",
      $$slots: { default: [create_default_slot_402] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1.$on("click", function() {
    if ((0, import_internal62.is_function)(
      /*thingsMenu2*/
      ctx[4].open
    ))
      ctx[4].open.apply(this, arguments);
  });
  let menu0_props = {
    $$slots: { default: [create_default_slot_272] },
    $$scope: { ctx }
  };
  menu0 = new Menu_default({ props: menu0_props, $$inline: true });
  ctx[21](menu0);
  let menu1_props = {
    align: "right",
    $$slots: { default: [create_default_slot_233] },
    $$scope: { ctx }
  };
  menu1 = new Menu_default({ props: menu1_props, $$inline: true });
  ctx[22](menu1);
  button2 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_223] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2.$on("click", function() {
    if ((0, import_internal62.is_function)(
      /*someMenu1*/
      ctx[0].open
    ))
      ctx[0].open.apply(this, arguments);
  });
  let menu2_props = {
    $$slots: { default: [create_default_slot_183] },
    $$scope: { ctx }
  };
  menu2 = new Menu_default({ props: menu2_props, $$inline: true });
  ctx[23](menu2);
  button3 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_173] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3.$on("click", function() {
    if ((0, import_internal62.is_function)(
      /*someMenu2*/
      ctx[1].open
    ))
      ctx[1].open.apply(this, arguments);
  });
  let menu3_props = {
    elevate: "true",
    $$slots: { default: [create_default_slot_133] },
    $$scope: { ctx }
  };
  menu3 = new Menu_default({ props: menu3_props, $$inline: true });
  ctx[24](menu3);
  button4 = new Button_default({
    props: {
      class: "docs-menu-align-right",
      $$slots: { default: [create_default_slot_123] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button4.$on("click", function() {
    if ((0, import_internal62.is_function)(
      /*someMenu3*/
      ctx[2].open
    ))
      ctx[2].open.apply(this, arguments);
  });
  let menu4_props = {
    elevate: "true",
    $$slots: { default: [create_default_slot_84] },
    $$scope: { ctx }
  };
  menu4 = new Menu_default({ props: menu4_props, $$inline: true });
  ctx[25](menu4);
  let menu5_props = {
    type: "context",
    targetSelector: ".div1",
    $$slots: { default: [create_default_slot_47] },
    $$scope: { ctx }
  };
  menu5 = new Menu_default({ props: menu5_props, $$inline: true });
  ctx[26](menu5);
  menu5.$on(
    "close",
    /*onTabsMenuClose*/
    ctx[17]
  );
  let menu6_props = {
    type: "context",
    targetSelector: ".div2",
    $$slots: { default: [create_default_slot10] },
    $$scope: { ctx }
  };
  menu6 = new Menu_default({ props: menu6_props, $$inline: true });
  ctx[27](menu6);
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[12]
    ) },
    $$inline: true
  });
  api0 = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[9]
    ) },
    $$inline: true
  });
  api1 = new ApiTable_default({
    props: {
      props: (
        /*instanceApiProps*/
        ctx[10]
      ),
      title: "Menu Instance API",
      description: "A component exposes <em>this</em> property, to which a variable can be bound, creating an instance of the component, with the following API"
    },
    $$inline: true
  });
  api2 = new ApiTable_default({
    props: {
      props: (
        /*itemApiProps*/
        ctx[11]
      ),
      title: "Item API"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal62.element)("h2");
      h2.textContent = "Menu";
      t1 = (0, import_internal62.space)();
      h30 = (0, import_internal62.element)("h3");
      h30.textContent = "Normal menu";
      t3 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(button0.$$.fragment);
      t4 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(button1.$$.fragment);
      t5 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu0.$$.fragment);
      t6 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu1.$$.fragment);
      t7 = (0, import_internal62.space)();
      h31 = (0, import_internal62.element)("h3");
      t8 = (0, import_internal62.text)("In a container with ");
      em0 = (0, import_internal62.element)("em");
      em0.textContent = "overflow: hidden";
      t10 = (0, import_internal62.space)();
      p0 = (0, import_internal62.element)("p");
      t11 = (0, import_internal62.text)("Where parent container has ");
      em1 = (0, import_internal62.element)("em");
      em1.textContent = "overflow: hidden";
      t13 = (0, import_internal62.text)(", and/or another container is covering the menu,\n	");
      em2 = (0, import_internal62.element)("em");
      em2.textContent = 'elevate="true"';
      t15 = (0, import_internal62.text)(" property must be set on the component.");
      t16 = (0, import_internal62.space)();
      div0 = (0, import_internal62.element)("div");
      small0 = (0, import_internal62.element)("small");
      t17 = (0, import_internal62.text)("parent: ");
      em3 = (0, import_internal62.element)("em");
      em3.textContent = "overflow: hidden";
      t19 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(button2.$$.fragment);
      t20 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu2.$$.fragment);
      t21 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(button3.$$.fragment);
      t22 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu3.$$.fragment);
      t23 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(button4.$$.fragment);
      t24 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu4.$$.fragment);
      t25 = (0, import_internal62.space)();
      div1 = (0, import_internal62.element)("div");
      small1 = (0, import_internal62.element)("small");
      t26 = (0, import_internal62.text)("parent's sibling with ");
      em4 = (0, import_internal62.element)("em");
      em4.textContent = "z-index";
      t28 = (0, import_internal62.text)(" higher than parent");
      t29 = (0, import_internal62.space)();
      p1 = (0, import_internal62.element)("p");
      t30 = (0, import_internal62.text)("This option should only be used when absolutely necessary, because it makes the component less accessible\n	(the list container is rendered directly in the ");
      em5 = (0, import_internal62.element)("em");
      em5.textContent = "<body>";
      t32 = (0, import_internal62.text)(", and not next to the input).");
      t33 = (0, import_internal62.space)();
      h32 = (0, import_internal62.element)("h3");
      h32.textContent = "Context menu";
      t35 = (0, import_internal62.space)();
      small2 = (0, import_internal62.element)("small");
      small2.textContent = "(Right-click on the boxes below)";
      t37 = (0, import_internal62.space)();
      div2 = (0, import_internal62.element)("div");
      div2.textContent = "Tab";
      t39 = (0, import_internal62.space)();
      div3 = (0, import_internal62.element)("div");
      div3.textContent = "Window";
      t41 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu5.$$.fragment);
      t42 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(menu6.$$.fragment);
      t43 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(codeexample.$$.fragment);
      t44 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(api0.$$.fragment);
      t45 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(api1.$$.fragment);
      t46 = (0, import_internal62.space)();
      (0, import_internal62.create_component)(api2.$$.fragment);
      (0, import_internal62.add_location)(h2, file56, 0, 0, 0);
      (0, import_internal62.add_location)(h30, file56, 2, 0, 15);
      (0, import_internal62.add_location)(em0, file56, 34, 24, 1501);
      (0, import_internal62.add_location)(h31, file56, 34, 0, 1477);
      (0, import_internal62.add_location)(em1, file56, 35, 30, 1562);
      (0, import_internal62.add_location)(em2, file56, 36, 1, 1637);
      (0, import_internal62.add_location)(p0, file56, 35, 0, 1532);
      (0, import_internal62.add_location)(em3, file56, 38, 16, 1752);
      (0, import_internal62.add_location)(small0, file56, 38, 1, 1737);
      (0, import_internal62.attr_dev)(div0, "class", "docs-overflow-box");
      (0, import_internal62.add_location)(div0, file56, 37, 0, 1704);
      (0, import_internal62.add_location)(em4, file56, 65, 30, 2776);
      (0, import_internal62.add_location)(small1, file56, 65, 1, 2747);
      (0, import_internal62.attr_dev)(div1, "class", "another-element-with-z-index");
      (0, import_internal62.add_location)(div1, file56, 64, 0, 2703);
      (0, import_internal62.add_location)(em5, file56, 68, 49, 2985);
      (0, import_internal62.add_location)(p1, file56, 67, 0, 2827);
      (0, import_internal62.add_location)(h32, file56, 74, 0, 3045);
      (0, import_internal62.add_location)(small2, file56, 75, 0, 3067);
      (0, import_internal62.attr_dev)(div2, "class", "div div1");
      (0, import_internal62.add_location)(div2, file56, 77, 0, 3116);
      (0, import_internal62.attr_dev)(div3, "class", "div div2");
      (0, import_internal62.add_location)(div3, file56, 78, 0, 3148);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal62.insert_dev)(target, h2, anchor);
      (0, import_internal62.insert_dev)(target, t1, anchor);
      (0, import_internal62.insert_dev)(target, h30, anchor);
      (0, import_internal62.insert_dev)(target, t3, anchor);
      (0, import_internal62.mount_component)(button0, target, anchor);
      (0, import_internal62.insert_dev)(target, t4, anchor);
      (0, import_internal62.mount_component)(button1, target, anchor);
      (0, import_internal62.insert_dev)(target, t5, anchor);
      (0, import_internal62.mount_component)(menu0, target, anchor);
      (0, import_internal62.insert_dev)(target, t6, anchor);
      (0, import_internal62.mount_component)(menu1, target, anchor);
      (0, import_internal62.insert_dev)(target, t7, anchor);
      (0, import_internal62.insert_dev)(target, h31, anchor);
      (0, import_internal62.append_dev)(h31, t8);
      (0, import_internal62.append_dev)(h31, em0);
      (0, import_internal62.insert_dev)(target, t10, anchor);
      (0, import_internal62.insert_dev)(target, p0, anchor);
      (0, import_internal62.append_dev)(p0, t11);
      (0, import_internal62.append_dev)(p0, em1);
      (0, import_internal62.append_dev)(p0, t13);
      (0, import_internal62.append_dev)(p0, em2);
      (0, import_internal62.append_dev)(p0, t15);
      (0, import_internal62.insert_dev)(target, t16, anchor);
      (0, import_internal62.insert_dev)(target, div0, anchor);
      (0, import_internal62.append_dev)(div0, small0);
      (0, import_internal62.append_dev)(small0, t17);
      (0, import_internal62.append_dev)(small0, em3);
      (0, import_internal62.append_dev)(div0, t19);
      (0, import_internal62.mount_component)(button2, div0, null);
      (0, import_internal62.append_dev)(div0, t20);
      (0, import_internal62.mount_component)(menu2, div0, null);
      (0, import_internal62.append_dev)(div0, t21);
      (0, import_internal62.mount_component)(button3, div0, null);
      (0, import_internal62.append_dev)(div0, t22);
      (0, import_internal62.mount_component)(menu3, div0, null);
      (0, import_internal62.append_dev)(div0, t23);
      (0, import_internal62.mount_component)(button4, div0, null);
      (0, import_internal62.append_dev)(div0, t24);
      (0, import_internal62.mount_component)(menu4, div0, null);
      (0, import_internal62.insert_dev)(target, t25, anchor);
      (0, import_internal62.insert_dev)(target, div1, anchor);
      (0, import_internal62.append_dev)(div1, small1);
      (0, import_internal62.append_dev)(small1, t26);
      (0, import_internal62.append_dev)(small1, em4);
      (0, import_internal62.append_dev)(small1, t28);
      (0, import_internal62.insert_dev)(target, t29, anchor);
      (0, import_internal62.insert_dev)(target, p1, anchor);
      (0, import_internal62.append_dev)(p1, t30);
      (0, import_internal62.append_dev)(p1, em5);
      (0, import_internal62.append_dev)(p1, t32);
      (0, import_internal62.insert_dev)(target, t33, anchor);
      (0, import_internal62.insert_dev)(target, h32, anchor);
      (0, import_internal62.insert_dev)(target, t35, anchor);
      (0, import_internal62.insert_dev)(target, small2, anchor);
      (0, import_internal62.insert_dev)(target, t37, anchor);
      (0, import_internal62.insert_dev)(target, div2, anchor);
      (0, import_internal62.insert_dev)(target, t39, anchor);
      (0, import_internal62.insert_dev)(target, div3, anchor);
      (0, import_internal62.insert_dev)(target, t41, anchor);
      (0, import_internal62.mount_component)(menu5, target, anchor);
      (0, import_internal62.insert_dev)(target, t42, anchor);
      (0, import_internal62.mount_component)(menu6, target, anchor);
      (0, import_internal62.insert_dev)(target, t43, anchor);
      (0, import_internal62.mount_component)(codeexample, target, anchor);
      (0, import_internal62.insert_dev)(target, t44, anchor);
      (0, import_internal62.mount_component)(api0, target, anchor);
      (0, import_internal62.insert_dev)(target, t45, anchor);
      (0, import_internal62.mount_component)(api1, target, anchor);
      (0, import_internal62.insert_dev)(target, t46, anchor);
      (0, import_internal62.mount_component)(api2, target, anchor);
      current = true;
    },
    p: function update(new_ctx, [dirty]) {
      ctx = new_ctx;
      const button0_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        button0_changes.$$scope = { dirty, ctx };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        button1_changes.$$scope = { dirty, ctx };
      }
      button1.$set(button1_changes);
      const menu0_changes = {};
      if (dirty & /*$$scope, closeThingsText*/
      1073741952) {
        menu0_changes.$$scope = { dirty, ctx };
      }
      menu0.$set(menu0_changes);
      const menu1_changes = {};
      if (dirty & /*$$scope, closeThingsText*/
      1073741952) {
        menu1_changes.$$scope = { dirty, ctx };
      }
      menu1.$set(menu1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        button2_changes.$$scope = { dirty, ctx };
      }
      button2.$set(button2_changes);
      const menu2_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menu2_changes.$$scope = { dirty, ctx };
      }
      menu2.$set(menu2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        button3_changes.$$scope = { dirty, ctx };
      }
      button3.$set(button3_changes);
      const menu3_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menu3_changes.$$scope = { dirty, ctx };
      }
      menu3.$set(menu3_changes);
      const button4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        button4_changes.$$scope = { dirty, ctx };
      }
      button4.$set(button4_changes);
      const menu4_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menu4_changes.$$scope = { dirty, ctx };
      }
      menu4.$set(menu4_changes);
      const menu5_changes = {};
      if (dirty & /*$$scope, closeTabsText*/
      1073742080) {
        menu5_changes.$$scope = { dirty, ctx };
      }
      menu5.$set(menu5_changes);
      const menu6_changes = {};
      if (dirty & /*$$scope*/
      1073741824) {
        menu6_changes.$$scope = { dirty, ctx };
      }
      menu6.$set(menu6_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal62.transition_in)(button0.$$.fragment, local);
      (0, import_internal62.transition_in)(button1.$$.fragment, local);
      (0, import_internal62.transition_in)(menu0.$$.fragment, local);
      (0, import_internal62.transition_in)(menu1.$$.fragment, local);
      (0, import_internal62.transition_in)(button2.$$.fragment, local);
      (0, import_internal62.transition_in)(menu2.$$.fragment, local);
      (0, import_internal62.transition_in)(button3.$$.fragment, local);
      (0, import_internal62.transition_in)(menu3.$$.fragment, local);
      (0, import_internal62.transition_in)(button4.$$.fragment, local);
      (0, import_internal62.transition_in)(menu4.$$.fragment, local);
      (0, import_internal62.transition_in)(menu5.$$.fragment, local);
      (0, import_internal62.transition_in)(menu6.$$.fragment, local);
      (0, import_internal62.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal62.transition_in)(api0.$$.fragment, local);
      (0, import_internal62.transition_in)(api1.$$.fragment, local);
      (0, import_internal62.transition_in)(api2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal62.transition_out)(button0.$$.fragment, local);
      (0, import_internal62.transition_out)(button1.$$.fragment, local);
      (0, import_internal62.transition_out)(menu0.$$.fragment, local);
      (0, import_internal62.transition_out)(menu1.$$.fragment, local);
      (0, import_internal62.transition_out)(button2.$$.fragment, local);
      (0, import_internal62.transition_out)(menu2.$$.fragment, local);
      (0, import_internal62.transition_out)(button3.$$.fragment, local);
      (0, import_internal62.transition_out)(menu3.$$.fragment, local);
      (0, import_internal62.transition_out)(button4.$$.fragment, local);
      (0, import_internal62.transition_out)(menu4.$$.fragment, local);
      (0, import_internal62.transition_out)(menu5.$$.fragment, local);
      (0, import_internal62.transition_out)(menu6.$$.fragment, local);
      (0, import_internal62.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal62.transition_out)(api0.$$.fragment, local);
      (0, import_internal62.transition_out)(api1.$$.fragment, local);
      (0, import_internal62.transition_out)(api2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal62.detach_dev)(h2);
      if (detaching)
        (0, import_internal62.detach_dev)(t1);
      if (detaching)
        (0, import_internal62.detach_dev)(h30);
      if (detaching)
        (0, import_internal62.detach_dev)(t3);
      (0, import_internal62.destroy_component)(button0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t4);
      (0, import_internal62.destroy_component)(button1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t5);
      ctx[21](null);
      (0, import_internal62.destroy_component)(menu0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t6);
      ctx[22](null);
      (0, import_internal62.destroy_component)(menu1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t7);
      if (detaching)
        (0, import_internal62.detach_dev)(h31);
      if (detaching)
        (0, import_internal62.detach_dev)(t10);
      if (detaching)
        (0, import_internal62.detach_dev)(p0);
      if (detaching)
        (0, import_internal62.detach_dev)(t16);
      if (detaching)
        (0, import_internal62.detach_dev)(div0);
      (0, import_internal62.destroy_component)(button2);
      ctx[23](null);
      (0, import_internal62.destroy_component)(menu2);
      (0, import_internal62.destroy_component)(button3);
      ctx[24](null);
      (0, import_internal62.destroy_component)(menu3);
      (0, import_internal62.destroy_component)(button4);
      ctx[25](null);
      (0, import_internal62.destroy_component)(menu4);
      if (detaching)
        (0, import_internal62.detach_dev)(t25);
      if (detaching)
        (0, import_internal62.detach_dev)(div1);
      if (detaching)
        (0, import_internal62.detach_dev)(t29);
      if (detaching)
        (0, import_internal62.detach_dev)(p1);
      if (detaching)
        (0, import_internal62.detach_dev)(t33);
      if (detaching)
        (0, import_internal62.detach_dev)(h32);
      if (detaching)
        (0, import_internal62.detach_dev)(t35);
      if (detaching)
        (0, import_internal62.detach_dev)(small2);
      if (detaching)
        (0, import_internal62.detach_dev)(t37);
      if (detaching)
        (0, import_internal62.detach_dev)(div2);
      if (detaching)
        (0, import_internal62.detach_dev)(t39);
      if (detaching)
        (0, import_internal62.detach_dev)(div3);
      if (detaching)
        (0, import_internal62.detach_dev)(t41);
      ctx[26](null);
      (0, import_internal62.destroy_component)(menu5, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t42);
      ctx[27](null);
      (0, import_internal62.destroy_component)(menu6, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t43);
      (0, import_internal62.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t44);
      (0, import_internal62.destroy_component)(api0, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t45);
      (0, import_internal62.destroy_component)(api1, detaching);
      if (detaching)
        (0, import_internal62.detach_dev)(t46);
      (0, import_internal62.destroy_component)(api2, detaching);
    }
  };
  (0, import_internal62.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment62.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onMenuClick(e) {
  const { target, button } = e.detail;
  console.log(target.dataset, button.dataset);
}
function instance62($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal62.validate_slots)("Menu", slots2, []);
  const apiProps = [
    {
      name: "align",
      type: ["left", "right"],
      default: "left",
      description: "Align to the <em>left</em> or <em>right</em> edge of the target."
    },
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "closeOnClick",
      type: ["true", "false"],
      default: "true",
      description: "By default - menu will close when an item is clicked. Setting this property false will disable auto-closing."
    },
    {
      name: "elevate",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> - the menu will be rendered into the <i>body</i>, to ensure it's not hidden under some elements (see example above)."
    },
    {
      name: "targetSelector",
      type: "string",
      required: true,
      description: "This is only required when menu type is <em>context</em>.<br>It provides a selector to an element, in which the menu will appear (on mouse right-click)."
    },
    {
      name: "type",
      type: "context",
      description: "If type is set to <em>context</em> the menu will behave as context-menu."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:close",
      type: "function",
      description: "Triggered after the menu is closed."
    },
    {
      name: "on:open",
      type: "function",
      description: "Triggered after the menu is opened."
    }
  ];
  const instanceApiProps = [
    {
      name: "close",
      type: "function",
      description: "Closes the menu."
    },
    {
      name: "open",
      type: "function",
      description: "Opens the menu."
    }
  ];
  const itemApiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the menu item."
    },
    {
      name: "danger",
      description: "Button type: danger"
    },
    {
      name: "data-",
      description: "Dataset attribute allows to pass some data of a primitive type (string, number, boolean), which will be accessible in the <em>on:click</em> event listener, via button reference."
    },
    {
      name: "disabled",
      description: "Makes the menu item (button) <i>disabled</i>"
    },
    {
      name: "icon",
      type: "string",
      description: 'Adds an icon, with this name, to the button (see <a href="#Icon">icons</a> section for icon names)'
    },
    {
      name: "id",
      type: "string",
      description: "Assign ID to the underlying button"
    },
    {
      name: "shortcut",
      type: "string",
      description: "A string representation of a keyboard shortcut. e.g. <em>cmd+alt+c</em>.<br>Keys should be separated by a <em>+</em> sign (which will be hidden in the rendered item).<br>Special keys (like cmd, alt, ctrl, shift, escape, enter, etc.) will be replaced by a corresponding symbol.<br>Keyboard handling must be done elsewhere."
    },
    {
      name: "success",
      description: "Button type: success"
    },
    {
      name: "title",
      type: "string",
      description: "Assign title to the underlying button"
    },
    {
      name: "warning",
      description: "Button type: warning"
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:click",
      type: "function",
      description: "Triggered when the menu item was clicked.<br>The event handler function receives 1 argument - the click event.<br>By calling <em>event.preventDefault();</em> it is possible to prevent menu from auto closing when the item was clicked.<br><em>event.detail</em> will contain a <em>button</em> and <em>target</em> properties, that are references to the corresponding html elements.<br>It is possible to pass the data using <em>data-</em> attributes on the <em>target</em> element and on the <em>MenuItem</em>."
    }
  ];
  const exampleHtml = `
<!-- Regular menu -->
<Menu bind:this="{menu1}">
    <MenuItem data-value="add-something"><Icon name="plus"/> Add some</MenuItem>
    <MenuItem>Add some more</MenuItem>
    <MenuSeparator />
    <MenuItem on:click="{closeSomething}"><Icon name="close"/> Close something</MenuItem>
</Menu>

<Button data-name="button-with-menu" on:click="{menu1.open}">Show menu</Button>

<!-- Context menu -->
<div class="div1">Tab</div>
<Menu type="context" targetSelector=".div1" bind:this="{menu2}">
    <MenuItem shortcut="cmd+n" on:click="{action1}">New window</MenuItem>
    <MenuItem shortcut="cmd+shift+n" on:click="{action2}">New private window</MenuItem>
    <MenuSeparator />
    <MenuItem shortcut="cmd+shift+q" on:click="{action3}">Close All Windows</MenuItem>
</Menu>

<script>
    let menu1, menu2;
    function closeSomething (e) {
        e.preventDefault();   // prevents menu auto-closing
        menu1.close();       // manually close the menu
    }
    function onMenuClick (e) {
        const { target, button } = e.detail;
        console.log(target.dataset, button.dataset);
    }
&lt;/script>
`;
  let someMenu1, someMenu2, someMenu3, thingsMenu, thingsMenu2, tabsMenu, windowsMenu;
  let closeThingsText = "Close all things";
  let closeTabsText = "Close all tabs";
  let thingsMenuTimer, tabsMenutimer;
  function menuCloseThings(e) {
    if (e)
      e.preventDefault();
    const initial = "Close all things";
    const confrm = "Confirm Closing";
    if (closeThingsText === initial) {
      $$invalidate2(7, closeThingsText = confrm);
      thingsMenuTimer = setTimeout(() => $$invalidate2(7, closeThingsText = initial), 2e3);
    } else {
      Promise.all([thingsMenu.close(), thingsMenu2.close()]).then(() => {
        $$invalidate2(7, closeThingsText = initial);
        if (thingsMenuTimer)
          clearTimeout(thingsMenuTimer);
        alert("Closed all things!");
      });
    }
  }
  function newTab() {
    tabsMenu.close().then(() => alert("New Tab clicked"));
  }
  function newPrivateTab() {
    tabsMenu.close().then(() => alert("New Private Tab clicked"));
  }
  function closeTabs(e) {
    if (e)
      e.preventDefault();
    const initial = "Close all tabs";
    const confrm = "Confirm Closing";
    if (closeTabsText === initial) {
      $$invalidate2(8, closeTabsText = confrm);
      tabsMenutimer = setTimeout(() => $$invalidate2(8, closeTabsText = initial), 2e3);
    } else
      tabsMenu.close().then(() => alert("Closed all tabs!"));
  }
  function onTabsMenuClose() {
    $$invalidate2(8, closeTabsText = "Close all tabs");
    if (tabsMenutimer)
      clearTimeout(tabsMenutimer);
  }
  function newWindow() {
    windowsMenu.close().then(() => alert("New Window clicked"));
  }
  function newPrivateWindow() {
    windowsMenu.close().then(() => alert("New Private Window clicked"));
  }
  function closeWindows() {
    windowsMenu.close().then(() => alert("Windows closed!"));
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_18.warn(`<Menu> was created with unknown prop '${key}'`);
  });
  function menu0_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      thingsMenu = $$value;
      $$invalidate2(3, thingsMenu);
    });
  }
  function menu1_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      thingsMenu2 = $$value;
      $$invalidate2(4, thingsMenu2);
    });
  }
  function menu2_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      someMenu1 = $$value;
      $$invalidate2(0, someMenu1);
    });
  }
  function menu3_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      someMenu2 = $$value;
      $$invalidate2(1, someMenu2);
    });
  }
  function menu4_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      someMenu3 = $$value;
      $$invalidate2(2, someMenu3);
    });
  }
  function menu5_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      tabsMenu = $$value;
      $$invalidate2(5, tabsMenu);
    });
  }
  function menu6_binding($$value) {
    import_internal62.binding_callbacks[$$value ? "unshift" : "push"](() => {
      windowsMenu = $$value;
      $$invalidate2(6, windowsMenu);
    });
  }
  $$self2.$capture_state = () => ({
    Button: Button_default,
    Menu: Menu_default,
    MenuItem: MenuItem_default,
    MenuSeparator: MenuSeparator_default,
    Icon: Icon_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    instanceApiProps,
    itemApiProps,
    exampleHtml,
    someMenu1,
    someMenu2,
    someMenu3,
    thingsMenu,
    thingsMenu2,
    tabsMenu,
    windowsMenu,
    closeThingsText,
    closeTabsText,
    thingsMenuTimer,
    tabsMenutimer,
    onMenuClick,
    menuCloseThings,
    newTab,
    newPrivateTab,
    closeTabs,
    onTabsMenuClose,
    newWindow,
    newPrivateWindow,
    closeWindows
  });
  $$self2.$inject_state = ($$props3) => {
    if ("someMenu1" in $$props3)
      $$invalidate2(0, someMenu1 = $$props3.someMenu1);
    if ("someMenu2" in $$props3)
      $$invalidate2(1, someMenu2 = $$props3.someMenu2);
    if ("someMenu3" in $$props3)
      $$invalidate2(2, someMenu3 = $$props3.someMenu3);
    if ("thingsMenu" in $$props3)
      $$invalidate2(3, thingsMenu = $$props3.thingsMenu);
    if ("thingsMenu2" in $$props3)
      $$invalidate2(4, thingsMenu2 = $$props3.thingsMenu2);
    if ("tabsMenu" in $$props3)
      $$invalidate2(5, tabsMenu = $$props3.tabsMenu);
    if ("windowsMenu" in $$props3)
      $$invalidate2(6, windowsMenu = $$props3.windowsMenu);
    if ("closeThingsText" in $$props3)
      $$invalidate2(7, closeThingsText = $$props3.closeThingsText);
    if ("closeTabsText" in $$props3)
      $$invalidate2(8, closeTabsText = $$props3.closeTabsText);
    if ("thingsMenuTimer" in $$props3)
      thingsMenuTimer = $$props3.thingsMenuTimer;
    if ("tabsMenutimer" in $$props3)
      tabsMenutimer = $$props3.tabsMenutimer;
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    someMenu1,
    someMenu2,
    someMenu3,
    thingsMenu,
    thingsMenu2,
    tabsMenu,
    windowsMenu,
    closeThingsText,
    closeTabsText,
    apiProps,
    instanceApiProps,
    itemApiProps,
    exampleHtml,
    menuCloseThings,
    newTab,
    newPrivateTab,
    closeTabs,
    onTabsMenuClose,
    newWindow,
    newPrivateWindow,
    closeWindows,
    menu0_binding,
    menu1_binding,
    menu2_binding,
    menu3_binding,
    menu4_binding,
    menu5_binding,
    menu6_binding
  ];
}
var Menu_1 = class extends import_internal62.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal62.init)(this, options, instance62, create_fragment62, import_internal62.safe_not_equal, {});
    (0, import_internal62.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Menu_1",
      options,
      id: create_fragment62.name
    });
  }
};
var Menu_default2 = Menu_1;

// docs-src/components/message-box/MessageBox.svelte
var import_internal63 = __toESM(require_internal());
var { console: console_19 } = import_internal63.globals;
var file57 = "docs-src/components/message-box/MessageBox.svelte";
function create_default_slot_104(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Default message");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_104.name,
    type: "slot",
    source: `(10:1) <Button on:click=\\"{() => showMessage('This is the message')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_94(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show info");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_94.name,
    type: "slot",
    source: `(11:1) <Button info on:click=\\"{() => showMessage('This is the message', MessageType.INFO)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_85(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_85.name,
    type: "slot",
    source: `(12:1) <Button warning on:click=\\"{() => showMessage('This is the message', MessageType.WARNING)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_75(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show error");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_75.name,
    type: "slot",
    source: `(13:1) <Button danger on:click=\\"{() => showMessage('This is the message', MessageType.DANGER)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_65(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show success");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_65.name,
    type: "slot",
    source: `(14:1) <Button success on:click=\\"{() => showMessage('This is the message', MessageType.SUCCESS)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_55(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show message with title");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_55.name,
    type: "slot",
    source: `(20:1) <Button on:click=\\"{() => showMessage('Default message', null, 'Default title')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_48(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show message with title");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_48.name,
    type: "slot",
    source: `(21:1) <Button info on:click=\\"{() => showMessage('Info messagebox', MessageType.INFO, 'Info title')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_314(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show long message");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_314.name,
    type: "slot",
    source: `(22:1) <Button on:click=\\"{() => showMessage(longMessage, null, 'Info title')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_216(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show message");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_216.name,
    type: "slot",
    source: `(28:1) <Button on:click=\\"{() => showMessage('Message with <i>html</i><br><a href=\\"#MessageBox\\" target=\\"_blank\\">Link</a>', null, 'Info title', 'Close')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_117(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show Info with title and button label and callback");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_117.name,
    type: "slot",
    source: `(34:1) <Button on:click=\\"{() => showMessage('Info messagebox', null, 'Info title', 'Close', onclose)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot11(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal63.text)("Show complex message");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(t);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot11.name,
    type: "slot",
    source: '(39:0) <Button info on:click=\\"{showComplex}\\">',
    ctx
  });
  return block;
}
function create_fragment63(ctx) {
  let h2;
  let t1;
  let p;
  let t3;
  let br;
  let t4;
  let h30;
  let t6;
  let div0;
  let button0;
  let t7;
  let button1;
  let t8;
  let button2;
  let t9;
  let button3;
  let t10;
  let button4;
  let t11;
  let h31;
  let t13;
  let div1;
  let button5;
  let t14;
  let button6;
  let t15;
  let button7;
  let t16;
  let h32;
  let t18;
  let div2;
  let button8;
  let t19;
  let h33;
  let t21;
  let div3;
  let button9;
  let t22;
  let h34;
  let t24;
  let button10;
  let t25;
  let messagebox;
  let t26;
  let codeexample;
  let t27;
  let api;
  let current;
  button0 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_104] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button0.$on(
    "click",
    /*click_handler*/
    ctx[3]
  );
  button1 = new Button_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot_94] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1.$on(
    "click",
    /*click_handler_1*/
    ctx[4]
  );
  button2 = new Button_default({
    props: {
      warning: true,
      $$slots: { default: [create_default_slot_85] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2.$on(
    "click",
    /*click_handler_2*/
    ctx[5]
  );
  button3 = new Button_default({
    props: {
      danger: true,
      $$slots: { default: [create_default_slot_75] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3.$on(
    "click",
    /*click_handler_3*/
    ctx[6]
  );
  button4 = new Button_default({
    props: {
      success: true,
      $$slots: { default: [create_default_slot_65] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button4.$on(
    "click",
    /*click_handler_4*/
    ctx[7]
  );
  button5 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_55] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button5.$on(
    "click",
    /*click_handler_5*/
    ctx[8]
  );
  button6 = new Button_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot_48] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button6.$on(
    "click",
    /*click_handler_6*/
    ctx[9]
  );
  button7 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_314] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button7.$on(
    "click",
    /*click_handler_7*/
    ctx[10]
  );
  button8 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_216] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button8.$on(
    "click",
    /*click_handler_8*/
    ctx[11]
  );
  button9 = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_117] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button9.$on(
    "click",
    /*click_handler_9*/
    ctx[12]
  );
  button10 = new Button_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot11] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button10.$on(
    "click",
    /*showComplex*/
    ctx[0]
  );
  messagebox = new MessageBox_default({ $$inline: true });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: {
      props: (
        /*apiProps*/
        ctx[1]
      ),
      title: "Function API - arguments",
      description: "A component exports a <em>showMessage</em> function which accepts either\n	a config object or a list of arguments.  If it is a list of arguments - this is the API:"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal63.element)("h2");
      h2.textContent = "MessageBox";
      t1 = (0, import_internal63.space)();
      p = (0, import_internal63.element)("p");
      p.textContent = "It uses the Dialog component by adding it to the body once (so it's lightweight)\n	and re-using it for every call";
      t3 = (0, import_internal63.space)();
      br = (0, import_internal63.element)("br");
      t4 = (0, import_internal63.space)();
      h30 = (0, import_internal63.element)("h3");
      h30.textContent = "Types";
      t6 = (0, import_internal63.space)();
      div0 = (0, import_internal63.element)("div");
      (0, import_internal63.create_component)(button0.$$.fragment);
      t7 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button1.$$.fragment);
      t8 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button2.$$.fragment);
      t9 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button3.$$.fragment);
      t10 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button4.$$.fragment);
      t11 = (0, import_internal63.space)();
      h31 = (0, import_internal63.element)("h3");
      h31.textContent = "Title";
      t13 = (0, import_internal63.space)();
      div1 = (0, import_internal63.element)("div");
      (0, import_internal63.create_component)(button5.$$.fragment);
      t14 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button6.$$.fragment);
      t15 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button7.$$.fragment);
      t16 = (0, import_internal63.space)();
      h32 = (0, import_internal63.element)("h3");
      h32.textContent = "Message with HTML";
      t18 = (0, import_internal63.space)();
      div2 = (0, import_internal63.element)("div");
      (0, import_internal63.create_component)(button8.$$.fragment);
      t19 = (0, import_internal63.space)();
      h33 = (0, import_internal63.element)("h3");
      h33.textContent = "MessageBox with callback action";
      t21 = (0, import_internal63.space)();
      div3 = (0, import_internal63.element)("div");
      (0, import_internal63.create_component)(button9.$$.fragment);
      t22 = (0, import_internal63.space)();
      h34 = (0, import_internal63.element)("h3");
      h34.textContent = "Complex Message";
      t24 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(button10.$$.fragment);
      t25 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(messagebox.$$.fragment);
      t26 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(codeexample.$$.fragment);
      t27 = (0, import_internal63.space)();
      (0, import_internal63.create_component)(api.$$.fragment);
      (0, import_internal63.add_location)(h2, file57, 0, 0, 0);
      (0, import_internal63.add_location)(p, file57, 2, 0, 21);
      (0, import_internal63.add_location)(br, file57, 5, 0, 142);
      (0, import_internal63.add_location)(h30, file57, 7, 0, 148);
      (0, import_internal63.attr_dev)(div0, "class", "docs-buttons-row");
      (0, import_internal63.add_location)(div0, file57, 8, 0, 163);
      (0, import_internal63.add_location)(h31, file57, 17, 0, 734);
      (0, import_internal63.attr_dev)(div1, "class", "docs-buttons-row");
      (0, import_internal63.add_location)(div1, file57, 18, 0, 749);
      (0, import_internal63.add_location)(h32, file57, 25, 0, 1133);
      (0, import_internal63.attr_dev)(div2, "class", "docs-buttons-row");
      (0, import_internal63.add_location)(div2, file57, 26, 0, 1160);
      (0, import_internal63.add_location)(h33, file57, 31, 0, 1369);
      (0, import_internal63.attr_dev)(div3, "class", "docs-buttons-row");
      (0, import_internal63.add_location)(div3, file57, 32, 0, 1410);
      (0, import_internal63.add_location)(h34, file57, 37, 0, 1607);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal63.insert_dev)(target, h2, anchor);
      (0, import_internal63.insert_dev)(target, t1, anchor);
      (0, import_internal63.insert_dev)(target, p, anchor);
      (0, import_internal63.insert_dev)(target, t3, anchor);
      (0, import_internal63.insert_dev)(target, br, anchor);
      (0, import_internal63.insert_dev)(target, t4, anchor);
      (0, import_internal63.insert_dev)(target, h30, anchor);
      (0, import_internal63.insert_dev)(target, t6, anchor);
      (0, import_internal63.insert_dev)(target, div0, anchor);
      (0, import_internal63.mount_component)(button0, div0, null);
      (0, import_internal63.append_dev)(div0, t7);
      (0, import_internal63.mount_component)(button1, div0, null);
      (0, import_internal63.append_dev)(div0, t8);
      (0, import_internal63.mount_component)(button2, div0, null);
      (0, import_internal63.append_dev)(div0, t9);
      (0, import_internal63.mount_component)(button3, div0, null);
      (0, import_internal63.append_dev)(div0, t10);
      (0, import_internal63.mount_component)(button4, div0, null);
      (0, import_internal63.insert_dev)(target, t11, anchor);
      (0, import_internal63.insert_dev)(target, h31, anchor);
      (0, import_internal63.insert_dev)(target, t13, anchor);
      (0, import_internal63.insert_dev)(target, div1, anchor);
      (0, import_internal63.mount_component)(button5, div1, null);
      (0, import_internal63.append_dev)(div1, t14);
      (0, import_internal63.mount_component)(button6, div1, null);
      (0, import_internal63.append_dev)(div1, t15);
      (0, import_internal63.mount_component)(button7, div1, null);
      (0, import_internal63.insert_dev)(target, t16, anchor);
      (0, import_internal63.insert_dev)(target, h32, anchor);
      (0, import_internal63.insert_dev)(target, t18, anchor);
      (0, import_internal63.insert_dev)(target, div2, anchor);
      (0, import_internal63.mount_component)(button8, div2, null);
      (0, import_internal63.insert_dev)(target, t19, anchor);
      (0, import_internal63.insert_dev)(target, h33, anchor);
      (0, import_internal63.insert_dev)(target, t21, anchor);
      (0, import_internal63.insert_dev)(target, div3, anchor);
      (0, import_internal63.mount_component)(button9, div3, null);
      (0, import_internal63.insert_dev)(target, t22, anchor);
      (0, import_internal63.insert_dev)(target, h34, anchor);
      (0, import_internal63.insert_dev)(target, t24, anchor);
      (0, import_internal63.mount_component)(button10, target, anchor);
      (0, import_internal63.insert_dev)(target, t25, anchor);
      (0, import_internal63.mount_component)(messagebox, target, anchor);
      (0, import_internal63.insert_dev)(target, t26, anchor);
      (0, import_internal63.mount_component)(codeexample, target, anchor);
      (0, import_internal63.insert_dev)(target, t27, anchor);
      (0, import_internal63.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const button0_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
      const button4_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button4.$set(button4_changes);
      const button5_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button5.$set(button5_changes);
      const button6_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button6.$set(button6_changes);
      const button7_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button7.$set(button7_changes);
      const button8_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button8.$set(button8_changes);
      const button9_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button9.$set(button9_changes);
      const button10_changes = {};
      if (dirty & /*$$scope*/
      8192) {
        button10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button10.$set(button10_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal63.transition_in)(button0.$$.fragment, local);
      (0, import_internal63.transition_in)(button1.$$.fragment, local);
      (0, import_internal63.transition_in)(button2.$$.fragment, local);
      (0, import_internal63.transition_in)(button3.$$.fragment, local);
      (0, import_internal63.transition_in)(button4.$$.fragment, local);
      (0, import_internal63.transition_in)(button5.$$.fragment, local);
      (0, import_internal63.transition_in)(button6.$$.fragment, local);
      (0, import_internal63.transition_in)(button7.$$.fragment, local);
      (0, import_internal63.transition_in)(button8.$$.fragment, local);
      (0, import_internal63.transition_in)(button9.$$.fragment, local);
      (0, import_internal63.transition_in)(button10.$$.fragment, local);
      (0, import_internal63.transition_in)(messagebox.$$.fragment, local);
      (0, import_internal63.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal63.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal63.transition_out)(button0.$$.fragment, local);
      (0, import_internal63.transition_out)(button1.$$.fragment, local);
      (0, import_internal63.transition_out)(button2.$$.fragment, local);
      (0, import_internal63.transition_out)(button3.$$.fragment, local);
      (0, import_internal63.transition_out)(button4.$$.fragment, local);
      (0, import_internal63.transition_out)(button5.$$.fragment, local);
      (0, import_internal63.transition_out)(button6.$$.fragment, local);
      (0, import_internal63.transition_out)(button7.$$.fragment, local);
      (0, import_internal63.transition_out)(button8.$$.fragment, local);
      (0, import_internal63.transition_out)(button9.$$.fragment, local);
      (0, import_internal63.transition_out)(button10.$$.fragment, local);
      (0, import_internal63.transition_out)(messagebox.$$.fragment, local);
      (0, import_internal63.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal63.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal63.detach_dev)(h2);
      if (detaching)
        (0, import_internal63.detach_dev)(t1);
      if (detaching)
        (0, import_internal63.detach_dev)(p);
      if (detaching)
        (0, import_internal63.detach_dev)(t3);
      if (detaching)
        (0, import_internal63.detach_dev)(br);
      if (detaching)
        (0, import_internal63.detach_dev)(t4);
      if (detaching)
        (0, import_internal63.detach_dev)(h30);
      if (detaching)
        (0, import_internal63.detach_dev)(t6);
      if (detaching)
        (0, import_internal63.detach_dev)(div0);
      (0, import_internal63.destroy_component)(button0);
      (0, import_internal63.destroy_component)(button1);
      (0, import_internal63.destroy_component)(button2);
      (0, import_internal63.destroy_component)(button3);
      (0, import_internal63.destroy_component)(button4);
      if (detaching)
        (0, import_internal63.detach_dev)(t11);
      if (detaching)
        (0, import_internal63.detach_dev)(h31);
      if (detaching)
        (0, import_internal63.detach_dev)(t13);
      if (detaching)
        (0, import_internal63.detach_dev)(div1);
      (0, import_internal63.destroy_component)(button5);
      (0, import_internal63.destroy_component)(button6);
      (0, import_internal63.destroy_component)(button7);
      if (detaching)
        (0, import_internal63.detach_dev)(t16);
      if (detaching)
        (0, import_internal63.detach_dev)(h32);
      if (detaching)
        (0, import_internal63.detach_dev)(t18);
      if (detaching)
        (0, import_internal63.detach_dev)(div2);
      (0, import_internal63.destroy_component)(button8);
      if (detaching)
        (0, import_internal63.detach_dev)(t19);
      if (detaching)
        (0, import_internal63.detach_dev)(h33);
      if (detaching)
        (0, import_internal63.detach_dev)(t21);
      if (detaching)
        (0, import_internal63.detach_dev)(div3);
      (0, import_internal63.destroy_component)(button9);
      if (detaching)
        (0, import_internal63.detach_dev)(t22);
      if (detaching)
        (0, import_internal63.detach_dev)(h34);
      if (detaching)
        (0, import_internal63.detach_dev)(t24);
      (0, import_internal63.destroy_component)(button10, detaching);
      if (detaching)
        (0, import_internal63.detach_dev)(t25);
      (0, import_internal63.destroy_component)(messagebox, detaching);
      if (detaching)
        (0, import_internal63.detach_dev)(t26);
      (0, import_internal63.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal63.detach_dev)(t27);
      (0, import_internal63.destroy_component)(api, detaching);
    }
  };
  (0, import_internal63.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment63.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var longMessage = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce nec euismod turpis. Aliquam aliquam varius dignissim. Sed sit amet leo tempor, dignissim ex euismod, volutpat ante. Etiam sed lacus pharetra, commodo lectus ac, bibendum purus. In vel aliquam arcu, nec aliquam tortor. Cras feugiat porta eros. Nulla eget quam mattis, laoreet elit et, volutpat lacus. Phasellus eget risus in lacus facilisis porta vitae vel nibh. Nam condimentum est risus, sed volutpat metus sodales non. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Phasellus ac euismod arcu. Proin varius, ligula vel ullamcorper rutrum, tortor est imperdiet est, et accumsan nunc mi vitae risus.";
function onclose(res) {
  alert(`You clicked ${res}`);
}
function instance63($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal63.validate_slots)("MessageBox", slots2, []);
  function showComplex(e) {
    showMessage({
      message: "Are you sure you want to delete this thing?",
      type: MessageType.DANGER,
      title: "Confirm",
      buttons: [
        {
          label: "Yes",
          value: "yes",
          type: "danger"
        },
        { label: "No" }
      ],
      target: e.target,
      icon: "help",
      cb: (res) => {
        console.log(`You clicked ${res}`);
      }
    });
  }
  const apiProps = [
    {
      name: "1. message",
      type: "string",
      description: "A message to show."
    },
    {
      name: "2. type",
      type: "string",
      default: "info",
      description: "A message type (for icon and button styling)."
    },
    {
      name: "3. title",
      type: "string",
      default: "",
      description: "A title of the message box."
    },
    {
      name: "4. label",
      type: "string",
      default: "OK",
      description: "A label for the button."
    },
    {
      name: "5. cb",
      type: "function",
      description: "A callback function that will be called on close. A value of the clicked button will be passed to the function."
    }
  ];
  const exampleHtml = `
<MessageBox />

<script>
	import { MessageBox, MessageType, showMessage } from '@perfectthings/ui';

    showMessage('Some info with the OK button');

    showMessage('Some warning with the OK button', MessageType.WARNING);
    showMessage('Some error with the OK button and title', MessageType.ERROR, 'Error', 'Close');

    showMessage({
        message: 'Are you sure you want to delete this item?',
        title: 'Confirm',
        type: MessageType.DANGER,
		icon: 'help',
        buttons: [
            { label: 'OK', value: 'ok', type: 'danger' },
            { label: 'Cancel' }
        ],
		target: buttonElement,  // to be focused on close
        cb: (res) => {}
    });

&lt;/script>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_19.warn(`<MessageBox> was created with unknown prop '${key}'`);
  });
  const click_handler = () => showMessage("This is the message");
  const click_handler_1 = () => showMessage("This is the message", MessageType.INFO);
  const click_handler_2 = () => showMessage("This is the message", MessageType.WARNING);
  const click_handler_3 = () => showMessage("This is the message", MessageType.DANGER);
  const click_handler_4 = () => showMessage("This is the message", MessageType.SUCCESS);
  const click_handler_5 = () => showMessage("Default message", null, "Default title");
  const click_handler_6 = () => showMessage("Info messagebox", MessageType.INFO, "Info title");
  const click_handler_7 = () => showMessage(longMessage, null, "Info title");
  const click_handler_8 = () => showMessage('Message with <i>html</i><br><a href="#MessageBox" target="_blank">Link</a>', null, "Info title", "Close");
  const click_handler_9 = () => showMessage("Info messagebox", null, "Info title", "Close", onclose);
  $$self2.$capture_state = () => ({
    Button: Button_default,
    MessageBox: MessageBox_default,
    MessageType,
    showMessage,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    longMessage,
    onclose,
    showComplex,
    apiProps,
    exampleHtml
  });
  return [
    showComplex,
    apiProps,
    exampleHtml,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4,
    click_handler_5,
    click_handler_6,
    click_handler_7,
    click_handler_8,
    click_handler_9
  ];
}
var MessageBox_1 = class extends import_internal63.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal63.init)(this, options, instance63, create_fragment63, import_internal63.safe_not_equal, {});
    (0, import_internal63.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "MessageBox_1",
      options,
      id: create_fragment63.name
    });
  }
};
var MessageBox_default2 = MessageBox_1;

// docs-src/components/panel/Panel.svelte
var import_internal64 = __toESM(require_internal());
var file58 = "docs-src/components/panel/Panel.svelte";
function create_default_slot_66(ctx) {
  let p;
  const block = {
    c: function create() {
      p = (0, import_internal64.element)("p");
      p.textContent = "This is panel contents";
      (0, import_internal64.add_location)(p, file58, 5, 1, 60);
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, p, anchor);
    },
    p: import_internal64.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(p);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_66.name,
    type: "slot",
    source: '(5:0) <Panel title=\\"Collapsed\\">',
    ctx
  });
  return block;
}
function create_default_slot_56(ctx) {
  let p;
  const block = {
    c: function create() {
      p = (0, import_internal64.element)("p");
      p.textContent = "This is panel contents";
      (0, import_internal64.add_location)(p, file58, 9, 1, 131);
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, p, anchor);
    },
    p: import_internal64.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(p);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_56.name,
    type: "slot",
    source: '(9:0) <Panel title=\\"Expanded\\" open>',
    ctx
  });
  return block;
}
function create_default_slot_49(ctx) {
  let p;
  const block = {
    c: function create() {
      p = (0, import_internal64.element)("p");
      p.textContent = "This is panel contents";
      (0, import_internal64.add_location)(p, file58, 16, 1, 241);
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, p, anchor);
    },
    p: import_internal64.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(p);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_49.name,
    type: "slot",
    source: '(16:0) <Panel title=\\"Collapsed\\" round disabled>',
    ctx
  });
  return block;
}
function create_default_slot_315(ctx) {
  let p;
  const block = {
    c: function create() {
      p = (0, import_internal64.element)("p");
      p.textContent = "This is panel contents";
      (0, import_internal64.add_location)(p, file58, 20, 1, 327);
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, p, anchor);
    },
    p: import_internal64.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(p);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_315.name,
    type: "slot",
    source: '(20:0) <Panel title=\\"Expanded\\" open round disabled>',
    ctx
  });
  return block;
}
function create_default_slot_217(ctx) {
  let p;
  const block = {
    c: function create() {
      p = (0, import_internal64.element)("p");
      p.textContent = "This is panel contents";
      (0, import_internal64.add_location)(p, file58, 26, 1, 434);
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, p, anchor);
    },
    p: import_internal64.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(p);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_217.name,
    type: "slot",
    source: '(26:0) <Panel title=\\"Collapsed\\" round collapsible>',
    ctx
  });
  return block;
}
function create_default_slot_118(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal64.text)("Action");
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(t);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_118.name,
    type: "slot",
    source: "(34:1) <Button>",
    ctx
  });
  return block;
}
function create_default_slot12(ctx) {
  let p0;
  let t1;
  let p1;
  let t3;
  let p2;
  let t5;
  let button;
  let current;
  button = new Button_default({
    props: {
      $$slots: { default: [create_default_slot_118] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      p0 = (0, import_internal64.element)("p");
      p0.textContent = "This is panel contents";
      t1 = (0, import_internal64.space)();
      p1 = (0, import_internal64.element)("p");
      p1.textContent = "Hello world!";
      t3 = (0, import_internal64.space)();
      p2 = (0, import_internal64.element)("p");
      p2.textContent = "This is panel contents";
      t5 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(button.$$.fragment);
      (0, import_internal64.add_location)(p0, file58, 30, 1, 522);
      (0, import_internal64.add_location)(p1, file58, 31, 1, 553);
      (0, import_internal64.add_location)(p2, file58, 32, 1, 574);
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, p0, anchor);
      (0, import_internal64.insert_dev)(target, t1, anchor);
      (0, import_internal64.insert_dev)(target, p1, anchor);
      (0, import_internal64.insert_dev)(target, t3, anchor);
      (0, import_internal64.insert_dev)(target, p2, anchor);
      (0, import_internal64.insert_dev)(target, t5, anchor);
      (0, import_internal64.mount_component)(button, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const button_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal64.transition_in)(button.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal64.transition_out)(button.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(p0);
      if (detaching)
        (0, import_internal64.detach_dev)(t1);
      if (detaching)
        (0, import_internal64.detach_dev)(p1);
      if (detaching)
        (0, import_internal64.detach_dev)(t3);
      if (detaching)
        (0, import_internal64.detach_dev)(p2);
      if (detaching)
        (0, import_internal64.detach_dev)(t5);
      (0, import_internal64.destroy_component)(button, detaching);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot12.name,
    type: "slot",
    source: '(30:0) <Panel title=\\"Panel 2\\" open round collapsible>',
    ctx
  });
  return block;
}
function create_fragment64(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let panel0;
  let t4;
  let panel1;
  let t5;
  let h31;
  let t7;
  let panel2;
  let t8;
  let panel3;
  let t9;
  let h32;
  let t11;
  let panel4;
  let t12;
  let panel5;
  let t13;
  let codeexample;
  let t14;
  let api;
  let current;
  panel0 = new Panel_default({
    props: {
      title: "Collapsed",
      $$slots: { default: [create_default_slot_66] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  panel1 = new Panel_default({
    props: {
      title: "Expanded",
      open: true,
      $$slots: { default: [create_default_slot_56] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  panel2 = new Panel_default({
    props: {
      title: "Collapsed",
      round: true,
      disabled: true,
      $$slots: { default: [create_default_slot_49] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  panel3 = new Panel_default({
    props: {
      title: "Expanded",
      open: true,
      round: true,
      disabled: true,
      $$slots: { default: [create_default_slot_315] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  panel4 = new Panel_default({
    props: {
      title: "Collapsed",
      round: true,
      collapsible: true,
      $$slots: { default: [create_default_slot_217] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  panel5 = new Panel_default({
    props: {
      title: "Panel 2",
      open: true,
      round: true,
      collapsible: true,
      $$slots: { default: [create_default_slot12] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal64.element)("h2");
      h2.textContent = "Panel";
      t1 = (0, import_internal64.space)();
      h30 = (0, import_internal64.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(panel0.$$.fragment);
      t4 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(panel1.$$.fragment);
      t5 = (0, import_internal64.space)();
      h31 = (0, import_internal64.element)("h3");
      h31.textContent = "Round & disabled";
      t7 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(panel2.$$.fragment);
      t8 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(panel3.$$.fragment);
      t9 = (0, import_internal64.space)();
      h32 = (0, import_internal64.element)("h3");
      h32.textContent = "Collapsible";
      t11 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(panel4.$$.fragment);
      t12 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(panel5.$$.fragment);
      t13 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(codeexample.$$.fragment);
      t14 = (0, import_internal64.space)();
      (0, import_internal64.create_component)(api.$$.fragment);
      (0, import_internal64.add_location)(h2, file58, 0, 0, 0);
      (0, import_internal64.add_location)(h30, file58, 2, 0, 16);
      (0, import_internal64.add_location)(h31, file58, 13, 0, 172);
      (0, import_internal64.add_location)(h32, file58, 23, 0, 367);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal64.insert_dev)(target, h2, anchor);
      (0, import_internal64.insert_dev)(target, t1, anchor);
      (0, import_internal64.insert_dev)(target, h30, anchor);
      (0, import_internal64.insert_dev)(target, t3, anchor);
      (0, import_internal64.mount_component)(panel0, target, anchor);
      (0, import_internal64.insert_dev)(target, t4, anchor);
      (0, import_internal64.mount_component)(panel1, target, anchor);
      (0, import_internal64.insert_dev)(target, t5, anchor);
      (0, import_internal64.insert_dev)(target, h31, anchor);
      (0, import_internal64.insert_dev)(target, t7, anchor);
      (0, import_internal64.mount_component)(panel2, target, anchor);
      (0, import_internal64.insert_dev)(target, t8, anchor);
      (0, import_internal64.mount_component)(panel3, target, anchor);
      (0, import_internal64.insert_dev)(target, t9, anchor);
      (0, import_internal64.insert_dev)(target, h32, anchor);
      (0, import_internal64.insert_dev)(target, t11, anchor);
      (0, import_internal64.mount_component)(panel4, target, anchor);
      (0, import_internal64.insert_dev)(target, t12, anchor);
      (0, import_internal64.mount_component)(panel5, target, anchor);
      (0, import_internal64.insert_dev)(target, t13, anchor);
      (0, import_internal64.mount_component)(codeexample, target, anchor);
      (0, import_internal64.insert_dev)(target, t14, anchor);
      (0, import_internal64.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const panel0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        panel0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      panel0.$set(panel0_changes);
      const panel1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        panel1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      panel1.$set(panel1_changes);
      const panel2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        panel2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      panel2.$set(panel2_changes);
      const panel3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        panel3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      panel3.$set(panel3_changes);
      const panel4_changes = {};
      if (dirty & /*$$scope*/
      4) {
        panel4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      panel4.$set(panel4_changes);
      const panel5_changes = {};
      if (dirty & /*$$scope*/
      4) {
        panel5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      panel5.$set(panel5_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal64.transition_in)(panel0.$$.fragment, local);
      (0, import_internal64.transition_in)(panel1.$$.fragment, local);
      (0, import_internal64.transition_in)(panel2.$$.fragment, local);
      (0, import_internal64.transition_in)(panel3.$$.fragment, local);
      (0, import_internal64.transition_in)(panel4.$$.fragment, local);
      (0, import_internal64.transition_in)(panel5.$$.fragment, local);
      (0, import_internal64.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal64.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal64.transition_out)(panel0.$$.fragment, local);
      (0, import_internal64.transition_out)(panel1.$$.fragment, local);
      (0, import_internal64.transition_out)(panel2.$$.fragment, local);
      (0, import_internal64.transition_out)(panel3.$$.fragment, local);
      (0, import_internal64.transition_out)(panel4.$$.fragment, local);
      (0, import_internal64.transition_out)(panel5.$$.fragment, local);
      (0, import_internal64.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal64.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal64.detach_dev)(h2);
      if (detaching)
        (0, import_internal64.detach_dev)(t1);
      if (detaching)
        (0, import_internal64.detach_dev)(h30);
      if (detaching)
        (0, import_internal64.detach_dev)(t3);
      (0, import_internal64.destroy_component)(panel0, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t4);
      (0, import_internal64.destroy_component)(panel1, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t5);
      if (detaching)
        (0, import_internal64.detach_dev)(h31);
      if (detaching)
        (0, import_internal64.detach_dev)(t7);
      (0, import_internal64.destroy_component)(panel2, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t8);
      (0, import_internal64.destroy_component)(panel3, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t9);
      if (detaching)
        (0, import_internal64.detach_dev)(h32);
      if (detaching)
        (0, import_internal64.detach_dev)(t11);
      (0, import_internal64.destroy_component)(panel4, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t12);
      (0, import_internal64.destroy_component)(panel5, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t13);
      (0, import_internal64.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal64.detach_dev)(t14);
      (0, import_internal64.destroy_component)(api, detaching);
    }
  };
  (0, import_internal64.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment64.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance64($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal64.validate_slots)("Panel", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "disabled",
      description: "Make the panel disabled."
    },
    {
      name: "collapsible",
      description: "If present, the panel will expand/collapse on title click or Enter key or Space."
    },
    {
      name: "open",
      description: "Panel initial open state."
    },
    {
      name: "round",
      description: "Adds rounded corners to the panel."
    },
    {
      name: "title",
      type: "string",
      description: "Panel title."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:close",
      type: "function",
      description: "Triggered after the panel is closed."
    },
    {
      name: "on:open",
      type: "function",
      description: "Triggered after the panel is opened."
    }
  ];
  const exampleHtml = `
<Panel title="Hello" round collapsible>
	<p>This is panel contents</p>
	<p>Hello world!</p>
	<p>This is panel contents</p>
	<Button>Action</Button>
</Panel>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Panel> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Panel: Panel_default,
    Button: Button_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml
  });
  return [apiProps, exampleHtml];
}
var Panel_1 = class extends import_internal64.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal64.init)(this, options, instance64, create_fragment64, import_internal64.safe_not_equal, {});
    (0, import_internal64.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Panel_1",
      options,
      id: create_fragment64.name
    });
  }
};
var Panel_default2 = Panel_1;

// docs-src/components/splitter/Splitter.svelte
var import_internal65 = __toESM(require_internal());
var { console: console_110 } = import_internal65.globals;
var file59 = "docs-src/components/splitter/Splitter.svelte";
function create_default_slot13(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal65.text)("Toggle");
    },
    m: function mount(target, anchor) {
      (0, import_internal65.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal65.detach_dev)(t);
    }
  };
  (0, import_internal65.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot13.name,
    type: "slot",
    source: '(10:0) <Button on:click=\\"{toggle}\\">',
    ctx
  });
  return block;
}
function create_fragment65(ctx) {
  let h2;
  let t1;
  let p;
  let t3;
  let ul;
  let li0;
  let t4;
  let em0;
  let t6;
  let li1;
  let t7;
  let em1;
  let t9;
  let em2;
  let t11;
  let t12;
  let hr;
  let t13;
  let button;
  let t14;
  let div2;
  let div0;
  let t16;
  let splitter0;
  let t17;
  let div1;
  let t19;
  let br;
  let t20;
  let div5;
  let div3;
  let t22;
  let splitter1_1;
  let t23;
  let div4;
  let t25;
  let codeexample;
  let t26;
  let api0;
  let t27;
  let api1;
  let current;
  button = new Button_default({
    props: {
      $$slots: { default: [create_default_slot13] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button.$on(
    "click",
    /*toggle*/
    ctx[5]
  );
  let splitter0_props = {};
  splitter0 = new Splitter_default({ props: splitter0_props, $$inline: true });
  ctx[6](splitter0);
  splitter0.$on("changed", onchange3);
  let splitter1_1_props = {};
  splitter1_1 = new Splitter_default({ props: splitter1_1_props, $$inline: true });
  ctx[7](splitter1_1);
  splitter1_1.$on("changed", onchange3);
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[4]
    ) },
    $$inline: true
  });
  api0 = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[2]
    ) },
    $$inline: true
  });
  api1 = new ApiTable_default({
    props: {
      props: (
        /*instanceApiProps*/
        ctx[3]
      ),
      title: "Instance API",
      description: "A component exposes <em>this</em> property, to which a variable can be bound, creating an instance of the component, with the following API"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal65.element)("h2");
      h2.textContent = "Splitter";
      t1 = (0, import_internal65.space)();
      p = (0, import_internal65.element)("p");
      p.textContent = "Resizable splitter component.";
      t3 = (0, import_internal65.space)();
      ul = (0, import_internal65.element)("ul");
      li0 = (0, import_internal65.element)("li");
      t4 = (0, import_internal65.text)("It uses ");
      em0 = (0, import_internal65.element)("em");
      em0.textContent = "flex flow";
      t6 = (0, import_internal65.text)(" property to determine the direction of resizing (row=horizontal, column=vertical).\n	");
      li1 = (0, import_internal65.element)("li");
      t7 = (0, import_internal65.text)("It uses ");
      em1 = (0, import_internal65.element)("em");
      em1.textContent = "min-width";
      t9 = (0, import_internal65.text)(" and ");
      em2 = (0, import_internal65.element)("em");
      em2.textContent = "max-width";
      t11 = (0, import_internal65.text)(" props to determine how much to resize;");
      t12 = (0, import_internal65.space)();
      hr = (0, import_internal65.element)("hr");
      t13 = (0, import_internal65.space)();
      (0, import_internal65.create_component)(button.$$.fragment);
      t14 = (0, import_internal65.space)();
      div2 = (0, import_internal65.element)("div");
      div0 = (0, import_internal65.element)("div");
      div0.textContent = "Left";
      t16 = (0, import_internal65.space)();
      (0, import_internal65.create_component)(splitter0.$$.fragment);
      t17 = (0, import_internal65.space)();
      div1 = (0, import_internal65.element)("div");
      div1.textContent = "Right";
      t19 = (0, import_internal65.space)();
      br = (0, import_internal65.element)("br");
      t20 = (0, import_internal65.space)();
      div5 = (0, import_internal65.element)("div");
      div3 = (0, import_internal65.element)("div");
      div3.textContent = "Top";
      t22 = (0, import_internal65.space)();
      (0, import_internal65.create_component)(splitter1_1.$$.fragment);
      t23 = (0, import_internal65.space)();
      div4 = (0, import_internal65.element)("div");
      div4.textContent = "Bottom";
      t25 = (0, import_internal65.space)();
      (0, import_internal65.create_component)(codeexample.$$.fragment);
      t26 = (0, import_internal65.space)();
      (0, import_internal65.create_component)(api0.$$.fragment);
      t27 = (0, import_internal65.space)();
      (0, import_internal65.create_component)(api1.$$.fragment);
      (0, import_internal65.add_location)(h2, file59, 0, 0, 0);
      (0, import_internal65.add_location)(p, file59, 1, 0, 18);
      (0, import_internal65.add_location)(em0, file59, 3, 13, 73);
      (0, import_internal65.add_location)(li0, file59, 3, 1, 61);
      (0, import_internal65.add_location)(em1, file59, 4, 13, 188);
      (0, import_internal65.add_location)(em2, file59, 4, 36, 211);
      (0, import_internal65.add_location)(li1, file59, 4, 1, 176);
      (0, import_internal65.add_location)(ul, file59, 2, 0, 55);
      (0, import_internal65.add_location)(hr, file59, 7, 0, 276);
      (0, import_internal65.attr_dev)(div0, "class", "split-box min-w");
      (0, import_internal65.add_location)(div0, file59, 11, 1, 352);
      (0, import_internal65.attr_dev)(div1, "class", "split-box");
      (0, import_internal65.add_location)(div1, file59, 13, 1, 452);
      (0, import_internal65.attr_dev)(div2, "class", "split-wrap");
      (0, import_internal65.add_location)(div2, file59, 10, 0, 326);
      (0, import_internal65.add_location)(br, file59, 15, 0, 494);
      (0, import_internal65.attr_dev)(div3, "class", "split-box min-h");
      (0, import_internal65.add_location)(div3, file59, 17, 1, 538);
      (0, import_internal65.attr_dev)(div4, "class", "split-box");
      (0, import_internal65.add_location)(div4, file59, 19, 1, 637);
      (0, import_internal65.attr_dev)(div5, "class", "split-wrap split-wrap-v");
      (0, import_internal65.add_location)(div5, file59, 16, 0, 499);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal65.insert_dev)(target, h2, anchor);
      (0, import_internal65.insert_dev)(target, t1, anchor);
      (0, import_internal65.insert_dev)(target, p, anchor);
      (0, import_internal65.insert_dev)(target, t3, anchor);
      (0, import_internal65.insert_dev)(target, ul, anchor);
      (0, import_internal65.append_dev)(ul, li0);
      (0, import_internal65.append_dev)(li0, t4);
      (0, import_internal65.append_dev)(li0, em0);
      (0, import_internal65.append_dev)(li0, t6);
      (0, import_internal65.append_dev)(ul, li1);
      (0, import_internal65.append_dev)(li1, t7);
      (0, import_internal65.append_dev)(li1, em1);
      (0, import_internal65.append_dev)(li1, t9);
      (0, import_internal65.append_dev)(li1, em2);
      (0, import_internal65.append_dev)(li1, t11);
      (0, import_internal65.insert_dev)(target, t12, anchor);
      (0, import_internal65.insert_dev)(target, hr, anchor);
      (0, import_internal65.insert_dev)(target, t13, anchor);
      (0, import_internal65.mount_component)(button, target, anchor);
      (0, import_internal65.insert_dev)(target, t14, anchor);
      (0, import_internal65.insert_dev)(target, div2, anchor);
      (0, import_internal65.append_dev)(div2, div0);
      (0, import_internal65.append_dev)(div2, t16);
      (0, import_internal65.mount_component)(splitter0, div2, null);
      (0, import_internal65.append_dev)(div2, t17);
      (0, import_internal65.append_dev)(div2, div1);
      (0, import_internal65.insert_dev)(target, t19, anchor);
      (0, import_internal65.insert_dev)(target, br, anchor);
      (0, import_internal65.insert_dev)(target, t20, anchor);
      (0, import_internal65.insert_dev)(target, div5, anchor);
      (0, import_internal65.append_dev)(div5, div3);
      (0, import_internal65.append_dev)(div5, t22);
      (0, import_internal65.mount_component)(splitter1_1, div5, null);
      (0, import_internal65.append_dev)(div5, t23);
      (0, import_internal65.append_dev)(div5, div4);
      (0, import_internal65.insert_dev)(target, t25, anchor);
      (0, import_internal65.mount_component)(codeexample, target, anchor);
      (0, import_internal65.insert_dev)(target, t26, anchor);
      (0, import_internal65.mount_component)(api0, target, anchor);
      (0, import_internal65.insert_dev)(target, t27, anchor);
      (0, import_internal65.mount_component)(api1, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const button_changes = {};
      if (dirty & /*$$scope*/
      256) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const splitter0_changes = {};
      splitter0.$set(splitter0_changes);
      const splitter1_1_changes = {};
      splitter1_1.$set(splitter1_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal65.transition_in)(button.$$.fragment, local);
      (0, import_internal65.transition_in)(splitter0.$$.fragment, local);
      (0, import_internal65.transition_in)(splitter1_1.$$.fragment, local);
      (0, import_internal65.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal65.transition_in)(api0.$$.fragment, local);
      (0, import_internal65.transition_in)(api1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal65.transition_out)(button.$$.fragment, local);
      (0, import_internal65.transition_out)(splitter0.$$.fragment, local);
      (0, import_internal65.transition_out)(splitter1_1.$$.fragment, local);
      (0, import_internal65.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal65.transition_out)(api0.$$.fragment, local);
      (0, import_internal65.transition_out)(api1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal65.detach_dev)(h2);
      if (detaching)
        (0, import_internal65.detach_dev)(t1);
      if (detaching)
        (0, import_internal65.detach_dev)(p);
      if (detaching)
        (0, import_internal65.detach_dev)(t3);
      if (detaching)
        (0, import_internal65.detach_dev)(ul);
      if (detaching)
        (0, import_internal65.detach_dev)(t12);
      if (detaching)
        (0, import_internal65.detach_dev)(hr);
      if (detaching)
        (0, import_internal65.detach_dev)(t13);
      (0, import_internal65.destroy_component)(button, detaching);
      if (detaching)
        (0, import_internal65.detach_dev)(t14);
      if (detaching)
        (0, import_internal65.detach_dev)(div2);
      ctx[6](null);
      (0, import_internal65.destroy_component)(splitter0);
      if (detaching)
        (0, import_internal65.detach_dev)(t19);
      if (detaching)
        (0, import_internal65.detach_dev)(br);
      if (detaching)
        (0, import_internal65.detach_dev)(t20);
      if (detaching)
        (0, import_internal65.detach_dev)(div5);
      ctx[7](null);
      (0, import_internal65.destroy_component)(splitter1_1);
      if (detaching)
        (0, import_internal65.detach_dev)(t25);
      (0, import_internal65.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal65.detach_dev)(t26);
      (0, import_internal65.destroy_component)(api0, detaching);
      if (detaching)
        (0, import_internal65.detach_dev)(t27);
      (0, import_internal65.destroy_component)(api1, detaching);
    }
  };
  (0, import_internal65.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment65.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onchange3(e) {
  console.log(e.detail);
}
function instance65($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal65.validate_slots)("Splitter", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:change",
      type: "function",
      description: "Triggered during the resizing (mousemove)."
    },
    {
      name: "on:changed",
      type: "function",
      description: "Triggered when resizing finished (mouseup)."
    }
  ];
  const instanceApiProps = [
    {
      name: "collapse",
      type: "function",
      description: "Set the size to the <em>min-width</em> of the previous div."
    },
    {
      name: "expand",
      type: "function",
      description: "Set the size to the <em>max-width</em> of the previous div."
    },
    {
      name: "setSize",
      type: "function",
      description: 'Set the split size.<br>Function accepts 2 arguments:<br><em>to</em> [string|number] - use number for pixel size, or predefined strings like "min", "max" or "default"<br><em>withAnimation</em> [boolean] - set to true to enable animation. Defaults to false.'
    },
    {
      name: "toggle",
      type: "function",
      description: "Toggle between collapsed and expanded state."
    }
  ];
  const exampleHtml = `
<Button on:click="{toggle}">Toggle</Button>
<div style="flex-flow:row">
	<div>Left</div>
	<Splitter on:changed={onchanged} bind:this="{splitter1}" />
	<div>Right</div>
</div>

<script>
let splitter1;

function toggle () {
	splitter1.toggle();
}

function onchanged (e) {
	// logs current height/width in px and collapsed state
	console.log(e.detail);
}
&lt;/script>
`;
  let splitter1, splitter2;
  function toggle() {
    splitter1.toggle();
    splitter2.toggle();
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_110.warn(`<Splitter> was created with unknown prop '${key}'`);
  });
  function splitter0_binding($$value) {
    import_internal65.binding_callbacks[$$value ? "unshift" : "push"](() => {
      splitter1 = $$value;
      $$invalidate2(0, splitter1);
    });
  }
  function splitter1_1_binding($$value) {
    import_internal65.binding_callbacks[$$value ? "unshift" : "push"](() => {
      splitter2 = $$value;
      $$invalidate2(1, splitter2);
    });
  }
  $$self2.$capture_state = () => ({
    Splitter: Splitter_default,
    Button: Button_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    instanceApiProps,
    exampleHtml,
    splitter1,
    splitter2,
    onchange: onchange3,
    toggle
  });
  $$self2.$inject_state = ($$props3) => {
    if ("splitter1" in $$props3)
      $$invalidate2(0, splitter1 = $$props3.splitter1);
    if ("splitter2" in $$props3)
      $$invalidate2(1, splitter2 = $$props3.splitter2);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    splitter1,
    splitter2,
    apiProps,
    instanceApiProps,
    exampleHtml,
    toggle,
    splitter0_binding,
    splitter1_1_binding
  ];
}
var Splitter_1 = class extends import_internal65.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal65.init)(this, options, instance65, create_fragment65, import_internal65.safe_not_equal, {});
    (0, import_internal65.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Splitter_1",
      options,
      id: create_fragment65.name
    });
  }
};
var Splitter_default2 = Splitter_1;

// docs-src/components/table/Table.svelte
var import_internal66 = __toESM(require_internal());
var { console: console_111 } = import_internal66.globals;
var file60 = "docs-src/components/table/Table.svelte";
function create_default_slot14(ctx) {
  let thead0;
  let tr0;
  let th0;
  let th1;
  let th2;
  let t3;
  let thead1;
  let tr1;
  let th3;
  let t5;
  let tbody0;
  let tr2;
  let td0;
  let td1;
  let td2;
  let t9;
  let tr3;
  let td3;
  let td4;
  let td5;
  let t13;
  let tr4;
  let td6;
  let td7;
  let td8;
  let t17;
  let tr5;
  let td9;
  let td10;
  let td11;
  let t21;
  let tr6;
  let td12;
  let td13;
  let td14;
  let t25;
  let tr7;
  let td15;
  let td16;
  let td17;
  let t29;
  let tbody1;
  let tr8;
  let td18;
  let td19;
  let td20;
  let t33;
  let tr9;
  let td21;
  let td22;
  let td23;
  let t37;
  let tbody2;
  let tr10;
  let td24;
  let td25;
  let td26;
  let t41;
  let tr11;
  let td27;
  let td28;
  let td29;
  let t45;
  let tr12;
  let td30;
  let td31;
  let td32;
  let t49;
  let tr13;
  let td33;
  let td34;
  let td35;
  let t53;
  let tr14;
  let td36;
  let td37;
  let td38;
  let t57;
  let tr15;
  let td39;
  let td40;
  let td41;
  let t61;
  let tr16;
  let td42;
  let td43;
  let td44;
  let t65;
  let thead2;
  let tr17;
  let th4;
  let t67;
  let tbody3;
  let tr18;
  let td45;
  let td46;
  let td47;
  let t71;
  let tr19;
  let td48;
  let td49;
  let td50;
  let t75;
  let tr20;
  let td51;
  let td52;
  let td53;
  let t79;
  let tr21;
  let td54;
  let td55;
  let td56;
  let t83;
  let tr22;
  let td57;
  let td58;
  let td59;
  let t87;
  let tr23;
  let td60;
  let td61;
  let td62;
  let t91;
  let tr24;
  let td63;
  let td64;
  let td65;
  let t95;
  let tr25;
  let td66;
  let td67;
  let td68;
  let t99;
  let tr26;
  let td69;
  let td70;
  let td71;
  let t103;
  let tr27;
  let td72;
  let td73;
  let td74;
  let t107;
  let tr28;
  let td75;
  let td76;
  let td77;
  let t111;
  let tr29;
  let td78;
  let td79;
  let td80;
  let t115;
  let thead3;
  let tr30;
  let th5;
  let t117;
  let tbody4;
  let tr31;
  let td81;
  let td82;
  let td83;
  let t121;
  let tr32;
  let td84;
  let td85;
  let td86;
  let t125;
  let tr33;
  let td87;
  let td88;
  let td89;
  let t129;
  let tr34;
  let td90;
  let td91;
  let td92;
  let t133;
  let tr35;
  let td93;
  let td94;
  let td95;
  let t137;
  let tr36;
  let td96;
  let td97;
  let td98;
  let t141;
  let tr37;
  let td99;
  let td100;
  let td101;
  let t145;
  let tr38;
  let td102;
  let td103;
  let td104;
  let t149;
  let tr39;
  let td105;
  let td106;
  let td107;
  let t153;
  let tr40;
  let td108;
  let td109;
  let td110;
  let t157;
  let tr41;
  let td111;
  let td112;
  let td113;
  let t161;
  let tr42;
  let td114;
  let td115;
  let td116;
  let t165;
  let thead4;
  let tr43;
  let th6;
  let t167;
  let tbody5;
  let tr44;
  let td117;
  let td118;
  let td119;
  let t171;
  let tr45;
  let td120;
  let td121;
  let td122;
  let t175;
  let tr46;
  let td123;
  let td124;
  let td125;
  let t179;
  let tr47;
  let td126;
  let td127;
  let td128;
  let t183;
  let tr48;
  let td129;
  let td130;
  let td131;
  let t187;
  let tr49;
  let td132;
  let td133;
  let td134;
  let t191;
  let tr50;
  let td135;
  let td136;
  let td137;
  let t195;
  let tr51;
  let td138;
  let td139;
  let td140;
  let t199;
  let tr52;
  let td141;
  let td142;
  let td143;
  let t203;
  let tr53;
  let td144;
  let td145;
  let td146;
  let t207;
  let tr54;
  let td147;
  let td148;
  let td149;
  let t211;
  let tr55;
  let td150;
  let td151;
  let td152;
  let t215;
  let thead5;
  let tr56;
  let th7;
  let t217;
  let tbody6;
  let tr57;
  let td153;
  let td154;
  let td155;
  let t221;
  let tr58;
  let td156;
  let td157;
  let td158;
  let t225;
  let tr59;
  let td159;
  let td160;
  let td161;
  let t229;
  let tr60;
  let td162;
  let td163;
  let td164;
  let t233;
  let tr61;
  let td165;
  let td166;
  let td167;
  let t237;
  let tr62;
  let td168;
  let td169;
  let td170;
  let t241;
  let tr63;
  let td171;
  let td172;
  let td173;
  let t245;
  let tr64;
  let td174;
  let td175;
  let td176;
  let t249;
  let tr65;
  let td177;
  let td178;
  let td179;
  let t253;
  let tr66;
  let td180;
  let td181;
  let td182;
  let t257;
  let tr67;
  let td183;
  let td184;
  let td185;
  let t261;
  let tr68;
  let td186;
  let td187;
  let td188;
  let t265;
  let tfoot;
  let tr69;
  let td189;
  let td190;
  const block = {
    c: function create() {
      thead0 = (0, import_internal66.element)("thead");
      tr0 = (0, import_internal66.element)("tr");
      th0 = (0, import_internal66.element)("th");
      th0.textContent = "Year";
      th1 = (0, import_internal66.element)("th");
      th1.textContent = "Month";
      th2 = (0, import_internal66.element)("th");
      th2.textContent = "Price";
      t3 = (0, import_internal66.space)();
      thead1 = (0, import_internal66.element)("thead");
      tr1 = (0, import_internal66.element)("tr");
      th3 = (0, import_internal66.element)("th");
      th3.textContent = "Year: 2021";
      t5 = (0, import_internal66.space)();
      tbody0 = (0, import_internal66.element)("tbody");
      tr2 = (0, import_internal66.element)("tr");
      td0 = (0, import_internal66.element)("td");
      td0.textContent = "2021";
      td1 = (0, import_internal66.element)("td");
      td1.textContent = "January";
      td2 = (0, import_internal66.element)("td");
      td2.textContent = "$100";
      t9 = (0, import_internal66.space)();
      tr3 = (0, import_internal66.element)("tr");
      td3 = (0, import_internal66.element)("td");
      td3.textContent = "2021";
      td4 = (0, import_internal66.element)("td");
      td4.textContent = "February";
      td5 = (0, import_internal66.element)("td");
      td5.textContent = "$80";
      t13 = (0, import_internal66.space)();
      tr4 = (0, import_internal66.element)("tr");
      td6 = (0, import_internal66.element)("td");
      td6.textContent = "2021";
      td7 = (0, import_internal66.element)("td");
      td7.textContent = "March";
      td8 = (0, import_internal66.element)("td");
      td8.textContent = "$80";
      t17 = (0, import_internal66.space)();
      tr5 = (0, import_internal66.element)("tr");
      td9 = (0, import_internal66.element)("td");
      td9.textContent = "2021";
      td10 = (0, import_internal66.element)("td");
      td10.textContent = "April";
      td11 = (0, import_internal66.element)("td");
      td11.textContent = "$80";
      t21 = (0, import_internal66.space)();
      tr6 = (0, import_internal66.element)("tr");
      td12 = (0, import_internal66.element)("td");
      td12.textContent = "2021";
      td13 = (0, import_internal66.element)("td");
      td13.textContent = "May";
      td14 = (0, import_internal66.element)("td");
      td14.textContent = "$80";
      t25 = (0, import_internal66.space)();
      tr7 = (0, import_internal66.element)("tr");
      td15 = (0, import_internal66.element)("td");
      td15.textContent = "2021";
      td16 = (0, import_internal66.element)("td");
      td16.textContent = "June";
      td17 = (0, import_internal66.element)("td");
      td17.textContent = "$80";
      t29 = (0, import_internal66.space)();
      tbody1 = (0, import_internal66.element)("tbody");
      tr8 = (0, import_internal66.element)("tr");
      td18 = (0, import_internal66.element)("td");
      td18.textContent = "2021";
      td19 = (0, import_internal66.element)("td");
      td19.textContent = "April 1";
      td20 = (0, import_internal66.element)("td");
      td20.textContent = "$80";
      t33 = (0, import_internal66.space)();
      tr9 = (0, import_internal66.element)("tr");
      td21 = (0, import_internal66.element)("td");
      td21.textContent = "2021";
      td22 = (0, import_internal66.element)("td");
      td22.textContent = "April 2";
      td23 = (0, import_internal66.element)("td");
      td23.textContent = "$80";
      t37 = (0, import_internal66.space)();
      tbody2 = (0, import_internal66.element)("tbody");
      tr10 = (0, import_internal66.element)("tr");
      td24 = (0, import_internal66.element)("td");
      td24.textContent = "2021";
      td25 = (0, import_internal66.element)("td");
      td25.textContent = "May";
      td26 = (0, import_internal66.element)("td");
      td26.textContent = "$80";
      t41 = (0, import_internal66.space)();
      tr11 = (0, import_internal66.element)("tr");
      td27 = (0, import_internal66.element)("td");
      td27.textContent = "2021";
      td28 = (0, import_internal66.element)("td");
      td28.textContent = "July";
      td29 = (0, import_internal66.element)("td");
      td29.textContent = "$80";
      t45 = (0, import_internal66.space)();
      tr12 = (0, import_internal66.element)("tr");
      td30 = (0, import_internal66.element)("td");
      td30.textContent = "2021";
      td31 = (0, import_internal66.element)("td");
      td31.textContent = "August";
      td32 = (0, import_internal66.element)("td");
      td32.textContent = "$80";
      t49 = (0, import_internal66.space)();
      tr13 = (0, import_internal66.element)("tr");
      td33 = (0, import_internal66.element)("td");
      td33.textContent = "2021";
      td34 = (0, import_internal66.element)("td");
      td34.textContent = "September";
      td35 = (0, import_internal66.element)("td");
      td35.textContent = "$80";
      t53 = (0, import_internal66.space)();
      tr14 = (0, import_internal66.element)("tr");
      td36 = (0, import_internal66.element)("td");
      td36.textContent = "2021";
      td37 = (0, import_internal66.element)("td");
      td37.textContent = "October";
      td38 = (0, import_internal66.element)("td");
      td38.textContent = "$80";
      t57 = (0, import_internal66.space)();
      tr15 = (0, import_internal66.element)("tr");
      td39 = (0, import_internal66.element)("td");
      td39.textContent = "2021";
      td40 = (0, import_internal66.element)("td");
      td40.textContent = "November";
      td41 = (0, import_internal66.element)("td");
      td41.textContent = "$80";
      t61 = (0, import_internal66.space)();
      tr16 = (0, import_internal66.element)("tr");
      td42 = (0, import_internal66.element)("td");
      td42.textContent = "2021";
      td43 = (0, import_internal66.element)("td");
      td43.textContent = "December";
      td44 = (0, import_internal66.element)("td");
      td44.textContent = "$80";
      t65 = (0, import_internal66.space)();
      thead2 = (0, import_internal66.element)("thead");
      tr17 = (0, import_internal66.element)("tr");
      th4 = (0, import_internal66.element)("th");
      th4.textContent = "Year: 2020";
      t67 = (0, import_internal66.space)();
      tbody3 = (0, import_internal66.element)("tbody");
      tr18 = (0, import_internal66.element)("tr");
      td45 = (0, import_internal66.element)("td");
      td45.textContent = "2020";
      td46 = (0, import_internal66.element)("td");
      td46.textContent = "January";
      td47 = (0, import_internal66.element)("td");
      td47.textContent = "$100";
      t71 = (0, import_internal66.space)();
      tr19 = (0, import_internal66.element)("tr");
      td48 = (0, import_internal66.element)("td");
      td48.textContent = "2020";
      td49 = (0, import_internal66.element)("td");
      td49.textContent = "February";
      td50 = (0, import_internal66.element)("td");
      td50.textContent = "$80";
      t75 = (0, import_internal66.space)();
      tr20 = (0, import_internal66.element)("tr");
      td51 = (0, import_internal66.element)("td");
      td51.textContent = "2020";
      td52 = (0, import_internal66.element)("td");
      td52.textContent = "March";
      td53 = (0, import_internal66.element)("td");
      td53.textContent = "$80";
      t79 = (0, import_internal66.space)();
      tr21 = (0, import_internal66.element)("tr");
      td54 = (0, import_internal66.element)("td");
      td54.textContent = "2020";
      td55 = (0, import_internal66.element)("td");
      td55.textContent = "April";
      td56 = (0, import_internal66.element)("td");
      td56.textContent = "$80";
      t83 = (0, import_internal66.space)();
      tr22 = (0, import_internal66.element)("tr");
      td57 = (0, import_internal66.element)("td");
      td57.textContent = "2020";
      td58 = (0, import_internal66.element)("td");
      td58.textContent = "May";
      td59 = (0, import_internal66.element)("td");
      td59.textContent = "$80";
      t87 = (0, import_internal66.space)();
      tr23 = (0, import_internal66.element)("tr");
      td60 = (0, import_internal66.element)("td");
      td60.textContent = "2020";
      td61 = (0, import_internal66.element)("td");
      td61.textContent = "June";
      td62 = (0, import_internal66.element)("td");
      td62.textContent = "$80";
      t91 = (0, import_internal66.space)();
      tr24 = (0, import_internal66.element)("tr");
      td63 = (0, import_internal66.element)("td");
      td63.textContent = "2020";
      td64 = (0, import_internal66.element)("td");
      td64.textContent = "July";
      td65 = (0, import_internal66.element)("td");
      td65.textContent = "$80";
      t95 = (0, import_internal66.space)();
      tr25 = (0, import_internal66.element)("tr");
      td66 = (0, import_internal66.element)("td");
      td66.textContent = "2020";
      td67 = (0, import_internal66.element)("td");
      td67.textContent = "August";
      td68 = (0, import_internal66.element)("td");
      td68.textContent = "$80";
      t99 = (0, import_internal66.space)();
      tr26 = (0, import_internal66.element)("tr");
      td69 = (0, import_internal66.element)("td");
      td69.textContent = "2020";
      td70 = (0, import_internal66.element)("td");
      td70.textContent = "September";
      td71 = (0, import_internal66.element)("td");
      td71.textContent = "$80";
      t103 = (0, import_internal66.space)();
      tr27 = (0, import_internal66.element)("tr");
      td72 = (0, import_internal66.element)("td");
      td72.textContent = "2020";
      td73 = (0, import_internal66.element)("td");
      td73.textContent = "October";
      td74 = (0, import_internal66.element)("td");
      td74.textContent = "$80";
      t107 = (0, import_internal66.space)();
      tr28 = (0, import_internal66.element)("tr");
      td75 = (0, import_internal66.element)("td");
      td75.textContent = "2020";
      td76 = (0, import_internal66.element)("td");
      td76.textContent = "November";
      td77 = (0, import_internal66.element)("td");
      td77.textContent = "$80";
      t111 = (0, import_internal66.space)();
      tr29 = (0, import_internal66.element)("tr");
      td78 = (0, import_internal66.element)("td");
      td78.textContent = "2020";
      td79 = (0, import_internal66.element)("td");
      td79.textContent = "December";
      td80 = (0, import_internal66.element)("td");
      td80.textContent = "$80";
      t115 = (0, import_internal66.space)();
      thead3 = (0, import_internal66.element)("thead");
      tr30 = (0, import_internal66.element)("tr");
      th5 = (0, import_internal66.element)("th");
      th5.textContent = "Year: 2019";
      t117 = (0, import_internal66.space)();
      tbody4 = (0, import_internal66.element)("tbody");
      tr31 = (0, import_internal66.element)("tr");
      td81 = (0, import_internal66.element)("td");
      td81.textContent = "2019";
      td82 = (0, import_internal66.element)("td");
      td82.textContent = "January";
      td83 = (0, import_internal66.element)("td");
      td83.textContent = "$100";
      t121 = (0, import_internal66.space)();
      tr32 = (0, import_internal66.element)("tr");
      td84 = (0, import_internal66.element)("td");
      td84.textContent = "2019";
      td85 = (0, import_internal66.element)("td");
      td85.textContent = "February";
      td86 = (0, import_internal66.element)("td");
      td86.textContent = "$80";
      t125 = (0, import_internal66.space)();
      tr33 = (0, import_internal66.element)("tr");
      td87 = (0, import_internal66.element)("td");
      td87.textContent = "2019";
      td88 = (0, import_internal66.element)("td");
      td88.textContent = "March";
      td89 = (0, import_internal66.element)("td");
      td89.textContent = "$80";
      t129 = (0, import_internal66.space)();
      tr34 = (0, import_internal66.element)("tr");
      td90 = (0, import_internal66.element)("td");
      td90.textContent = "2019";
      td91 = (0, import_internal66.element)("td");
      td91.textContent = "April";
      td92 = (0, import_internal66.element)("td");
      td92.textContent = "$80";
      t133 = (0, import_internal66.space)();
      tr35 = (0, import_internal66.element)("tr");
      td93 = (0, import_internal66.element)("td");
      td93.textContent = "2019";
      td94 = (0, import_internal66.element)("td");
      td94.textContent = "May";
      td95 = (0, import_internal66.element)("td");
      td95.textContent = "$80";
      t137 = (0, import_internal66.space)();
      tr36 = (0, import_internal66.element)("tr");
      td96 = (0, import_internal66.element)("td");
      td96.textContent = "2019";
      td97 = (0, import_internal66.element)("td");
      td97.textContent = "June";
      td98 = (0, import_internal66.element)("td");
      td98.textContent = "$80";
      t141 = (0, import_internal66.space)();
      tr37 = (0, import_internal66.element)("tr");
      td99 = (0, import_internal66.element)("td");
      td99.textContent = "2019";
      td100 = (0, import_internal66.element)("td");
      td100.textContent = "July";
      td101 = (0, import_internal66.element)("td");
      td101.textContent = "$80";
      t145 = (0, import_internal66.space)();
      tr38 = (0, import_internal66.element)("tr");
      td102 = (0, import_internal66.element)("td");
      td102.textContent = "2019";
      td103 = (0, import_internal66.element)("td");
      td103.textContent = "August";
      td104 = (0, import_internal66.element)("td");
      td104.textContent = "$80";
      t149 = (0, import_internal66.space)();
      tr39 = (0, import_internal66.element)("tr");
      td105 = (0, import_internal66.element)("td");
      td105.textContent = "2019";
      td106 = (0, import_internal66.element)("td");
      td106.textContent = "September";
      td107 = (0, import_internal66.element)("td");
      td107.textContent = "$80";
      t153 = (0, import_internal66.space)();
      tr40 = (0, import_internal66.element)("tr");
      td108 = (0, import_internal66.element)("td");
      td108.textContent = "2019";
      td109 = (0, import_internal66.element)("td");
      td109.textContent = "October";
      td110 = (0, import_internal66.element)("td");
      td110.textContent = "$80";
      t157 = (0, import_internal66.space)();
      tr41 = (0, import_internal66.element)("tr");
      td111 = (0, import_internal66.element)("td");
      td111.textContent = "2019";
      td112 = (0, import_internal66.element)("td");
      td112.textContent = "November";
      td113 = (0, import_internal66.element)("td");
      td113.textContent = "$80";
      t161 = (0, import_internal66.space)();
      tr42 = (0, import_internal66.element)("tr");
      td114 = (0, import_internal66.element)("td");
      td114.textContent = "2019";
      td115 = (0, import_internal66.element)("td");
      td115.textContent = "December";
      td116 = (0, import_internal66.element)("td");
      td116.textContent = "$80";
      t165 = (0, import_internal66.space)();
      thead4 = (0, import_internal66.element)("thead");
      tr43 = (0, import_internal66.element)("tr");
      th6 = (0, import_internal66.element)("th");
      th6.textContent = "Year: 2018";
      t167 = (0, import_internal66.space)();
      tbody5 = (0, import_internal66.element)("tbody");
      tr44 = (0, import_internal66.element)("tr");
      td117 = (0, import_internal66.element)("td");
      td117.textContent = "2018";
      td118 = (0, import_internal66.element)("td");
      td118.textContent = "January";
      td119 = (0, import_internal66.element)("td");
      td119.textContent = "$100";
      t171 = (0, import_internal66.space)();
      tr45 = (0, import_internal66.element)("tr");
      td120 = (0, import_internal66.element)("td");
      td120.textContent = "2018";
      td121 = (0, import_internal66.element)("td");
      td121.textContent = "February";
      td122 = (0, import_internal66.element)("td");
      td122.textContent = "$80";
      t175 = (0, import_internal66.space)();
      tr46 = (0, import_internal66.element)("tr");
      td123 = (0, import_internal66.element)("td");
      td123.textContent = "2018";
      td124 = (0, import_internal66.element)("td");
      td124.textContent = "March";
      td125 = (0, import_internal66.element)("td");
      td125.textContent = "$80";
      t179 = (0, import_internal66.space)();
      tr47 = (0, import_internal66.element)("tr");
      td126 = (0, import_internal66.element)("td");
      td126.textContent = "2018";
      td127 = (0, import_internal66.element)("td");
      td127.textContent = "April";
      td128 = (0, import_internal66.element)("td");
      td128.textContent = "$80";
      t183 = (0, import_internal66.space)();
      tr48 = (0, import_internal66.element)("tr");
      td129 = (0, import_internal66.element)("td");
      td129.textContent = "2018";
      td130 = (0, import_internal66.element)("td");
      td130.textContent = "May";
      td131 = (0, import_internal66.element)("td");
      td131.textContent = "$80";
      t187 = (0, import_internal66.space)();
      tr49 = (0, import_internal66.element)("tr");
      td132 = (0, import_internal66.element)("td");
      td132.textContent = "2018";
      td133 = (0, import_internal66.element)("td");
      td133.textContent = "June";
      td134 = (0, import_internal66.element)("td");
      td134.textContent = "$80";
      t191 = (0, import_internal66.space)();
      tr50 = (0, import_internal66.element)("tr");
      td135 = (0, import_internal66.element)("td");
      td135.textContent = "2018";
      td136 = (0, import_internal66.element)("td");
      td136.textContent = "July";
      td137 = (0, import_internal66.element)("td");
      td137.textContent = "$80";
      t195 = (0, import_internal66.space)();
      tr51 = (0, import_internal66.element)("tr");
      td138 = (0, import_internal66.element)("td");
      td138.textContent = "2018";
      td139 = (0, import_internal66.element)("td");
      td139.textContent = "August";
      td140 = (0, import_internal66.element)("td");
      td140.textContent = "$80";
      t199 = (0, import_internal66.space)();
      tr52 = (0, import_internal66.element)("tr");
      td141 = (0, import_internal66.element)("td");
      td141.textContent = "2018";
      td142 = (0, import_internal66.element)("td");
      td142.textContent = "September";
      td143 = (0, import_internal66.element)("td");
      td143.textContent = "$80";
      t203 = (0, import_internal66.space)();
      tr53 = (0, import_internal66.element)("tr");
      td144 = (0, import_internal66.element)("td");
      td144.textContent = "2018";
      td145 = (0, import_internal66.element)("td");
      td145.textContent = "October";
      td146 = (0, import_internal66.element)("td");
      td146.textContent = "$80";
      t207 = (0, import_internal66.space)();
      tr54 = (0, import_internal66.element)("tr");
      td147 = (0, import_internal66.element)("td");
      td147.textContent = "2018";
      td148 = (0, import_internal66.element)("td");
      td148.textContent = "November";
      td149 = (0, import_internal66.element)("td");
      td149.textContent = "$80";
      t211 = (0, import_internal66.space)();
      tr55 = (0, import_internal66.element)("tr");
      td150 = (0, import_internal66.element)("td");
      td150.textContent = "2018";
      td151 = (0, import_internal66.element)("td");
      td151.textContent = "December";
      td152 = (0, import_internal66.element)("td");
      td152.textContent = "$80";
      t215 = (0, import_internal66.space)();
      thead5 = (0, import_internal66.element)("thead");
      tr56 = (0, import_internal66.element)("tr");
      th7 = (0, import_internal66.element)("th");
      th7.textContent = "Year: 2017";
      t217 = (0, import_internal66.space)();
      tbody6 = (0, import_internal66.element)("tbody");
      tr57 = (0, import_internal66.element)("tr");
      td153 = (0, import_internal66.element)("td");
      td153.textContent = "2017";
      td154 = (0, import_internal66.element)("td");
      td154.textContent = "January";
      td155 = (0, import_internal66.element)("td");
      td155.textContent = "$100";
      t221 = (0, import_internal66.space)();
      tr58 = (0, import_internal66.element)("tr");
      td156 = (0, import_internal66.element)("td");
      td156.textContent = "2017";
      td157 = (0, import_internal66.element)("td");
      td157.textContent = "February";
      td158 = (0, import_internal66.element)("td");
      td158.textContent = "$80";
      t225 = (0, import_internal66.space)();
      tr59 = (0, import_internal66.element)("tr");
      td159 = (0, import_internal66.element)("td");
      td159.textContent = "2017";
      td160 = (0, import_internal66.element)("td");
      td160.textContent = "March";
      td161 = (0, import_internal66.element)("td");
      td161.textContent = "$80";
      t229 = (0, import_internal66.space)();
      tr60 = (0, import_internal66.element)("tr");
      td162 = (0, import_internal66.element)("td");
      td162.textContent = "2017";
      td163 = (0, import_internal66.element)("td");
      td163.textContent = "April";
      td164 = (0, import_internal66.element)("td");
      td164.textContent = "$80";
      t233 = (0, import_internal66.space)();
      tr61 = (0, import_internal66.element)("tr");
      td165 = (0, import_internal66.element)("td");
      td165.textContent = "2017";
      td166 = (0, import_internal66.element)("td");
      td166.textContent = "May";
      td167 = (0, import_internal66.element)("td");
      td167.textContent = "$80";
      t237 = (0, import_internal66.space)();
      tr62 = (0, import_internal66.element)("tr");
      td168 = (0, import_internal66.element)("td");
      td168.textContent = "2017";
      td169 = (0, import_internal66.element)("td");
      td169.textContent = "June";
      td170 = (0, import_internal66.element)("td");
      td170.textContent = "$80";
      t241 = (0, import_internal66.space)();
      tr63 = (0, import_internal66.element)("tr");
      td171 = (0, import_internal66.element)("td");
      td171.textContent = "2017";
      td172 = (0, import_internal66.element)("td");
      td172.textContent = "July";
      td173 = (0, import_internal66.element)("td");
      td173.textContent = "$80";
      t245 = (0, import_internal66.space)();
      tr64 = (0, import_internal66.element)("tr");
      td174 = (0, import_internal66.element)("td");
      td174.textContent = "2017";
      td175 = (0, import_internal66.element)("td");
      td175.textContent = "August";
      td176 = (0, import_internal66.element)("td");
      td176.textContent = "$80";
      t249 = (0, import_internal66.space)();
      tr65 = (0, import_internal66.element)("tr");
      td177 = (0, import_internal66.element)("td");
      td177.textContent = "2017";
      td178 = (0, import_internal66.element)("td");
      td178.textContent = "September";
      td179 = (0, import_internal66.element)("td");
      td179.textContent = "$80";
      t253 = (0, import_internal66.space)();
      tr66 = (0, import_internal66.element)("tr");
      td180 = (0, import_internal66.element)("td");
      td180.textContent = "2017";
      td181 = (0, import_internal66.element)("td");
      td181.textContent = "October";
      td182 = (0, import_internal66.element)("td");
      td182.textContent = "$80";
      t257 = (0, import_internal66.space)();
      tr67 = (0, import_internal66.element)("tr");
      td183 = (0, import_internal66.element)("td");
      td183.textContent = "2017";
      td184 = (0, import_internal66.element)("td");
      td184.textContent = "November";
      td185 = (0, import_internal66.element)("td");
      td185.textContent = "$80";
      t261 = (0, import_internal66.space)();
      tr68 = (0, import_internal66.element)("tr");
      td186 = (0, import_internal66.element)("td");
      td186.textContent = "2017";
      td187 = (0, import_internal66.element)("td");
      td187.textContent = "December";
      td188 = (0, import_internal66.element)("td");
      td188.textContent = "$80";
      t265 = (0, import_internal66.space)();
      tfoot = (0, import_internal66.element)("tfoot");
      tr69 = (0, import_internal66.element)("tr");
      td189 = (0, import_internal66.element)("td");
      td189.textContent = "Sum";
      td190 = (0, import_internal66.element)("td");
      td190.textContent = "$180";
      (0, import_internal66.add_location)(th0, file60, 9, 7, 177);
      (0, import_internal66.add_location)(th1, file60, 9, 20, 190);
      (0, import_internal66.add_location)(th2, file60, 9, 34, 204);
      (0, import_internal66.add_location)(tr0, file60, 9, 3, 173);
      (0, import_internal66.add_location)(thead0, file60, 8, 2, 162);
      (0, import_internal66.attr_dev)(th3, "colspan", "3");
      (0, import_internal66.add_location)(th3, file60, 12, 7, 252);
      (0, import_internal66.add_location)(tr1, file60, 12, 3, 248);
      (0, import_internal66.add_location)(thead1, file60, 11, 2, 237);
      (0, import_internal66.add_location)(td0, file60, 15, 23, 333);
      (0, import_internal66.add_location)(td1, file60, 15, 36, 346);
      (0, import_internal66.add_location)(td2, file60, 15, 52, 362);
      (0, import_internal66.attr_dev)(tr2, "class", "row-sel");
      (0, import_internal66.add_location)(tr2, file60, 15, 3, 313);
      (0, import_internal66.add_location)(td3, file60, 16, 23, 404);
      (0, import_internal66.add_location)(td4, file60, 16, 36, 417);
      (0, import_internal66.add_location)(td5, file60, 16, 53, 434);
      (0, import_internal66.attr_dev)(tr3, "class", "row-sel");
      (0, import_internal66.add_location)(tr3, file60, 16, 3, 384);
      (0, import_internal66.add_location)(td6, file60, 17, 23, 475);
      (0, import_internal66.add_location)(td7, file60, 17, 36, 488);
      (0, import_internal66.add_location)(td8, file60, 17, 50, 502);
      (0, import_internal66.attr_dev)(tr4, "class", "row-sel");
      (0, import_internal66.add_location)(tr4, file60, 17, 3, 455);
      (0, import_internal66.add_location)(td9, file60, 18, 23, 543);
      (0, import_internal66.add_location)(td10, file60, 18, 36, 556);
      (0, import_internal66.add_location)(td11, file60, 18, 50, 570);
      (0, import_internal66.attr_dev)(tr5, "class", "row-sel");
      (0, import_internal66.add_location)(tr5, file60, 18, 3, 523);
      (0, import_internal66.add_location)(td12, file60, 19, 23, 611);
      (0, import_internal66.add_location)(td13, file60, 19, 36, 624);
      (0, import_internal66.add_location)(td14, file60, 19, 48, 636);
      (0, import_internal66.attr_dev)(tr6, "class", "row-sel");
      (0, import_internal66.add_location)(tr6, file60, 19, 3, 591);
      (0, import_internal66.add_location)(td15, file60, 20, 23, 677);
      (0, import_internal66.add_location)(td16, file60, 20, 36, 690);
      (0, import_internal66.add_location)(td17, file60, 20, 49, 703);
      (0, import_internal66.attr_dev)(tr7, "class", "row-sel");
      (0, import_internal66.add_location)(tr7, file60, 20, 3, 657);
      (0, import_internal66.add_location)(tbody0, file60, 14, 2, 302);
      (0, import_internal66.add_location)(td18, file60, 23, 7, 775);
      (0, import_internal66.add_location)(td19, file60, 23, 20, 788);
      (0, import_internal66.add_location)(td20, file60, 23, 36, 804);
      (0, import_internal66.add_location)(tr8, file60, 23, 3, 771);
      (0, import_internal66.add_location)(td21, file60, 24, 7, 829);
      (0, import_internal66.add_location)(td22, file60, 24, 20, 842);
      (0, import_internal66.add_location)(td23, file60, 24, 36, 858);
      (0, import_internal66.add_location)(tr9, file60, 24, 3, 825);
      (0, import_internal66.attr_dev)(tbody1, "class", "row-sel row-group");
      (0, import_internal66.add_location)(tbody1, file60, 22, 2, 734);
      (0, import_internal66.add_location)(td24, file60, 27, 23, 920);
      (0, import_internal66.add_location)(td25, file60, 27, 36, 933);
      (0, import_internal66.add_location)(td26, file60, 27, 48, 945);
      (0, import_internal66.attr_dev)(tr10, "class", "row-sel");
      (0, import_internal66.add_location)(tr10, file60, 27, 3, 900);
      (0, import_internal66.add_location)(td27, file60, 28, 23, 986);
      (0, import_internal66.add_location)(td28, file60, 28, 36, 999);
      (0, import_internal66.add_location)(td29, file60, 28, 49, 1012);
      (0, import_internal66.attr_dev)(tr11, "class", "row-sel");
      (0, import_internal66.add_location)(tr11, file60, 28, 3, 966);
      (0, import_internal66.add_location)(td30, file60, 29, 23, 1053);
      (0, import_internal66.add_location)(td31, file60, 29, 36, 1066);
      (0, import_internal66.add_location)(td32, file60, 29, 51, 1081);
      (0, import_internal66.attr_dev)(tr12, "class", "row-sel");
      (0, import_internal66.add_location)(tr12, file60, 29, 3, 1033);
      (0, import_internal66.add_location)(td33, file60, 30, 23, 1122);
      (0, import_internal66.add_location)(td34, file60, 30, 36, 1135);
      (0, import_internal66.add_location)(td35, file60, 30, 54, 1153);
      (0, import_internal66.attr_dev)(tr13, "class", "row-sel");
      (0, import_internal66.add_location)(tr13, file60, 30, 3, 1102);
      (0, import_internal66.add_location)(td36, file60, 31, 23, 1194);
      (0, import_internal66.add_location)(td37, file60, 31, 36, 1207);
      (0, import_internal66.add_location)(td38, file60, 31, 52, 1223);
      (0, import_internal66.attr_dev)(tr14, "class", "row-sel");
      (0, import_internal66.add_location)(tr14, file60, 31, 3, 1174);
      (0, import_internal66.add_location)(td39, file60, 32, 23, 1264);
      (0, import_internal66.add_location)(td40, file60, 32, 36, 1277);
      (0, import_internal66.add_location)(td41, file60, 32, 53, 1294);
      (0, import_internal66.attr_dev)(tr15, "class", "row-sel");
      (0, import_internal66.add_location)(tr15, file60, 32, 3, 1244);
      (0, import_internal66.add_location)(td42, file60, 33, 23, 1335);
      (0, import_internal66.add_location)(td43, file60, 33, 36, 1348);
      (0, import_internal66.add_location)(td44, file60, 33, 53, 1365);
      (0, import_internal66.attr_dev)(tr16, "class", "row-sel");
      (0, import_internal66.add_location)(tr16, file60, 33, 3, 1315);
      (0, import_internal66.add_location)(tbody2, file60, 26, 2, 889);
      (0, import_internal66.attr_dev)(th4, "colspan", "3");
      (0, import_internal66.add_location)(th4, file60, 36, 7, 1411);
      (0, import_internal66.add_location)(tr17, file60, 36, 3, 1407);
      (0, import_internal66.add_location)(thead2, file60, 35, 2, 1396);
      (0, import_internal66.add_location)(td45, file60, 39, 23, 1492);
      (0, import_internal66.add_location)(td46, file60, 39, 36, 1505);
      (0, import_internal66.add_location)(td47, file60, 39, 52, 1521);
      (0, import_internal66.attr_dev)(tr18, "class", "row-sel");
      (0, import_internal66.add_location)(tr18, file60, 39, 3, 1472);
      (0, import_internal66.add_location)(td48, file60, 40, 23, 1563);
      (0, import_internal66.add_location)(td49, file60, 40, 36, 1576);
      (0, import_internal66.add_location)(td50, file60, 40, 53, 1593);
      (0, import_internal66.attr_dev)(tr19, "class", "row-sel");
      (0, import_internal66.add_location)(tr19, file60, 40, 3, 1543);
      (0, import_internal66.add_location)(td51, file60, 41, 23, 1634);
      (0, import_internal66.add_location)(td52, file60, 41, 36, 1647);
      (0, import_internal66.add_location)(td53, file60, 41, 50, 1661);
      (0, import_internal66.attr_dev)(tr20, "class", "row-sel");
      (0, import_internal66.add_location)(tr20, file60, 41, 3, 1614);
      (0, import_internal66.add_location)(td54, file60, 42, 23, 1702);
      (0, import_internal66.add_location)(td55, file60, 42, 36, 1715);
      (0, import_internal66.add_location)(td56, file60, 42, 50, 1729);
      (0, import_internal66.attr_dev)(tr21, "class", "row-sel");
      (0, import_internal66.add_location)(tr21, file60, 42, 3, 1682);
      (0, import_internal66.add_location)(td57, file60, 43, 23, 1770);
      (0, import_internal66.add_location)(td58, file60, 43, 36, 1783);
      (0, import_internal66.add_location)(td59, file60, 43, 48, 1795);
      (0, import_internal66.attr_dev)(tr22, "class", "row-sel");
      (0, import_internal66.add_location)(tr22, file60, 43, 3, 1750);
      (0, import_internal66.add_location)(td60, file60, 44, 23, 1836);
      (0, import_internal66.add_location)(td61, file60, 44, 36, 1849);
      (0, import_internal66.add_location)(td62, file60, 44, 49, 1862);
      (0, import_internal66.attr_dev)(tr23, "class", "row-sel");
      (0, import_internal66.add_location)(tr23, file60, 44, 3, 1816);
      (0, import_internal66.add_location)(td63, file60, 45, 23, 1903);
      (0, import_internal66.add_location)(td64, file60, 45, 36, 1916);
      (0, import_internal66.add_location)(td65, file60, 45, 49, 1929);
      (0, import_internal66.attr_dev)(tr24, "class", "row-sel");
      (0, import_internal66.add_location)(tr24, file60, 45, 3, 1883);
      (0, import_internal66.add_location)(td66, file60, 46, 23, 1970);
      (0, import_internal66.add_location)(td67, file60, 46, 36, 1983);
      (0, import_internal66.add_location)(td68, file60, 46, 51, 1998);
      (0, import_internal66.attr_dev)(tr25, "class", "row-sel");
      (0, import_internal66.add_location)(tr25, file60, 46, 3, 1950);
      (0, import_internal66.add_location)(td69, file60, 47, 23, 2039);
      (0, import_internal66.add_location)(td70, file60, 47, 36, 2052);
      (0, import_internal66.add_location)(td71, file60, 47, 54, 2070);
      (0, import_internal66.attr_dev)(tr26, "class", "row-sel");
      (0, import_internal66.add_location)(tr26, file60, 47, 3, 2019);
      (0, import_internal66.add_location)(td72, file60, 48, 23, 2111);
      (0, import_internal66.add_location)(td73, file60, 48, 36, 2124);
      (0, import_internal66.add_location)(td74, file60, 48, 52, 2140);
      (0, import_internal66.attr_dev)(tr27, "class", "row-sel");
      (0, import_internal66.add_location)(tr27, file60, 48, 3, 2091);
      (0, import_internal66.add_location)(td75, file60, 49, 23, 2181);
      (0, import_internal66.add_location)(td76, file60, 49, 36, 2194);
      (0, import_internal66.add_location)(td77, file60, 49, 53, 2211);
      (0, import_internal66.attr_dev)(tr28, "class", "row-sel");
      (0, import_internal66.add_location)(tr28, file60, 49, 3, 2161);
      (0, import_internal66.add_location)(td78, file60, 50, 23, 2252);
      (0, import_internal66.add_location)(td79, file60, 50, 36, 2265);
      (0, import_internal66.add_location)(td80, file60, 50, 53, 2282);
      (0, import_internal66.attr_dev)(tr29, "class", "row-sel");
      (0, import_internal66.add_location)(tr29, file60, 50, 3, 2232);
      (0, import_internal66.add_location)(tbody3, file60, 38, 2, 1461);
      (0, import_internal66.attr_dev)(th5, "colspan", "3");
      (0, import_internal66.add_location)(th5, file60, 53, 7, 2328);
      (0, import_internal66.add_location)(tr30, file60, 53, 3, 2324);
      (0, import_internal66.add_location)(thead3, file60, 52, 2, 2313);
      (0, import_internal66.add_location)(td81, file60, 56, 23, 2409);
      (0, import_internal66.add_location)(td82, file60, 56, 36, 2422);
      (0, import_internal66.add_location)(td83, file60, 56, 52, 2438);
      (0, import_internal66.attr_dev)(tr31, "class", "row-sel");
      (0, import_internal66.add_location)(tr31, file60, 56, 3, 2389);
      (0, import_internal66.add_location)(td84, file60, 57, 23, 2480);
      (0, import_internal66.add_location)(td85, file60, 57, 36, 2493);
      (0, import_internal66.add_location)(td86, file60, 57, 53, 2510);
      (0, import_internal66.attr_dev)(tr32, "class", "row-sel");
      (0, import_internal66.add_location)(tr32, file60, 57, 3, 2460);
      (0, import_internal66.add_location)(td87, file60, 58, 23, 2551);
      (0, import_internal66.add_location)(td88, file60, 58, 36, 2564);
      (0, import_internal66.add_location)(td89, file60, 58, 50, 2578);
      (0, import_internal66.attr_dev)(tr33, "class", "row-sel");
      (0, import_internal66.add_location)(tr33, file60, 58, 3, 2531);
      (0, import_internal66.add_location)(td90, file60, 59, 23, 2619);
      (0, import_internal66.add_location)(td91, file60, 59, 36, 2632);
      (0, import_internal66.add_location)(td92, file60, 59, 50, 2646);
      (0, import_internal66.attr_dev)(tr34, "class", "row-sel");
      (0, import_internal66.add_location)(tr34, file60, 59, 3, 2599);
      (0, import_internal66.add_location)(td93, file60, 60, 23, 2687);
      (0, import_internal66.add_location)(td94, file60, 60, 36, 2700);
      (0, import_internal66.add_location)(td95, file60, 60, 48, 2712);
      (0, import_internal66.attr_dev)(tr35, "class", "row-sel");
      (0, import_internal66.add_location)(tr35, file60, 60, 3, 2667);
      (0, import_internal66.add_location)(td96, file60, 61, 23, 2753);
      (0, import_internal66.add_location)(td97, file60, 61, 36, 2766);
      (0, import_internal66.add_location)(td98, file60, 61, 49, 2779);
      (0, import_internal66.attr_dev)(tr36, "class", "row-sel");
      (0, import_internal66.add_location)(tr36, file60, 61, 3, 2733);
      (0, import_internal66.add_location)(td99, file60, 62, 23, 2820);
      (0, import_internal66.add_location)(td100, file60, 62, 36, 2833);
      (0, import_internal66.add_location)(td101, file60, 62, 49, 2846);
      (0, import_internal66.attr_dev)(tr37, "class", "row-sel");
      (0, import_internal66.add_location)(tr37, file60, 62, 3, 2800);
      (0, import_internal66.add_location)(td102, file60, 63, 23, 2887);
      (0, import_internal66.add_location)(td103, file60, 63, 36, 2900);
      (0, import_internal66.add_location)(td104, file60, 63, 51, 2915);
      (0, import_internal66.attr_dev)(tr38, "class", "row-sel");
      (0, import_internal66.add_location)(tr38, file60, 63, 3, 2867);
      (0, import_internal66.add_location)(td105, file60, 64, 23, 2956);
      (0, import_internal66.add_location)(td106, file60, 64, 36, 2969);
      (0, import_internal66.add_location)(td107, file60, 64, 54, 2987);
      (0, import_internal66.attr_dev)(tr39, "class", "row-sel");
      (0, import_internal66.add_location)(tr39, file60, 64, 3, 2936);
      (0, import_internal66.add_location)(td108, file60, 65, 23, 3028);
      (0, import_internal66.add_location)(td109, file60, 65, 36, 3041);
      (0, import_internal66.add_location)(td110, file60, 65, 52, 3057);
      (0, import_internal66.attr_dev)(tr40, "class", "row-sel");
      (0, import_internal66.add_location)(tr40, file60, 65, 3, 3008);
      (0, import_internal66.add_location)(td111, file60, 66, 23, 3098);
      (0, import_internal66.add_location)(td112, file60, 66, 36, 3111);
      (0, import_internal66.add_location)(td113, file60, 66, 53, 3128);
      (0, import_internal66.attr_dev)(tr41, "class", "row-sel");
      (0, import_internal66.add_location)(tr41, file60, 66, 3, 3078);
      (0, import_internal66.add_location)(td114, file60, 67, 23, 3169);
      (0, import_internal66.add_location)(td115, file60, 67, 36, 3182);
      (0, import_internal66.add_location)(td116, file60, 67, 53, 3199);
      (0, import_internal66.attr_dev)(tr42, "class", "row-sel");
      (0, import_internal66.add_location)(tr42, file60, 67, 3, 3149);
      (0, import_internal66.add_location)(tbody4, file60, 55, 2, 2378);
      (0, import_internal66.attr_dev)(th6, "colspan", "3");
      (0, import_internal66.add_location)(th6, file60, 70, 7, 3245);
      (0, import_internal66.add_location)(tr43, file60, 70, 3, 3241);
      (0, import_internal66.add_location)(thead4, file60, 69, 2, 3230);
      (0, import_internal66.add_location)(td117, file60, 73, 23, 3326);
      (0, import_internal66.add_location)(td118, file60, 73, 36, 3339);
      (0, import_internal66.add_location)(td119, file60, 73, 52, 3355);
      (0, import_internal66.attr_dev)(tr44, "class", "row-sel");
      (0, import_internal66.add_location)(tr44, file60, 73, 3, 3306);
      (0, import_internal66.add_location)(td120, file60, 74, 23, 3397);
      (0, import_internal66.add_location)(td121, file60, 74, 36, 3410);
      (0, import_internal66.add_location)(td122, file60, 74, 53, 3427);
      (0, import_internal66.attr_dev)(tr45, "class", "row-sel");
      (0, import_internal66.add_location)(tr45, file60, 74, 3, 3377);
      (0, import_internal66.add_location)(td123, file60, 75, 23, 3468);
      (0, import_internal66.add_location)(td124, file60, 75, 36, 3481);
      (0, import_internal66.add_location)(td125, file60, 75, 50, 3495);
      (0, import_internal66.attr_dev)(tr46, "class", "row-sel");
      (0, import_internal66.add_location)(tr46, file60, 75, 3, 3448);
      (0, import_internal66.add_location)(td126, file60, 76, 23, 3536);
      (0, import_internal66.add_location)(td127, file60, 76, 36, 3549);
      (0, import_internal66.add_location)(td128, file60, 76, 50, 3563);
      (0, import_internal66.attr_dev)(tr47, "class", "row-sel");
      (0, import_internal66.add_location)(tr47, file60, 76, 3, 3516);
      (0, import_internal66.add_location)(td129, file60, 77, 23, 3604);
      (0, import_internal66.add_location)(td130, file60, 77, 36, 3617);
      (0, import_internal66.add_location)(td131, file60, 77, 48, 3629);
      (0, import_internal66.attr_dev)(tr48, "class", "row-sel");
      (0, import_internal66.add_location)(tr48, file60, 77, 3, 3584);
      (0, import_internal66.add_location)(td132, file60, 78, 23, 3670);
      (0, import_internal66.add_location)(td133, file60, 78, 36, 3683);
      (0, import_internal66.add_location)(td134, file60, 78, 49, 3696);
      (0, import_internal66.attr_dev)(tr49, "class", "row-sel");
      (0, import_internal66.add_location)(tr49, file60, 78, 3, 3650);
      (0, import_internal66.add_location)(td135, file60, 79, 23, 3737);
      (0, import_internal66.add_location)(td136, file60, 79, 36, 3750);
      (0, import_internal66.add_location)(td137, file60, 79, 49, 3763);
      (0, import_internal66.attr_dev)(tr50, "class", "row-sel");
      (0, import_internal66.add_location)(tr50, file60, 79, 3, 3717);
      (0, import_internal66.add_location)(td138, file60, 80, 23, 3804);
      (0, import_internal66.add_location)(td139, file60, 80, 36, 3817);
      (0, import_internal66.add_location)(td140, file60, 80, 51, 3832);
      (0, import_internal66.attr_dev)(tr51, "class", "row-sel");
      (0, import_internal66.add_location)(tr51, file60, 80, 3, 3784);
      (0, import_internal66.add_location)(td141, file60, 81, 23, 3873);
      (0, import_internal66.add_location)(td142, file60, 81, 36, 3886);
      (0, import_internal66.add_location)(td143, file60, 81, 54, 3904);
      (0, import_internal66.attr_dev)(tr52, "class", "row-sel");
      (0, import_internal66.add_location)(tr52, file60, 81, 3, 3853);
      (0, import_internal66.add_location)(td144, file60, 82, 23, 3945);
      (0, import_internal66.add_location)(td145, file60, 82, 36, 3958);
      (0, import_internal66.add_location)(td146, file60, 82, 52, 3974);
      (0, import_internal66.attr_dev)(tr53, "class", "row-sel");
      (0, import_internal66.add_location)(tr53, file60, 82, 3, 3925);
      (0, import_internal66.add_location)(td147, file60, 83, 23, 4015);
      (0, import_internal66.add_location)(td148, file60, 83, 36, 4028);
      (0, import_internal66.add_location)(td149, file60, 83, 53, 4045);
      (0, import_internal66.attr_dev)(tr54, "class", "row-sel");
      (0, import_internal66.add_location)(tr54, file60, 83, 3, 3995);
      (0, import_internal66.add_location)(td150, file60, 84, 23, 4086);
      (0, import_internal66.add_location)(td151, file60, 84, 36, 4099);
      (0, import_internal66.add_location)(td152, file60, 84, 53, 4116);
      (0, import_internal66.attr_dev)(tr55, "class", "row-sel");
      (0, import_internal66.add_location)(tr55, file60, 84, 3, 4066);
      (0, import_internal66.add_location)(tbody5, file60, 72, 2, 3295);
      (0, import_internal66.attr_dev)(th7, "colspan", "3");
      (0, import_internal66.add_location)(th7, file60, 87, 7, 4162);
      (0, import_internal66.add_location)(tr56, file60, 87, 3, 4158);
      (0, import_internal66.add_location)(thead5, file60, 86, 2, 4147);
      (0, import_internal66.add_location)(td153, file60, 90, 23, 4243);
      (0, import_internal66.add_location)(td154, file60, 90, 36, 4256);
      (0, import_internal66.add_location)(td155, file60, 90, 52, 4272);
      (0, import_internal66.attr_dev)(tr57, "class", "row-sel");
      (0, import_internal66.add_location)(tr57, file60, 90, 3, 4223);
      (0, import_internal66.add_location)(td156, file60, 91, 23, 4314);
      (0, import_internal66.add_location)(td157, file60, 91, 36, 4327);
      (0, import_internal66.add_location)(td158, file60, 91, 53, 4344);
      (0, import_internal66.attr_dev)(tr58, "class", "row-sel");
      (0, import_internal66.add_location)(tr58, file60, 91, 3, 4294);
      (0, import_internal66.add_location)(td159, file60, 92, 23, 4385);
      (0, import_internal66.add_location)(td160, file60, 92, 36, 4398);
      (0, import_internal66.add_location)(td161, file60, 92, 50, 4412);
      (0, import_internal66.attr_dev)(tr59, "class", "row-sel");
      (0, import_internal66.add_location)(tr59, file60, 92, 3, 4365);
      (0, import_internal66.add_location)(td162, file60, 93, 23, 4453);
      (0, import_internal66.add_location)(td163, file60, 93, 36, 4466);
      (0, import_internal66.add_location)(td164, file60, 93, 50, 4480);
      (0, import_internal66.attr_dev)(tr60, "class", "row-sel");
      (0, import_internal66.add_location)(tr60, file60, 93, 3, 4433);
      (0, import_internal66.add_location)(td165, file60, 94, 23, 4521);
      (0, import_internal66.add_location)(td166, file60, 94, 36, 4534);
      (0, import_internal66.add_location)(td167, file60, 94, 48, 4546);
      (0, import_internal66.attr_dev)(tr61, "class", "row-sel");
      (0, import_internal66.add_location)(tr61, file60, 94, 3, 4501);
      (0, import_internal66.add_location)(td168, file60, 95, 23, 4587);
      (0, import_internal66.add_location)(td169, file60, 95, 36, 4600);
      (0, import_internal66.add_location)(td170, file60, 95, 49, 4613);
      (0, import_internal66.attr_dev)(tr62, "class", "row-sel");
      (0, import_internal66.add_location)(tr62, file60, 95, 3, 4567);
      (0, import_internal66.add_location)(td171, file60, 96, 23, 4654);
      (0, import_internal66.add_location)(td172, file60, 96, 36, 4667);
      (0, import_internal66.add_location)(td173, file60, 96, 49, 4680);
      (0, import_internal66.attr_dev)(tr63, "class", "row-sel");
      (0, import_internal66.add_location)(tr63, file60, 96, 3, 4634);
      (0, import_internal66.add_location)(td174, file60, 97, 23, 4721);
      (0, import_internal66.add_location)(td175, file60, 97, 36, 4734);
      (0, import_internal66.add_location)(td176, file60, 97, 51, 4749);
      (0, import_internal66.attr_dev)(tr64, "class", "row-sel");
      (0, import_internal66.add_location)(tr64, file60, 97, 3, 4701);
      (0, import_internal66.add_location)(td177, file60, 98, 23, 4790);
      (0, import_internal66.add_location)(td178, file60, 98, 36, 4803);
      (0, import_internal66.add_location)(td179, file60, 98, 54, 4821);
      (0, import_internal66.attr_dev)(tr65, "class", "row-sel");
      (0, import_internal66.add_location)(tr65, file60, 98, 3, 4770);
      (0, import_internal66.add_location)(td180, file60, 99, 23, 4862);
      (0, import_internal66.add_location)(td181, file60, 99, 36, 4875);
      (0, import_internal66.add_location)(td182, file60, 99, 52, 4891);
      (0, import_internal66.attr_dev)(tr66, "class", "row-sel");
      (0, import_internal66.add_location)(tr66, file60, 99, 3, 4842);
      (0, import_internal66.add_location)(td183, file60, 100, 23, 4932);
      (0, import_internal66.add_location)(td184, file60, 100, 36, 4945);
      (0, import_internal66.add_location)(td185, file60, 100, 53, 4962);
      (0, import_internal66.attr_dev)(tr67, "class", "row-sel");
      (0, import_internal66.add_location)(tr67, file60, 100, 3, 4912);
      (0, import_internal66.add_location)(td186, file60, 101, 23, 5003);
      (0, import_internal66.add_location)(td187, file60, 101, 36, 5016);
      (0, import_internal66.add_location)(td188, file60, 101, 53, 5033);
      (0, import_internal66.attr_dev)(tr68, "class", "row-sel");
      (0, import_internal66.add_location)(tr68, file60, 101, 3, 4983);
      (0, import_internal66.add_location)(tbody6, file60, 89, 2, 4212);
      (0, import_internal66.attr_dev)(td189, "colspan", "2");
      (0, import_internal66.add_location)(td189, file60, 104, 7, 5079);
      (0, import_internal66.add_location)(td190, file60, 104, 31, 5103);
      (0, import_internal66.add_location)(tr69, file60, 104, 3, 5075);
      (0, import_internal66.add_location)(tfoot, file60, 103, 2, 5064);
    },
    m: function mount(target, anchor) {
      (0, import_internal66.insert_dev)(target, thead0, anchor);
      (0, import_internal66.append_dev)(thead0, tr0);
      (0, import_internal66.append_dev)(tr0, th0);
      (0, import_internal66.append_dev)(tr0, th1);
      (0, import_internal66.append_dev)(tr0, th2);
      (0, import_internal66.insert_dev)(target, t3, anchor);
      (0, import_internal66.insert_dev)(target, thead1, anchor);
      (0, import_internal66.append_dev)(thead1, tr1);
      (0, import_internal66.append_dev)(tr1, th3);
      (0, import_internal66.insert_dev)(target, t5, anchor);
      (0, import_internal66.insert_dev)(target, tbody0, anchor);
      (0, import_internal66.append_dev)(tbody0, tr2);
      (0, import_internal66.append_dev)(tr2, td0);
      (0, import_internal66.append_dev)(tr2, td1);
      (0, import_internal66.append_dev)(tr2, td2);
      (0, import_internal66.append_dev)(tbody0, t9);
      (0, import_internal66.append_dev)(tbody0, tr3);
      (0, import_internal66.append_dev)(tr3, td3);
      (0, import_internal66.append_dev)(tr3, td4);
      (0, import_internal66.append_dev)(tr3, td5);
      (0, import_internal66.append_dev)(tbody0, t13);
      (0, import_internal66.append_dev)(tbody0, tr4);
      (0, import_internal66.append_dev)(tr4, td6);
      (0, import_internal66.append_dev)(tr4, td7);
      (0, import_internal66.append_dev)(tr4, td8);
      (0, import_internal66.append_dev)(tbody0, t17);
      (0, import_internal66.append_dev)(tbody0, tr5);
      (0, import_internal66.append_dev)(tr5, td9);
      (0, import_internal66.append_dev)(tr5, td10);
      (0, import_internal66.append_dev)(tr5, td11);
      (0, import_internal66.append_dev)(tbody0, t21);
      (0, import_internal66.append_dev)(tbody0, tr6);
      (0, import_internal66.append_dev)(tr6, td12);
      (0, import_internal66.append_dev)(tr6, td13);
      (0, import_internal66.append_dev)(tr6, td14);
      (0, import_internal66.append_dev)(tbody0, t25);
      (0, import_internal66.append_dev)(tbody0, tr7);
      (0, import_internal66.append_dev)(tr7, td15);
      (0, import_internal66.append_dev)(tr7, td16);
      (0, import_internal66.append_dev)(tr7, td17);
      (0, import_internal66.insert_dev)(target, t29, anchor);
      (0, import_internal66.insert_dev)(target, tbody1, anchor);
      (0, import_internal66.append_dev)(tbody1, tr8);
      (0, import_internal66.append_dev)(tr8, td18);
      (0, import_internal66.append_dev)(tr8, td19);
      (0, import_internal66.append_dev)(tr8, td20);
      (0, import_internal66.append_dev)(tbody1, t33);
      (0, import_internal66.append_dev)(tbody1, tr9);
      (0, import_internal66.append_dev)(tr9, td21);
      (0, import_internal66.append_dev)(tr9, td22);
      (0, import_internal66.append_dev)(tr9, td23);
      (0, import_internal66.insert_dev)(target, t37, anchor);
      (0, import_internal66.insert_dev)(target, tbody2, anchor);
      (0, import_internal66.append_dev)(tbody2, tr10);
      (0, import_internal66.append_dev)(tr10, td24);
      (0, import_internal66.append_dev)(tr10, td25);
      (0, import_internal66.append_dev)(tr10, td26);
      (0, import_internal66.append_dev)(tbody2, t41);
      (0, import_internal66.append_dev)(tbody2, tr11);
      (0, import_internal66.append_dev)(tr11, td27);
      (0, import_internal66.append_dev)(tr11, td28);
      (0, import_internal66.append_dev)(tr11, td29);
      (0, import_internal66.append_dev)(tbody2, t45);
      (0, import_internal66.append_dev)(tbody2, tr12);
      (0, import_internal66.append_dev)(tr12, td30);
      (0, import_internal66.append_dev)(tr12, td31);
      (0, import_internal66.append_dev)(tr12, td32);
      (0, import_internal66.append_dev)(tbody2, t49);
      (0, import_internal66.append_dev)(tbody2, tr13);
      (0, import_internal66.append_dev)(tr13, td33);
      (0, import_internal66.append_dev)(tr13, td34);
      (0, import_internal66.append_dev)(tr13, td35);
      (0, import_internal66.append_dev)(tbody2, t53);
      (0, import_internal66.append_dev)(tbody2, tr14);
      (0, import_internal66.append_dev)(tr14, td36);
      (0, import_internal66.append_dev)(tr14, td37);
      (0, import_internal66.append_dev)(tr14, td38);
      (0, import_internal66.append_dev)(tbody2, t57);
      (0, import_internal66.append_dev)(tbody2, tr15);
      (0, import_internal66.append_dev)(tr15, td39);
      (0, import_internal66.append_dev)(tr15, td40);
      (0, import_internal66.append_dev)(tr15, td41);
      (0, import_internal66.append_dev)(tbody2, t61);
      (0, import_internal66.append_dev)(tbody2, tr16);
      (0, import_internal66.append_dev)(tr16, td42);
      (0, import_internal66.append_dev)(tr16, td43);
      (0, import_internal66.append_dev)(tr16, td44);
      (0, import_internal66.insert_dev)(target, t65, anchor);
      (0, import_internal66.insert_dev)(target, thead2, anchor);
      (0, import_internal66.append_dev)(thead2, tr17);
      (0, import_internal66.append_dev)(tr17, th4);
      (0, import_internal66.insert_dev)(target, t67, anchor);
      (0, import_internal66.insert_dev)(target, tbody3, anchor);
      (0, import_internal66.append_dev)(tbody3, tr18);
      (0, import_internal66.append_dev)(tr18, td45);
      (0, import_internal66.append_dev)(tr18, td46);
      (0, import_internal66.append_dev)(tr18, td47);
      (0, import_internal66.append_dev)(tbody3, t71);
      (0, import_internal66.append_dev)(tbody3, tr19);
      (0, import_internal66.append_dev)(tr19, td48);
      (0, import_internal66.append_dev)(tr19, td49);
      (0, import_internal66.append_dev)(tr19, td50);
      (0, import_internal66.append_dev)(tbody3, t75);
      (0, import_internal66.append_dev)(tbody3, tr20);
      (0, import_internal66.append_dev)(tr20, td51);
      (0, import_internal66.append_dev)(tr20, td52);
      (0, import_internal66.append_dev)(tr20, td53);
      (0, import_internal66.append_dev)(tbody3, t79);
      (0, import_internal66.append_dev)(tbody3, tr21);
      (0, import_internal66.append_dev)(tr21, td54);
      (0, import_internal66.append_dev)(tr21, td55);
      (0, import_internal66.append_dev)(tr21, td56);
      (0, import_internal66.append_dev)(tbody3, t83);
      (0, import_internal66.append_dev)(tbody3, tr22);
      (0, import_internal66.append_dev)(tr22, td57);
      (0, import_internal66.append_dev)(tr22, td58);
      (0, import_internal66.append_dev)(tr22, td59);
      (0, import_internal66.append_dev)(tbody3, t87);
      (0, import_internal66.append_dev)(tbody3, tr23);
      (0, import_internal66.append_dev)(tr23, td60);
      (0, import_internal66.append_dev)(tr23, td61);
      (0, import_internal66.append_dev)(tr23, td62);
      (0, import_internal66.append_dev)(tbody3, t91);
      (0, import_internal66.append_dev)(tbody3, tr24);
      (0, import_internal66.append_dev)(tr24, td63);
      (0, import_internal66.append_dev)(tr24, td64);
      (0, import_internal66.append_dev)(tr24, td65);
      (0, import_internal66.append_dev)(tbody3, t95);
      (0, import_internal66.append_dev)(tbody3, tr25);
      (0, import_internal66.append_dev)(tr25, td66);
      (0, import_internal66.append_dev)(tr25, td67);
      (0, import_internal66.append_dev)(tr25, td68);
      (0, import_internal66.append_dev)(tbody3, t99);
      (0, import_internal66.append_dev)(tbody3, tr26);
      (0, import_internal66.append_dev)(tr26, td69);
      (0, import_internal66.append_dev)(tr26, td70);
      (0, import_internal66.append_dev)(tr26, td71);
      (0, import_internal66.append_dev)(tbody3, t103);
      (0, import_internal66.append_dev)(tbody3, tr27);
      (0, import_internal66.append_dev)(tr27, td72);
      (0, import_internal66.append_dev)(tr27, td73);
      (0, import_internal66.append_dev)(tr27, td74);
      (0, import_internal66.append_dev)(tbody3, t107);
      (0, import_internal66.append_dev)(tbody3, tr28);
      (0, import_internal66.append_dev)(tr28, td75);
      (0, import_internal66.append_dev)(tr28, td76);
      (0, import_internal66.append_dev)(tr28, td77);
      (0, import_internal66.append_dev)(tbody3, t111);
      (0, import_internal66.append_dev)(tbody3, tr29);
      (0, import_internal66.append_dev)(tr29, td78);
      (0, import_internal66.append_dev)(tr29, td79);
      (0, import_internal66.append_dev)(tr29, td80);
      (0, import_internal66.insert_dev)(target, t115, anchor);
      (0, import_internal66.insert_dev)(target, thead3, anchor);
      (0, import_internal66.append_dev)(thead3, tr30);
      (0, import_internal66.append_dev)(tr30, th5);
      (0, import_internal66.insert_dev)(target, t117, anchor);
      (0, import_internal66.insert_dev)(target, tbody4, anchor);
      (0, import_internal66.append_dev)(tbody4, tr31);
      (0, import_internal66.append_dev)(tr31, td81);
      (0, import_internal66.append_dev)(tr31, td82);
      (0, import_internal66.append_dev)(tr31, td83);
      (0, import_internal66.append_dev)(tbody4, t121);
      (0, import_internal66.append_dev)(tbody4, tr32);
      (0, import_internal66.append_dev)(tr32, td84);
      (0, import_internal66.append_dev)(tr32, td85);
      (0, import_internal66.append_dev)(tr32, td86);
      (0, import_internal66.append_dev)(tbody4, t125);
      (0, import_internal66.append_dev)(tbody4, tr33);
      (0, import_internal66.append_dev)(tr33, td87);
      (0, import_internal66.append_dev)(tr33, td88);
      (0, import_internal66.append_dev)(tr33, td89);
      (0, import_internal66.append_dev)(tbody4, t129);
      (0, import_internal66.append_dev)(tbody4, tr34);
      (0, import_internal66.append_dev)(tr34, td90);
      (0, import_internal66.append_dev)(tr34, td91);
      (0, import_internal66.append_dev)(tr34, td92);
      (0, import_internal66.append_dev)(tbody4, t133);
      (0, import_internal66.append_dev)(tbody4, tr35);
      (0, import_internal66.append_dev)(tr35, td93);
      (0, import_internal66.append_dev)(tr35, td94);
      (0, import_internal66.append_dev)(tr35, td95);
      (0, import_internal66.append_dev)(tbody4, t137);
      (0, import_internal66.append_dev)(tbody4, tr36);
      (0, import_internal66.append_dev)(tr36, td96);
      (0, import_internal66.append_dev)(tr36, td97);
      (0, import_internal66.append_dev)(tr36, td98);
      (0, import_internal66.append_dev)(tbody4, t141);
      (0, import_internal66.append_dev)(tbody4, tr37);
      (0, import_internal66.append_dev)(tr37, td99);
      (0, import_internal66.append_dev)(tr37, td100);
      (0, import_internal66.append_dev)(tr37, td101);
      (0, import_internal66.append_dev)(tbody4, t145);
      (0, import_internal66.append_dev)(tbody4, tr38);
      (0, import_internal66.append_dev)(tr38, td102);
      (0, import_internal66.append_dev)(tr38, td103);
      (0, import_internal66.append_dev)(tr38, td104);
      (0, import_internal66.append_dev)(tbody4, t149);
      (0, import_internal66.append_dev)(tbody4, tr39);
      (0, import_internal66.append_dev)(tr39, td105);
      (0, import_internal66.append_dev)(tr39, td106);
      (0, import_internal66.append_dev)(tr39, td107);
      (0, import_internal66.append_dev)(tbody4, t153);
      (0, import_internal66.append_dev)(tbody4, tr40);
      (0, import_internal66.append_dev)(tr40, td108);
      (0, import_internal66.append_dev)(tr40, td109);
      (0, import_internal66.append_dev)(tr40, td110);
      (0, import_internal66.append_dev)(tbody4, t157);
      (0, import_internal66.append_dev)(tbody4, tr41);
      (0, import_internal66.append_dev)(tr41, td111);
      (0, import_internal66.append_dev)(tr41, td112);
      (0, import_internal66.append_dev)(tr41, td113);
      (0, import_internal66.append_dev)(tbody4, t161);
      (0, import_internal66.append_dev)(tbody4, tr42);
      (0, import_internal66.append_dev)(tr42, td114);
      (0, import_internal66.append_dev)(tr42, td115);
      (0, import_internal66.append_dev)(tr42, td116);
      (0, import_internal66.insert_dev)(target, t165, anchor);
      (0, import_internal66.insert_dev)(target, thead4, anchor);
      (0, import_internal66.append_dev)(thead4, tr43);
      (0, import_internal66.append_dev)(tr43, th6);
      (0, import_internal66.insert_dev)(target, t167, anchor);
      (0, import_internal66.insert_dev)(target, tbody5, anchor);
      (0, import_internal66.append_dev)(tbody5, tr44);
      (0, import_internal66.append_dev)(tr44, td117);
      (0, import_internal66.append_dev)(tr44, td118);
      (0, import_internal66.append_dev)(tr44, td119);
      (0, import_internal66.append_dev)(tbody5, t171);
      (0, import_internal66.append_dev)(tbody5, tr45);
      (0, import_internal66.append_dev)(tr45, td120);
      (0, import_internal66.append_dev)(tr45, td121);
      (0, import_internal66.append_dev)(tr45, td122);
      (0, import_internal66.append_dev)(tbody5, t175);
      (0, import_internal66.append_dev)(tbody5, tr46);
      (0, import_internal66.append_dev)(tr46, td123);
      (0, import_internal66.append_dev)(tr46, td124);
      (0, import_internal66.append_dev)(tr46, td125);
      (0, import_internal66.append_dev)(tbody5, t179);
      (0, import_internal66.append_dev)(tbody5, tr47);
      (0, import_internal66.append_dev)(tr47, td126);
      (0, import_internal66.append_dev)(tr47, td127);
      (0, import_internal66.append_dev)(tr47, td128);
      (0, import_internal66.append_dev)(tbody5, t183);
      (0, import_internal66.append_dev)(tbody5, tr48);
      (0, import_internal66.append_dev)(tr48, td129);
      (0, import_internal66.append_dev)(tr48, td130);
      (0, import_internal66.append_dev)(tr48, td131);
      (0, import_internal66.append_dev)(tbody5, t187);
      (0, import_internal66.append_dev)(tbody5, tr49);
      (0, import_internal66.append_dev)(tr49, td132);
      (0, import_internal66.append_dev)(tr49, td133);
      (0, import_internal66.append_dev)(tr49, td134);
      (0, import_internal66.append_dev)(tbody5, t191);
      (0, import_internal66.append_dev)(tbody5, tr50);
      (0, import_internal66.append_dev)(tr50, td135);
      (0, import_internal66.append_dev)(tr50, td136);
      (0, import_internal66.append_dev)(tr50, td137);
      (0, import_internal66.append_dev)(tbody5, t195);
      (0, import_internal66.append_dev)(tbody5, tr51);
      (0, import_internal66.append_dev)(tr51, td138);
      (0, import_internal66.append_dev)(tr51, td139);
      (0, import_internal66.append_dev)(tr51, td140);
      (0, import_internal66.append_dev)(tbody5, t199);
      (0, import_internal66.append_dev)(tbody5, tr52);
      (0, import_internal66.append_dev)(tr52, td141);
      (0, import_internal66.append_dev)(tr52, td142);
      (0, import_internal66.append_dev)(tr52, td143);
      (0, import_internal66.append_dev)(tbody5, t203);
      (0, import_internal66.append_dev)(tbody5, tr53);
      (0, import_internal66.append_dev)(tr53, td144);
      (0, import_internal66.append_dev)(tr53, td145);
      (0, import_internal66.append_dev)(tr53, td146);
      (0, import_internal66.append_dev)(tbody5, t207);
      (0, import_internal66.append_dev)(tbody5, tr54);
      (0, import_internal66.append_dev)(tr54, td147);
      (0, import_internal66.append_dev)(tr54, td148);
      (0, import_internal66.append_dev)(tr54, td149);
      (0, import_internal66.append_dev)(tbody5, t211);
      (0, import_internal66.append_dev)(tbody5, tr55);
      (0, import_internal66.append_dev)(tr55, td150);
      (0, import_internal66.append_dev)(tr55, td151);
      (0, import_internal66.append_dev)(tr55, td152);
      (0, import_internal66.insert_dev)(target, t215, anchor);
      (0, import_internal66.insert_dev)(target, thead5, anchor);
      (0, import_internal66.append_dev)(thead5, tr56);
      (0, import_internal66.append_dev)(tr56, th7);
      (0, import_internal66.insert_dev)(target, t217, anchor);
      (0, import_internal66.insert_dev)(target, tbody6, anchor);
      (0, import_internal66.append_dev)(tbody6, tr57);
      (0, import_internal66.append_dev)(tr57, td153);
      (0, import_internal66.append_dev)(tr57, td154);
      (0, import_internal66.append_dev)(tr57, td155);
      (0, import_internal66.append_dev)(tbody6, t221);
      (0, import_internal66.append_dev)(tbody6, tr58);
      (0, import_internal66.append_dev)(tr58, td156);
      (0, import_internal66.append_dev)(tr58, td157);
      (0, import_internal66.append_dev)(tr58, td158);
      (0, import_internal66.append_dev)(tbody6, t225);
      (0, import_internal66.append_dev)(tbody6, tr59);
      (0, import_internal66.append_dev)(tr59, td159);
      (0, import_internal66.append_dev)(tr59, td160);
      (0, import_internal66.append_dev)(tr59, td161);
      (0, import_internal66.append_dev)(tbody6, t229);
      (0, import_internal66.append_dev)(tbody6, tr60);
      (0, import_internal66.append_dev)(tr60, td162);
      (0, import_internal66.append_dev)(tr60, td163);
      (0, import_internal66.append_dev)(tr60, td164);
      (0, import_internal66.append_dev)(tbody6, t233);
      (0, import_internal66.append_dev)(tbody6, tr61);
      (0, import_internal66.append_dev)(tr61, td165);
      (0, import_internal66.append_dev)(tr61, td166);
      (0, import_internal66.append_dev)(tr61, td167);
      (0, import_internal66.append_dev)(tbody6, t237);
      (0, import_internal66.append_dev)(tbody6, tr62);
      (0, import_internal66.append_dev)(tr62, td168);
      (0, import_internal66.append_dev)(tr62, td169);
      (0, import_internal66.append_dev)(tr62, td170);
      (0, import_internal66.append_dev)(tbody6, t241);
      (0, import_internal66.append_dev)(tbody6, tr63);
      (0, import_internal66.append_dev)(tr63, td171);
      (0, import_internal66.append_dev)(tr63, td172);
      (0, import_internal66.append_dev)(tr63, td173);
      (0, import_internal66.append_dev)(tbody6, t245);
      (0, import_internal66.append_dev)(tbody6, tr64);
      (0, import_internal66.append_dev)(tr64, td174);
      (0, import_internal66.append_dev)(tr64, td175);
      (0, import_internal66.append_dev)(tr64, td176);
      (0, import_internal66.append_dev)(tbody6, t249);
      (0, import_internal66.append_dev)(tbody6, tr65);
      (0, import_internal66.append_dev)(tr65, td177);
      (0, import_internal66.append_dev)(tr65, td178);
      (0, import_internal66.append_dev)(tr65, td179);
      (0, import_internal66.append_dev)(tbody6, t253);
      (0, import_internal66.append_dev)(tbody6, tr66);
      (0, import_internal66.append_dev)(tr66, td180);
      (0, import_internal66.append_dev)(tr66, td181);
      (0, import_internal66.append_dev)(tr66, td182);
      (0, import_internal66.append_dev)(tbody6, t257);
      (0, import_internal66.append_dev)(tbody6, tr67);
      (0, import_internal66.append_dev)(tr67, td183);
      (0, import_internal66.append_dev)(tr67, td184);
      (0, import_internal66.append_dev)(tr67, td185);
      (0, import_internal66.append_dev)(tbody6, t261);
      (0, import_internal66.append_dev)(tbody6, tr68);
      (0, import_internal66.append_dev)(tr68, td186);
      (0, import_internal66.append_dev)(tr68, td187);
      (0, import_internal66.append_dev)(tr68, td188);
      (0, import_internal66.insert_dev)(target, t265, anchor);
      (0, import_internal66.insert_dev)(target, tfoot, anchor);
      (0, import_internal66.append_dev)(tfoot, tr69);
      (0, import_internal66.append_dev)(tr69, td189);
      (0, import_internal66.append_dev)(tr69, td190);
    },
    p: import_internal66.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal66.detach_dev)(thead0);
      if (detaching)
        (0, import_internal66.detach_dev)(t3);
      if (detaching)
        (0, import_internal66.detach_dev)(thead1);
      if (detaching)
        (0, import_internal66.detach_dev)(t5);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody0);
      if (detaching)
        (0, import_internal66.detach_dev)(t29);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody1);
      if (detaching)
        (0, import_internal66.detach_dev)(t37);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody2);
      if (detaching)
        (0, import_internal66.detach_dev)(t65);
      if (detaching)
        (0, import_internal66.detach_dev)(thead2);
      if (detaching)
        (0, import_internal66.detach_dev)(t67);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody3);
      if (detaching)
        (0, import_internal66.detach_dev)(t115);
      if (detaching)
        (0, import_internal66.detach_dev)(thead3);
      if (detaching)
        (0, import_internal66.detach_dev)(t117);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody4);
      if (detaching)
        (0, import_internal66.detach_dev)(t165);
      if (detaching)
        (0, import_internal66.detach_dev)(thead4);
      if (detaching)
        (0, import_internal66.detach_dev)(t167);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody5);
      if (detaching)
        (0, import_internal66.detach_dev)(t215);
      if (detaching)
        (0, import_internal66.detach_dev)(thead5);
      if (detaching)
        (0, import_internal66.detach_dev)(t217);
      if (detaching)
        (0, import_internal66.detach_dev)(tbody6);
      if (detaching)
        (0, import_internal66.detach_dev)(t265);
      if (detaching)
        (0, import_internal66.detach_dev)(tfoot);
    }
  };
  (0, import_internal66.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot14.name,
    type: "slot",
    source: '(4:1) <Table round   rowSelector=\\".row-sel\\"   on:keydown=\\"{onKey}\\"   on:dblclick=\\"{onSelect}\\"   on:select=\\"{onSelect}\\">',
    ctx
  });
  return block;
}
function create_fragment66(ctx) {
  let h2;
  let t1;
  let div;
  let table;
  let t2;
  let codeexample;
  let t3;
  let api;
  let current;
  table = new Table_default({
    props: {
      round: true,
      rowSelector: ".row-sel",
      $$slots: { default: [create_default_slot14] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  table.$on("keydown", onKey);
  table.$on("dblclick", onSelect);
  table.$on("select", onSelect);
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal66.element)("h2");
      h2.textContent = "Table";
      t1 = (0, import_internal66.space)();
      div = (0, import_internal66.element)("div");
      (0, import_internal66.create_component)(table.$$.fragment);
      t2 = (0, import_internal66.space)();
      (0, import_internal66.create_component)(codeexample.$$.fragment);
      t3 = (0, import_internal66.space)();
      (0, import_internal66.create_component)(api.$$.fragment);
      (0, import_internal66.add_location)(h2, file60, 0, 0, 0);
      (0, import_internal66.attr_dev)(div, "class", "table-viewport");
      (0, import_internal66.add_location)(div, file60, 2, 0, 16);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal66.insert_dev)(target, h2, anchor);
      (0, import_internal66.insert_dev)(target, t1, anchor);
      (0, import_internal66.insert_dev)(target, div, anchor);
      (0, import_internal66.mount_component)(table, div, null);
      (0, import_internal66.insert_dev)(target, t2, anchor);
      (0, import_internal66.mount_component)(codeexample, target, anchor);
      (0, import_internal66.insert_dev)(target, t3, anchor);
      (0, import_internal66.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const table_changes = {};
      if (dirty & /*$$scope*/
      4) {
        table_changes.$$scope = { dirty, ctx: ctx2 };
      }
      table.$set(table_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal66.transition_in)(table.$$.fragment, local);
      (0, import_internal66.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal66.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal66.transition_out)(table.$$.fragment, local);
      (0, import_internal66.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal66.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal66.detach_dev)(h2);
      if (detaching)
        (0, import_internal66.detach_dev)(t1);
      if (detaching)
        (0, import_internal66.detach_dev)(div);
      (0, import_internal66.destroy_component)(table);
      if (detaching)
        (0, import_internal66.detach_dev)(t2);
      (0, import_internal66.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal66.detach_dev)(t3);
      (0, import_internal66.destroy_component)(api, detaching);
    }
  };
  (0, import_internal66.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment66.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onKey(e) {
  const { event: event2, selectedItem } = e.detail;
  if (event2.key === "Enter")
    console.log(selectedItem);
}
function onSelect(e) {
  const { selectedItem } = e.detail;
  console.log(e.type, selectedItem);
}
function instance66($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal66.validate_slots)("Table", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "data",
      type: "object",
      description: "Props to attach to the element's <em>dataset</em> attribute."
    },
    {
      name: "round",
      description: "Adds rounded corners to the table."
    },
    {
      name: "rowSelector",
      type: "string",
      default: "tbody tr",
      description: "A selector for a table row.<br>This is useful if a table needs row groups, in which case it would have a mix of TRs and TBODYs for rows. Both can have the same class, e.g. <em>.row</em> and this selector should then be provided here."
    },
    {
      name: "scrollContainer",
      type: ["string", "Element"],
      default: "table wrapper",
      description: "Selector or HTML Element to the scroll container. If table wrapper's height is not set to 100% of the container, and is taller than the container - the container will have to be scrollable, and in this case it must be provided here."
    },
    {
      name: "scrollCorrectionOffset",
      type: "number",
      default: "0",
      description: "If an external <em>scrollContainer</em> is used - it is possible that it will have non-zero padding set, thus the table wrapper will be offset from the beginning of the container. This offset should be set here, so that the sticky headers work correctly."
    },
    {
      name: "selectable",
      type: ["true", "false"],
      description: "Makes table rows selectable with mouse and adds keyboard navigation."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:click",
      type: "function",
      description: "Triggered after a row has been clicked."
    },
    {
      name: "on:dblclick",
      type: "function",
      description: "Triggered after a row has been double-clicked."
    },
    {
      name: "on:keydown",
      type: "function",
      description: "Triggered after key has been pressed."
    },
    {
      name: "on:select",
      type: "function",
      description: "Triggered after a row selection has changed."
    }
  ];
  const exampleHtml = `
<Table rowSelector=".row-sel" round data="{{ id: 'table-id-1' }}">
		<thead>
			<tr><th>Year</th><th>Month</th><th>Price</th></tr>
		</thead>
		<thead>
			<tr><th colspan="3">Year: 2021</th></tr>
		</thead>
		<tbody>
			<tr class="row-sel"><td>2021</td><td>January</td><td>$100</td></tr>
			<tr class="row-sel"><td>2021</td><td>February</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>March</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>April</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>May</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>June</td><td>$80</td></tr>
		</tbody>
		<tbody class="row-sel row-group">
			<tr><td>2021</td><td>April 1</td><td>$80</td></tr>
			<tr><td>2021</td><td>April 2</td><td>$80</td></tr>
		</tbody>
		<tbody>
			<tr class="row-sel"><td>2021</td><td>May</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>July</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>August</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>September</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>October</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>November</td><td>$80</td></tr>
			<tr class="row-sel"><td>2021</td><td>December</td><td>$80</td></tr>
		</tbody>
		<thead>
			<tr><th colspan="3">Year: 2020</th></tr>
		</thead>
		<tbody>
			...
		</tbody>
		<tfoot>
			<tr><td colspan="2">Sum</td><td>$180</td></tr>
		</tfoot>
	</Table>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_111.warn(`<Table> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Table: Table_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    onKey,
    onSelect
  });
  return [apiProps, exampleHtml];
}
var Table_1 = class extends import_internal66.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal66.init)(this, options, instance66, create_fragment66, import_internal66.safe_not_equal, {});
    (0, import_internal66.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Table_1",
      options,
      id: create_fragment66.name
    });
  }
};
var Table_default2 = Table_1;

// docs-src/components/tree/Tree.svelte
var import_internal67 = __toESM(require_internal());
var { console: console_112 } = import_internal67.globals;
var file61 = "docs-src/components/tree/Tree.svelte";
function create_fragment67(ctx) {
  let h2;
  let t1;
  let div;
  let tree;
  let t2;
  let codeexample;
  let t3;
  let api;
  let current;
  tree = new Tree_default({
    props: { items: (
      /*items*/
      ctx[2]
    ) },
    $$inline: true
  });
  tree.$on("select", onSelect2);
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal67.element)("h2");
      h2.textContent = "Tree";
      t1 = (0, import_internal67.space)();
      div = (0, import_internal67.element)("div");
      (0, import_internal67.create_component)(tree.$$.fragment);
      t2 = (0, import_internal67.space)();
      (0, import_internal67.create_component)(codeexample.$$.fragment);
      t3 = (0, import_internal67.space)();
      (0, import_internal67.create_component)(api.$$.fragment);
      (0, import_internal67.add_location)(h2, file61, 0, 0, 0);
      (0, import_internal67.set_style)(div, "display", "inline-block");
      (0, import_internal67.set_style)(div, "width", "200px");
      (0, import_internal67.add_location)(div, file61, 2, 0, 15);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal67.insert_dev)(target, h2, anchor);
      (0, import_internal67.insert_dev)(target, t1, anchor);
      (0, import_internal67.insert_dev)(target, div, anchor);
      (0, import_internal67.mount_component)(tree, div, null);
      (0, import_internal67.insert_dev)(target, t2, anchor);
      (0, import_internal67.mount_component)(codeexample, target, anchor);
      (0, import_internal67.insert_dev)(target, t3, anchor);
      (0, import_internal67.mount_component)(api, target, anchor);
      current = true;
    },
    p: import_internal67.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal67.transition_in)(tree.$$.fragment, local);
      (0, import_internal67.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal67.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal67.transition_out)(tree.$$.fragment, local);
      (0, import_internal67.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal67.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal67.detach_dev)(h2);
      if (detaching)
        (0, import_internal67.detach_dev)(t1);
      if (detaching)
        (0, import_internal67.detach_dev)(div);
      (0, import_internal67.destroy_component)(tree);
      if (detaching)
        (0, import_internal67.detach_dev)(t2);
      (0, import_internal67.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal67.detach_dev)(t3);
      (0, import_internal67.destroy_component)(api, detaching);
    }
  };
  (0, import_internal67.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment67.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function onSelect2(e) {
  console.log(e.detail);
}
function instance67($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal67.validate_slots)("Tree", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "title",
      type: "string",
      description: "Title of the component."
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    },
    {
      name: "on:select",
      type: "function",
      description: "Triggered after an item was selected."
    }
  ];
  const exampleHtml = `
<Tree {items} on:select="{onSelect}"/>

<script>
const items = [
	{ id: 1, name: 'One' },
	{ id: 2, name: 'Two', items: [
		{ id: 21, name: 'One' },
		{ id: 22, name: 'Two' },
		{ id: 23, name: 'Three', items: [
			{ id: 231, name: 'One' },
			{ id: 232, name: 'Two' },
		] },
		{ id: 24, name: 'Four' },
	] },
	{ id: 3, name: 'Three' },
];

function onSelect (e) {
	console.log(e.detail);
}
&lt;/script>
`;
  const items = [
    { id: 1, name: "One" },
    { id: 2, name: "Two" },
    { id: 3, name: "Three" },
    {
      id: 4,
      name: "Four",
      items: [
        { id: 41, name: "One" },
        { id: 42, name: "Two" },
        { id: 43, name: "Three" },
        {
          id: 44,
          name: "Four",
          items: [
            { id: 441, name: "One" },
            { id: 442, name: "Two" },
            { id: 443, name: "Three" },
            { id: 444, name: "Four" },
            { id: 445, name: "Five" },
            { id: 446, name: "Six" },
            {
              id: 447,
              name: "Seven",
              items: [
                { id: 4471, name: "One" },
                { id: 4472, name: "Two" },
                { id: 4473, name: "Three" },
                { id: 4474, name: "Four" },
                { id: 4475, name: "Five" },
                { id: 4476, name: "Six" },
                { id: 4477, name: "Seven" },
                { id: 4478, name: "Eight" },
                { id: 4479, name: "Nine" },
                { id: 44710, name: "Ten" }
              ]
            },
            { id: 448, name: "Eight" },
            { id: 449, name: "Nine" },
            { id: 4410, name: "Ten" }
          ]
        },
        { id: 45, name: "Five" },
        { id: 46, name: "Six" },
        { id: 47, name: "Seven" },
        { id: 48, name: "Eight" },
        { id: 49, name: "Nine" },
        { id: 410, name: "Ten" }
      ]
    },
    { id: 5, name: "Five" },
    { id: 6, name: "Six" },
    {
      id: 7,
      name: "Seven",
      items: [
        { id: 71, name: "One" },
        { id: 72, name: "Two" },
        { id: 73, name: "Three" },
        { id: 74, name: "Four" },
        { id: 75, name: "Five" },
        { id: 76, name: "Six" },
        { id: 77, name: "Seven" },
        { id: 78, name: "Eight" },
        { id: 79, name: "Nine" },
        { id: 710, name: "Ten" }
      ]
    },
    { id: 8, name: "Eight" },
    { id: 9, name: "Nine" },
    { id: 10, name: "Ten" }
  ];
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_112.warn(`<Tree> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Tree: Tree_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml,
    onSelect: onSelect2,
    items
  });
  return [apiProps, exampleHtml, items];
}
var Tree_1 = class extends import_internal67.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal67.init)(this, options, instance67, create_fragment67, import_internal67.safe_not_equal, {});
    (0, import_internal67.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Tree_1",
      options,
      id: create_fragment67.name
    });
  }
};
var Tree_default2 = Tree_1;

// docs-src/components/icon/Icon.svelte
var import_internal68 = __toESM(require_internal());
var { Object: Object_15 } = import_internal68.globals;
var file62 = "docs-src/components/icon/Icon.svelte";
function get_each_context11(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  return child_ctx;
}
function create_each_block11(ctx) {
  let div2;
  let div0;
  let icon;
  let t0;
  let div1;
  let t1_value = (
    /*icon*/
    ctx[3] + ""
  );
  let t1;
  let t2;
  let div2_title_value;
  let current;
  icon = new Icon_default({
    props: { name: (
      /*icon*/
      ctx[3]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      div2 = (0, import_internal68.element)("div");
      div0 = (0, import_internal68.element)("div");
      (0, import_internal68.create_component)(icon.$$.fragment);
      t0 = (0, import_internal68.space)();
      div1 = (0, import_internal68.element)("div");
      t1 = (0, import_internal68.text)(t1_value);
      t2 = (0, import_internal68.space)();
      (0, import_internal68.attr_dev)(div0, "class", "icon-block-icon");
      (0, import_internal68.add_location)(div0, file62, 4, 3, 116);
      (0, import_internal68.attr_dev)(div1, "class", "icon-block-name");
      (0, import_internal68.add_location)(div1, file62, 5, 3, 176);
      (0, import_internal68.attr_dev)(div2, "class", "icon-block");
      (0, import_internal68.attr_dev)(div2, "title", div2_title_value = /*icon*/
      ctx[3]);
      (0, import_internal68.add_location)(div2, file62, 3, 2, 73);
    },
    m: function mount(target, anchor) {
      (0, import_internal68.insert_dev)(target, div2, anchor);
      (0, import_internal68.append_dev)(div2, div0);
      (0, import_internal68.mount_component)(icon, div0, null);
      (0, import_internal68.append_dev)(div2, t0);
      (0, import_internal68.append_dev)(div2, div1);
      (0, import_internal68.append_dev)(div1, t1);
      (0, import_internal68.append_dev)(div2, t2);
      current = true;
    },
    p: import_internal68.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal68.transition_in)(icon.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal68.transition_out)(icon.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal68.detach_dev)(div2);
      (0, import_internal68.destroy_component)(icon);
    }
  };
  (0, import_internal68.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_each_block11.name,
    type: "each",
    source: "(3:1) {#each Object.keys(icons) as icon}",
    ctx
  });
  return block;
}
function create_default_slot15(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal68.text)("Custom Icon Button");
    },
    m: function mount(target, anchor) {
      (0, import_internal68.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal68.detach_dev)(t);
    }
  };
  (0, import_internal68.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot15.name,
    type: "slot",
    source: '(12:0) <Button icon=\\"customIcon\\">',
    ctx
  });
  return block;
}
function create_fragment68(ctx) {
  let h20;
  let t1;
  let div;
  let t2;
  let h21;
  let t4;
  let button;
  let t5;
  let codeexample;
  let t6;
  let api0;
  let t7;
  let api1;
  let current;
  let each_value = Object.keys(icons);
  (0, import_internal68.validate_each_argument)(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block11(get_each_context11(ctx, each_value, i));
  }
  const out = (i) => (0, import_internal68.transition_out)(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  button = new Button_default({
    props: {
      icon: "customIcon",
      $$slots: { default: [create_default_slot15] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[2]
    ) },
    $$inline: true
  });
  api0 = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  api1 = new ApiTable_default({
    props: {
      props: (
        /*addIconAPI*/
        ctx[1]
      ),
      title: "addIcon function",
      description: "A component exports a global <em>addIcon</em> function with the following arguments:"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h20 = (0, import_internal68.element)("h2");
      h20.textContent = "Icons";
      t1 = (0, import_internal68.space)();
      div = (0, import_internal68.element)("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = (0, import_internal68.space)();
      h21 = (0, import_internal68.element)("h2");
      h21.textContent = "Custom Icon";
      t4 = (0, import_internal68.space)();
      (0, import_internal68.create_component)(button.$$.fragment);
      t5 = (0, import_internal68.space)();
      (0, import_internal68.create_component)(codeexample.$$.fragment);
      t6 = (0, import_internal68.space)();
      (0, import_internal68.create_component)(api0.$$.fragment);
      t7 = (0, import_internal68.space)();
      (0, import_internal68.create_component)(api1.$$.fragment);
      (0, import_internal68.add_location)(h20, file62, 0, 0, 0);
      (0, import_internal68.attr_dev)(div, "class", "icons");
      (0, import_internal68.add_location)(div, file62, 1, 0, 15);
      (0, import_internal68.add_location)(h21, file62, 10, 0, 244);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal68.insert_dev)(target, h20, anchor);
      (0, import_internal68.insert_dev)(target, t1, anchor);
      (0, import_internal68.insert_dev)(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      (0, import_internal68.insert_dev)(target, t2, anchor);
      (0, import_internal68.insert_dev)(target, h21, anchor);
      (0, import_internal68.insert_dev)(target, t4, anchor);
      (0, import_internal68.mount_component)(button, target, anchor);
      (0, import_internal68.insert_dev)(target, t5, anchor);
      (0, import_internal68.mount_component)(codeexample, target, anchor);
      (0, import_internal68.insert_dev)(target, t6, anchor);
      (0, import_internal68.mount_component)(api0, target, anchor);
      (0, import_internal68.insert_dev)(target, t7, anchor);
      (0, import_internal68.mount_component)(api1, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*Object, icons*/
      0) {
        each_value = Object.keys(icons);
        (0, import_internal68.validate_each_argument)(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context11(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            (0, import_internal68.transition_in)(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block11(child_ctx);
            each_blocks[i].c();
            (0, import_internal68.transition_in)(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        (0, import_internal68.group_outros)();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        (0, import_internal68.check_outros)();
      }
      const button_changes = {};
      if (dirty & /*$$scope*/
      64) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        (0, import_internal68.transition_in)(each_blocks[i]);
      }
      (0, import_internal68.transition_in)(button.$$.fragment, local);
      (0, import_internal68.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal68.transition_in)(api0.$$.fragment, local);
      (0, import_internal68.transition_in)(api1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        (0, import_internal68.transition_out)(each_blocks[i]);
      }
      (0, import_internal68.transition_out)(button.$$.fragment, local);
      (0, import_internal68.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal68.transition_out)(api0.$$.fragment, local);
      (0, import_internal68.transition_out)(api1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal68.detach_dev)(h20);
      if (detaching)
        (0, import_internal68.detach_dev)(t1);
      if (detaching)
        (0, import_internal68.detach_dev)(div);
      (0, import_internal68.destroy_each)(each_blocks, detaching);
      if (detaching)
        (0, import_internal68.detach_dev)(t2);
      if (detaching)
        (0, import_internal68.detach_dev)(h21);
      if (detaching)
        (0, import_internal68.detach_dev)(t4);
      (0, import_internal68.destroy_component)(button, detaching);
      if (detaching)
        (0, import_internal68.detach_dev)(t5);
      (0, import_internal68.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal68.detach_dev)(t6);
      (0, import_internal68.destroy_component)(api0, detaching);
      if (detaching)
        (0, import_internal68.detach_dev)(t7);
      (0, import_internal68.destroy_component)(api1, detaching);
    }
  };
  (0, import_internal68.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment68.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance68($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal68.validate_slots)("Icon", slots2, []);
  addIcon("customIcon", "<[CUSTOM ICON]>");
  const apiProps = [
    {
      name: "name",
      type: "string",
      description: "Name of the icon."
    }
  ];
  const addIconAPI = [
    {
      name: "name",
      type: "string",
      description: "Name of the custom icon."
    },
    {
      name: "svg",
      type: "string",
      description: "SVG code."
    }
  ];
  const exampleHtml = `
<Icon name="alert"/>
<Icon name="customIcon"/>

<script>
	import { addIcon } from '@perfectthings/ui';

	addIcon('customIcon', '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24">...</svg>');
&lt;/script>
`;
  const writable_props = [];
  Object_15.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Icon> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Icon: Icon_default,
    icons,
    addIcon,
    Button: Button_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    addIconAPI,
    exampleHtml
  });
  return [apiProps, addIconAPI, exampleHtml];
}
var Icon_1 = class extends import_internal68.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal68.init)(this, options, instance68, create_fragment68, import_internal68.safe_not_equal, {});
    (0, import_internal68.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Icon_1",
      options,
      id: create_fragment68.name
    });
  }
};
var Icon_default2 = Icon_1;

// docs-src/components/notification-center/NotificationCenter.svelte
var import_internal69 = __toESM(require_internal());
var { console: console_113 } = import_internal69.globals;
var file63 = "docs-src/components/notification-center/NotificationCenter.svelte";
function create_default_slot_76(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show info");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_76.name,
    type: "slot",
    source: `(31:1) <Button info on:click=\\"{() => showNotification('Hello')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_67(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show success");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_67.name,
    type: "slot",
    source: `(32:1) <Button success on:click=\\"{() => showNotification('Hello', 'success')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_57(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_57.name,
    type: "slot",
    source: `(33:1) <Button warning on:click=\\"{() => showNotification('Hello', 'warning')}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_410(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show error for 10s");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_410.name,
    type: "slot",
    source: `(34:1) <Button danger on:click=\\"{() => showNotification('Hello', 'error', 10000, 'Undo', cb)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_316(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("A very long message");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_316.name,
    type: "slot",
    source: `(39:1) <Button info on:click=\\"{() => showNotification('This is a very long message in a toast, to show how the long text will wrap inside the toast message.', 'info', false)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_218(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show success");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_218.name,
    type: "slot",
    source: `(40:1) <Button success on:click=\\"{() => showNotification('Hello', 'success', false)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot_119(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show warning");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_119.name,
    type: "slot",
    source: `(41:1) <Button warning on:click=\\"{() => showNotification('Hello', 'warning', false)}\\">`,
    ctx
  });
  return block;
}
function create_default_slot16(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal69.text)("Show error");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(t);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot16.name,
    type: "slot",
    source: `(42:1) <Button danger on:click=\\"{() => showNotification('Hello', 'error', false)}\\">`,
    ctx
  });
  return block;
}
function create_fragment69(ctx) {
  let h2;
  let t1;
  let p0;
  let t2;
  let b0;
  let t4;
  let b1;
  let t6;
  let t7;
  let p1;
  let t8;
  let br0;
  let t9;
  let em;
  let t11;
  let b2;
  let t13;
  let b3;
  let t15;
  let t16;
  let p2;
  let t17;
  let b4;
  let t19;
  let br1;
  let t20;
  let t21;
  let p3;
  let t22;
  let b5;
  let t24;
  let t25;
  let hr;
  let t26;
  let h30;
  let t28;
  let div0;
  let label0;
  let t30;
  let notificationcenter;
  let t31;
  let div1;
  let label1;
  let t33;
  let toggle;
  let updating_value;
  let t34;
  let h31;
  let t36;
  let div2;
  let button0;
  let t37;
  let button1;
  let t38;
  let button2;
  let t39;
  let button3;
  let t40;
  let h32;
  let t42;
  let div3;
  let button4;
  let t43;
  let button5;
  let t44;
  let button6;
  let t45;
  let button7;
  let t46;
  let codeexample;
  let t47;
  let api0;
  let t48;
  let api1;
  let t49;
  let api2;
  let current;
  notificationcenter = new NotificationCenter_default({
    props: {
      outline: true,
      round: true,
      hideButton: (
        /*hideButton*/
        ctx[0]
      )
    },
    $$inline: true
  });
  function toggle_value_binding(value2) {
    ctx[6](value2);
  }
  let toggle_props = { id: "button-toggle" };
  if (
    /*hideButton*/
    ctx[0] !== void 0
  ) {
    toggle_props.value = /*hideButton*/
    ctx[0];
  }
  toggle = new Toggle_default({ props: toggle_props, $$inline: true });
  import_internal69.binding_callbacks.push(() => (0, import_internal69.bind)(toggle, "value", toggle_value_binding));
  button0 = new Button_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot_76] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button0.$on(
    "click",
    /*click_handler*/
    ctx[7]
  );
  button1 = new Button_default({
    props: {
      success: true,
      $$slots: { default: [create_default_slot_67] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button1.$on(
    "click",
    /*click_handler_1*/
    ctx[8]
  );
  button2 = new Button_default({
    props: {
      warning: true,
      $$slots: { default: [create_default_slot_57] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button2.$on(
    "click",
    /*click_handler_2*/
    ctx[9]
  );
  button3 = new Button_default({
    props: {
      danger: true,
      $$slots: { default: [create_default_slot_410] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button3.$on(
    "click",
    /*click_handler_3*/
    ctx[10]
  );
  button4 = new Button_default({
    props: {
      info: true,
      $$slots: { default: [create_default_slot_316] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button4.$on(
    "click",
    /*click_handler_4*/
    ctx[11]
  );
  button5 = new Button_default({
    props: {
      success: true,
      $$slots: { default: [create_default_slot_218] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button5.$on(
    "click",
    /*click_handler_5*/
    ctx[12]
  );
  button6 = new Button_default({
    props: {
      warning: true,
      $$slots: { default: [create_default_slot_119] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button6.$on(
    "click",
    /*click_handler_6*/
    ctx[13]
  );
  button7 = new Button_default({
    props: {
      danger: true,
      $$slots: { default: [create_default_slot16] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button7.$on(
    "click",
    /*click_handler_7*/
    ctx[14]
  );
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[4]
    ) },
    $$inline: true
  });
  api0 = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[1]
    ) },
    $$inline: true
  });
  api1 = new ApiTable_default({
    props: {
      props: (
        /*showNotificationAPI*/
        ctx[2]
      ),
      title: "showNotification function",
      description: "A component exports a global <em>showNotification</em> function with the following arguments:"
    },
    $$inline: true
  });
  api2 = new ApiTable_default({
    props: {
      props: (
        /*hideNotificationAPI*/
        ctx[3]
      ),
      title: "hideNotification function",
      description: "A component exports a global <em>hideNotification</em> function with the following arguments:"
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal69.element)("h2");
      h2.textContent = "Notification Center";
      t1 = (0, import_internal69.space)();
      p0 = (0, import_internal69.element)("p");
      t2 = (0, import_internal69.text)("With the aim of improving accessibility and usability, the ");
      b0 = (0, import_internal69.element)("b");
      b0.textContent = "Toaster";
      t4 = (0, import_internal69.text)(" component has been redesigned into a ");
      b1 = (0, import_internal69.element)("b");
      b1.textContent = "NotificationCenter";
      t6 = (0, import_internal69.text)(".");
      t7 = (0, import_internal69.space)();
      p1 = (0, import_internal69.element)("p");
      t8 = (0, import_internal69.text)('This component renders a bell button that shows a list of "archived" notifications when clicked.');
      br0 = (0, import_internal69.element)("br");
      t9 = (0, import_internal69.text)("\nButton can be hidden using the ");
      em = (0, import_internal69.element)("em");
      em.textContent = 'hideButton="true"';
      t11 = (0, import_internal69.text)(" property, in which case the ");
      b2 = (0, import_internal69.element)("b");
      b2.textContent = "NotificationCenter";
      t13 = (0, import_internal69.text)(" will work as a regular ");
      b3 = (0, import_internal69.element)("b");
      b3.textContent = "Toaster";
      t15 = (0, import_internal69.text)(" component.");
      t16 = (0, import_internal69.space)();
      p2 = (0, import_internal69.element)("p");
      t17 = (0, import_internal69.text)(`A notification first shows normally on screen, then, when it's dismissed or auto-closed, it's moved to the "archive" and available in the `);
      b4 = (0, import_internal69.element)("b");
      b4.textContent = "NotificationCenter";
      t19 = (0, import_internal69.text)(".");
      br1 = (0, import_internal69.element)("br");
      t20 = (0, import_internal69.text)("\nNotifications remain in the archive as long as the user remains on the page. When the user navigates away from the page, or reloads it, the archive is cleared.");
      t21 = (0, import_internal69.space)();
      p3 = (0, import_internal69.element)("p");
      t22 = (0, import_internal69.text)("The goal of the ");
      b5 = (0, import_internal69.element)("b");
      b5.textContent = "NotificationCenter";
      t24 = (0, import_internal69.text)(" is to allow the user to read the notifications that they may have missed.");
      t25 = (0, import_internal69.space)();
      hr = (0, import_internal69.element)("hr");
      t26 = (0, import_internal69.space)();
      h30 = (0, import_internal69.element)("h3");
      h30.textContent = "Notification button";
      t28 = (0, import_internal69.space)();
      div0 = (0, import_internal69.element)("div");
      label0 = (0, import_internal69.element)("label");
      label0.textContent = "Toggle notification center:";
      t30 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(notificationcenter.$$.fragment);
      t31 = (0, import_internal69.space)();
      div1 = (0, import_internal69.element)("div");
      label1 = (0, import_internal69.element)("label");
      label1.textContent = "Hide button:";
      t33 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(toggle.$$.fragment);
      t34 = (0, import_internal69.space)();
      h31 = (0, import_internal69.element)("h3");
      h31.textContent = "Notifications";
      t36 = (0, import_internal69.space)();
      div2 = (0, import_internal69.element)("div");
      (0, import_internal69.create_component)(button0.$$.fragment);
      t37 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(button1.$$.fragment);
      t38 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(button2.$$.fragment);
      t39 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(button3.$$.fragment);
      t40 = (0, import_internal69.space)();
      h32 = (0, import_internal69.element)("h3");
      h32.textContent = "No auto-close";
      t42 = (0, import_internal69.space)();
      div3 = (0, import_internal69.element)("div");
      (0, import_internal69.create_component)(button4.$$.fragment);
      t43 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(button5.$$.fragment);
      t44 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(button6.$$.fragment);
      t45 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(button7.$$.fragment);
      t46 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(codeexample.$$.fragment);
      t47 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(api0.$$.fragment);
      t48 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(api1.$$.fragment);
      t49 = (0, import_internal69.space)();
      (0, import_internal69.create_component)(api2.$$.fragment);
      (0, import_internal69.add_location)(h2, file63, 0, 0, 0);
      (0, import_internal69.add_location)(b0, file63, 2, 62, 92);
      (0, import_internal69.add_location)(b1, file63, 2, 114, 144);
      (0, import_internal69.add_location)(p0, file63, 2, 0, 30);
      (0, import_internal69.add_location)(br0, file63, 4, 99, 275);
      (0, import_internal69.add_location)(em, file63, 5, 31, 311);
      (0, import_internal69.add_location)(b2, file63, 5, 86, 366);
      (0, import_internal69.add_location)(b3, file63, 5, 135, 415);
      (0, import_internal69.add_location)(p1, file63, 4, 0, 176);
      (0, import_internal69.add_location)(b4, file63, 7, 141, 587);
      (0, import_internal69.add_location)(br1, file63, 7, 167, 613);
      (0, import_internal69.add_location)(p2, file63, 7, 0, 446);
      (0, import_internal69.add_location)(b5, file63, 10, 19, 802);
      (0, import_internal69.add_location)(p3, file63, 10, 0, 783);
      (0, import_internal69.add_location)(hr, file63, 12, 0, 907);
      (0, import_internal69.add_location)(h30, file63, 14, 0, 913);
      (0, import_internal69.add_location)(label0, file63, 18, 1, 1025);
      (0, import_internal69.attr_dev)(div0, "class", "prop-row");
      (0, import_internal69.add_location)(div0, file63, 16, 0, 943);
      (0, import_internal69.attr_dev)(label1, "for", "button-toggle");
      (0, import_internal69.add_location)(label1, file63, 22, 1, 1151);
      (0, import_internal69.attr_dev)(div1, "class", "prop-row");
      (0, import_internal69.add_location)(div1, file63, 21, 0, 1127);
      (0, import_internal69.add_location)(h31, file63, 28, 0, 1267);
      (0, import_internal69.attr_dev)(div2, "class", "docs-buttons-row");
      (0, import_internal69.add_location)(div2, file63, 29, 0, 1290);
      (0, import_internal69.add_location)(h32, file63, 36, 0, 1714);
      (0, import_internal69.attr_dev)(div3, "class", "docs-buttons-row");
      (0, import_internal69.add_location)(div3, file63, 37, 0, 1737);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal69.insert_dev)(target, h2, anchor);
      (0, import_internal69.insert_dev)(target, t1, anchor);
      (0, import_internal69.insert_dev)(target, p0, anchor);
      (0, import_internal69.append_dev)(p0, t2);
      (0, import_internal69.append_dev)(p0, b0);
      (0, import_internal69.append_dev)(p0, t4);
      (0, import_internal69.append_dev)(p0, b1);
      (0, import_internal69.append_dev)(p0, t6);
      (0, import_internal69.insert_dev)(target, t7, anchor);
      (0, import_internal69.insert_dev)(target, p1, anchor);
      (0, import_internal69.append_dev)(p1, t8);
      (0, import_internal69.append_dev)(p1, br0);
      (0, import_internal69.append_dev)(p1, t9);
      (0, import_internal69.append_dev)(p1, em);
      (0, import_internal69.append_dev)(p1, t11);
      (0, import_internal69.append_dev)(p1, b2);
      (0, import_internal69.append_dev)(p1, t13);
      (0, import_internal69.append_dev)(p1, b3);
      (0, import_internal69.append_dev)(p1, t15);
      (0, import_internal69.insert_dev)(target, t16, anchor);
      (0, import_internal69.insert_dev)(target, p2, anchor);
      (0, import_internal69.append_dev)(p2, t17);
      (0, import_internal69.append_dev)(p2, b4);
      (0, import_internal69.append_dev)(p2, t19);
      (0, import_internal69.append_dev)(p2, br1);
      (0, import_internal69.append_dev)(p2, t20);
      (0, import_internal69.insert_dev)(target, t21, anchor);
      (0, import_internal69.insert_dev)(target, p3, anchor);
      (0, import_internal69.append_dev)(p3, t22);
      (0, import_internal69.append_dev)(p3, b5);
      (0, import_internal69.append_dev)(p3, t24);
      (0, import_internal69.insert_dev)(target, t25, anchor);
      (0, import_internal69.insert_dev)(target, hr, anchor);
      (0, import_internal69.insert_dev)(target, t26, anchor);
      (0, import_internal69.insert_dev)(target, h30, anchor);
      (0, import_internal69.insert_dev)(target, t28, anchor);
      (0, import_internal69.insert_dev)(target, div0, anchor);
      (0, import_internal69.append_dev)(div0, label0);
      (0, import_internal69.append_dev)(div0, t30);
      (0, import_internal69.mount_component)(notificationcenter, div0, null);
      (0, import_internal69.insert_dev)(target, t31, anchor);
      (0, import_internal69.insert_dev)(target, div1, anchor);
      (0, import_internal69.append_dev)(div1, label1);
      (0, import_internal69.append_dev)(div1, t33);
      (0, import_internal69.mount_component)(toggle, div1, null);
      (0, import_internal69.insert_dev)(target, t34, anchor);
      (0, import_internal69.insert_dev)(target, h31, anchor);
      (0, import_internal69.insert_dev)(target, t36, anchor);
      (0, import_internal69.insert_dev)(target, div2, anchor);
      (0, import_internal69.mount_component)(button0, div2, null);
      (0, import_internal69.append_dev)(div2, t37);
      (0, import_internal69.mount_component)(button1, div2, null);
      (0, import_internal69.append_dev)(div2, t38);
      (0, import_internal69.mount_component)(button2, div2, null);
      (0, import_internal69.append_dev)(div2, t39);
      (0, import_internal69.mount_component)(button3, div2, null);
      (0, import_internal69.insert_dev)(target, t40, anchor);
      (0, import_internal69.insert_dev)(target, h32, anchor);
      (0, import_internal69.insert_dev)(target, t42, anchor);
      (0, import_internal69.insert_dev)(target, div3, anchor);
      (0, import_internal69.mount_component)(button4, div3, null);
      (0, import_internal69.append_dev)(div3, t43);
      (0, import_internal69.mount_component)(button5, div3, null);
      (0, import_internal69.append_dev)(div3, t44);
      (0, import_internal69.mount_component)(button6, div3, null);
      (0, import_internal69.append_dev)(div3, t45);
      (0, import_internal69.mount_component)(button7, div3, null);
      (0, import_internal69.insert_dev)(target, t46, anchor);
      (0, import_internal69.mount_component)(codeexample, target, anchor);
      (0, import_internal69.insert_dev)(target, t47, anchor);
      (0, import_internal69.mount_component)(api0, target, anchor);
      (0, import_internal69.insert_dev)(target, t48, anchor);
      (0, import_internal69.mount_component)(api1, target, anchor);
      (0, import_internal69.insert_dev)(target, t49, anchor);
      (0, import_internal69.mount_component)(api2, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const notificationcenter_changes = {};
      if (dirty & /*hideButton*/
      1)
        notificationcenter_changes.hideButton = /*hideButton*/
        ctx2[0];
      notificationcenter.$set(notificationcenter_changes);
      const toggle_changes = {};
      if (!updating_value && dirty & /*hideButton*/
      1) {
        updating_value = true;
        toggle_changes.value = /*hideButton*/
        ctx2[0];
        (0, import_internal69.add_flush_callback)(() => updating_value = false);
      }
      toggle.$set(toggle_changes);
      const button0_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button0.$set(button0_changes);
      const button1_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button1.$set(button1_changes);
      const button2_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button2.$set(button2_changes);
      const button3_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button3.$set(button3_changes);
      const button4_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button4.$set(button4_changes);
      const button5_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button5.$set(button5_changes);
      const button6_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button6.$set(button6_changes);
      const button7_changes = {};
      if (dirty & /*$$scope*/
      32768) {
        button7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button7.$set(button7_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal69.transition_in)(notificationcenter.$$.fragment, local);
      (0, import_internal69.transition_in)(toggle.$$.fragment, local);
      (0, import_internal69.transition_in)(button0.$$.fragment, local);
      (0, import_internal69.transition_in)(button1.$$.fragment, local);
      (0, import_internal69.transition_in)(button2.$$.fragment, local);
      (0, import_internal69.transition_in)(button3.$$.fragment, local);
      (0, import_internal69.transition_in)(button4.$$.fragment, local);
      (0, import_internal69.transition_in)(button5.$$.fragment, local);
      (0, import_internal69.transition_in)(button6.$$.fragment, local);
      (0, import_internal69.transition_in)(button7.$$.fragment, local);
      (0, import_internal69.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal69.transition_in)(api0.$$.fragment, local);
      (0, import_internal69.transition_in)(api1.$$.fragment, local);
      (0, import_internal69.transition_in)(api2.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal69.transition_out)(notificationcenter.$$.fragment, local);
      (0, import_internal69.transition_out)(toggle.$$.fragment, local);
      (0, import_internal69.transition_out)(button0.$$.fragment, local);
      (0, import_internal69.transition_out)(button1.$$.fragment, local);
      (0, import_internal69.transition_out)(button2.$$.fragment, local);
      (0, import_internal69.transition_out)(button3.$$.fragment, local);
      (0, import_internal69.transition_out)(button4.$$.fragment, local);
      (0, import_internal69.transition_out)(button5.$$.fragment, local);
      (0, import_internal69.transition_out)(button6.$$.fragment, local);
      (0, import_internal69.transition_out)(button7.$$.fragment, local);
      (0, import_internal69.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal69.transition_out)(api0.$$.fragment, local);
      (0, import_internal69.transition_out)(api1.$$.fragment, local);
      (0, import_internal69.transition_out)(api2.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal69.detach_dev)(h2);
      if (detaching)
        (0, import_internal69.detach_dev)(t1);
      if (detaching)
        (0, import_internal69.detach_dev)(p0);
      if (detaching)
        (0, import_internal69.detach_dev)(t7);
      if (detaching)
        (0, import_internal69.detach_dev)(p1);
      if (detaching)
        (0, import_internal69.detach_dev)(t16);
      if (detaching)
        (0, import_internal69.detach_dev)(p2);
      if (detaching)
        (0, import_internal69.detach_dev)(t21);
      if (detaching)
        (0, import_internal69.detach_dev)(p3);
      if (detaching)
        (0, import_internal69.detach_dev)(t25);
      if (detaching)
        (0, import_internal69.detach_dev)(hr);
      if (detaching)
        (0, import_internal69.detach_dev)(t26);
      if (detaching)
        (0, import_internal69.detach_dev)(h30);
      if (detaching)
        (0, import_internal69.detach_dev)(t28);
      if (detaching)
        (0, import_internal69.detach_dev)(div0);
      (0, import_internal69.destroy_component)(notificationcenter);
      if (detaching)
        (0, import_internal69.detach_dev)(t31);
      if (detaching)
        (0, import_internal69.detach_dev)(div1);
      (0, import_internal69.destroy_component)(toggle);
      if (detaching)
        (0, import_internal69.detach_dev)(t34);
      if (detaching)
        (0, import_internal69.detach_dev)(h31);
      if (detaching)
        (0, import_internal69.detach_dev)(t36);
      if (detaching)
        (0, import_internal69.detach_dev)(div2);
      (0, import_internal69.destroy_component)(button0);
      (0, import_internal69.destroy_component)(button1);
      (0, import_internal69.destroy_component)(button2);
      (0, import_internal69.destroy_component)(button3);
      if (detaching)
        (0, import_internal69.detach_dev)(t40);
      if (detaching)
        (0, import_internal69.detach_dev)(h32);
      if (detaching)
        (0, import_internal69.detach_dev)(t42);
      if (detaching)
        (0, import_internal69.detach_dev)(div3);
      (0, import_internal69.destroy_component)(button4);
      (0, import_internal69.destroy_component)(button5);
      (0, import_internal69.destroy_component)(button6);
      (0, import_internal69.destroy_component)(button7);
      if (detaching)
        (0, import_internal69.detach_dev)(t46);
      (0, import_internal69.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal69.detach_dev)(t47);
      (0, import_internal69.destroy_component)(api0, detaching);
      if (detaching)
        (0, import_internal69.detach_dev)(t48);
      (0, import_internal69.destroy_component)(api1, detaching);
      if (detaching)
        (0, import_internal69.detach_dev)(t49);
      (0, import_internal69.destroy_component)(api2, detaching);
    }
  };
  (0, import_internal69.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment69.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance69($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal69.validate_slots)("NotificationCenter", slots2, []);
  let hideButton = false;
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "hideButton",
      type: ["true", "false"],
      default: "false",
      description: "If <i>true</i> the button will be hidden."
    },
    {
      name: "outline",
      description: "Notification center button style: outline"
    },
    {
      name: "round",
      description: "Makes the notification center button round"
    }
  ];
  const showNotificationAPI = [
    {
      name: "1. message",
      type: "string",
      required: true,
      description: "Message to show."
    },
    {
      name: "2. type",
      type: ["info", "success", "warning", "error"],
      default: "info",
      description: "Type of the message."
    },
    {
      name: "3. timeout",
      type: ["number", "false"],
      default: 5e3,
      description: 'How long the toast should remain on screen (in milliseconds).<br>If the value is not a number (e.g. "false") - the toast will not auto-close.'
    },
    {
      name: "4. button",
      type: "string",
      description: "Label of the optional button on the toast."
    },
    {
      name: "5. callback",
      type: "function",
      description: "Callback function triggered when the button is clicked.<br>The function receives 1 parameter, which is the ID of the toast."
    }
  ];
  const hideNotificationAPI = [
    {
      name: "id",
      type: "string",
      description: "ID of the toast message that is returned by <em>showNotification</em> function."
    }
  ];
  const exampleHtml = `
<NotificationCenter outline round/>

<Button on:click="{() => showNotification('Hello')}">Show info</Button>
<Button success on:click="{() => showNotification('Hello', 'success')}">Show success</Button>
<Button warning on:click="{() => showNotification('Hello', 'warning')}">Show warning</Button>
<Button danger on:click="{() => showNotification('Hello', 'error', 10000, 'Undo', cb)}">Show error</Button>
<Button danger on:click="{() => showNotification('Hello', 'error', false)}">No auto-close</Button>

<script>
import { NotificationCenter, showNotification, hideNotification, Button } from '@perfectthings/ui';

function cb (id) {
	console.log('do something');
	hideNotification(id);
}
&lt;/script>
`;
  function cb(id2) {
    console.log(id2);
    hideNotification(id2);
  }
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_113.warn(`<NotificationCenter> was created with unknown prop '${key}'`);
  });
  function toggle_value_binding(value2) {
    hideButton = value2;
    $$invalidate2(0, hideButton);
  }
  const click_handler = () => showNotification("Hello");
  const click_handler_1 = () => showNotification("Hello", "success");
  const click_handler_2 = () => showNotification("Hello", "warning");
  const click_handler_3 = () => showNotification("Hello", "error", 1e4, "Undo", cb);
  const click_handler_4 = () => showNotification("This is a very long message in a toast, to show how the long text will wrap inside the toast message.", "info", false);
  const click_handler_5 = () => showNotification("Hello", "success", false);
  const click_handler_6 = () => showNotification("Hello", "warning", false);
  const click_handler_7 = () => showNotification("Hello", "error", false);
  $$self2.$capture_state = () => ({
    Button: Button_default,
    NotificationCenter: NotificationCenter_default,
    showNotification,
    hideNotification,
    Toggle: Toggle_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    hideButton,
    apiProps,
    showNotificationAPI,
    hideNotificationAPI,
    exampleHtml,
    cb
  });
  $$self2.$inject_state = ($$props3) => {
    if ("hideButton" in $$props3)
      $$invalidate2(0, hideButton = $$props3.hideButton);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    hideButton,
    apiProps,
    showNotificationAPI,
    hideNotificationAPI,
    exampleHtml,
    cb,
    toggle_value_binding,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4,
    click_handler_5,
    click_handler_6,
    click_handler_7
  ];
}
var NotificationCenter_1 = class extends import_internal69.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal69.init)(this, options, instance69, create_fragment69, import_internal69.safe_not_equal, {});
    (0, import_internal69.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "NotificationCenter_1",
      options,
      id: create_fragment69.name
    });
  }
};
var NotificationCenter_default2 = NotificationCenter_1;

// docs-src/components/tooltip/Tooltip.svelte
var import_internal70 = __toESM(require_internal());
var file64 = "docs-src/components/tooltip/Tooltip.svelte";
function create_default_slot_124(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Some tooltip text");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_124.name,
    type: "slot",
    source: '(6:0) <Tooltip target=\\"box1\\">',
    ctx
  });
  return block;
}
function create_default_slot_1110(ctx) {
  let h1;
  let t1;
  let p;
  let t2;
  let b;
  let t4;
  let a;
  const block = {
    c: function create() {
      h1 = (0, import_internal70.element)("h1");
      h1.textContent = "Some Title";
      t1 = (0, import_internal70.space)();
      p = (0, import_internal70.element)("p");
      t2 = (0, import_internal70.text)("Some ");
      b = (0, import_internal70.element)("b");
      b.textContent = "html";
      t4 = (0, import_internal70.text)(" tooltip content with a ");
      a = (0, import_internal70.element)("a");
      a.textContent = "link";
      (0, import_internal70.add_location)(h1, file64, 10, 1, 390);
      (0, import_internal70.add_location)(b, file64, 11, 9, 419);
      (0, import_internal70.attr_dev)(a, "href", "#Tooltip");
      (0, import_internal70.add_location)(a, file64, 11, 44, 454);
      (0, import_internal70.add_location)(p, file64, 11, 1, 411);
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, h1, anchor);
      (0, import_internal70.insert_dev)(target, t1, anchor);
      (0, import_internal70.insert_dev)(target, p, anchor);
      (0, import_internal70.append_dev)(p, t2);
      (0, import_internal70.append_dev)(p, b);
      (0, import_internal70.append_dev)(p, t4);
      (0, import_internal70.append_dev)(p, a);
    },
    p: import_internal70.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(h1);
      if (detaching)
        (0, import_internal70.detach_dev)(t1);
      if (detaching)
        (0, import_internal70.detach_dev)(p);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1110.name,
    type: "slot",
    source: '(10:0) <Tooltip target=\\"box2\\" class=\\"tooltip-html\\">',
    ctx
  });
  return block;
}
function create_default_slot_105(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Some tooltip text");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_105.name,
    type: "slot",
    source: '(19:0) <Tooltip info target=\\"box-info\\">',
    ctx
  });
  return block;
}
function create_default_slot_95(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Some tooltip text");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_95.name,
    type: "slot",
    source: '(23:0) <Tooltip success target=\\"box-success\\">',
    ctx
  });
  return block;
}
function create_default_slot_86(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Some tooltip text");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_86.name,
    type: "slot",
    source: '(27:0) <Tooltip warning target=\\"box-warning\\">',
    ctx
  });
  return block;
}
function create_default_slot_77(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Some tooltip text");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_77.name,
    type: "slot",
    source: '(31:0) <Tooltip danger target=\\"box-error\\">',
    ctx
  });
  return block;
}
function create_default_slot_68(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Some tooltip text");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_68.name,
    type: "slot",
    source: '(38:0) <Tooltip position=\\"bottom\\" target=\\"box-below\\">',
    ctx
  });
  return block;
}
function create_default_slot_58(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Smaller offset");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_58.name,
    type: "slot",
    source: '(43:0) <Tooltip target=\\"box-offset\\" offset=\\"-20\\">',
    ctx
  });
  return block;
}
function create_default_slot_411(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Bigger offset");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_411.name,
    type: "slot",
    source: '(47:0) <Tooltip target=\\"box-offset2\\" offset=\\"20\\">',
    ctx
  });
  return block;
}
function create_default_slot_317(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Showing with a delay");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_317.name,
    type: "slot",
    source: '(53:0) <Tooltip target=\\"box5\\" delay=\\"700\\">',
    ctx
  });
  return block;
}
function create_default_slot_219(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Showing on click");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_219.name,
    type: "slot",
    source: '(59:0) <Tooltip target=\\"box3\\" events=\\"click\\">',
    ctx
  });
  return block;
}
function create_default_slot_120(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("button with a tooltip on-focus & on-click");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot_120.name,
    type: "slot",
    source: '(63:0) <Button id=\\"box4\\">',
    ctx
  });
  return block;
}
function create_default_slot17(ctx) {
  let t;
  const block = {
    c: function create() {
      t = (0, import_internal70.text)("Showing on click");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, t, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(t);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_default_slot17.name,
    type: "slot",
    source: '(64:0) <Tooltip target=\\"box4\\" events=\\"click,focus\\">',
    ctx
  });
  return block;
}
function create_fragment70(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let div0;
  let t5;
  let tooltip0;
  let t6;
  let div1;
  let t8;
  let tooltip1;
  let t9;
  let h31;
  let t11;
  let div2;
  let t13;
  let tooltip2;
  let t14;
  let div3;
  let t16;
  let tooltip3;
  let t17;
  let div4;
  let t19;
  let tooltip4;
  let t20;
  let div5;
  let t22;
  let tooltip5;
  let t23;
  let h32;
  let t25;
  let div6;
  let t27;
  let tooltip6;
  let t28;
  let h33;
  let t30;
  let div7;
  let t32;
  let tooltip7;
  let t33;
  let div8;
  let t35;
  let tooltip8;
  let t36;
  let h34;
  let t38;
  let div9;
  let t40;
  let tooltip9;
  let t41;
  let h35;
  let t43;
  let div10;
  let t45;
  let tooltip10;
  let t46;
  let h36;
  let t48;
  let button;
  let t49;
  let tooltip11;
  let t50;
  let codeexample;
  let t51;
  let api;
  let current;
  tooltip0 = new Tooltip_default({
    props: {
      target: "box1",
      $$slots: { default: [create_default_slot_124] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip1 = new Tooltip_default({
    props: {
      target: "box2",
      class: "tooltip-html",
      $$slots: { default: [create_default_slot_1110] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip2 = new Tooltip_default({
    props: {
      info: true,
      target: "box-info",
      $$slots: { default: [create_default_slot_105] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip3 = new Tooltip_default({
    props: {
      success: true,
      target: "box-success",
      $$slots: { default: [create_default_slot_95] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip4 = new Tooltip_default({
    props: {
      warning: true,
      target: "box-warning",
      $$slots: { default: [create_default_slot_86] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip5 = new Tooltip_default({
    props: {
      danger: true,
      target: "box-error",
      $$slots: { default: [create_default_slot_77] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip6 = new Tooltip_default({
    props: {
      position: "bottom",
      target: "box-below",
      $$slots: { default: [create_default_slot_68] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip7 = new Tooltip_default({
    props: {
      target: "box-offset",
      offset: "-20",
      $$slots: { default: [create_default_slot_58] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip8 = new Tooltip_default({
    props: {
      target: "box-offset2",
      offset: "20",
      $$slots: { default: [create_default_slot_411] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip9 = new Tooltip_default({
    props: {
      target: "box5",
      delay: "700",
      $$slots: { default: [create_default_slot_317] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip10 = new Tooltip_default({
    props: {
      target: "box3",
      events: "click",
      $$slots: { default: [create_default_slot_219] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  button = new Button_default({
    props: {
      id: "box4",
      $$slots: { default: [create_default_slot_120] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  tooltip11 = new Tooltip_default({
    props: {
      target: "box4",
      events: "click,focus",
      $$slots: { default: [create_default_slot17] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  codeexample = new CodeExample_default({
    props: { html: (
      /*exampleHtml*/
      ctx[1]
    ) },
    $$inline: true
  });
  api = new ApiTable_default({
    props: { props: (
      /*apiProps*/
      ctx[0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal70.element)("h2");
      h2.textContent = "Tooltip";
      t1 = (0, import_internal70.space)();
      h30 = (0, import_internal70.element)("h3");
      h30.textContent = "Normal";
      t3 = (0, import_internal70.space)();
      div0 = (0, import_internal70.element)("div");
      div0.textContent = "box with a tooltip";
      t5 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip0.$$.fragment);
      t6 = (0, import_internal70.space)();
      div1 = (0, import_internal70.element)("div");
      div1.textContent = "box with a tooltip";
      t8 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip1.$$.fragment);
      t9 = (0, import_internal70.space)();
      h31 = (0, import_internal70.element)("h3");
      h31.textContent = "Colour variants (tooltip type)";
      t11 = (0, import_internal70.space)();
      div2 = (0, import_internal70.element)("div");
      div2.textContent = "info";
      t13 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip2.$$.fragment);
      t14 = (0, import_internal70.space)();
      div3 = (0, import_internal70.element)("div");
      div3.textContent = "success";
      t16 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip3.$$.fragment);
      t17 = (0, import_internal70.space)();
      div4 = (0, import_internal70.element)("div");
      div4.textContent = "warning";
      t19 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip4.$$.fragment);
      t20 = (0, import_internal70.space)();
      div5 = (0, import_internal70.element)("div");
      div5.textContent = "danger";
      t22 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip5.$$.fragment);
      t23 = (0, import_internal70.space)();
      h32 = (0, import_internal70.element)("h3");
      h32.textContent = "Show below target";
      t25 = (0, import_internal70.space)();
      div6 = (0, import_internal70.element)("div");
      div6.textContent = "box with a tooltip";
      t27 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip6.$$.fragment);
      t28 = (0, import_internal70.space)();
      h33 = (0, import_internal70.element)("h3");
      h33.textContent = "Custom offset";
      t30 = (0, import_internal70.space)();
      div7 = (0, import_internal70.element)("div");
      div7.textContent = "box with a tooltip";
      t32 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip7.$$.fragment);
      t33 = (0, import_internal70.space)();
      div8 = (0, import_internal70.element)("div");
      div8.textContent = "box with a tooltip";
      t35 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip8.$$.fragment);
      t36 = (0, import_internal70.space)();
      h34 = (0, import_internal70.element)("h3");
      h34.textContent = "Show delay";
      t38 = (0, import_internal70.space)();
      div9 = (0, import_internal70.element)("div");
      div9.textContent = "box with a tooltip";
      t40 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip9.$$.fragment);
      t41 = (0, import_internal70.space)();
      h35 = (0, import_internal70.element)("h3");
      h35.textContent = "On Click";
      t43 = (0, import_internal70.space)();
      div10 = (0, import_internal70.element)("div");
      div10.textContent = "box with a tooltip";
      t45 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip10.$$.fragment);
      t46 = (0, import_internal70.space)();
      h36 = (0, import_internal70.element)("h3");
      h36.textContent = "On Click and on Focus";
      t48 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(button.$$.fragment);
      t49 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(tooltip11.$$.fragment);
      t50 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(codeexample.$$.fragment);
      t51 = (0, import_internal70.space)();
      (0, import_internal70.create_component)(api.$$.fragment);
      (0, import_internal70.add_location)(h2, file64, 0, 0, 0);
      (0, import_internal70.add_location)(h30, file64, 2, 0, 18);
      (0, import_internal70.attr_dev)(div0, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div0, "tabindex", "0");
      (0, import_internal70.attr_dev)(div0, "id", "box1");
      (0, import_internal70.add_location)(div0, file64, 4, 0, 90);
      (0, import_internal70.attr_dev)(div1, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div1, "tabindex", "0");
      (0, import_internal70.attr_dev)(div1, "id", "box2");
      (0, import_internal70.add_location)(div1, file64, 8, 0, 271);
      (0, import_internal70.add_location)(h31, file64, 15, 0, 499);
      (0, import_internal70.attr_dev)(div2, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div2, "tabindex", "0");
      (0, import_internal70.attr_dev)(div2, "id", "box-info");
      (0, import_internal70.add_location)(div2, file64, 17, 0, 595);
      (0, import_internal70.attr_dev)(div3, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div3, "tabindex", "0");
      (0, import_internal70.attr_dev)(div3, "id", "box-success");
      (0, import_internal70.add_location)(div3, file64, 21, 0, 775);
      (0, import_internal70.attr_dev)(div4, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div4, "tabindex", "0");
      (0, import_internal70.attr_dev)(div4, "id", "box-warning");
      (0, import_internal70.add_location)(div4, file64, 25, 0, 967);
      (0, import_internal70.attr_dev)(div5, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div5, "tabindex", "0");
      (0, import_internal70.attr_dev)(div5, "id", "box-error");
      (0, import_internal70.add_location)(div5, file64, 29, 0, 1159);
      (0, import_internal70.add_location)(h32, file64, 34, 0, 1291);
      (0, import_internal70.attr_dev)(div6, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div6, "tabindex", "0");
      (0, import_internal70.attr_dev)(div6, "id", "box-below");
      (0, import_internal70.add_location)(div6, file64, 36, 0, 1374);
      (0, import_internal70.add_location)(h33, file64, 39, 0, 1527);
      (0, import_internal70.attr_dev)(div7, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div7, "tabindex", "0");
      (0, import_internal70.attr_dev)(div7, "id", "box-offset");
      (0, import_internal70.add_location)(div7, file64, 41, 0, 1606);
      (0, import_internal70.attr_dev)(div8, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div8, "tabindex", "0");
      (0, import_internal70.attr_dev)(div8, "id", "box-offset2");
      (0, import_internal70.add_location)(div8, file64, 45, 0, 1809);
      (0, import_internal70.add_location)(h34, file64, 49, 0, 1957);
      (0, import_internal70.attr_dev)(div9, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div9, "tabindex", "0");
      (0, import_internal70.attr_dev)(div9, "id", "box5");
      (0, import_internal70.add_location)(div9, file64, 51, 0, 2033);
      (0, import_internal70.add_location)(h35, file64, 55, 0, 2174);
      (0, import_internal70.attr_dev)(div10, "class", "tooltip-box");
      (0, import_internal70.attr_dev)(div10, "tabindex", "0");
      (0, import_internal70.attr_dev)(div10, "id", "box3");
      (0, import_internal70.add_location)(div10, file64, 57, 0, 2248);
      (0, import_internal70.add_location)(h36, file64, 61, 0, 2388);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal70.insert_dev)(target, h2, anchor);
      (0, import_internal70.insert_dev)(target, t1, anchor);
      (0, import_internal70.insert_dev)(target, h30, anchor);
      (0, import_internal70.insert_dev)(target, t3, anchor);
      (0, import_internal70.insert_dev)(target, div0, anchor);
      (0, import_internal70.insert_dev)(target, t5, anchor);
      (0, import_internal70.mount_component)(tooltip0, target, anchor);
      (0, import_internal70.insert_dev)(target, t6, anchor);
      (0, import_internal70.insert_dev)(target, div1, anchor);
      (0, import_internal70.insert_dev)(target, t8, anchor);
      (0, import_internal70.mount_component)(tooltip1, target, anchor);
      (0, import_internal70.insert_dev)(target, t9, anchor);
      (0, import_internal70.insert_dev)(target, h31, anchor);
      (0, import_internal70.insert_dev)(target, t11, anchor);
      (0, import_internal70.insert_dev)(target, div2, anchor);
      (0, import_internal70.insert_dev)(target, t13, anchor);
      (0, import_internal70.mount_component)(tooltip2, target, anchor);
      (0, import_internal70.insert_dev)(target, t14, anchor);
      (0, import_internal70.insert_dev)(target, div3, anchor);
      (0, import_internal70.insert_dev)(target, t16, anchor);
      (0, import_internal70.mount_component)(tooltip3, target, anchor);
      (0, import_internal70.insert_dev)(target, t17, anchor);
      (0, import_internal70.insert_dev)(target, div4, anchor);
      (0, import_internal70.insert_dev)(target, t19, anchor);
      (0, import_internal70.mount_component)(tooltip4, target, anchor);
      (0, import_internal70.insert_dev)(target, t20, anchor);
      (0, import_internal70.insert_dev)(target, div5, anchor);
      (0, import_internal70.insert_dev)(target, t22, anchor);
      (0, import_internal70.mount_component)(tooltip5, target, anchor);
      (0, import_internal70.insert_dev)(target, t23, anchor);
      (0, import_internal70.insert_dev)(target, h32, anchor);
      (0, import_internal70.insert_dev)(target, t25, anchor);
      (0, import_internal70.insert_dev)(target, div6, anchor);
      (0, import_internal70.insert_dev)(target, t27, anchor);
      (0, import_internal70.mount_component)(tooltip6, target, anchor);
      (0, import_internal70.insert_dev)(target, t28, anchor);
      (0, import_internal70.insert_dev)(target, h33, anchor);
      (0, import_internal70.insert_dev)(target, t30, anchor);
      (0, import_internal70.insert_dev)(target, div7, anchor);
      (0, import_internal70.insert_dev)(target, t32, anchor);
      (0, import_internal70.mount_component)(tooltip7, target, anchor);
      (0, import_internal70.insert_dev)(target, t33, anchor);
      (0, import_internal70.insert_dev)(target, div8, anchor);
      (0, import_internal70.insert_dev)(target, t35, anchor);
      (0, import_internal70.mount_component)(tooltip8, target, anchor);
      (0, import_internal70.insert_dev)(target, t36, anchor);
      (0, import_internal70.insert_dev)(target, h34, anchor);
      (0, import_internal70.insert_dev)(target, t38, anchor);
      (0, import_internal70.insert_dev)(target, div9, anchor);
      (0, import_internal70.insert_dev)(target, t40, anchor);
      (0, import_internal70.mount_component)(tooltip9, target, anchor);
      (0, import_internal70.insert_dev)(target, t41, anchor);
      (0, import_internal70.insert_dev)(target, h35, anchor);
      (0, import_internal70.insert_dev)(target, t43, anchor);
      (0, import_internal70.insert_dev)(target, div10, anchor);
      (0, import_internal70.insert_dev)(target, t45, anchor);
      (0, import_internal70.mount_component)(tooltip10, target, anchor);
      (0, import_internal70.insert_dev)(target, t46, anchor);
      (0, import_internal70.insert_dev)(target, h36, anchor);
      (0, import_internal70.insert_dev)(target, t48, anchor);
      (0, import_internal70.mount_component)(button, target, anchor);
      (0, import_internal70.insert_dev)(target, t49, anchor);
      (0, import_internal70.mount_component)(tooltip11, target, anchor);
      (0, import_internal70.insert_dev)(target, t50, anchor);
      (0, import_internal70.mount_component)(codeexample, target, anchor);
      (0, import_internal70.insert_dev)(target, t51, anchor);
      (0, import_internal70.mount_component)(api, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const tooltip0_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip0_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip0.$set(tooltip0_changes);
      const tooltip1_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip1.$set(tooltip1_changes);
      const tooltip2_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip2_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip2.$set(tooltip2_changes);
      const tooltip3_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip3_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip3.$set(tooltip3_changes);
      const tooltip4_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip4_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip4.$set(tooltip4_changes);
      const tooltip5_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip5_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip5.$set(tooltip5_changes);
      const tooltip6_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip6_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip6.$set(tooltip6_changes);
      const tooltip7_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip7_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip7.$set(tooltip7_changes);
      const tooltip8_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip8_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip8.$set(tooltip8_changes);
      const tooltip9_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip9_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip9.$set(tooltip9_changes);
      const tooltip10_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip10_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip10.$set(tooltip10_changes);
      const button_changes = {};
      if (dirty & /*$$scope*/
      4) {
        button_changes.$$scope = { dirty, ctx: ctx2 };
      }
      button.$set(button_changes);
      const tooltip11_changes = {};
      if (dirty & /*$$scope*/
      4) {
        tooltip11_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tooltip11.$set(tooltip11_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal70.transition_in)(tooltip0.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip1.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip2.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip3.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip4.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip5.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip6.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip7.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip8.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip9.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip10.$$.fragment, local);
      (0, import_internal70.transition_in)(button.$$.fragment, local);
      (0, import_internal70.transition_in)(tooltip11.$$.fragment, local);
      (0, import_internal70.transition_in)(codeexample.$$.fragment, local);
      (0, import_internal70.transition_in)(api.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal70.transition_out)(tooltip0.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip1.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip2.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip3.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip4.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip5.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip6.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip7.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip8.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip9.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip10.$$.fragment, local);
      (0, import_internal70.transition_out)(button.$$.fragment, local);
      (0, import_internal70.transition_out)(tooltip11.$$.fragment, local);
      (0, import_internal70.transition_out)(codeexample.$$.fragment, local);
      (0, import_internal70.transition_out)(api.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal70.detach_dev)(h2);
      if (detaching)
        (0, import_internal70.detach_dev)(t1);
      if (detaching)
        (0, import_internal70.detach_dev)(h30);
      if (detaching)
        (0, import_internal70.detach_dev)(t3);
      if (detaching)
        (0, import_internal70.detach_dev)(div0);
      if (detaching)
        (0, import_internal70.detach_dev)(t5);
      (0, import_internal70.destroy_component)(tooltip0, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t6);
      if (detaching)
        (0, import_internal70.detach_dev)(div1);
      if (detaching)
        (0, import_internal70.detach_dev)(t8);
      (0, import_internal70.destroy_component)(tooltip1, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t9);
      if (detaching)
        (0, import_internal70.detach_dev)(h31);
      if (detaching)
        (0, import_internal70.detach_dev)(t11);
      if (detaching)
        (0, import_internal70.detach_dev)(div2);
      if (detaching)
        (0, import_internal70.detach_dev)(t13);
      (0, import_internal70.destroy_component)(tooltip2, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t14);
      if (detaching)
        (0, import_internal70.detach_dev)(div3);
      if (detaching)
        (0, import_internal70.detach_dev)(t16);
      (0, import_internal70.destroy_component)(tooltip3, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t17);
      if (detaching)
        (0, import_internal70.detach_dev)(div4);
      if (detaching)
        (0, import_internal70.detach_dev)(t19);
      (0, import_internal70.destroy_component)(tooltip4, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t20);
      if (detaching)
        (0, import_internal70.detach_dev)(div5);
      if (detaching)
        (0, import_internal70.detach_dev)(t22);
      (0, import_internal70.destroy_component)(tooltip5, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t23);
      if (detaching)
        (0, import_internal70.detach_dev)(h32);
      if (detaching)
        (0, import_internal70.detach_dev)(t25);
      if (detaching)
        (0, import_internal70.detach_dev)(div6);
      if (detaching)
        (0, import_internal70.detach_dev)(t27);
      (0, import_internal70.destroy_component)(tooltip6, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t28);
      if (detaching)
        (0, import_internal70.detach_dev)(h33);
      if (detaching)
        (0, import_internal70.detach_dev)(t30);
      if (detaching)
        (0, import_internal70.detach_dev)(div7);
      if (detaching)
        (0, import_internal70.detach_dev)(t32);
      (0, import_internal70.destroy_component)(tooltip7, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t33);
      if (detaching)
        (0, import_internal70.detach_dev)(div8);
      if (detaching)
        (0, import_internal70.detach_dev)(t35);
      (0, import_internal70.destroy_component)(tooltip8, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t36);
      if (detaching)
        (0, import_internal70.detach_dev)(h34);
      if (detaching)
        (0, import_internal70.detach_dev)(t38);
      if (detaching)
        (0, import_internal70.detach_dev)(div9);
      if (detaching)
        (0, import_internal70.detach_dev)(t40);
      (0, import_internal70.destroy_component)(tooltip9, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t41);
      if (detaching)
        (0, import_internal70.detach_dev)(h35);
      if (detaching)
        (0, import_internal70.detach_dev)(t43);
      if (detaching)
        (0, import_internal70.detach_dev)(div10);
      if (detaching)
        (0, import_internal70.detach_dev)(t45);
      (0, import_internal70.destroy_component)(tooltip10, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t46);
      if (detaching)
        (0, import_internal70.detach_dev)(h36);
      if (detaching)
        (0, import_internal70.detach_dev)(t48);
      (0, import_internal70.destroy_component)(button, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t49);
      (0, import_internal70.destroy_component)(tooltip11, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t50);
      (0, import_internal70.destroy_component)(codeexample, detaching);
      if (detaching)
        (0, import_internal70.detach_dev)(t51);
      (0, import_internal70.destroy_component)(api, detaching);
    }
  };
  (0, import_internal70.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment70.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance70($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal70.validate_slots)("Tooltip", slots2, []);
  const apiProps = [
    {
      name: "class",
      type: "string",
      description: "Additional css class name to be added to the component."
    },
    {
      name: "danger",
      description: "Tooltip type: danger"
    },
    {
      name: "delay",
      type: "number",
      default: "0",
      description: "Delay after which the tooltip should appear (in milliseconds)."
    },
    {
      name: "error",
      description: "Tooltip type: error"
    },
    {
      name: "events",
      type: ["hover", "click", "focus"],
      default: "hover,focus",
      description: "Type of mouse event that should trigger the tooltip. Multiple events can be entered in a comma-separated string.<br>Note, that these events will dictate how the tooltip shows up as well as disappears, e.g.:<br><em>hover</em> - tooltip will show up on mouse over and disappear on mouse out<br><em>click</em> - tooltip will show up on click and will disappear when anything else (but the target or tooltip) is clicked.<br><em>focus</em> - tooltip will show up on focus and disappear on blur."
    },
    {
      name: "info",
      description: "Tooltip type: info"
    },
    {
      name: "offset",
      type: "number",
      default: "2",
      description: "Customize tooltip offset. Use negative number for smaller offset or positive for bigger"
    },
    {
      name: "position",
      type: ["top", "bottom"],
      default: "auto",
      description: "Enforce the position of the tooltip to be above (top) or below (bottom) the target element.<br>Auto - will auto-position the tooltip so it stays on screen."
    },
    {
      name: "success",
      description: "Tooltip type: success"
    },
    {
      name: "target",
      required: true,
      type: "string",
      description: "ID of the target element."
    },
    {
      name: "warning",
      description: "Tooltip type: warning"
    },
    {
      name: "bind:element",
      type: "element",
      description: "Exposes the HTML element of the component."
    }
  ];
  const exampleHtml = `
<div id="box1"></div>
<Tooltip position="bottom" target="box1" offset="5">Some tooltip text</Tooltip>

<button id="box4">button with a tooltip on-focus & on-click</button>
 <Tooltip target="box4" events="click,focus">Showing on click</Tooltip>
`;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Tooltip> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({
    Tooltip: Tooltip_default,
    Button: Button_default,
    API: ApiTable_default,
    CodeExample: CodeExample_default,
    apiProps,
    exampleHtml
  });
  return [apiProps, exampleHtml];
}
var Tooltip_1 = class extends import_internal70.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal70.init)(this, options, instance70, create_fragment70, import_internal70.safe_not_equal, {});
    (0, import_internal70.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Tooltip_1",
      options,
      id: create_fragment70.name
    });
  }
};
var Tooltip_default2 = Tooltip_1;

// docs-src/components/color-palette/ColorPalette.svelte
var import_internal72 = __toESM(require_internal());

// docs-src/components/color-palette/ColorPaletteBox.svelte
var import_internal71 = __toESM(require_internal());
var file65 = "docs-src/components/color-palette/ColorPaletteBox.svelte";
function create_fragment71(ctx) {
  let div;
  let t0;
  let t1;
  let br;
  let t2;
  let t3;
  const block = {
    c: function create() {
      div = (0, import_internal71.element)("div");
      t0 = (0, import_internal71.text)("background: --ui-");
      t1 = (0, import_internal71.text)(
        /*bg*/
        ctx[0]
      );
      br = (0, import_internal71.element)("br");
      t2 = (0, import_internal71.text)("\n	text: --ui-");
      t3 = (0, import_internal71.text)(
        /*text*/
        ctx[1]
      );
      (0, import_internal71.add_location)(br, file65, 1, 22, 114);
      (0, import_internal71.attr_dev)(div, "class", "palette-box");
      (0, import_internal71.set_style)(div, "background-color", "var(--ui-" + /*bg*/
      ctx[0] + ")");
      (0, import_internal71.set_style)(div, "color", "var(--ui-" + /*text*/
      ctx[1] + ")");
      (0, import_internal71.add_location)(div, file65, 0, 0, 0);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal71.insert_dev)(target, div, anchor);
      (0, import_internal71.append_dev)(div, t0);
      (0, import_internal71.append_dev)(div, t1);
      (0, import_internal71.append_dev)(div, br);
      (0, import_internal71.append_dev)(div, t2);
      (0, import_internal71.append_dev)(div, t3);
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*bg*/
      1)
        (0, import_internal71.set_data_dev)(
          t1,
          /*bg*/
          ctx2[0]
        );
      if (dirty & /*text*/
      2)
        (0, import_internal71.set_data_dev)(
          t3,
          /*text*/
          ctx2[1]
        );
      if (dirty & /*bg*/
      1) {
        (0, import_internal71.set_style)(div, "background-color", "var(--ui-" + /*bg*/
        ctx2[0] + ")");
      }
      if (dirty & /*text*/
      2) {
        (0, import_internal71.set_style)(div, "color", "var(--ui-" + /*text*/
        ctx2[1] + ")");
      }
    },
    i: import_internal71.noop,
    o: import_internal71.noop,
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal71.detach_dev)(div);
    }
  };
  (0, import_internal71.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment71.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance71($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal71.validate_slots)("ColorPaletteBox", slots2, []);
  let { bg = "color-background" } = $$props2;
  let { text: text40 = "color-text" } = $$props2;
  const writable_props = ["bg", "text"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ColorPaletteBox> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("bg" in $$props3)
      $$invalidate2(0, bg = $$props3.bg);
    if ("text" in $$props3)
      $$invalidate2(1, text40 = $$props3.text);
  };
  $$self2.$capture_state = () => ({ bg, text: text40 });
  $$self2.$inject_state = ($$props3) => {
    if ("bg" in $$props3)
      $$invalidate2(0, bg = $$props3.bg);
    if ("text" in $$props3)
      $$invalidate2(1, text40 = $$props3.text);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [bg, text40];
}
var ColorPaletteBox = class extends import_internal71.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal71.init)(this, options, instance71, create_fragment71, import_internal71.safe_not_equal, { bg: 0, text: 1 });
    (0, import_internal71.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ColorPaletteBox",
      options,
      id: create_fragment71.name
    });
  }
  get bg() {
    throw new Error("<ColorPaletteBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bg(value2) {
    throw new Error("<ColorPaletteBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get text() {
    throw new Error("<ColorPaletteBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value2) {
    throw new Error("<ColorPaletteBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ColorPaletteBox_default = ColorPaletteBox;

// docs-src/components/color-palette/ColorPalette.svelte
var file66 = "docs-src/components/color-palette/ColorPalette.svelte";
function create_fragment72(ctx) {
  let h2;
  let t1;
  let h30;
  let t3;
  let h40;
  let t5;
  let div0;
  let palettebox0;
  let t6;
  let h41;
  let t8;
  let div1;
  let palettebox1;
  let t9;
  let palettebox2;
  let t10;
  let h42;
  let t12;
  let div2;
  let palettebox3;
  let t13;
  let palettebox4;
  let t14;
  let h43;
  let t16;
  let div3;
  let palettebox5;
  let t17;
  let palettebox6;
  let t18;
  let h44;
  let t20;
  let div4;
  let palettebox7;
  let t21;
  let palettebox8;
  let t22;
  let h45;
  let t24;
  let div5;
  let palettebox9;
  let t25;
  let palettebox10;
  let t26;
  let h31;
  let t28;
  let div6;
  let palettebox11;
  let t29;
  let palettebox12;
  let t30;
  let h32;
  let t32;
  let div7;
  let palettebox13;
  let t33;
  let palettebox14;
  let t34;
  let palettebox15;
  let t35;
  let palettebox16;
  let t36;
  let palettebox17;
  let t37;
  let h33;
  let t39;
  let div8;
  let palettebox18;
  let t40;
  let palettebox19;
  let t41;
  let palettebox20;
  let t42;
  let palettebox21;
  let current;
  palettebox0 = new ColorPaletteBox_default({
    props: { bg: "color-accent" },
    $$inline: true
  });
  palettebox1 = new ColorPaletteBox_default({
    props: { bg: "color-secondary" },
    $$inline: true
  });
  palettebox2 = new ColorPaletteBox_default({
    props: { bg: "color-secondary-semi" },
    $$inline: true
  });
  palettebox3 = new ColorPaletteBox_default({
    props: { bg: "color-info" },
    $$inline: true
  });
  palettebox4 = new ColorPaletteBox_default({
    props: { bg: "color-info-semi" },
    $$inline: true
  });
  palettebox5 = new ColorPaletteBox_default({
    props: { bg: "color-success" },
    $$inline: true
  });
  palettebox6 = new ColorPaletteBox_default({
    props: { bg: "color-success-semi" },
    $$inline: true
  });
  palettebox7 = new ColorPaletteBox_default({
    props: { bg: "color-warning" },
    $$inline: true
  });
  palettebox8 = new ColorPaletteBox_default({
    props: { bg: "color-warning-semi" },
    $$inline: true
  });
  palettebox9 = new ColorPaletteBox_default({
    props: { bg: "color-danger" },
    $$inline: true
  });
  palettebox10 = new ColorPaletteBox_default({
    props: { bg: "color-danger-semi" },
    $$inline: true
  });
  palettebox11 = new ColorPaletteBox_default({
    props: { bg: "color-highlight" },
    $$inline: true
  });
  palettebox12 = new ColorPaletteBox_default({
    props: { bg: "color-highlight-1" },
    $$inline: true
  });
  palettebox13 = new ColorPaletteBox_default({
    props: { bg: "color-background" },
    $$inline: true
  });
  palettebox14 = new ColorPaletteBox_default({
    props: { bg: "color-background-semi" },
    $$inline: true
  });
  palettebox15 = new ColorPaletteBox_default({
    props: { bg: "color-background-input" },
    $$inline: true
  });
  palettebox16 = new ColorPaletteBox_default({
    props: { bg: "color-background-1" },
    $$inline: true
  });
  palettebox17 = new ColorPaletteBox_default({
    props: { bg: "color-background-2" },
    $$inline: true
  });
  palettebox18 = new ColorPaletteBox_default({
    props: { text: "color-text" },
    $$inline: true
  });
  palettebox19 = new ColorPaletteBox_default({
    props: { text: "color-text-semi" },
    $$inline: true
  });
  palettebox20 = new ColorPaletteBox_default({
    props: { text: "color-text-1" },
    $$inline: true
  });
  palettebox21 = new ColorPaletteBox_default({
    props: { text: "color-text-2" },
    $$inline: true
  });
  const block = {
    c: function create() {
      h2 = (0, import_internal72.element)("h2");
      h2.textContent = "Color Palette";
      t1 = (0, import_internal72.space)();
      h30 = (0, import_internal72.element)("h3");
      h30.textContent = "Special colors";
      t3 = (0, import_internal72.space)();
      h40 = (0, import_internal72.element)("h4");
      h40.textContent = "Accent";
      t5 = (0, import_internal72.space)();
      div0 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox0.$$.fragment);
      t6 = (0, import_internal72.space)();
      h41 = (0, import_internal72.element)("h4");
      h41.textContent = "Secondary";
      t8 = (0, import_internal72.space)();
      div1 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox1.$$.fragment);
      t9 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox2.$$.fragment);
      t10 = (0, import_internal72.space)();
      h42 = (0, import_internal72.element)("h4");
      h42.textContent = "Info";
      t12 = (0, import_internal72.space)();
      div2 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox3.$$.fragment);
      t13 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox4.$$.fragment);
      t14 = (0, import_internal72.space)();
      h43 = (0, import_internal72.element)("h4");
      h43.textContent = "Success";
      t16 = (0, import_internal72.space)();
      div3 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox5.$$.fragment);
      t17 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox6.$$.fragment);
      t18 = (0, import_internal72.space)();
      h44 = (0, import_internal72.element)("h4");
      h44.textContent = "Warning";
      t20 = (0, import_internal72.space)();
      div4 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox7.$$.fragment);
      t21 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox8.$$.fragment);
      t22 = (0, import_internal72.space)();
      h45 = (0, import_internal72.element)("h4");
      h45.textContent = "Danger";
      t24 = (0, import_internal72.space)();
      div5 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox9.$$.fragment);
      t25 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox10.$$.fragment);
      t26 = (0, import_internal72.space)();
      h31 = (0, import_internal72.element)("h3");
      h31.textContent = "Highlight colors";
      t28 = (0, import_internal72.space)();
      div6 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox11.$$.fragment);
      t29 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox12.$$.fragment);
      t30 = (0, import_internal72.space)();
      h32 = (0, import_internal72.element)("h3");
      h32.textContent = "Background colors";
      t32 = (0, import_internal72.space)();
      div7 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox13.$$.fragment);
      t33 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox14.$$.fragment);
      t34 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox15.$$.fragment);
      t35 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox16.$$.fragment);
      t36 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox17.$$.fragment);
      t37 = (0, import_internal72.space)();
      h33 = (0, import_internal72.element)("h3");
      h33.textContent = "Text colors";
      t39 = (0, import_internal72.space)();
      div8 = (0, import_internal72.element)("div");
      (0, import_internal72.create_component)(palettebox18.$$.fragment);
      t40 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox19.$$.fragment);
      t41 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox20.$$.fragment);
      t42 = (0, import_internal72.space)();
      (0, import_internal72.create_component)(palettebox21.$$.fragment);
      (0, import_internal72.add_location)(h2, file66, 0, 0, 0);
      (0, import_internal72.add_location)(h30, file66, 2, 0, 24);
      (0, import_internal72.add_location)(h40, file66, 4, 0, 49);
      (0, import_internal72.attr_dev)(div0, "class", "group");
      (0, import_internal72.add_location)(div0, file66, 5, 0, 65);
      (0, import_internal72.add_location)(h41, file66, 9, 0, 127);
      (0, import_internal72.attr_dev)(div1, "class", "group");
      (0, import_internal72.add_location)(div1, file66, 10, 0, 146);
      (0, import_internal72.add_location)(h42, file66, 15, 0, 253);
      (0, import_internal72.attr_dev)(div2, "class", "group");
      (0, import_internal72.add_location)(div2, file66, 16, 0, 267);
      (0, import_internal72.add_location)(h43, file66, 21, 0, 364);
      (0, import_internal72.attr_dev)(div3, "class", "group");
      (0, import_internal72.add_location)(div3, file66, 22, 0, 381);
      (0, import_internal72.add_location)(h44, file66, 27, 0, 484);
      (0, import_internal72.attr_dev)(div4, "class", "group");
      (0, import_internal72.add_location)(div4, file66, 28, 0, 501);
      (0, import_internal72.add_location)(h45, file66, 33, 0, 604);
      (0, import_internal72.attr_dev)(div5, "class", "group");
      (0, import_internal72.add_location)(div5, file66, 34, 0, 620);
      (0, import_internal72.add_location)(h31, file66, 39, 0, 721);
      (0, import_internal72.attr_dev)(div6, "class", "group");
      (0, import_internal72.add_location)(div6, file66, 40, 0, 747);
      (0, import_internal72.add_location)(h32, file66, 45, 0, 851);
      (0, import_internal72.attr_dev)(div7, "class", "group");
      (0, import_internal72.add_location)(div7, file66, 46, 0, 878);
      (0, import_internal72.add_location)(h33, file66, 55, 0, 1112);
      (0, import_internal72.attr_dev)(div8, "class", "group");
      (0, import_internal72.add_location)(div8, file66, 56, 0, 1133);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal72.insert_dev)(target, h2, anchor);
      (0, import_internal72.insert_dev)(target, t1, anchor);
      (0, import_internal72.insert_dev)(target, h30, anchor);
      (0, import_internal72.insert_dev)(target, t3, anchor);
      (0, import_internal72.insert_dev)(target, h40, anchor);
      (0, import_internal72.insert_dev)(target, t5, anchor);
      (0, import_internal72.insert_dev)(target, div0, anchor);
      (0, import_internal72.mount_component)(palettebox0, div0, null);
      (0, import_internal72.insert_dev)(target, t6, anchor);
      (0, import_internal72.insert_dev)(target, h41, anchor);
      (0, import_internal72.insert_dev)(target, t8, anchor);
      (0, import_internal72.insert_dev)(target, div1, anchor);
      (0, import_internal72.mount_component)(palettebox1, div1, null);
      (0, import_internal72.append_dev)(div1, t9);
      (0, import_internal72.mount_component)(palettebox2, div1, null);
      (0, import_internal72.insert_dev)(target, t10, anchor);
      (0, import_internal72.insert_dev)(target, h42, anchor);
      (0, import_internal72.insert_dev)(target, t12, anchor);
      (0, import_internal72.insert_dev)(target, div2, anchor);
      (0, import_internal72.mount_component)(palettebox3, div2, null);
      (0, import_internal72.append_dev)(div2, t13);
      (0, import_internal72.mount_component)(palettebox4, div2, null);
      (0, import_internal72.insert_dev)(target, t14, anchor);
      (0, import_internal72.insert_dev)(target, h43, anchor);
      (0, import_internal72.insert_dev)(target, t16, anchor);
      (0, import_internal72.insert_dev)(target, div3, anchor);
      (0, import_internal72.mount_component)(palettebox5, div3, null);
      (0, import_internal72.append_dev)(div3, t17);
      (0, import_internal72.mount_component)(palettebox6, div3, null);
      (0, import_internal72.insert_dev)(target, t18, anchor);
      (0, import_internal72.insert_dev)(target, h44, anchor);
      (0, import_internal72.insert_dev)(target, t20, anchor);
      (0, import_internal72.insert_dev)(target, div4, anchor);
      (0, import_internal72.mount_component)(palettebox7, div4, null);
      (0, import_internal72.append_dev)(div4, t21);
      (0, import_internal72.mount_component)(palettebox8, div4, null);
      (0, import_internal72.insert_dev)(target, t22, anchor);
      (0, import_internal72.insert_dev)(target, h45, anchor);
      (0, import_internal72.insert_dev)(target, t24, anchor);
      (0, import_internal72.insert_dev)(target, div5, anchor);
      (0, import_internal72.mount_component)(palettebox9, div5, null);
      (0, import_internal72.append_dev)(div5, t25);
      (0, import_internal72.mount_component)(palettebox10, div5, null);
      (0, import_internal72.insert_dev)(target, t26, anchor);
      (0, import_internal72.insert_dev)(target, h31, anchor);
      (0, import_internal72.insert_dev)(target, t28, anchor);
      (0, import_internal72.insert_dev)(target, div6, anchor);
      (0, import_internal72.mount_component)(palettebox11, div6, null);
      (0, import_internal72.append_dev)(div6, t29);
      (0, import_internal72.mount_component)(palettebox12, div6, null);
      (0, import_internal72.insert_dev)(target, t30, anchor);
      (0, import_internal72.insert_dev)(target, h32, anchor);
      (0, import_internal72.insert_dev)(target, t32, anchor);
      (0, import_internal72.insert_dev)(target, div7, anchor);
      (0, import_internal72.mount_component)(palettebox13, div7, null);
      (0, import_internal72.append_dev)(div7, t33);
      (0, import_internal72.mount_component)(palettebox14, div7, null);
      (0, import_internal72.append_dev)(div7, t34);
      (0, import_internal72.mount_component)(palettebox15, div7, null);
      (0, import_internal72.append_dev)(div7, t35);
      (0, import_internal72.mount_component)(palettebox16, div7, null);
      (0, import_internal72.append_dev)(div7, t36);
      (0, import_internal72.mount_component)(palettebox17, div7, null);
      (0, import_internal72.insert_dev)(target, t37, anchor);
      (0, import_internal72.insert_dev)(target, h33, anchor);
      (0, import_internal72.insert_dev)(target, t39, anchor);
      (0, import_internal72.insert_dev)(target, div8, anchor);
      (0, import_internal72.mount_component)(palettebox18, div8, null);
      (0, import_internal72.append_dev)(div8, t40);
      (0, import_internal72.mount_component)(palettebox19, div8, null);
      (0, import_internal72.append_dev)(div8, t41);
      (0, import_internal72.mount_component)(palettebox20, div8, null);
      (0, import_internal72.append_dev)(div8, t42);
      (0, import_internal72.mount_component)(palettebox21, div8, null);
      current = true;
    },
    p: import_internal72.noop,
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal72.transition_in)(palettebox0.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox1.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox2.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox3.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox4.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox5.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox6.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox7.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox8.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox9.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox10.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox11.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox12.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox13.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox14.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox15.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox16.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox17.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox18.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox19.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox20.$$.fragment, local);
      (0, import_internal72.transition_in)(palettebox21.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal72.transition_out)(palettebox0.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox1.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox2.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox3.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox4.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox5.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox6.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox7.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox8.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox9.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox10.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox11.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox12.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox13.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox14.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox15.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox16.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox17.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox18.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox19.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox20.$$.fragment, local);
      (0, import_internal72.transition_out)(palettebox21.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        (0, import_internal72.detach_dev)(h2);
      if (detaching)
        (0, import_internal72.detach_dev)(t1);
      if (detaching)
        (0, import_internal72.detach_dev)(h30);
      if (detaching)
        (0, import_internal72.detach_dev)(t3);
      if (detaching)
        (0, import_internal72.detach_dev)(h40);
      if (detaching)
        (0, import_internal72.detach_dev)(t5);
      if (detaching)
        (0, import_internal72.detach_dev)(div0);
      (0, import_internal72.destroy_component)(palettebox0);
      if (detaching)
        (0, import_internal72.detach_dev)(t6);
      if (detaching)
        (0, import_internal72.detach_dev)(h41);
      if (detaching)
        (0, import_internal72.detach_dev)(t8);
      if (detaching)
        (0, import_internal72.detach_dev)(div1);
      (0, import_internal72.destroy_component)(palettebox1);
      (0, import_internal72.destroy_component)(palettebox2);
      if (detaching)
        (0, import_internal72.detach_dev)(t10);
      if (detaching)
        (0, import_internal72.detach_dev)(h42);
      if (detaching)
        (0, import_internal72.detach_dev)(t12);
      if (detaching)
        (0, import_internal72.detach_dev)(div2);
      (0, import_internal72.destroy_component)(palettebox3);
      (0, import_internal72.destroy_component)(palettebox4);
      if (detaching)
        (0, import_internal72.detach_dev)(t14);
      if (detaching)
        (0, import_internal72.detach_dev)(h43);
      if (detaching)
        (0, import_internal72.detach_dev)(t16);
      if (detaching)
        (0, import_internal72.detach_dev)(div3);
      (0, import_internal72.destroy_component)(palettebox5);
      (0, import_internal72.destroy_component)(palettebox6);
      if (detaching)
        (0, import_internal72.detach_dev)(t18);
      if (detaching)
        (0, import_internal72.detach_dev)(h44);
      if (detaching)
        (0, import_internal72.detach_dev)(t20);
      if (detaching)
        (0, import_internal72.detach_dev)(div4);
      (0, import_internal72.destroy_component)(palettebox7);
      (0, import_internal72.destroy_component)(palettebox8);
      if (detaching)
        (0, import_internal72.detach_dev)(t22);
      if (detaching)
        (0, import_internal72.detach_dev)(h45);
      if (detaching)
        (0, import_internal72.detach_dev)(t24);
      if (detaching)
        (0, import_internal72.detach_dev)(div5);
      (0, import_internal72.destroy_component)(palettebox9);
      (0, import_internal72.destroy_component)(palettebox10);
      if (detaching)
        (0, import_internal72.detach_dev)(t26);
      if (detaching)
        (0, import_internal72.detach_dev)(h31);
      if (detaching)
        (0, import_internal72.detach_dev)(t28);
      if (detaching)
        (0, import_internal72.detach_dev)(div6);
      (0, import_internal72.destroy_component)(palettebox11);
      (0, import_internal72.destroy_component)(palettebox12);
      if (detaching)
        (0, import_internal72.detach_dev)(t30);
      if (detaching)
        (0, import_internal72.detach_dev)(h32);
      if (detaching)
        (0, import_internal72.detach_dev)(t32);
      if (detaching)
        (0, import_internal72.detach_dev)(div7);
      (0, import_internal72.destroy_component)(palettebox13);
      (0, import_internal72.destroy_component)(palettebox14);
      (0, import_internal72.destroy_component)(palettebox15);
      (0, import_internal72.destroy_component)(palettebox16);
      (0, import_internal72.destroy_component)(palettebox17);
      if (detaching)
        (0, import_internal72.detach_dev)(t37);
      if (detaching)
        (0, import_internal72.detach_dev)(h33);
      if (detaching)
        (0, import_internal72.detach_dev)(t39);
      if (detaching)
        (0, import_internal72.detach_dev)(div8);
      (0, import_internal72.destroy_component)(palettebox18);
      (0, import_internal72.destroy_component)(palettebox19);
      (0, import_internal72.destroy_component)(palettebox20);
      (0, import_internal72.destroy_component)(palettebox21);
    }
  };
  (0, import_internal72.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment72.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance72($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal72.validate_slots)("ColorPalette", slots2, []);
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ColorPalette> was created with unknown prop '${key}'`);
  });
  $$self2.$capture_state = () => ({ PaletteBox: ColorPaletteBox_default });
  return [];
}
var ColorPalette = class extends import_internal72.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal72.init)(this, options, instance72, create_fragment72, import_internal72.safe_not_equal, {});
    (0, import_internal72.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ColorPalette",
      options,
      id: create_fragment72.name
    });
  }
};
var ColorPalette_default = ColorPalette;

// docs-src/nav/Nav.svelte
var { console: console_114, window: window_1 } = import_internal73.globals;
var file67 = "docs-src/nav/Nav.svelte";
function create_fragment73(ctx) {
  let uibutton;
  let t0;
  let aside;
  let div1;
  let div0;
  let themetoggle;
  let t1;
  let menu;
  let h30;
  let t3;
  let navitem0;
  let t4;
  let navitem1;
  let t5;
  let h31;
  let t7;
  let navitem2;
  let t8;
  let navitem3;
  let t9;
  let navitem4;
  let t10;
  let h32;
  let t12;
  let navitem5;
  let t13;
  let navitem6;
  let t14;
  let navitem7;
  let t15;
  let navitem8;
  let t16;
  let navitem9;
  let t17;
  let navitem10;
  let t18;
  let navitem11;
  let t19;
  let navitem12;
  let t20;
  let navitem13;
  let t21;
  let navitem14;
  let t22;
  let navitem15;
  let t23;
  let navitem16;
  let t24;
  let h33;
  let t26;
  let navitem17;
  let t27;
  let navitem18;
  let t28;
  let navitem19;
  let t29;
  let navitem20;
  let t30;
  let h34;
  let t32;
  let navitem21;
  let t33;
  let navitem22;
  let t34;
  let navitem23;
  let t35;
  let navitem24;
  let t36;
  let navitem25;
  let t37;
  let h35;
  let t39;
  let navitem26;
  let t40;
  let navitem27;
  let t41;
  let navitem28;
  let current;
  let mounted;
  let dispose;
  uibutton = new Button_default({
    props: {
      text: true,
      icon: "meatballs",
      class: "nav-toggler " + /*navMobileShow*/
      (ctx[1] ? "visible" : "")
    },
    $$inline: true
  });
  uibutton.$on(
    "click",
    /*toggleNav*/
    ctx[5]
  );
  themetoggle = new ButtonToggle_default({
    props: {
      round: true,
      class: "dark-mode-switch",
      title: "Dark mode toggle",
      items: (
        /*themes*/
        ctx[3]
      ),
      value: (
        /*$PREFERS_DARK*/
        ctx[2]
      )
    },
    $$inline: true
  });
  themetoggle.$on("change", switchColorMode);
  navitem0 = new NavItem_default({
    props: {
      name: "Get Started",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem1 = new NavItem_default({
    props: {
      name: "Changelog",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem2 = new NavItem_default({
    props: {
      name: "Button",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem3 = new NavItem_default({
    props: {
      name: "Push Button",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem4 = new NavItem_default({
    props: {
      name: "Button Group",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem5 = new NavItem_default({
    props: {
      name: "Autocomplete",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem6 = new NavItem_default({
    props: {
      name: "Button Toggle",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem7 = new NavItem_default({
    props: {
      name: "Checkbox",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem8 = new NavItem_default({
    props: {
      name: "Input Date",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem9 = new NavItem_default({
    props: {
      name: "Input Text",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem10 = new NavItem_default({
    props: {
      name: "Input Number",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem11 = new NavItem_default({
    props: {
      name: "Input Math",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem12 = new NavItem_default({
    props: {
      name: "Input Password",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem13 = new NavItem_default({
    props: { name: "Radio", active: (
      /*active*/
      ctx[0]
    ) },
    $$inline: true
  });
  navitem14 = new NavItem_default({
    props: {
      name: "Select",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem15 = new NavItem_default({
    props: {
      name: "Textarea",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem16 = new NavItem_default({
    props: {
      name: "Toggle",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem17 = new NavItem_default({
    props: {
      name: "InfoBar",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem18 = new NavItem_default({
    props: {
      name: "Notification Center",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem19 = new NavItem_default({
    props: {
      name: "MessageBox",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem20 = new NavItem_default({
    props: {
      name: "Tooltip",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem21 = new NavItem_default({
    props: {
      name: "Dialog",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem22 = new NavItem_default({
    props: {
      name: "Drawer",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  navitem23 = new NavItem_default({
    props: { name: "Panel", active: (
      /*active*/
      ctx[0]
    ) },
    $$inline: true
  });
  navitem24 = new NavItem_default({
    props: { name: "Table", active: (
      /*active*/
      ctx[0]
    ) },
    $$inline: true
  });
  navitem25 = new NavItem_default({
    props: { name: "Tree", active: (
      /*active*/
      ctx[0]
    ) },
    $$inline: true
  });
  navitem26 = new NavItem_default({
    props: { name: "Menu", active: (
      /*active*/
      ctx[0]
    ) },
    $$inline: true
  });
  navitem27 = new NavItem_default({
    props: { name: "Icon", active: (
      /*active*/
      ctx[0]
    ) },
    $$inline: true
  });
  navitem28 = new NavItem_default({
    props: {
      name: "Color Palette",
      active: (
        /*active*/
        ctx[0]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, import_internal73.create_component)(uibutton.$$.fragment);
      t0 = (0, import_internal73.space)();
      aside = (0, import_internal73.element)("aside");
      div1 = (0, import_internal73.element)("div");
      div0 = (0, import_internal73.element)("div");
      (0, import_internal73.create_component)(themetoggle.$$.fragment);
      t1 = (0, import_internal73.space)();
      menu = (0, import_internal73.element)("menu");
      h30 = (0, import_internal73.element)("h3");
      h30.textContent = "Intro";
      t3 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem0.$$.fragment);
      t4 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem1.$$.fragment);
      t5 = (0, import_internal73.space)();
      h31 = (0, import_internal73.element)("h3");
      h31.textContent = "Buttons";
      t7 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem2.$$.fragment);
      t8 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem3.$$.fragment);
      t9 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem4.$$.fragment);
      t10 = (0, import_internal73.space)();
      h32 = (0, import_internal73.element)("h3");
      h32.textContent = "Inputs";
      t12 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem5.$$.fragment);
      t13 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem6.$$.fragment);
      t14 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem7.$$.fragment);
      t15 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem8.$$.fragment);
      t16 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem9.$$.fragment);
      t17 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem10.$$.fragment);
      t18 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem11.$$.fragment);
      t19 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem12.$$.fragment);
      t20 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem13.$$.fragment);
      t21 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem14.$$.fragment);
      t22 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem15.$$.fragment);
      t23 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem16.$$.fragment);
      t24 = (0, import_internal73.space)();
      h33 = (0, import_internal73.element)("h3");
      h33.textContent = "Messaging";
      t26 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem17.$$.fragment);
      t27 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem18.$$.fragment);
      t28 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem19.$$.fragment);
      t29 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem20.$$.fragment);
      t30 = (0, import_internal73.space)();
      h34 = (0, import_internal73.element)("h3");
      h34.textContent = "Containers";
      t32 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem21.$$.fragment);
      t33 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem22.$$.fragment);
      t34 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem23.$$.fragment);
      t35 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem24.$$.fragment);
      t36 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem25.$$.fragment);
      t37 = (0, import_internal73.space)();
      h35 = (0, import_internal73.element)("h3");
      h35.textContent = "Generic";
      t39 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem26.$$.fragment);
      t40 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem27.$$.fragment);
      t41 = (0, import_internal73.space)();
      (0, import_internal73.create_component)(navitem28.$$.fragment);
      (0, import_internal73.attr_dev)(div0, "class", "nav-toolbar-row");
      (0, import_internal73.add_location)(div0, file67, 7, 2, 187);
      (0, import_internal73.attr_dev)(div1, "class", "nav-toolbar");
      (0, import_internal73.add_location)(div1, file67, 6, 1, 159);
      (0, import_internal73.add_location)(h30, file67, 18, 2, 410);
      (0, import_internal73.add_location)(h31, file67, 22, 2, 510);
      (0, import_internal73.add_location)(h32, file67, 27, 2, 652);
      (0, import_internal73.add_location)(h33, file67, 42, 2, 1158);
      (0, import_internal73.add_location)(h34, file67, 49, 2, 1348);
      (0, import_internal73.add_location)(h35, file67, 57, 2, 1553);
      (0, import_internal73.add_location)(menu, file67, 17, 1, 401);
      (0, import_internal73.toggle_class)(
        aside,
        "mobile-show",
        /*navMobileShow*/
        ctx[1]
      );
      (0, import_internal73.add_location)(aside, file67, 5, 0, 114);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal73.mount_component)(uibutton, target, anchor);
      (0, import_internal73.insert_dev)(target, t0, anchor);
      (0, import_internal73.insert_dev)(target, aside, anchor);
      (0, import_internal73.append_dev)(aside, div1);
      (0, import_internal73.append_dev)(div1, div0);
      (0, import_internal73.mount_component)(themetoggle, div0, null);
      (0, import_internal73.append_dev)(aside, t1);
      (0, import_internal73.append_dev)(aside, menu);
      (0, import_internal73.append_dev)(menu, h30);
      (0, import_internal73.append_dev)(menu, t3);
      (0, import_internal73.mount_component)(navitem0, menu, null);
      (0, import_internal73.append_dev)(menu, t4);
      (0, import_internal73.mount_component)(navitem1, menu, null);
      (0, import_internal73.append_dev)(menu, t5);
      (0, import_internal73.append_dev)(menu, h31);
      (0, import_internal73.append_dev)(menu, t7);
      (0, import_internal73.mount_component)(navitem2, menu, null);
      (0, import_internal73.append_dev)(menu, t8);
      (0, import_internal73.mount_component)(navitem3, menu, null);
      (0, import_internal73.append_dev)(menu, t9);
      (0, import_internal73.mount_component)(navitem4, menu, null);
      (0, import_internal73.append_dev)(menu, t10);
      (0, import_internal73.append_dev)(menu, h32);
      (0, import_internal73.append_dev)(menu, t12);
      (0, import_internal73.mount_component)(navitem5, menu, null);
      (0, import_internal73.append_dev)(menu, t13);
      (0, import_internal73.mount_component)(navitem6, menu, null);
      (0, import_internal73.append_dev)(menu, t14);
      (0, import_internal73.mount_component)(navitem7, menu, null);
      (0, import_internal73.append_dev)(menu, t15);
      (0, import_internal73.mount_component)(navitem8, menu, null);
      (0, import_internal73.append_dev)(menu, t16);
      (0, import_internal73.mount_component)(navitem9, menu, null);
      (0, import_internal73.append_dev)(menu, t17);
      (0, import_internal73.mount_component)(navitem10, menu, null);
      (0, import_internal73.append_dev)(menu, t18);
      (0, import_internal73.mount_component)(navitem11, menu, null);
      (0, import_internal73.append_dev)(menu, t19);
      (0, import_internal73.mount_component)(navitem12, menu, null);
      (0, import_internal73.append_dev)(menu, t20);
      (0, import_internal73.mount_component)(navitem13, menu, null);
      (0, import_internal73.append_dev)(menu, t21);
      (0, import_internal73.mount_component)(navitem14, menu, null);
      (0, import_internal73.append_dev)(menu, t22);
      (0, import_internal73.mount_component)(navitem15, menu, null);
      (0, import_internal73.append_dev)(menu, t23);
      (0, import_internal73.mount_component)(navitem16, menu, null);
      (0, import_internal73.append_dev)(menu, t24);
      (0, import_internal73.append_dev)(menu, h33);
      (0, import_internal73.append_dev)(menu, t26);
      (0, import_internal73.mount_component)(navitem17, menu, null);
      (0, import_internal73.append_dev)(menu, t27);
      (0, import_internal73.mount_component)(navitem18, menu, null);
      (0, import_internal73.append_dev)(menu, t28);
      (0, import_internal73.mount_component)(navitem19, menu, null);
      (0, import_internal73.append_dev)(menu, t29);
      (0, import_internal73.mount_component)(navitem20, menu, null);
      (0, import_internal73.append_dev)(menu, t30);
      (0, import_internal73.append_dev)(menu, h34);
      (0, import_internal73.append_dev)(menu, t32);
      (0, import_internal73.mount_component)(navitem21, menu, null);
      (0, import_internal73.append_dev)(menu, t33);
      (0, import_internal73.mount_component)(navitem22, menu, null);
      (0, import_internal73.append_dev)(menu, t34);
      (0, import_internal73.mount_component)(navitem23, menu, null);
      (0, import_internal73.append_dev)(menu, t35);
      (0, import_internal73.mount_component)(navitem24, menu, null);
      (0, import_internal73.append_dev)(menu, t36);
      (0, import_internal73.mount_component)(navitem25, menu, null);
      (0, import_internal73.append_dev)(menu, t37);
      (0, import_internal73.append_dev)(menu, h35);
      (0, import_internal73.append_dev)(menu, t39);
      (0, import_internal73.mount_component)(navitem26, menu, null);
      (0, import_internal73.append_dev)(menu, t40);
      (0, import_internal73.mount_component)(navitem27, menu, null);
      (0, import_internal73.append_dev)(menu, t41);
      (0, import_internal73.mount_component)(navitem28, menu, null);
      current = true;
      if (!mounted) {
        dispose = (0, import_internal73.listen_dev)(
          window_1,
          "hashchange",
          /*onhashchange*/
          ctx[4],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      const uibutton_changes = {};
      if (dirty & /*navMobileShow*/
      2)
        uibutton_changes.class = "nav-toggler " + /*navMobileShow*/
        (ctx2[1] ? "visible" : "");
      uibutton.$set(uibutton_changes);
      const themetoggle_changes = {};
      if (dirty & /*$PREFERS_DARK*/
      4)
        themetoggle_changes.value = /*$PREFERS_DARK*/
        ctx2[2];
      themetoggle.$set(themetoggle_changes);
      const navitem0_changes = {};
      if (dirty & /*active*/
      1)
        navitem0_changes.active = /*active*/
        ctx2[0];
      navitem0.$set(navitem0_changes);
      const navitem1_changes = {};
      if (dirty & /*active*/
      1)
        navitem1_changes.active = /*active*/
        ctx2[0];
      navitem1.$set(navitem1_changes);
      const navitem2_changes = {};
      if (dirty & /*active*/
      1)
        navitem2_changes.active = /*active*/
        ctx2[0];
      navitem2.$set(navitem2_changes);
      const navitem3_changes = {};
      if (dirty & /*active*/
      1)
        navitem3_changes.active = /*active*/
        ctx2[0];
      navitem3.$set(navitem3_changes);
      const navitem4_changes = {};
      if (dirty & /*active*/
      1)
        navitem4_changes.active = /*active*/
        ctx2[0];
      navitem4.$set(navitem4_changes);
      const navitem5_changes = {};
      if (dirty & /*active*/
      1)
        navitem5_changes.active = /*active*/
        ctx2[0];
      navitem5.$set(navitem5_changes);
      const navitem6_changes = {};
      if (dirty & /*active*/
      1)
        navitem6_changes.active = /*active*/
        ctx2[0];
      navitem6.$set(navitem6_changes);
      const navitem7_changes = {};
      if (dirty & /*active*/
      1)
        navitem7_changes.active = /*active*/
        ctx2[0];
      navitem7.$set(navitem7_changes);
      const navitem8_changes = {};
      if (dirty & /*active*/
      1)
        navitem8_changes.active = /*active*/
        ctx2[0];
      navitem8.$set(navitem8_changes);
      const navitem9_changes = {};
      if (dirty & /*active*/
      1)
        navitem9_changes.active = /*active*/
        ctx2[0];
      navitem9.$set(navitem9_changes);
      const navitem10_changes = {};
      if (dirty & /*active*/
      1)
        navitem10_changes.active = /*active*/
        ctx2[0];
      navitem10.$set(navitem10_changes);
      const navitem11_changes = {};
      if (dirty & /*active*/
      1)
        navitem11_changes.active = /*active*/
        ctx2[0];
      navitem11.$set(navitem11_changes);
      const navitem12_changes = {};
      if (dirty & /*active*/
      1)
        navitem12_changes.active = /*active*/
        ctx2[0];
      navitem12.$set(navitem12_changes);
      const navitem13_changes = {};
      if (dirty & /*active*/
      1)
        navitem13_changes.active = /*active*/
        ctx2[0];
      navitem13.$set(navitem13_changes);
      const navitem14_changes = {};
      if (dirty & /*active*/
      1)
        navitem14_changes.active = /*active*/
        ctx2[0];
      navitem14.$set(navitem14_changes);
      const navitem15_changes = {};
      if (dirty & /*active*/
      1)
        navitem15_changes.active = /*active*/
        ctx2[0];
      navitem15.$set(navitem15_changes);
      const navitem16_changes = {};
      if (dirty & /*active*/
      1)
        navitem16_changes.active = /*active*/
        ctx2[0];
      navitem16.$set(navitem16_changes);
      const navitem17_changes = {};
      if (dirty & /*active*/
      1)
        navitem17_changes.active = /*active*/
        ctx2[0];
      navitem17.$set(navitem17_changes);
      const navitem18_changes = {};
      if (dirty & /*active*/
      1)
        navitem18_changes.active = /*active*/
        ctx2[0];
      navitem18.$set(navitem18_changes);
      const navitem19_changes = {};
      if (dirty & /*active*/
      1)
        navitem19_changes.active = /*active*/
        ctx2[0];
      navitem19.$set(navitem19_changes);
      const navitem20_changes = {};
      if (dirty & /*active*/
      1)
        navitem20_changes.active = /*active*/
        ctx2[0];
      navitem20.$set(navitem20_changes);
      const navitem21_changes = {};
      if (dirty & /*active*/
      1)
        navitem21_changes.active = /*active*/
        ctx2[0];
      navitem21.$set(navitem21_changes);
      const navitem22_changes = {};
      if (dirty & /*active*/
      1)
        navitem22_changes.active = /*active*/
        ctx2[0];
      navitem22.$set(navitem22_changes);
      const navitem23_changes = {};
      if (dirty & /*active*/
      1)
        navitem23_changes.active = /*active*/
        ctx2[0];
      navitem23.$set(navitem23_changes);
      const navitem24_changes = {};
      if (dirty & /*active*/
      1)
        navitem24_changes.active = /*active*/
        ctx2[0];
      navitem24.$set(navitem24_changes);
      const navitem25_changes = {};
      if (dirty & /*active*/
      1)
        navitem25_changes.active = /*active*/
        ctx2[0];
      navitem25.$set(navitem25_changes);
      const navitem26_changes = {};
      if (dirty & /*active*/
      1)
        navitem26_changes.active = /*active*/
        ctx2[0];
      navitem26.$set(navitem26_changes);
      const navitem27_changes = {};
      if (dirty & /*active*/
      1)
        navitem27_changes.active = /*active*/
        ctx2[0];
      navitem27.$set(navitem27_changes);
      const navitem28_changes = {};
      if (dirty & /*active*/
      1)
        navitem28_changes.active = /*active*/
        ctx2[0];
      navitem28.$set(navitem28_changes);
      if (!current || dirty & /*navMobileShow*/
      2) {
        (0, import_internal73.toggle_class)(
          aside,
          "mobile-show",
          /*navMobileShow*/
          ctx2[1]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal73.transition_in)(uibutton.$$.fragment, local);
      (0, import_internal73.transition_in)(themetoggle.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem0.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem1.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem2.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem3.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem4.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem5.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem6.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem7.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem8.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem9.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem10.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem11.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem12.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem13.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem14.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem15.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem16.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem17.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem18.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem19.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem20.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem21.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem22.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem23.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem24.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem25.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem26.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem27.$$.fragment, local);
      (0, import_internal73.transition_in)(navitem28.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal73.transition_out)(uibutton.$$.fragment, local);
      (0, import_internal73.transition_out)(themetoggle.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem0.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem1.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem2.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem3.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem4.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem5.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem6.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem7.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem8.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem9.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem10.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem11.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem12.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem13.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem14.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem15.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem16.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem17.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem18.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem19.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem20.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem21.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem22.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem23.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem24.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem25.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem26.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem27.$$.fragment, local);
      (0, import_internal73.transition_out)(navitem28.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal73.destroy_component)(uibutton, detaching);
      if (detaching)
        (0, import_internal73.detach_dev)(t0);
      if (detaching)
        (0, import_internal73.detach_dev)(aside);
      (0, import_internal73.destroy_component)(themetoggle);
      (0, import_internal73.destroy_component)(navitem0);
      (0, import_internal73.destroy_component)(navitem1);
      (0, import_internal73.destroy_component)(navitem2);
      (0, import_internal73.destroy_component)(navitem3);
      (0, import_internal73.destroy_component)(navitem4);
      (0, import_internal73.destroy_component)(navitem5);
      (0, import_internal73.destroy_component)(navitem6);
      (0, import_internal73.destroy_component)(navitem7);
      (0, import_internal73.destroy_component)(navitem8);
      (0, import_internal73.destroy_component)(navitem9);
      (0, import_internal73.destroy_component)(navitem10);
      (0, import_internal73.destroy_component)(navitem11);
      (0, import_internal73.destroy_component)(navitem12);
      (0, import_internal73.destroy_component)(navitem13);
      (0, import_internal73.destroy_component)(navitem14);
      (0, import_internal73.destroy_component)(navitem15);
      (0, import_internal73.destroy_component)(navitem16);
      (0, import_internal73.destroy_component)(navitem17);
      (0, import_internal73.destroy_component)(navitem18);
      (0, import_internal73.destroy_component)(navitem19);
      (0, import_internal73.destroy_component)(navitem20);
      (0, import_internal73.destroy_component)(navitem21);
      (0, import_internal73.destroy_component)(navitem22);
      (0, import_internal73.destroy_component)(navitem23);
      (0, import_internal73.destroy_component)(navitem24);
      (0, import_internal73.destroy_component)(navitem25);
      (0, import_internal73.destroy_component)(navitem26);
      (0, import_internal73.destroy_component)(navitem27);
      (0, import_internal73.destroy_component)(navitem28);
      mounted = false;
      dispose();
    }
  };
  (0, import_internal73.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment73.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function switchColorMode(e) {
  console.log(111, e.detail, typeof e.detail);
  document.documentElement.className = e.detail ? "theme-dark" : "theme-light";
}
function instance73($$self2, $$props2, $$invalidate2) {
  let $PREFERS_DARK;
  (0, import_internal73.validate_store)(PREFERS_DARK, "PREFERS_DARK");
  (0, import_internal73.component_subscribe)($$self2, PREFERS_DARK, ($$value) => $$invalidate2(2, $PREFERS_DARK = $$value));
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal73.validate_slots)("Nav", slots2, []);
  const components = { GetStarted: start_default, Changelog: changelog_default, ...components_exports };
  const themes = [{ value: false, icon: "sun" }, { value: true, icon: "moon" }];
  let active = location.hash.substr(1) || "GetStarted";
  let { component = components[active] } = $$props2;
  let navMobileShow = false;
  function onhashchange() {
    $$invalidate2(0, active = location.hash.substr(1));
    $$invalidate2(6, component = components[active]);
    if (window.Prism)
      requestAnimationFrame(() => window.Prism.highlightAll());
    document.querySelector("main").scrollTop = 0;
  }
  function toggleNav() {
    $$invalidate2(1, navMobileShow = !navMobileShow);
  }
  window.addEventListener("popstate", () => $$invalidate2(1, navMobileShow = false));
  const writable_props = ["component"];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_114.warn(`<Nav> was created with unknown prop '${key}'`);
  });
  $$self2.$$set = ($$props3) => {
    if ("component" in $$props3)
      $$invalidate2(6, component = $$props3.component);
  };
  $$self2.$capture_state = () => ({
    UIButton: Button_default,
    ThemeToggle: ButtonToggle_default,
    NavItem: NavItem_default,
    GetStarted: start_default,
    Changelog: changelog_default,
    PREFERS_DARK,
    TestComponents: components_exports,
    components,
    themes,
    active,
    component,
    navMobileShow,
    onhashchange,
    switchColorMode,
    toggleNav,
    $PREFERS_DARK
  });
  $$self2.$inject_state = ($$props3) => {
    if ("active" in $$props3)
      $$invalidate2(0, active = $$props3.active);
    if ("component" in $$props3)
      $$invalidate2(6, component = $$props3.component);
    if ("navMobileShow" in $$props3)
      $$invalidate2(1, navMobileShow = $$props3.navMobileShow);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [
    active,
    navMobileShow,
    $PREFERS_DARK,
    themes,
    onhashchange,
    toggleNav,
    component
  ];
}
var Nav = class extends import_internal73.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal73.init)(this, options, instance73, create_fragment73, import_internal73.safe_not_equal, { component: 6 });
    (0, import_internal73.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Nav",
      options,
      id: create_fragment73.name
    });
  }
  get component() {
    throw new Error("<Nav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value2) {
    throw new Error("<Nav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Nav_default = Nav;

// docs-src/app/App.svelte
var file68 = "docs-src/app/App.svelte";
function create_fragment74(ctx) {
  let nav;
  let updating_component;
  let t;
  let main;
  let switch_instance;
  let current;
  function nav_component_binding(value2) {
    ctx[1](value2);
  }
  let nav_props = {};
  if (
    /*component*/
    ctx[0] !== void 0
  ) {
    nav_props.component = /*component*/
    ctx[0];
  }
  nav = new Nav_default({ props: nav_props, $$inline: true });
  import_internal74.binding_callbacks.push(() => (0, import_internal74.bind)(nav, "component", nav_component_binding));
  var switch_value = (
    /*component*/
    ctx[0]
  );
  function switch_props(ctx2) {
    return { $$inline: true };
  }
  if (switch_value) {
    switch_instance = (0, import_internal74.construct_svelte_component_dev)(switch_value, switch_props(ctx));
  }
  const block = {
    c: function create() {
      (0, import_internal74.create_component)(nav.$$.fragment);
      t = (0, import_internal74.space)();
      main = (0, import_internal74.element)("main");
      if (switch_instance)
        (0, import_internal74.create_component)(switch_instance.$$.fragment);
      (0, import_internal74.add_location)(main, file68, 1, 0, 37);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      (0, import_internal74.mount_component)(nav, target, anchor);
      (0, import_internal74.insert_dev)(target, t, anchor);
      (0, import_internal74.insert_dev)(target, main, anchor);
      if (switch_instance)
        (0, import_internal74.mount_component)(switch_instance, main, null);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const nav_changes = {};
      if (!updating_component && dirty & /*component*/
      1) {
        updating_component = true;
        nav_changes.component = /*component*/
        ctx2[0];
        (0, import_internal74.add_flush_callback)(() => updating_component = false);
      }
      nav.$set(nav_changes);
      if (dirty & /*component*/
      1 && switch_value !== (switch_value = /*component*/
      ctx2[0])) {
        if (switch_instance) {
          (0, import_internal74.group_outros)();
          const old_component = switch_instance;
          (0, import_internal74.transition_out)(old_component.$$.fragment, 1, 0, () => {
            (0, import_internal74.destroy_component)(old_component, 1);
          });
          (0, import_internal74.check_outros)();
        }
        if (switch_value) {
          switch_instance = (0, import_internal74.construct_svelte_component_dev)(switch_value, switch_props(ctx2));
          (0, import_internal74.create_component)(switch_instance.$$.fragment);
          (0, import_internal74.transition_in)(switch_instance.$$.fragment, 1);
          (0, import_internal74.mount_component)(switch_instance, main, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
      }
    },
    i: function intro(local) {
      if (current)
        return;
      (0, import_internal74.transition_in)(nav.$$.fragment, local);
      if (switch_instance)
        (0, import_internal74.transition_in)(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, import_internal74.transition_out)(nav.$$.fragment, local);
      if (switch_instance)
        (0, import_internal74.transition_out)(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, import_internal74.destroy_component)(nav, detaching);
      if (detaching)
        (0, import_internal74.detach_dev)(t);
      if (detaching)
        (0, import_internal74.detach_dev)(main);
      if (switch_instance)
        (0, import_internal74.destroy_component)(switch_instance);
    }
  };
  (0, import_internal74.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment74.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance74($$self2, $$props2, $$invalidate2) {
  let { $$slots: slots2 = {}, $$scope: $$scope2 } = $$props2;
  (0, import_internal74.validate_slots)("App", slots2, []);
  let component = void 0;
  const writable_props = [];
  Object.keys($$props2).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<App> was created with unknown prop '${key}'`);
  });
  function nav_component_binding(value2) {
    component = value2;
    $$invalidate2(0, component);
  }
  $$self2.$capture_state = () => ({ Nav: Nav_default, component });
  $$self2.$inject_state = ($$props3) => {
    if ("component" in $$props3)
      $$invalidate2(0, component = $$props3.component);
  };
  if ($$props2 && "$$inject" in $$props2) {
    $$self2.$inject_state($$props2.$$inject);
  }
  return [component, nav_component_binding];
}
var App = class extends import_internal74.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, import_internal74.init)(this, options, instance74, create_fragment74, import_internal74.safe_not_equal, {});
    (0, import_internal74.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "App",
      options,
      id: create_fragment74.name
    });
  }
};
var App_default = App;

// docs-src/index.js
var import_prismjs = __toESM(require_prism());

// node_modules/prism-svelte/index.js
var blocks = "(if|else if|await|then|catch|each|html|debug)";
Prism.languages.svelte = Prism.languages.extend("markup", {
  each: {
    pattern: new RegExp(
      "{[#/]each(?:(?:\\{(?:(?:\\{(?:[^{}])*\\})|(?:[^{}]))*\\})|(?:[^{}]))*}"
    ),
    inside: {
      "language-javascript": [
        {
          pattern: /(as[\s\S]*)\([\s\S]*\)(?=\s*\})/,
          lookbehind: true,
          inside: Prism.languages["javascript"]
        },
        {
          pattern: /(as[\s]*)[\s\S]*(?=\s*)/,
          lookbehind: true,
          inside: Prism.languages["javascript"]
        },
        {
          pattern: /(#each[\s]*)[\s\S]*(?=as)/,
          lookbehind: true,
          inside: Prism.languages["javascript"]
        }
      ],
      keyword: /[#/]each|as/,
      punctuation: /{|}/
    }
  },
  block: {
    pattern: new RegExp(
      "{[#:/@]/s" + blocks + "(?:(?:\\{(?:(?:\\{(?:[^{}])*\\})|(?:[^{}]))*\\})|(?:[^{}]))*}"
    ),
    inside: {
      punctuation: /^{|}$/,
      keyword: [new RegExp("[#:/@]" + blocks + "( )*"), /as/, /then/],
      "language-javascript": {
        pattern: /[\s\S]*/,
        inside: Prism.languages["javascript"]
      }
    }
  },
  tag: {
    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?:"[^"]*"|'[^']*'|{[\s\S]+?}(?=[\s/>])))|(?=[\s/>])))+)?\s*\/?>/i,
    greedy: true,
    inside: {
      tag: {
        pattern: /^<\/?[^\s>\/]+/i,
        inside: {
          punctuation: /^<\/?/,
          namespace: /^[^\s>\/:]+:/
        }
      },
      "language-javascript": {
        pattern: /\{(?:(?:\{(?:(?:\{(?:[^{}])*\})|(?:[^{}]))*\})|(?:[^{}]))*\}/,
        inside: Prism.languages["javascript"]
      },
      "attr-value": {
        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,
        inside: {
          punctuation: [
            /^=/,
            {
              pattern: /^(\s*)["']|["']$/,
              lookbehind: true
            }
          ],
          "language-javascript": {
            pattern: /{[\s\S]+}/,
            inside: Prism.languages["javascript"]
          }
        }
      },
      punctuation: /\/?>/,
      "attr-name": {
        pattern: /[^\s>\/]+/,
        inside: {
          namespace: /^[^\s>\/:]+:/
        }
      }
    }
  },
  "language-javascript": {
    pattern: /\{(?:(?:\{(?:(?:\{(?:[^{}])*\})|(?:[^{}]))*\})|(?:[^{}]))*\}/,
    lookbehind: true,
    inside: Prism.languages["javascript"]
  }
});
Prism.languages.svelte["tag"].inside["attr-value"].inside["entity"] = Prism.languages.svelte["entity"];
Prism.hooks.add("wrap", (env) => {
  if (env.type === "entity") {
    env.attributes["title"] = env.content.replace(/&amp;/, "&");
  }
});
Object.defineProperty(Prism.languages.svelte.tag, "addInlined", {
  value: function addInlined(tagName, lang) {
    const includedCdataInside = {};
    includedCdataInside["language-" + lang] = {
      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
      lookbehind: true,
      inside: Prism.languages[lang]
    };
    includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
    const inside = {
      "included-cdata": {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        inside: includedCdataInside
      }
    };
    inside["language-" + lang] = {
      pattern: /[\s\S]+/,
      inside: Prism.languages[lang]
    };
    const def = {};
    def[tagName] = {
      pattern: RegExp(
        /(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(
          /__/g,
          tagName
        ),
        "i"
      ),
      lookbehind: true,
      greedy: true,
      inside
    };
    Prism.languages.insertBefore("svelte", "cdata", def);
  }
});
Prism.languages.svelte.tag.addInlined("style", "css");
Prism.languages.svelte.tag.addInlined("script", "javascript");

// node_modules/prismjs/components/prism-json.js
Prism.languages.json = {
  "property": {
    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
    lookbehind: true,
    greedy: true
  },
  "string": {
    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
    lookbehind: true,
    greedy: true
  },
  "comment": {
    pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
    greedy: true
  },
  "number": /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
  "punctuation": /[{}[\],]/,
  "operator": /:/,
  "boolean": /\b(?:false|true)\b/,
  "null": {
    pattern: /\bnull\b/,
    alias: "keyword"
  }
};
Prism.languages.webmanifest = Prism.languages.json;

// node_modules/prismjs/components/prism-bash.js
(function(Prism2) {
  var envVars = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b";
  var commandAfterHeredoc = {
    pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
    lookbehind: true,
    alias: "punctuation",
    // this looks reasonably well in all themes
    inside: null
    // see below
  };
  var insideString = {
    "bash": commandAfterHeredoc,
    "environment": {
      pattern: RegExp("\\$" + envVars),
      alias: "constant"
    },
    "variable": [
      // [0]: Arithmetic Environment
      {
        pattern: /\$?\(\([\s\S]+?\)\)/,
        greedy: true,
        inside: {
          // If there is a $ sign at the beginning highlight $(( and )) as variable
          "variable": [
            {
              pattern: /(^\$\(\([\s\S]+)\)\)/,
              lookbehind: true
            },
            /^\$\(\(/
          ],
          "number": /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
          "operator": /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
          // If there is no $ sign at the beginning highlight (( and )) as punctuation
          "punctuation": /\(\(?|\)\)?|,|;/
        }
      },
      // [1]: Command Substitution
      {
        pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
        greedy: true,
        inside: {
          "variable": /^\$\(|^`|\)$|`$/
        }
      },
      // [2]: Brace expansion
      {
        pattern: /\$\{[^}]+\}/,
        greedy: true,
        inside: {
          "operator": /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
          "punctuation": /[\[\]]/,
          "environment": {
            pattern: RegExp("(\\{)" + envVars),
            lookbehind: true,
            alias: "constant"
          }
        }
      },
      /\$(?:\w+|[#?*!@$])/
    ],
    // Escape sequences from echo and printf's manuals, and escaped quotes.
    "entity": /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
  };
  Prism2.languages.bash = {
    "shebang": {
      pattern: /^#!\s*\/.*/,
      alias: "important"
    },
    "comment": {
      pattern: /(^|[^"{\\$])#.*/,
      lookbehind: true
    },
    "function-name": [
      // a) function foo {
      // b) foo() {
      // c) function foo() {
      // but not “foo {”
      {
        // a) and c)
        pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
        lookbehind: true,
        alias: "function"
      },
      {
        // b)
        pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
        alias: "function"
      }
    ],
    // Highlight variable names as variables in for and select beginnings.
    "for-or-select": {
      pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
      alias: "variable",
      lookbehind: true
    },
    // Highlight variable names as variables in the left-hand part
    // of assignments (“=” and “+=”).
    "assign-left": {
      pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
      inside: {
        "environment": {
          pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + envVars),
          lookbehind: true,
          alias: "constant"
        }
      },
      alias: "variable",
      lookbehind: true
    },
    // Highlight parameter names as variables
    "parameter": {
      pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
      alias: "variable",
      lookbehind: true
    },
    "string": [
      // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
      {
        pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
        lookbehind: true,
        greedy: true,
        inside: insideString
      },
      // Here-document with quotes around the tag
      // → No expansion (so no “inside”).
      {
        pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
        lookbehind: true,
        greedy: true,
        inside: {
          "bash": commandAfterHeredoc
        }
      },
      // “Normal” string
      {
        // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
        pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
        lookbehind: true,
        greedy: true,
        inside: insideString
      },
      {
        // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
        pattern: /(^|[^$\\])'[^']*'/,
        lookbehind: true,
        greedy: true
      },
      {
        // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
        pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
        greedy: true,
        inside: {
          "entity": insideString.entity
        }
      }
    ],
    "environment": {
      pattern: RegExp("\\$?" + envVars),
      alias: "constant"
    },
    "variable": insideString.variable,
    "function": {
      pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    "keyword": {
      pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
    "builtin": {
      pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
      lookbehind: true,
      // Alias added to make those easier to distinguish from strings.
      alias: "class-name"
    },
    "boolean": {
      pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    "file-descriptor": {
      pattern: /\B&\d\b/,
      alias: "important"
    },
    "operator": {
      // Lots of redirections here, but not just that.
      pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
      inside: {
        "file-descriptor": {
          pattern: /^\d/,
          alias: "important"
        }
      }
    },
    "punctuation": /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
    "number": {
      pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
      lookbehind: true
    }
  };
  commandAfterHeredoc.inside = Prism2.languages.bash;
  var toBeCopied = [
    "comment",
    "function-name",
    "for-or-select",
    "assign-left",
    "parameter",
    "string",
    "environment",
    "function",
    "keyword",
    "builtin",
    "boolean",
    "file-descriptor",
    "operator",
    "punctuation",
    "number"
  ];
  var inside = insideString.variable[1].inside;
  for (var i = 0; i < toBeCopied.length; i++) {
    inside[toBeCopied[i]] = Prism2.languages.bash[toBeCopied[i]];
  }
  Prism2.languages.sh = Prism2.languages.bash;
  Prism2.languages.shell = Prism2.languages.bash;
})(Prism);

// docs-src/index.js
var import_prism_normalize_whitespace = __toESM(require_prism_normalize_whitespace());
var docs_src_default = new App_default({ target: document.querySelector("#app") });
export {
  docs_src_default as default
};
//# sourceMappingURL=docs.js.map
